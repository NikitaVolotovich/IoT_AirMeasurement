
IoT_AirMeasurement.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015f04  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000233c  08016048  08016048  00026048  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08018384  08018384  00028384  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801838c  0801838c  0002838c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08018390  08018390  00028390  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001f8  20000004  08018394  00030004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 BLE_DRIVER_CONTEXT 00000035  200001fc  0801858c  000301fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 SYSTEM_DRIVER_CONTEXT 00000011  20000234  080185c1  00030234  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b3c  20000248  080185d2  00030248  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20001d84  080185d2  00031d84  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030245  2**0
                  CONTENTS, READONLY
 12 MAPPING_TABLE 00000028  20030000  20030000  00040000  2**2
                  ALLOC
 13 MB_MEM1       000001bb  20030028  20030028  00040000  2**2
                  ALLOC
 14 MB_MEM2       00000883  200301e4  200301e4  00040000  2**2
                  ALLOC
 15 .debug_info   000424f9  00000000  00000000  00030275  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00007d9d  00000000  00000000  0007276e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00003890  00000000  00000000  0007a510  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_ranges 00003540  00000000  00000000  0007dda0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00033f55  00000000  00000000  000812e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00042a97  00000000  00000000  000b5235  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    0011c863  00000000  00000000  000f7ccc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000050  00000000  00000000  0021452f  2**0
                  CONTENTS, READONLY
 23 .debug_frame  00010694  00000000  00000000  00214580  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000248 	.word	0x20000248
 800015c:	00000000 	.word	0x00000000
 8000160:	0801602c 	.word	0x0801602c

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	2000024c 	.word	0x2000024c
 800017c:	0801602c 	.word	0x0801602c

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	; 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_d2uiz>:
 8000b58:	004a      	lsls	r2, r1, #1
 8000b5a:	d211      	bcs.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d211      	bcs.n	8000b86 <__aeabi_d2uiz+0x2e>
 8000b62:	d50d      	bpl.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d40e      	bmi.n	8000b8c <__aeabi_d2uiz+0x34>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b7e:	4770      	bx	lr
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_d2uiz+0x3a>
 8000b8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0000 	mov.w	r0, #0
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2f>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba0:	bf24      	itt	cs
 8000ba2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ba6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000baa:	d90d      	bls.n	8000bc8 <__aeabi_d2f+0x30>
 8000bac:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bb4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bb8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bbc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc0:	bf08      	it	eq
 8000bc2:	f020 0001 	biceq.w	r0, r0, #1
 8000bc6:	4770      	bx	lr
 8000bc8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bcc:	d121      	bne.n	8000c12 <__aeabi_d2f+0x7a>
 8000bce:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bd2:	bfbc      	itt	lt
 8000bd4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	4770      	bxlt	lr
 8000bda:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bde:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000be2:	f1c2 0218 	rsb	r2, r2, #24
 8000be6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bea:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bee:	fa20 f002 	lsr.w	r0, r0, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	f040 0001 	orrne.w	r0, r0, #1
 8000bf8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bfc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c00:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c04:	ea40 000c 	orr.w	r0, r0, ip
 8000c08:	fa23 f302 	lsr.w	r3, r3, r2
 8000c0c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c10:	e7cc      	b.n	8000bac <__aeabi_d2f+0x14>
 8000c12:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c16:	d107      	bne.n	8000c28 <__aeabi_d2f+0x90>
 8000c18:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c1c:	bf1e      	ittt	ne
 8000c1e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c22:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c26:	4770      	bxne	lr
 8000c28:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c2c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop

08000c38 <__aeabi_ldivmod>:
 8000c38:	b97b      	cbnz	r3, 8000c5a <__aeabi_ldivmod+0x22>
 8000c3a:	b972      	cbnz	r2, 8000c5a <__aeabi_ldivmod+0x22>
 8000c3c:	2900      	cmp	r1, #0
 8000c3e:	bfbe      	ittt	lt
 8000c40:	2000      	movlt	r0, #0
 8000c42:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000c46:	e006      	blt.n	8000c56 <__aeabi_ldivmod+0x1e>
 8000c48:	bf08      	it	eq
 8000c4a:	2800      	cmpeq	r0, #0
 8000c4c:	bf1c      	itt	ne
 8000c4e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000c52:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c56:	f000 b9bf 	b.w	8000fd8 <__aeabi_idiv0>
 8000c5a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c5e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c62:	2900      	cmp	r1, #0
 8000c64:	db09      	blt.n	8000c7a <__aeabi_ldivmod+0x42>
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	db1a      	blt.n	8000ca0 <__aeabi_ldivmod+0x68>
 8000c6a:	f000 f84d 	bl	8000d08 <__udivmoddi4>
 8000c6e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c72:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c76:	b004      	add	sp, #16
 8000c78:	4770      	bx	lr
 8000c7a:	4240      	negs	r0, r0
 8000c7c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	db1b      	blt.n	8000cbc <__aeabi_ldivmod+0x84>
 8000c84:	f000 f840 	bl	8000d08 <__udivmoddi4>
 8000c88:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c90:	b004      	add	sp, #16
 8000c92:	4240      	negs	r0, r0
 8000c94:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c98:	4252      	negs	r2, r2
 8000c9a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c9e:	4770      	bx	lr
 8000ca0:	4252      	negs	r2, r2
 8000ca2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000ca6:	f000 f82f 	bl	8000d08 <__udivmoddi4>
 8000caa:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb2:	b004      	add	sp, #16
 8000cb4:	4240      	negs	r0, r0
 8000cb6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cba:	4770      	bx	lr
 8000cbc:	4252      	negs	r2, r2
 8000cbe:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cc2:	f000 f821 	bl	8000d08 <__udivmoddi4>
 8000cc6:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cce:	b004      	add	sp, #16
 8000cd0:	4252      	negs	r2, r2
 8000cd2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cec:	f000 b974 	b.w	8000fd8 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f806 	bl	8000d08 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__udivmoddi4>:
 8000d08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d0c:	9d08      	ldr	r5, [sp, #32]
 8000d0e:	4604      	mov	r4, r0
 8000d10:	468e      	mov	lr, r1
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d14d      	bne.n	8000db2 <__udivmoddi4+0xaa>
 8000d16:	428a      	cmp	r2, r1
 8000d18:	4694      	mov	ip, r2
 8000d1a:	d969      	bls.n	8000df0 <__udivmoddi4+0xe8>
 8000d1c:	fab2 f282 	clz	r2, r2
 8000d20:	b152      	cbz	r2, 8000d38 <__udivmoddi4+0x30>
 8000d22:	fa01 f302 	lsl.w	r3, r1, r2
 8000d26:	f1c2 0120 	rsb	r1, r2, #32
 8000d2a:	fa20 f101 	lsr.w	r1, r0, r1
 8000d2e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d32:	ea41 0e03 	orr.w	lr, r1, r3
 8000d36:	4094      	lsls	r4, r2
 8000d38:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d3c:	0c21      	lsrs	r1, r4, #16
 8000d3e:	fbbe f6f8 	udiv	r6, lr, r8
 8000d42:	fa1f f78c 	uxth.w	r7, ip
 8000d46:	fb08 e316 	mls	r3, r8, r6, lr
 8000d4a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d4e:	fb06 f107 	mul.w	r1, r6, r7
 8000d52:	4299      	cmp	r1, r3
 8000d54:	d90a      	bls.n	8000d6c <__udivmoddi4+0x64>
 8000d56:	eb1c 0303 	adds.w	r3, ip, r3
 8000d5a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d5e:	f080 811f 	bcs.w	8000fa0 <__udivmoddi4+0x298>
 8000d62:	4299      	cmp	r1, r3
 8000d64:	f240 811c 	bls.w	8000fa0 <__udivmoddi4+0x298>
 8000d68:	3e02      	subs	r6, #2
 8000d6a:	4463      	add	r3, ip
 8000d6c:	1a5b      	subs	r3, r3, r1
 8000d6e:	b2a4      	uxth	r4, r4
 8000d70:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d74:	fb08 3310 	mls	r3, r8, r0, r3
 8000d78:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d7c:	fb00 f707 	mul.w	r7, r0, r7
 8000d80:	42a7      	cmp	r7, r4
 8000d82:	d90a      	bls.n	8000d9a <__udivmoddi4+0x92>
 8000d84:	eb1c 0404 	adds.w	r4, ip, r4
 8000d88:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d8c:	f080 810a 	bcs.w	8000fa4 <__udivmoddi4+0x29c>
 8000d90:	42a7      	cmp	r7, r4
 8000d92:	f240 8107 	bls.w	8000fa4 <__udivmoddi4+0x29c>
 8000d96:	4464      	add	r4, ip
 8000d98:	3802      	subs	r0, #2
 8000d9a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d9e:	1be4      	subs	r4, r4, r7
 8000da0:	2600      	movs	r6, #0
 8000da2:	b11d      	cbz	r5, 8000dac <__udivmoddi4+0xa4>
 8000da4:	40d4      	lsrs	r4, r2
 8000da6:	2300      	movs	r3, #0
 8000da8:	e9c5 4300 	strd	r4, r3, [r5]
 8000dac:	4631      	mov	r1, r6
 8000dae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db2:	428b      	cmp	r3, r1
 8000db4:	d909      	bls.n	8000dca <__udivmoddi4+0xc2>
 8000db6:	2d00      	cmp	r5, #0
 8000db8:	f000 80ef 	beq.w	8000f9a <__udivmoddi4+0x292>
 8000dbc:	2600      	movs	r6, #0
 8000dbe:	e9c5 0100 	strd	r0, r1, [r5]
 8000dc2:	4630      	mov	r0, r6
 8000dc4:	4631      	mov	r1, r6
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	fab3 f683 	clz	r6, r3
 8000dce:	2e00      	cmp	r6, #0
 8000dd0:	d14a      	bne.n	8000e68 <__udivmoddi4+0x160>
 8000dd2:	428b      	cmp	r3, r1
 8000dd4:	d302      	bcc.n	8000ddc <__udivmoddi4+0xd4>
 8000dd6:	4282      	cmp	r2, r0
 8000dd8:	f200 80f9 	bhi.w	8000fce <__udivmoddi4+0x2c6>
 8000ddc:	1a84      	subs	r4, r0, r2
 8000dde:	eb61 0303 	sbc.w	r3, r1, r3
 8000de2:	2001      	movs	r0, #1
 8000de4:	469e      	mov	lr, r3
 8000de6:	2d00      	cmp	r5, #0
 8000de8:	d0e0      	beq.n	8000dac <__udivmoddi4+0xa4>
 8000dea:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dee:	e7dd      	b.n	8000dac <__udivmoddi4+0xa4>
 8000df0:	b902      	cbnz	r2, 8000df4 <__udivmoddi4+0xec>
 8000df2:	deff      	udf	#255	; 0xff
 8000df4:	fab2 f282 	clz	r2, r2
 8000df8:	2a00      	cmp	r2, #0
 8000dfa:	f040 8092 	bne.w	8000f22 <__udivmoddi4+0x21a>
 8000dfe:	eba1 010c 	sub.w	r1, r1, ip
 8000e02:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e06:	fa1f fe8c 	uxth.w	lr, ip
 8000e0a:	2601      	movs	r6, #1
 8000e0c:	0c20      	lsrs	r0, r4, #16
 8000e0e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e12:	fb07 1113 	mls	r1, r7, r3, r1
 8000e16:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e1a:	fb0e f003 	mul.w	r0, lr, r3
 8000e1e:	4288      	cmp	r0, r1
 8000e20:	d908      	bls.n	8000e34 <__udivmoddi4+0x12c>
 8000e22:	eb1c 0101 	adds.w	r1, ip, r1
 8000e26:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000e2a:	d202      	bcs.n	8000e32 <__udivmoddi4+0x12a>
 8000e2c:	4288      	cmp	r0, r1
 8000e2e:	f200 80cb 	bhi.w	8000fc8 <__udivmoddi4+0x2c0>
 8000e32:	4643      	mov	r3, r8
 8000e34:	1a09      	subs	r1, r1, r0
 8000e36:	b2a4      	uxth	r4, r4
 8000e38:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e3c:	fb07 1110 	mls	r1, r7, r0, r1
 8000e40:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e44:	fb0e fe00 	mul.w	lr, lr, r0
 8000e48:	45a6      	cmp	lr, r4
 8000e4a:	d908      	bls.n	8000e5e <__udivmoddi4+0x156>
 8000e4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e50:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e54:	d202      	bcs.n	8000e5c <__udivmoddi4+0x154>
 8000e56:	45a6      	cmp	lr, r4
 8000e58:	f200 80bb 	bhi.w	8000fd2 <__udivmoddi4+0x2ca>
 8000e5c:	4608      	mov	r0, r1
 8000e5e:	eba4 040e 	sub.w	r4, r4, lr
 8000e62:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e66:	e79c      	b.n	8000da2 <__udivmoddi4+0x9a>
 8000e68:	f1c6 0720 	rsb	r7, r6, #32
 8000e6c:	40b3      	lsls	r3, r6
 8000e6e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e72:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e76:	fa20 f407 	lsr.w	r4, r0, r7
 8000e7a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e7e:	431c      	orrs	r4, r3
 8000e80:	40f9      	lsrs	r1, r7
 8000e82:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e86:	fa00 f306 	lsl.w	r3, r0, r6
 8000e8a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e8e:	0c20      	lsrs	r0, r4, #16
 8000e90:	fa1f fe8c 	uxth.w	lr, ip
 8000e94:	fb09 1118 	mls	r1, r9, r8, r1
 8000e98:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e9c:	fb08 f00e 	mul.w	r0, r8, lr
 8000ea0:	4288      	cmp	r0, r1
 8000ea2:	fa02 f206 	lsl.w	r2, r2, r6
 8000ea6:	d90b      	bls.n	8000ec0 <__udivmoddi4+0x1b8>
 8000ea8:	eb1c 0101 	adds.w	r1, ip, r1
 8000eac:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000eb0:	f080 8088 	bcs.w	8000fc4 <__udivmoddi4+0x2bc>
 8000eb4:	4288      	cmp	r0, r1
 8000eb6:	f240 8085 	bls.w	8000fc4 <__udivmoddi4+0x2bc>
 8000eba:	f1a8 0802 	sub.w	r8, r8, #2
 8000ebe:	4461      	add	r1, ip
 8000ec0:	1a09      	subs	r1, r1, r0
 8000ec2:	b2a4      	uxth	r4, r4
 8000ec4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ec8:	fb09 1110 	mls	r1, r9, r0, r1
 8000ecc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000ed0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ed4:	458e      	cmp	lr, r1
 8000ed6:	d908      	bls.n	8000eea <__udivmoddi4+0x1e2>
 8000ed8:	eb1c 0101 	adds.w	r1, ip, r1
 8000edc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000ee0:	d26c      	bcs.n	8000fbc <__udivmoddi4+0x2b4>
 8000ee2:	458e      	cmp	lr, r1
 8000ee4:	d96a      	bls.n	8000fbc <__udivmoddi4+0x2b4>
 8000ee6:	3802      	subs	r0, #2
 8000ee8:	4461      	add	r1, ip
 8000eea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000eee:	fba0 9402 	umull	r9, r4, r0, r2
 8000ef2:	eba1 010e 	sub.w	r1, r1, lr
 8000ef6:	42a1      	cmp	r1, r4
 8000ef8:	46c8      	mov	r8, r9
 8000efa:	46a6      	mov	lr, r4
 8000efc:	d356      	bcc.n	8000fac <__udivmoddi4+0x2a4>
 8000efe:	d053      	beq.n	8000fa8 <__udivmoddi4+0x2a0>
 8000f00:	b15d      	cbz	r5, 8000f1a <__udivmoddi4+0x212>
 8000f02:	ebb3 0208 	subs.w	r2, r3, r8
 8000f06:	eb61 010e 	sbc.w	r1, r1, lr
 8000f0a:	fa01 f707 	lsl.w	r7, r1, r7
 8000f0e:	fa22 f306 	lsr.w	r3, r2, r6
 8000f12:	40f1      	lsrs	r1, r6
 8000f14:	431f      	orrs	r7, r3
 8000f16:	e9c5 7100 	strd	r7, r1, [r5]
 8000f1a:	2600      	movs	r6, #0
 8000f1c:	4631      	mov	r1, r6
 8000f1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f22:	f1c2 0320 	rsb	r3, r2, #32
 8000f26:	40d8      	lsrs	r0, r3
 8000f28:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f2c:	fa21 f303 	lsr.w	r3, r1, r3
 8000f30:	4091      	lsls	r1, r2
 8000f32:	4301      	orrs	r1, r0
 8000f34:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f38:	fa1f fe8c 	uxth.w	lr, ip
 8000f3c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f40:	fb07 3610 	mls	r6, r7, r0, r3
 8000f44:	0c0b      	lsrs	r3, r1, #16
 8000f46:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f4a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f4e:	429e      	cmp	r6, r3
 8000f50:	fa04 f402 	lsl.w	r4, r4, r2
 8000f54:	d908      	bls.n	8000f68 <__udivmoddi4+0x260>
 8000f56:	eb1c 0303 	adds.w	r3, ip, r3
 8000f5a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f5e:	d22f      	bcs.n	8000fc0 <__udivmoddi4+0x2b8>
 8000f60:	429e      	cmp	r6, r3
 8000f62:	d92d      	bls.n	8000fc0 <__udivmoddi4+0x2b8>
 8000f64:	3802      	subs	r0, #2
 8000f66:	4463      	add	r3, ip
 8000f68:	1b9b      	subs	r3, r3, r6
 8000f6a:	b289      	uxth	r1, r1
 8000f6c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f70:	fb07 3316 	mls	r3, r7, r6, r3
 8000f74:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f78:	fb06 f30e 	mul.w	r3, r6, lr
 8000f7c:	428b      	cmp	r3, r1
 8000f7e:	d908      	bls.n	8000f92 <__udivmoddi4+0x28a>
 8000f80:	eb1c 0101 	adds.w	r1, ip, r1
 8000f84:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000f88:	d216      	bcs.n	8000fb8 <__udivmoddi4+0x2b0>
 8000f8a:	428b      	cmp	r3, r1
 8000f8c:	d914      	bls.n	8000fb8 <__udivmoddi4+0x2b0>
 8000f8e:	3e02      	subs	r6, #2
 8000f90:	4461      	add	r1, ip
 8000f92:	1ac9      	subs	r1, r1, r3
 8000f94:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f98:	e738      	b.n	8000e0c <__udivmoddi4+0x104>
 8000f9a:	462e      	mov	r6, r5
 8000f9c:	4628      	mov	r0, r5
 8000f9e:	e705      	b.n	8000dac <__udivmoddi4+0xa4>
 8000fa0:	4606      	mov	r6, r0
 8000fa2:	e6e3      	b.n	8000d6c <__udivmoddi4+0x64>
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	e6f8      	b.n	8000d9a <__udivmoddi4+0x92>
 8000fa8:	454b      	cmp	r3, r9
 8000faa:	d2a9      	bcs.n	8000f00 <__udivmoddi4+0x1f8>
 8000fac:	ebb9 0802 	subs.w	r8, r9, r2
 8000fb0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fb4:	3801      	subs	r0, #1
 8000fb6:	e7a3      	b.n	8000f00 <__udivmoddi4+0x1f8>
 8000fb8:	4646      	mov	r6, r8
 8000fba:	e7ea      	b.n	8000f92 <__udivmoddi4+0x28a>
 8000fbc:	4620      	mov	r0, r4
 8000fbe:	e794      	b.n	8000eea <__udivmoddi4+0x1e2>
 8000fc0:	4640      	mov	r0, r8
 8000fc2:	e7d1      	b.n	8000f68 <__udivmoddi4+0x260>
 8000fc4:	46d0      	mov	r8, sl
 8000fc6:	e77b      	b.n	8000ec0 <__udivmoddi4+0x1b8>
 8000fc8:	3b02      	subs	r3, #2
 8000fca:	4461      	add	r1, ip
 8000fcc:	e732      	b.n	8000e34 <__udivmoddi4+0x12c>
 8000fce:	4630      	mov	r0, r6
 8000fd0:	e709      	b.n	8000de6 <__udivmoddi4+0xde>
 8000fd2:	4464      	add	r4, ip
 8000fd4:	3802      	subs	r0, #2
 8000fd6:	e742      	b.n	8000e5e <__udivmoddi4+0x156>

08000fd8 <__aeabi_idiv0>:
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop

08000fdc <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b083      	sub	sp, #12
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8000fe4:	4b06      	ldr	r3, [pc, #24]	; (8001000 <LL_EXTI_EnableIT_32_63+0x24>)
 8000fe6:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8000fea:	4905      	ldr	r1, [pc, #20]	; (8001000 <LL_EXTI_EnableIT_32_63+0x24>)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	4313      	orrs	r3, r2
 8000ff0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000ff4:	bf00      	nop
 8000ff6:	370c      	adds	r7, #12
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffe:	4770      	bx	lr
 8001000:	58000800 	.word	0x58000800

08001004 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001004:	b480      	push	{r7}
 8001006:	b085      	sub	sp, #20
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 800100c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001010:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001012:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	4313      	orrs	r3, r2
 800101a:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800101c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001020:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	4013      	ands	r3, r2
 8001026:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001028:	68fb      	ldr	r3, [r7, #12]
}
 800102a:	bf00      	nop
 800102c:	3714      	adds	r7, #20
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr

08001036 <LL_C2_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001036:	b480      	push	{r7}
 8001038:	b085      	sub	sp, #20
 800103a:	af00      	add	r7, sp, #0
 800103c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB2ENR, Periphs);
 800103e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001042:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 8001046:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	4313      	orrs	r3, r2
 800104e:	f8c1 314c 	str.w	r3, [r1, #332]	; 0x14c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB2ENR, Periphs);
 8001052:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001056:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	4013      	ands	r3, r2
 800105e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001060:	68fb      	ldr	r3, [r7, #12]
}
 8001062:	bf00      	nop
 8001064:	3714      	adds	r7, #20
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr

0800106e <APPD_Init>:
static void APPD_BleDtbCfg( void );
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPD_Init( void )
{
 800106e:	b580      	push	{r7, lr}
 8001070:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_Init */
#if (CFG_DEBUGGER_SUPPORTED == 1)
  /**
   * Keep debugger enabled while in any low power mode
   */
  HAL_DBGMCU_EnableDBGSleepMode();
 8001072:	f005 fb3f 	bl	80066f4 <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStopMode();
 8001076:	f005 fb43 	bl	8006700 <HAL_DBGMCU_EnableDBGStopMode>

  /***************** ENABLE DEBUGGER *************************************/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_48);
 800107a:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800107e:	f7ff ffad 	bl	8000fdc <LL_EXTI_EnableIT_32_63>
  HAL_DBGMCU_DisableDBGStandbyMode();

#endif /* (CFG_DEBUGGER_SUPPORTED == 1) */

#if(CFG_DEBUG_TRACE != 0)
  DbgTraceInit();
 8001082:	f00e fbbd 	bl	800f800 <DbgTraceInit>
#endif

  APPD_SetCPU2GpioConfig( );
 8001086:	f000 f821 	bl	80010cc <APPD_SetCPU2GpioConfig>
  APPD_BleDtbCfg( );
 800108a:	f000 f8c3 	bl	8001214 <APPD_BleDtbCfg>

/* USER CODE END APPD_Init */
  return;
 800108e:	bf00      	nop
}
 8001090:	bd80      	pop	{r7, pc}
	...

08001094 <APPD_EnableCPU2>:

void APPD_EnableCPU2( void )
{
 8001094:	b5b0      	push	{r4, r5, r7, lr}
 8001096:	b088      	sub	sp, #32
 8001098:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 800109a:	4b0b      	ldr	r3, [pc, #44]	; (80010c8 <APPD_EnableCPU2+0x34>)
 800109c:	1d3c      	adds	r4, r7, #4
 800109e:	461d      	mov	r5, r3
 80010a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010a4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80010a8:	c403      	stmia	r4!, {r0, r1}
 80010aa:	8022      	strh	r2, [r4, #0]
 80010ac:	3402      	adds	r4, #2
 80010ae:	0c13      	lsrs	r3, r2, #16
 80010b0:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 80010b2:	f00e fae1 	bl	800f678 <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 80010b6:	1d3b      	adds	r3, r7, #4
 80010b8:	4618      	mov	r0, r3
 80010ba:	f00d fd7c 	bl	800ebb6 <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 80010be:	bf00      	nop
}
 80010c0:	3720      	adds	r7, #32
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bdb0      	pop	{r4, r5, r7, pc}
 80010c6:	bf00      	nop
 80010c8:	08016048 	.word	0x08016048

080010cc <APPD_SetCPU2GpioConfig>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void APPD_SetCPU2GpioConfig( void )
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b088      	sub	sp, #32
 80010d0:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_SetCPU2GpioConfig */
  GPIO_InitTypeDef gpio_config = {0};
 80010d2:	1d3b      	adds	r3, r7, #4
 80010d4:	2200      	movs	r2, #0
 80010d6:	601a      	str	r2, [r3, #0]
 80010d8:	605a      	str	r2, [r3, #4]
 80010da:	609a      	str	r2, [r3, #8]
 80010dc:	60da      	str	r2, [r3, #12]
 80010de:	611a      	str	r2, [r3, #16]
  uint8_t local_loop;
  uint16_t gpioa_pin_list;
  uint16_t gpiob_pin_list;
  uint16_t gpioc_pin_list;
  gpioa_pin_list = 0;
 80010e0:	2300      	movs	r3, #0
 80010e2:	83bb      	strh	r3, [r7, #28]
  gpiob_pin_list = 0;
 80010e4:	2300      	movs	r3, #0
 80010e6:	837b      	strh	r3, [r7, #26]
  gpioc_pin_list = 0;
 80010e8:	2300      	movs	r3, #0
 80010ea:	833b      	strh	r3, [r7, #24]

  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 80010ec:	2300      	movs	r3, #0
 80010ee:	77fb      	strb	r3, [r7, #31]
 80010f0:	e038      	b.n	8001164 <APPD_SetCPU2GpioConfig+0x98>
  {
    if( aGpioConfigList[local_loop].enable != 0)
 80010f2:	7ffb      	ldrb	r3, [r7, #31]
 80010f4:	4a44      	ldr	r2, [pc, #272]	; (8001208 <APPD_SetCPU2GpioConfig+0x13c>)
 80010f6:	00db      	lsls	r3, r3, #3
 80010f8:	4413      	add	r3, r2
 80010fa:	799b      	ldrb	r3, [r3, #6]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d02b      	beq.n	8001158 <APPD_SetCPU2GpioConfig+0x8c>
    {
      switch((uint32_t)aGpioConfigList[local_loop].port)
 8001100:	7ffb      	ldrb	r3, [r7, #31]
 8001102:	4a41      	ldr	r2, [pc, #260]	; (8001208 <APPD_SetCPU2GpioConfig+0x13c>)
 8001104:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001108:	4a40      	ldr	r2, [pc, #256]	; (800120c <APPD_SetCPU2GpioConfig+0x140>)
 800110a:	4293      	cmp	r3, r2
 800110c:	d01b      	beq.n	8001146 <APPD_SetCPU2GpioConfig+0x7a>
 800110e:	4a3f      	ldr	r2, [pc, #252]	; (800120c <APPD_SetCPU2GpioConfig+0x140>)
 8001110:	4293      	cmp	r3, r2
 8001112:	d823      	bhi.n	800115c <APPD_SetCPU2GpioConfig+0x90>
 8001114:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001118:	d003      	beq.n	8001122 <APPD_SetCPU2GpioConfig+0x56>
 800111a:	4a3d      	ldr	r2, [pc, #244]	; (8001210 <APPD_SetCPU2GpioConfig+0x144>)
 800111c:	4293      	cmp	r3, r2
 800111e:	d009      	beq.n	8001134 <APPD_SetCPU2GpioConfig+0x68>
          break;
        case (uint32_t)GPIOC:
          gpioc_pin_list |= aGpioConfigList[local_loop].pin;
          break;
        default:
          break;
 8001120:	e01c      	b.n	800115c <APPD_SetCPU2GpioConfig+0x90>
          gpioa_pin_list |= aGpioConfigList[local_loop].pin;
 8001122:	7ffb      	ldrb	r3, [r7, #31]
 8001124:	4a38      	ldr	r2, [pc, #224]	; (8001208 <APPD_SetCPU2GpioConfig+0x13c>)
 8001126:	00db      	lsls	r3, r3, #3
 8001128:	4413      	add	r3, r2
 800112a:	889a      	ldrh	r2, [r3, #4]
 800112c:	8bbb      	ldrh	r3, [r7, #28]
 800112e:	4313      	orrs	r3, r2
 8001130:	83bb      	strh	r3, [r7, #28]
          break;
 8001132:	e014      	b.n	800115e <APPD_SetCPU2GpioConfig+0x92>
          gpiob_pin_list |= aGpioConfigList[local_loop].pin;
 8001134:	7ffb      	ldrb	r3, [r7, #31]
 8001136:	4a34      	ldr	r2, [pc, #208]	; (8001208 <APPD_SetCPU2GpioConfig+0x13c>)
 8001138:	00db      	lsls	r3, r3, #3
 800113a:	4413      	add	r3, r2
 800113c:	889a      	ldrh	r2, [r3, #4]
 800113e:	8b7b      	ldrh	r3, [r7, #26]
 8001140:	4313      	orrs	r3, r2
 8001142:	837b      	strh	r3, [r7, #26]
          break;
 8001144:	e00b      	b.n	800115e <APPD_SetCPU2GpioConfig+0x92>
          gpioc_pin_list |= aGpioConfigList[local_loop].pin;
 8001146:	7ffb      	ldrb	r3, [r7, #31]
 8001148:	4a2f      	ldr	r2, [pc, #188]	; (8001208 <APPD_SetCPU2GpioConfig+0x13c>)
 800114a:	00db      	lsls	r3, r3, #3
 800114c:	4413      	add	r3, r2
 800114e:	889a      	ldrh	r2, [r3, #4]
 8001150:	8b3b      	ldrh	r3, [r7, #24]
 8001152:	4313      	orrs	r3, r2
 8001154:	833b      	strh	r3, [r7, #24]
          break;
 8001156:	e002      	b.n	800115e <APPD_SetCPU2GpioConfig+0x92>
      }
    }
 8001158:	bf00      	nop
 800115a:	e000      	b.n	800115e <APPD_SetCPU2GpioConfig+0x92>
          break;
 800115c:	bf00      	nop
  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 800115e:	7ffb      	ldrb	r3, [r7, #31]
 8001160:	3301      	adds	r3, #1
 8001162:	77fb      	strb	r3, [r7, #31]
 8001164:	7ffb      	ldrb	r3, [r7, #31]
 8001166:	2b25      	cmp	r3, #37	; 0x25
 8001168:	d9c3      	bls.n	80010f2 <APPD_SetCPU2GpioConfig+0x26>
  }

  gpio_config.Pull = GPIO_NOPULL;
 800116a:	2300      	movs	r3, #0
 800116c:	60fb      	str	r3, [r7, #12]
  gpio_config.Mode = GPIO_MODE_OUTPUT_PP;
 800116e:	2301      	movs	r3, #1
 8001170:	60bb      	str	r3, [r7, #8]
  gpio_config.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001172:	2303      	movs	r3, #3
 8001174:	613b      	str	r3, [r7, #16]

  if(gpioa_pin_list != 0)
 8001176:	8bbb      	ldrh	r3, [r7, #28]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d014      	beq.n	80011a6 <APPD_SetCPU2GpioConfig+0xda>
  {
    gpio_config.Pin = gpioa_pin_list;
 800117c:	8bbb      	ldrh	r3, [r7, #28]
 800117e:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001180:	2001      	movs	r0, #1
 8001182:	f7ff ff3f 	bl	8001004 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOA_CLK_ENABLE();
 8001186:	2001      	movs	r0, #1
 8001188:	f7ff ff55 	bl	8001036 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOA, &gpio_config);
 800118c:	1d3b      	adds	r3, r7, #4
 800118e:	4619      	mov	r1, r3
 8001190:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001194:	f006 fb66 	bl	8007864 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOA, gpioa_pin_list, GPIO_PIN_RESET);
 8001198:	8bbb      	ldrh	r3, [r7, #28]
 800119a:	2200      	movs	r2, #0
 800119c:	4619      	mov	r1, r3
 800119e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011a2:	f006 fccf 	bl	8007b44 <HAL_GPIO_WritePin>
  }

  if(gpiob_pin_list != 0)
 80011a6:	8b7b      	ldrh	r3, [r7, #26]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d012      	beq.n	80011d2 <APPD_SetCPU2GpioConfig+0x106>
  {
    gpio_config.Pin = gpiob_pin_list;
 80011ac:	8b7b      	ldrh	r3, [r7, #26]
 80011ae:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011b0:	2002      	movs	r0, #2
 80011b2:	f7ff ff27 	bl	8001004 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOB_CLK_ENABLE();
 80011b6:	2002      	movs	r0, #2
 80011b8:	f7ff ff3d 	bl	8001036 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOB, &gpio_config);
 80011bc:	1d3b      	adds	r3, r7, #4
 80011be:	4619      	mov	r1, r3
 80011c0:	4813      	ldr	r0, [pc, #76]	; (8001210 <APPD_SetCPU2GpioConfig+0x144>)
 80011c2:	f006 fb4f 	bl	8007864 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOB, gpiob_pin_list, GPIO_PIN_RESET);
 80011c6:	8b7b      	ldrh	r3, [r7, #26]
 80011c8:	2200      	movs	r2, #0
 80011ca:	4619      	mov	r1, r3
 80011cc:	4810      	ldr	r0, [pc, #64]	; (8001210 <APPD_SetCPU2GpioConfig+0x144>)
 80011ce:	f006 fcb9 	bl	8007b44 <HAL_GPIO_WritePin>
  }

  if(gpioc_pin_list != 0)
 80011d2:	8b3b      	ldrh	r3, [r7, #24]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d013      	beq.n	8001200 <APPD_SetCPU2GpioConfig+0x134>
  {
    gpio_config.Pin = gpioc_pin_list;
 80011d8:	8b3b      	ldrh	r3, [r7, #24]
 80011da:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011dc:	2004      	movs	r0, #4
 80011de:	f7ff ff11 	bl	8001004 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOC_CLK_ENABLE();
 80011e2:	2004      	movs	r0, #4
 80011e4:	f7ff ff27 	bl	8001036 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOC, &gpio_config);
 80011e8:	1d3b      	adds	r3, r7, #4
 80011ea:	4619      	mov	r1, r3
 80011ec:	4807      	ldr	r0, [pc, #28]	; (800120c <APPD_SetCPU2GpioConfig+0x140>)
 80011ee:	f006 fb39 	bl	8007864 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOC, gpioc_pin_list, GPIO_PIN_RESET);
 80011f2:	8b3b      	ldrh	r3, [r7, #24]
 80011f4:	2200      	movs	r2, #0
 80011f6:	4619      	mov	r1, r3
 80011f8:	4804      	ldr	r0, [pc, #16]	; (800120c <APPD_SetCPU2GpioConfig+0x140>)
 80011fa:	f006 fca3 	bl	8007b44 <HAL_GPIO_WritePin>
  }

/* USER CODE END APPD_SetCPU2GpioConfig */
  return;
 80011fe:	bf00      	nop
 8001200:	bf00      	nop
}
 8001202:	3720      	adds	r7, #32
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	08017d44 	.word	0x08017d44
 800120c:	48000800 	.word	0x48000800
 8001210:	48000400 	.word	0x48000400

08001214 <APPD_BleDtbCfg>:

static void APPD_BleDtbCfg( void )
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
    HAL_GPIO_Init(GPIOB, &gpio_config);
  }
#endif

/* USER CODE END APPD_BleDtbCfg */
  return;
 8001218:	bf00      	nop
}
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr

08001222 <DbgOutputInit>:
 * WRAP FUNCTIONS
 *
*************************************************************/
#if(CFG_DEBUG_TRACE != 0)
void DbgOutputInit( void )
{
 8001222:	b580      	push	{r7, lr}
 8001224:	af00      	add	r7, sp, #0
#endif
}
else if (CFG_DEBUG_TRACE_UART == hw_uart1)
{
#if(CFG_HW_USART1_ENABLED == 1)
    MX_USART1_UART_Init();
 8001226:	f004 faff 	bl	8005828 <MX_USART1_UART_Init>
#endif
}
#endif

/* USER CODE END DbgOutputInit */
  return;
 800122a:	bf00      	nop
}
 800122c:	bd80      	pop	{r7, pc}

0800122e <DbgOutputTraces>:

void DbgOutputTraces(  uint8_t *p_data, uint16_t size, void (*cb)(void) )
{
 800122e:	b580      	push	{r7, lr}
 8001230:	b084      	sub	sp, #16
 8001232:	af00      	add	r7, sp, #0
 8001234:	60f8      	str	r0, [r7, #12]
 8001236:	460b      	mov	r3, r1
 8001238:	607a      	str	r2, [r7, #4]
 800123a:	817b      	strh	r3, [r7, #10]
/* USER CODE END DbgOutputTraces */
  HW_UART_Transmit_DMA(CFG_DEBUG_TRACE_UART, p_data, size, cb);
 800123c:	897a      	ldrh	r2, [r7, #10]
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	68f9      	ldr	r1, [r7, #12]
 8001242:	2000      	movs	r0, #0
 8001244:	f003 fdfa 	bl	8004e3c <HW_UART_Transmit_DMA>

/* USER CODE END DbgOutputTraces */
  return;
 8001248:	bf00      	nop
}
 800124a:	3710      	adds	r7, #16
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}

08001250 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 8001250:	b480      	push	{r7}
 8001252:	b083      	sub	sp, #12
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 8001258:	4b07      	ldr	r3, [pc, #28]	; (8001278 <LL_C2_PWR_SetPowerMode+0x28>)
 800125a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800125e:	f023 0207 	bic.w	r2, r3, #7
 8001262:	4905      	ldr	r1, [pc, #20]	; (8001278 <LL_C2_PWR_SetPowerMode+0x28>)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	4313      	orrs	r3, r2
 8001268:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 800126c:	bf00      	nop
 800126e:	370c      	adds	r7, #12
 8001270:	46bd      	mov	sp, r7
 8001272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001276:	4770      	bx	lr
 8001278:	58000400 	.word	0x58000400

0800127c <LL_EXTI_EnableIT_32_63>:
{
 800127c:	b480      	push	{r7}
 800127e:	b083      	sub	sp, #12
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8001284:	4b06      	ldr	r3, [pc, #24]	; (80012a0 <LL_EXTI_EnableIT_32_63+0x24>)
 8001286:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800128a:	4905      	ldr	r1, [pc, #20]	; (80012a0 <LL_EXTI_EnableIT_32_63+0x24>)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	4313      	orrs	r3, r2
 8001290:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8001294:	bf00      	nop
 8001296:	370c      	adds	r7, #12
 8001298:	46bd      	mov	sp, r7
 800129a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129e:	4770      	bx	lr
 80012a0:	58000800 	.word	0x58000800

080012a4 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b083      	sub	sp, #12
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 80012ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012b0:	4a0a      	ldr	r2, [pc, #40]	; (80012dc <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 80012b2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 80012b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80012be:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	021b      	lsls	r3, r3, #8
 80012c6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80012ca:	4313      	orrs	r3, r2
 80012cc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 80012d0:	bf00      	nop
 80012d2:	370c      	adds	r7, #12
 80012d4:	46bd      	mov	sp, r7
 80012d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012da:	4770      	bx	lr
 80012dc:	cafecafe 	.word	0xcafecafe

080012e0 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b083      	sub	sp, #12
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 80012e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012ec:	689b      	ldr	r3, [r3, #8]
 80012ee:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80012f2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	4313      	orrs	r3, r2
 80012fa:	608b      	str	r3, [r1, #8]
}
 80012fc:	bf00      	nop
 80012fe:	370c      	adds	r7, #12
 8001300:	46bd      	mov	sp, r7
 8001302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001306:	4770      	bx	lr

08001308 <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800130c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001310:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001314:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001318:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800131c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001320:	bf00      	nop
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr

0800132a <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 800132a:	b480      	push	{r7}
 800132c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800132e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001332:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001336:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800133a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800133e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001342:	bf00      	nop
 8001344:	46bd      	mov	sp, r7
 8001346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134a:	4770      	bx	lr

0800134c <LL_RCC_IsActiveFlag_PINRST>:
  * @brief  Check if RCC flag Pin reset is set or not.
  * @rmtoll CSR          PINRSTF       LL_RCC_IsActiveFlag_PINRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PINRST(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_PINRSTF) == (RCC_CSR_PINRSTF)) ? 1UL : 0UL);
 8001350:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001354:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001358:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800135c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001360:	d101      	bne.n	8001366 <LL_RCC_IsActiveFlag_PINRST+0x1a>
 8001362:	2301      	movs	r3, #1
 8001364:	e000      	b.n	8001368 <LL_RCC_IsActiveFlag_PINRST+0x1c>
 8001366:	2300      	movs	r3, #0
}
 8001368:	4618      	mov	r0, r3
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr

08001372 <LL_RCC_IsActiveFlag_SFTRST>:
  * @brief  Check if RCC flag Software reset is set or not.
  * @rmtoll CSR          SFTRSTF       LL_RCC_IsActiveFlag_SFTRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SFTRST(void)
{
 8001372:	b480      	push	{r7}
 8001374:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_SFTRSTF) == (RCC_CSR_SFTRSTF)) ? 1UL : 0UL);
 8001376:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800137a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800137e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001382:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001386:	d101      	bne.n	800138c <LL_RCC_IsActiveFlag_SFTRST+0x1a>
 8001388:	2301      	movs	r3, #1
 800138a:	e000      	b.n	800138e <LL_RCC_IsActiveFlag_SFTRST+0x1c>
 800138c:	2300      	movs	r3, #0
}
 800138e:	4618      	mov	r0, r3
 8001390:	46bd      	mov	sp, r7
 8001392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001396:	4770      	bx	lr

08001398 <LL_AHB3_GRP1_EnableClock>:
{
 8001398:	b480      	push	{r7}
 800139a:	b085      	sub	sp, #20
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 80013a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013a4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80013a6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	4313      	orrs	r3, r2
 80013ae:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80013b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013b4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	4013      	ands	r3, r2
 80013ba:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80013bc:	68fb      	ldr	r3, [r7, #12]
}
 80013be:	bf00      	nop
 80013c0:	3714      	adds	r7, #20
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr
	...

080013cc <LL_DBGMCU_GetDeviceID>:
  * @note   For STM32WBxxxx devices, the device ID is 0x495
  * @rmtoll DBGMCU_IDCODE DEV_ID        LL_DBGMCU_GetDeviceID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFF (ex: device ID is 0x495)
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetDeviceID(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID));
 80013d0:	4b04      	ldr	r3, [pc, #16]	; (80013e4 <LL_DBGMCU_GetDeviceID+0x18>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 80013d8:	4618      	mov	r0, r3
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr
 80013e2:	bf00      	nop
 80013e4:	e0042000 	.word	0xe0042000

080013e8 <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 80013ec:	4b04      	ldr	r3, [pc, #16]	; (8001400 <LL_DBGMCU_GetRevisionID+0x18>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	0c1b      	lsrs	r3, r3, #16
 80013f2:	b29b      	uxth	r3, r3
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr
 80013fe:	bf00      	nop
 8001400:	e0042000 	.word	0xe0042000

08001404 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001404:	b480      	push	{r7}
 8001406:	b083      	sub	sp, #12
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
 800140c:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	685a      	ldr	r2, [r3, #4]
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	041b      	lsls	r3, r3, #16
 8001416:	431a      	orrs	r2, r3
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	605a      	str	r2, [r3, #4]
}
 800141c:	bf00      	nop
 800141e:	370c      	adds	r7, #12
 8001420:	46bd      	mov	sp, r7
 8001422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001426:	4770      	bx	lr

08001428 <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001428:	b480      	push	{r7}
 800142a:	b083      	sub	sp, #12
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
 8001430:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	685a      	ldr	r2, [r3, #4]
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	431a      	orrs	r2, r3
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	605a      	str	r2, [r3, #4]
}
 800143e:	bf00      	nop
 8001440:	370c      	adds	r7, #12
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr

0800144a <LL_C2_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800144a:	b480      	push	{r7}
 800144c:	b083      	sub	sp, #12
 800144e:	af00      	add	r7, sp, #0
 8001450:	6078      	str	r0, [r7, #4]
 8001452:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel << (IPCC_C2MR_CH1FM_Pos));
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	695a      	ldr	r2, [r3, #20]
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	041b      	lsls	r3, r3, #16
 800145c:	431a      	orrs	r2, r3
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	615a      	str	r2, [r3, #20]
}
 8001462:	bf00      	nop
 8001464:	370c      	adds	r7, #12
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr

0800146e <LL_C2_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800146e:	b480      	push	{r7}
 8001470:	b083      	sub	sp, #12
 8001472:	af00      	add	r7, sp, #0
 8001474:	6078      	str	r0, [r7, #4]
 8001476:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	695a      	ldr	r2, [r3, #20]
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	431a      	orrs	r2, r3
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	615a      	str	r2, [r3, #20]
}
 8001484:	bf00      	nop
 8001486:	370c      	adds	r7, #12
 8001488:	46bd      	mov	sp, r7
 800148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148e:	4770      	bx	lr

08001490 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001490:	b480      	push	{r7}
 8001492:	b083      	sub	sp, #12
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
 8001498:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	683a      	ldr	r2, [r7, #0]
 800149e:	609a      	str	r2, [r3, #8]
}
 80014a0:	bf00      	nop
 80014a2:	370c      	adds	r7, #12
 80014a4:	46bd      	mov	sp, r7
 80014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014aa:	4770      	bx	lr

080014ac <LL_C2_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b083      	sub	sp, #12
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
 80014b4:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C2SCR, Channel);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	683a      	ldr	r2, [r7, #0]
 80014ba:	619a      	str	r2, [r3, #24]
}
 80014bc:	bf00      	nop
 80014be:	370c      	adds	r7, #12
 80014c0:	46bd      	mov	sp, r7
 80014c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c6:	4770      	bx	lr

080014c8 <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80014cc:	4b05      	ldr	r3, [pc, #20]	; (80014e4 <LL_LPM_EnableSleep+0x1c>)
 80014ce:	691b      	ldr	r3, [r3, #16]
 80014d0:	4a04      	ldr	r2, [pc, #16]	; (80014e4 <LL_LPM_EnableSleep+0x1c>)
 80014d2:	f023 0304 	bic.w	r3, r3, #4
 80014d6:	6113      	str	r3, [r2, #16]
}
 80014d8:	bf00      	nop
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr
 80014e2:	bf00      	nop
 80014e4:	e000ed00 	.word	0xe000ed00

080014e8 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b083      	sub	sp, #12
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	22ff      	movs	r2, #255	; 0xff
 80014f4:	625a      	str	r2, [r3, #36]	; 0x24
}
 80014f6:	bf00      	nop
 80014f8:	370c      	adds	r7, #12
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr

08001502 <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 8001502:	b480      	push	{r7}
 8001504:	b083      	sub	sp, #12
 8001506:	af00      	add	r7, sp, #0
 8001508:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	22ca      	movs	r2, #202	; 0xca
 800150e:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2253      	movs	r2, #83	; 0x53
 8001514:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001516:	bf00      	nop
 8001518:	370c      	adds	r7, #12
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr

08001522 <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 8001522:	b480      	push	{r7}
 8001524:	b083      	sub	sp, #12
 8001526:	af00      	add	r7, sp, #0
 8001528:	6078      	str	r0, [r7, #4]
 800152a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	689b      	ldr	r3, [r3, #8]
 8001530:	f023 0207 	bic.w	r2, r3, #7
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	431a      	orrs	r2, r3
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	609a      	str	r2, [r3, #8]
}
 800153c:	bf00      	nop
 800153e:	370c      	adds	r7, #12
 8001540:	46bd      	mov	sp, r7
 8001542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001546:	4770      	bx	lr

08001548 <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800154c:	4b04      	ldr	r3, [pc, #16]	; (8001560 <MX_APPE_Config+0x18>)
 800154e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001552:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 8001554:	f000 f826 	bl	80015a4 <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 8001558:	f000 f866 	bl	8001628 <Config_HSE>

  return;
 800155c:	bf00      	nop
}
 800155e:	bd80      	pop	{r7, pc}
 8001560:	58004000 	.word	0x58004000

08001564 <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 8001568:	f000 f872 	bl	8001650 <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 800156c:	f000 f88a 	bl	8001684 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8001570:	4904      	ldr	r1, [pc, #16]	; (8001584 <MX_APPE_Init+0x20>)
 8001572:	2000      	movs	r0, #0
 8001574:	f003 fa70 	bl	8004a58 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */
  APPD_Init();
 8001578:	f7ff fd79 	bl	800106e <APPD_Init>
/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 800157c:	f000 f890 	bl	80016a0 <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
   return;
 8001580:	bf00      	nop
}
 8001582:	bd80      	pop	{r7, pc}
 8001584:	200004f0 	.word	0x200004f0

08001588 <Init_Smps>:

void Init_Smps(void)
{
 8001588:	b480      	push	{r7}
 800158a:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif /* CFG_USE_SMPS != 0 */

  return;
 800158c:	bf00      	nop
}
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr

08001596 <Init_Exti>:

void Init_Exti(void)
{
 8001596:	b580      	push	{r7, lr}
 8001598:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 800159a:	2050      	movs	r0, #80	; 0x50
 800159c:	f7ff fe6e 	bl	800127c <LL_EXTI_EnableIT_32_63>

  return;
 80015a0:	bf00      	nop
}
 80015a2:	bd80      	pop	{r7, pc}

080015a4 <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	af00      	add	r7, sp, #0
#if (CFG_HW_RESET_BY_FW == 1)
  Reset_BackupDomain();
 80015a8:	f000 f804 	bl	80015b4 <Reset_BackupDomain>

  Reset_IPCC();
 80015ac:	f000 f81a 	bl	80015e4 <Reset_IPCC>
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 80015b0:	bf00      	nop
}
 80015b2:	bd80      	pop	{r7, pc}

080015b4 <Reset_BackupDomain>:

#if (CFG_HW_RESET_BY_FW == 1)
static void Reset_BackupDomain(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	af00      	add	r7, sp, #0
  if ((LL_RCC_IsActiveFlag_PINRST() != FALSE) && (LL_RCC_IsActiveFlag_SFTRST() == FALSE))
 80015b8:	f7ff fec8 	bl	800134c <LL_RCC_IsActiveFlag_PINRST>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d00d      	beq.n	80015de <Reset_BackupDomain+0x2a>
 80015c2:	f7ff fed6 	bl	8001372 <LL_RCC_IsActiveFlag_SFTRST>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d108      	bne.n	80015de <Reset_BackupDomain+0x2a>
  {
    HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 80015cc:	f007 fcfa 	bl	8008fc4 <HAL_PWR_EnableBkUpAccess>

    /**
     *  Write twice the value to flush the APB-AHB bridge
     *  This bit shall be written in the register before writing the next one
     */
    HAL_PWR_EnableBkUpAccess();
 80015d0:	f007 fcf8 	bl	8008fc4 <HAL_PWR_EnableBkUpAccess>

    __HAL_RCC_BACKUPRESET_FORCE();
 80015d4:	f7ff fe98 	bl	8001308 <LL_RCC_ForceBackupDomainReset>
    __HAL_RCC_BACKUPRESET_RELEASE();
 80015d8:	f7ff fea7 	bl	800132a <LL_RCC_ReleaseBackupDomainReset>
  }

  return;
 80015dc:	bf00      	nop
 80015de:	bf00      	nop
}
 80015e0:	bd80      	pop	{r7, pc}
	...

080015e4 <Reset_IPCC>:

static void Reset_IPCC(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock(LL_AHB3_GRP1_PERIPH_IPCC);
 80015e8:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80015ec:	f7ff fed4 	bl	8001398 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_ClearFlag_CHx(
 80015f0:	213f      	movs	r1, #63	; 0x3f
 80015f2:	480c      	ldr	r0, [pc, #48]	; (8001624 <Reset_IPCC+0x40>)
 80015f4:	f7ff ff4c 	bl	8001490 <LL_C1_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_ClearFlag_CHx(
 80015f8:	213f      	movs	r1, #63	; 0x3f
 80015fa:	480a      	ldr	r0, [pc, #40]	; (8001624 <Reset_IPCC+0x40>)
 80015fc:	f7ff ff56 	bl	80014ac <LL_C2_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableTransmitChannel(
 8001600:	213f      	movs	r1, #63	; 0x3f
 8001602:	4808      	ldr	r0, [pc, #32]	; (8001624 <Reset_IPCC+0x40>)
 8001604:	f7ff fefe 	bl	8001404 <LL_C1_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableTransmitChannel(
 8001608:	213f      	movs	r1, #63	; 0x3f
 800160a:	4806      	ldr	r0, [pc, #24]	; (8001624 <Reset_IPCC+0x40>)
 800160c:	f7ff ff1d 	bl	800144a <LL_C2_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableReceiveChannel(
 8001610:	213f      	movs	r1, #63	; 0x3f
 8001612:	4804      	ldr	r0, [pc, #16]	; (8001624 <Reset_IPCC+0x40>)
 8001614:	f7ff ff08 	bl	8001428 <LL_C1_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableReceiveChannel(
 8001618:	213f      	movs	r1, #63	; 0x3f
 800161a:	4802      	ldr	r0, [pc, #8]	; (8001624 <Reset_IPCC+0x40>)
 800161c:	f7ff ff27 	bl	800146e <LL_C2_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  return;
 8001620:	bf00      	nop
}
 8001622:	bd80      	pop	{r7, pc}
 8001624:	58000c00 	.word	0x58000c00

08001628 <Config_HSE>:
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b082      	sub	sp, #8
 800162c:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 800162e:	2000      	movs	r0, #0
 8001630:	f00e f964 	bl	800f8fc <OTP_Read>
 8001634:	6078      	str	r0, [r7, #4]
  if (p_otp)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d005      	beq.n	8001648 <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	799b      	ldrb	r3, [r3, #6]
 8001640:	4618      	mov	r0, r3
 8001642:	f7ff fe2f 	bl	80012a4 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 8001646:	bf00      	nop
 8001648:	bf00      	nop
}
 800164a:	3708      	adds	r7, #8
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}

08001650 <System_Init>:

static void System_Init(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	af00      	add	r7, sp, #0
  Init_Smps();
 8001654:	f7ff ff98 	bl	8001588 <Init_Smps>

  Init_Exti();
 8001658:	f7ff ff9d 	bl	8001596 <Init_Exti>

  Init_Rtc();
 800165c:	f000 f802 	bl	8001664 <Init_Rtc>

  return;
 8001660:	bf00      	nop
}
 8001662:	bd80      	pop	{r7, pc}

08001664 <Init_Rtc>:

static void Init_Rtc(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 8001668:	4805      	ldr	r0, [pc, #20]	; (8001680 <Init_Rtc+0x1c>)
 800166a:	f7ff ff4a 	bl	8001502 <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 800166e:	2100      	movs	r1, #0
 8001670:	4803      	ldr	r0, [pc, #12]	; (8001680 <Init_Rtc+0x1c>)
 8001672:	f7ff ff56 	bl	8001522 <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 8001676:	4802      	ldr	r0, [pc, #8]	; (8001680 <Init_Rtc+0x1c>)
 8001678:	f7ff ff36 	bl	80014e8 <LL_RTC_EnableWriteProtection>

  return;
 800167c:	bf00      	nop
}
 800167e:	bd80      	pop	{r7, pc}
 8001680:	40002800 	.word	0x40002800

08001684 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8001688:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800168c:	f7ff fe28 	bl	80012e0 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 8001690:	f010 fb2a 	bl	8011ce8 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 8001694:	2004      	movs	r0, #4
 8001696:	f7ff fddb 	bl	8001250 <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */

  return;
 800169a:	bf00      	nop
}
 800169c:	bd80      	pop	{r7, pc}
	...

080016a0 <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b088      	sub	sp, #32
 80016a4:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 80016a6:	f00d fe31 	bl	800f30c <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc);
 80016aa:	4a11      	ldr	r2, [pc, #68]	; (80016f0 <appe_Tl_Init+0x50>)
 80016ac:	2100      	movs	r1, #0
 80016ae:	2008      	movs	r0, #8
 80016b0:	f010 fc58 	bl	8011f64 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 80016b4:	4b0f      	ldr	r3, [pc, #60]	; (80016f4 <appe_Tl_Init+0x54>)
 80016b6:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 80016b8:	4b0f      	ldr	r3, [pc, #60]	; (80016f8 <appe_Tl_Init+0x58>)
 80016ba:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 80016bc:	463b      	mov	r3, r7
 80016be:	4619      	mov	r1, r3
 80016c0:	480e      	ldr	r0, [pc, #56]	; (80016fc <appe_Tl_Init+0x5c>)
 80016c2:	f00d fce9 	bl	800f098 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 80016c6:	4b0e      	ldr	r3, [pc, #56]	; (8001700 <appe_Tl_Init+0x60>)
 80016c8:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 80016ca:	4b0e      	ldr	r3, [pc, #56]	; (8001704 <appe_Tl_Init+0x64>)
 80016cc:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 80016ce:	4b0e      	ldr	r3, [pc, #56]	; (8001708 <appe_Tl_Init+0x68>)
 80016d0:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 80016d2:	f240 533c 	movw	r3, #1340	; 0x53c
 80016d6:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 80016d8:	f107 0308 	add.w	r3, r7, #8
 80016dc:	4618      	mov	r0, r3
 80016de:	f00d ff57 	bl	800f590 <TL_MM_Init>

  TL_Enable();
 80016e2:	f00d fe0d 	bl	800f300 <TL_Enable>

  return;
 80016e6:	bf00      	nop
}
 80016e8:	3720      	adds	r7, #32
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	0800f0d1 	.word	0x0800f0d1
 80016f4:	20030734 	.word	0x20030734
 80016f8:	0800170d 	.word	0x0800170d
 80016fc:	08001725 	.word	0x08001725
 8001700:	2003094c 	.word	0x2003094c
 8001704:	20030840 	.word	0x20030840
 8001708:	200301f8 	.word	0x200301f8

0800170c <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 800170c:	b480      	push	{r7}
 800170e:	b083      	sub	sp, #12
 8001710:	af00      	add	r7, sp, #0
 8001712:	4603      	mov	r3, r0
 8001714:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 8001716:	bf00      	nop
}
 8001718:	370c      	adds	r7, #12
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr
	...

08001724 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b088      	sub	sp, #32
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	330b      	adds	r3, #11
 8001732:	61fb      	str	r3, [r7, #28]

  switch(p_sys_event->subevtcode)
 8001734:	69fb      	ldr	r3, [r7, #28]
 8001736:	881b      	ldrh	r3, [r3, #0]
 8001738:	b29b      	uxth	r3, r3
 800173a:	f5a3 4312 	sub.w	r3, r3, #37376	; 0x9200
 800173e:	2b07      	cmp	r3, #7
 8001740:	d860      	bhi.n	8001804 <APPE_SysUserEvtRx+0xe0>
 8001742:	a201      	add	r2, pc, #4	; (adr r2, 8001748 <APPE_SysUserEvtRx+0x24>)
 8001744:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001748:	08001769 	.word	0x08001769
 800174c:	080017ab 	.word	0x080017ab
 8001750:	080017b9 	.word	0x080017b9
 8001754:	08001805 	.word	0x08001805
 8001758:	080017d5 	.word	0x080017d5
 800175c:	080017e5 	.word	0x080017e5
 8001760:	080017ed 	.word	0x080017ed
 8001764:	080017fd 	.word	0x080017fd
  {
  case SHCI_SUB_EVT_CODE_READY:
    /* Read the firmware version of both the wireless firmware and the FUS */
    SHCI_GetWirelessFwInfo(&WirelessInfo);
 8001768:	f107 030c 	add.w	r3, r7, #12
 800176c:	4618      	mov	r0, r3
 800176e:	f00d fa4f 	bl	800ec10 <SHCI_GetWirelessFwInfo>
    APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
 8001772:	7b3b      	ldrb	r3, [r7, #12]
 8001774:	4619      	mov	r1, r3
 8001776:	7b7b      	ldrb	r3, [r7, #13]
 8001778:	461a      	mov	r2, r3
 800177a:	7bbb      	ldrb	r3, [r7, #14]
 800177c:	4824      	ldr	r0, [pc, #144]	; (8001810 <APPE_SysUserEvtRx+0xec>)
 800177e:	f012 f9e7 	bl	8013b50 <iprintf>
    APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
 8001782:	7c3b      	ldrb	r3, [r7, #16]
 8001784:	4619      	mov	r1, r3
 8001786:	4823      	ldr	r0, [pc, #140]	; (8001814 <APPE_SysUserEvtRx+0xf0>)
 8001788:	f012 f9e2 	bl	8013b50 <iprintf>
    APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);
 800178c:	7dbb      	ldrb	r3, [r7, #22]
 800178e:	4619      	mov	r1, r3
 8001790:	7dfb      	ldrb	r3, [r7, #23]
 8001792:	461a      	mov	r2, r3
 8001794:	7e3b      	ldrb	r3, [r7, #24]
 8001796:	4820      	ldr	r0, [pc, #128]	; (8001818 <APPE_SysUserEvtRx+0xf4>)
 8001798:	f012 f9da 	bl	8013b50 <iprintf>

    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
 800179c:	481f      	ldr	r0, [pc, #124]	; (800181c <APPE_SysUserEvtRx+0xf8>)
 800179e:	f012 f9d7 	bl	8013b50 <iprintf>
    APPE_SysEvtReadyProcessing(pPayload);
 80017a2:	6878      	ldr	r0, [r7, #4]
 80017a4:	f000 f870 	bl	8001888 <APPE_SysEvtReadyProcessing>
    break;
 80017a8:	e02d      	b.n	8001806 <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
 80017aa:	481d      	ldr	r0, [pc, #116]	; (8001820 <APPE_SysUserEvtRx+0xfc>)
 80017ac:	f012 f9d0 	bl	8013b50 <iprintf>
    APPE_SysEvtError(pPayload);
 80017b0:	6878      	ldr	r0, [r7, #4]
 80017b2:	f000 f843 	bl	800183c <APPE_SysEvtError>
    break;
 80017b6:	e026      	b.n	8001806 <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_BLE_NVM_RAM_UPDATE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_BLE_NVM_RAM_UPDATE -- BLE NVM RAM HAS BEEN UPDATED BY CPU2 \n");
 80017b8:	481a      	ldr	r0, [pc, #104]	; (8001824 <APPE_SysUserEvtRx+0x100>)
 80017ba:	f012 fa65 	bl	8013c88 <puts>
    APP_DBG_MSG("     - StartAddress = %lx , Size = %ld\n",
                ((SHCI_C2_BleNvmRamUpdate_Evt_t*)p_sys_event->payload)->StartAddress,
 80017be:	69fb      	ldr	r3, [r7, #28]
 80017c0:	3302      	adds	r3, #2
    APP_DBG_MSG("     - StartAddress = %lx , Size = %ld\n",
 80017c2:	6819      	ldr	r1, [r3, #0]
                ((SHCI_C2_BleNvmRamUpdate_Evt_t*)p_sys_event->payload)->Size);
 80017c4:	69fb      	ldr	r3, [r7, #28]
 80017c6:	3302      	adds	r3, #2
    APP_DBG_MSG("     - StartAddress = %lx , Size = %ld\n",
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	461a      	mov	r2, r3
 80017cc:	4816      	ldr	r0, [pc, #88]	; (8001828 <APPE_SysUserEvtRx+0x104>)
 80017ce:	f012 f9bf 	bl	8013b50 <iprintf>
    break;
 80017d2:	e018      	b.n	8001806 <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_NVM_START_WRITE:
    APP_DBG_MSG("==>> SHCI_SUB_EVT_NVM_START_WRITE : NumberOfWords = %ld\n",
                ((SHCI_C2_NvmStartWrite_Evt_t*)p_sys_event->payload)->NumberOfWords);
 80017d4:	69fb      	ldr	r3, [r7, #28]
 80017d6:	3302      	adds	r3, #2
    APP_DBG_MSG("==>> SHCI_SUB_EVT_NVM_START_WRITE : NumberOfWords = %ld\n",
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4619      	mov	r1, r3
 80017dc:	4813      	ldr	r0, [pc, #76]	; (800182c <APPE_SysUserEvtRx+0x108>)
 80017de:	f012 f9b7 	bl	8013b50 <iprintf>
    break;
 80017e2:	e010      	b.n	8001806 <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_NVM_END_WRITE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_WRITE\n\r");
 80017e4:	4812      	ldr	r0, [pc, #72]	; (8001830 <APPE_SysUserEvtRx+0x10c>)
 80017e6:	f012 f9b3 	bl	8013b50 <iprintf>
    break;
 80017ea:	e00c      	b.n	8001806 <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_NVM_START_ERASE:
    APP_DBG_MSG("==>>SHCI_SUB_EVT_NVM_START_ERASE : NumberOfSectors = %ld\n",
                ((SHCI_C2_NvmStartErase_Evt_t*)p_sys_event->payload)->NumberOfSectors);
 80017ec:	69fb      	ldr	r3, [r7, #28]
 80017ee:	3302      	adds	r3, #2
    APP_DBG_MSG("==>>SHCI_SUB_EVT_NVM_START_ERASE : NumberOfSectors = %ld\n",
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4619      	mov	r1, r3
 80017f4:	480f      	ldr	r0, [pc, #60]	; (8001834 <APPE_SysUserEvtRx+0x110>)
 80017f6:	f012 f9ab 	bl	8013b50 <iprintf>
    break;
 80017fa:	e004      	b.n	8001806 <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
 80017fc:	480e      	ldr	r0, [pc, #56]	; (8001838 <APPE_SysUserEvtRx+0x114>)
 80017fe:	f012 f9a7 	bl	8013b50 <iprintf>
    break;
 8001802:	e000      	b.n	8001806 <APPE_SysUserEvtRx+0xe2>

  default:
    break;
 8001804:	bf00      	nop
  }

  return;
 8001806:	bf00      	nop
}
 8001808:	3720      	adds	r7, #32
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	08016064 	.word	0x08016064
 8001814:	08016088 	.word	0x08016088
 8001818:	080160a4 	.word	0x080160a4
 800181c:	080160bc 	.word	0x080160bc
 8001820:	080160dc 	.word	0x080160dc
 8001824:	08016100 	.word	0x08016100
 8001828:	08016150 	.word	0x08016150
 800182c:	08016178 	.word	0x08016178
 8001830:	080161b4 	.word	0x080161b4
 8001834:	080161d8 	.word	0x080161d8
 8001838:	08016214 	.word	0x08016214

0800183c <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(void * pPayload)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b084      	sub	sp, #16
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	330b      	adds	r3, #11
 800184a:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	3302      	adds	r3, #2
 8001850:	60bb      	str	r3, [r7, #8]

  APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON %x \n\r",(*p_sys_error_code));
 8001852:	68bb      	ldr	r3, [r7, #8]
 8001854:	781b      	ldrb	r3, [r3, #0]
 8001856:	4619      	mov	r1, r3
 8001858:	4808      	ldr	r0, [pc, #32]	; (800187c <APPE_SysEvtError+0x40>)
 800185a:	f012 f979 	bl	8013b50 <iprintf>

  if ((*p_sys_error_code) == ERR_BLE_INIT)
 800185e:	68bb      	ldr	r3, [r7, #8]
 8001860:	781b      	ldrb	r3, [r3, #0]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d103      	bne.n	800186e <APPE_SysEvtError+0x32>
  {
    /* Error during BLE stack initialization */
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - ERR_BLE_INIT \n");
 8001866:	4806      	ldr	r0, [pc, #24]	; (8001880 <APPE_SysEvtError+0x44>)
 8001868:	f012 fa0e 	bl	8013c88 <puts>
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 800186c:	e003      	b.n	8001876 <APPE_SysEvtError+0x3a>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
 800186e:	4805      	ldr	r0, [pc, #20]	; (8001884 <APPE_SysEvtError+0x48>)
 8001870:	f012 fa0a 	bl	8013c88 <puts>
  return;
 8001874:	bf00      	nop
}
 8001876:	3710      	adds	r7, #16
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}
 800187c:	08016238 	.word	0x08016238
 8001880:	08016268 	.word	0x08016268
 8001884:	080162a4 	.word	0x080162a4

08001888 <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void * pPayload)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b08a      	sub	sp, #40	; 0x28
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 8001890:	f107 0308 	add.w	r3, r7, #8
 8001894:	2200      	movs	r2, #0
 8001896:	601a      	str	r2, [r3, #0]
 8001898:	605a      	str	r2, [r3, #4]
 800189a:	609a      	str	r2, [r3, #8]
 800189c:	60da      	str	r2, [r3, #12]
  uint32_t RevisionID=0;
 800189e:	2300      	movs	r3, #0
 80018a0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t DeviceID=0;
 80018a2:	2300      	movs	r3, #0
 80018a4:	623b      	str	r3, [r7, #32]

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	330b      	adds	r3, #11
 80018ac:	61fb      	str	r3, [r7, #28]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 80018ae:	69fb      	ldr	r3, [r7, #28]
 80018b0:	3302      	adds	r3, #2
 80018b2:	61bb      	str	r3, [r7, #24]

  if (p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 80018b4:	69bb      	ldr	r3, [r7, #24]
 80018b6:	781b      	ldrb	r3, [r3, #0]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d128      	bne.n	800190e <APPE_SysEvtReadyProcessing+0x86>
  {
    /**
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");
 80018bc:	481d      	ldr	r0, [pc, #116]	; (8001934 <APPE_SysEvtReadyProcessing+0xac>)
 80018be:	f012 f9e3 	bl	8013c88 <puts>

    /* Traces channel initialization */
    APPD_EnableCPU2();
 80018c2:	f7ff fbe7 	bl	8001094 <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 80018c6:	230f      	movs	r3, #15
 80018c8:	723b      	strb	r3, [r7, #8]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 80018ca:	237f      	movs	r3, #127	; 0x7f
 80018cc:	72bb      	strb	r3, [r7, #10]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 80018ce:	f7ff fd8b 	bl	80013e8 <LL_DBGMCU_GetRevisionID>
 80018d2:	6278      	str	r0, [r7, #36]	; 0x24

    APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);
 80018d4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80018d6:	4818      	ldr	r0, [pc, #96]	; (8001938 <APPE_SysEvtReadyProcessing+0xb0>)
 80018d8:	f012 f93a 	bl	8013b50 <iprintf>

    config_param.RevisionID = (uint16_t)RevisionID;
 80018dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018de:	b29b      	uxth	r3, r3
 80018e0:	82bb      	strh	r3, [r7, #20]

    DeviceID = LL_DBGMCU_GetDeviceID();
 80018e2:	f7ff fd73 	bl	80013cc <LL_DBGMCU_GetDeviceID>
 80018e6:	6238      	str	r0, [r7, #32]
    APP_DBG_MSG(">>== DBGMCU_GetDeviceID= %lx \n\r", DeviceID);
 80018e8:	6a39      	ldr	r1, [r7, #32]
 80018ea:	4814      	ldr	r0, [pc, #80]	; (800193c <APPE_SysEvtReadyProcessing+0xb4>)
 80018ec:	f012 f930 	bl	8013b50 <iprintf>
    config_param.DeviceID = (uint16_t)DeviceID;
 80018f0:	6a3b      	ldr	r3, [r7, #32]
 80018f2:	b29b      	uxth	r3, r3
 80018f4:	82fb      	strh	r3, [r7, #22]
    (void)SHCI_C2_Config(&config_param);
 80018f6:	f107 0308 	add.w	r3, r7, #8
 80018fa:	4618      	mov	r0, r3
 80018fc:	f00d f972 	bl	800ebe4 <SHCI_C2_Config>

    APP_BLE_Init();
 8001900:	f00e fd08 	bl	8010314 <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8001904:	2100      	movs	r1, #0
 8001906:	2001      	movs	r0, #1
 8001908:	f010 fa00 	bl	8011d0c <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
  }

  return;
 800190c:	e00e      	b.n	800192c <APPE_SysEvtReadyProcessing+0xa4>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 800190e:	69bb      	ldr	r3, [r7, #24]
 8001910:	781b      	ldrb	r3, [r3, #0]
 8001912:	2b01      	cmp	r3, #1
 8001914:	d106      	bne.n	8001924 <APPE_SysEvtReadyProcessing+0x9c>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - FUS_FW_RUNNING \n\r");
 8001916:	480a      	ldr	r0, [pc, #40]	; (8001940 <APPE_SysEvtReadyProcessing+0xb8>)
 8001918:	f012 f91a 	bl	8013b50 <iprintf>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2200      	movs	r2, #0
 8001920:	701a      	strb	r2, [r3, #0]
  return;
 8001922:	e003      	b.n	800192c <APPE_SysEvtReadyProcessing+0xa4>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
 8001924:	4807      	ldr	r0, [pc, #28]	; (8001944 <APPE_SysEvtReadyProcessing+0xbc>)
 8001926:	f012 f913 	bl	8013b50 <iprintf>
  return;
 800192a:	bf00      	nop
}
 800192c:	3728      	adds	r7, #40	; 0x28
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	080162dc 	.word	0x080162dc
 8001938:	080162f8 	.word	0x080162f8
 800193c:	0801631c 	.word	0x0801631c
 8001940:	0801633c 	.word	0x0801633c
 8001944:	08016370 	.word	0x08016370

08001948 <HAL_Delay>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void HAL_Delay(uint32_t Delay)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b084      	sub	sp, #16
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001950:	f004 feac 	bl	80066ac <HAL_GetTick>
 8001954:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001960:	d00a      	beq.n	8001978 <HAL_Delay+0x30>
  {
    wait += HAL_GetTickFreq();
 8001962:	f004 febb 	bl	80066dc <HAL_GetTickFreq>
 8001966:	4603      	mov	r3, r0
 8001968:	461a      	mov	r2, r3
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	4413      	add	r3, r2
 800196e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001970:	e002      	b.n	8001978 <HAL_Delay+0x30>
  {
    /************************************************************************************
     * ENTER SLEEP MODE
     ***********************************************************************************/
    LL_LPM_EnableSleep(); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 8001972:	f7ff fda9 	bl	80014c8 <LL_LPM_EnableSleep>
     */
  #if defined (__CC_ARM)
    __force_stores();
  #endif /* __CC_ARM */

    __WFI();
 8001976:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 8001978:	f004 fe98 	bl	80066ac <HAL_GetTick>
 800197c:	4602      	mov	r2, r0
 800197e:	68bb      	ldr	r3, [r7, #8]
 8001980:	1ad3      	subs	r3, r2, r3
 8001982:	68fa      	ldr	r2, [r7, #12]
 8001984:	429a      	cmp	r2, r3
 8001986:	d8f4      	bhi.n	8001972 <HAL_Delay+0x2a>
  }
}
 8001988:	bf00      	nop
 800198a:	bf00      	nop
 800198c:	3710      	adds	r7, #16
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}

08001992 <MX_APPE_Process>:

void MX_APPE_Process(void)
{
 8001992:	b580      	push	{r7, lr}
 8001994:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8001996:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800199a:	f010 f9e7 	bl	8011d6c <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 800199e:	bf00      	nop
 80019a0:	bd80      	pop	{r7, pc}

080019a2 <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 80019a2:	b480      	push	{r7}
 80019a4:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 80019a6:	bf00      	nop
}
 80019a8:	46bd      	mov	sp, r7
 80019aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ae:	4770      	bx	lr

080019b0 <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle(UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b082      	sub	sp, #8
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
 80019b8:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 80019ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80019be:	f010 f9d5 	bl	8011d6c <UTIL_SEQ_Run>

  return;
 80019c2:	bf00      	nop
}
 80019c4:	3708      	adds	r7, #8
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}

080019ca <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 80019ca:	b580      	push	{r7, lr}
 80019cc:	b082      	sub	sp, #8
 80019ce:	af00      	add	r7, sp, #0
 80019d0:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 80019d2:	2100      	movs	r1, #0
 80019d4:	2008      	movs	r0, #8
 80019d6:	f010 fae7 	bl	8011fa8 <UTIL_SEQ_SetTask>
  return;
 80019da:	bf00      	nop
}
 80019dc:	3708      	adds	r7, #8
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}

080019e2 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 80019e2:	b580      	push	{r7, lr}
 80019e4:	b082      	sub	sp, #8
 80019e6:	af00      	add	r7, sp, #0
 80019e8:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 80019ea:	2002      	movs	r0, #2
 80019ec:	f010 fb48 	bl	8012080 <UTIL_SEQ_SetEvt>
  return;
 80019f0:	bf00      	nop
}
 80019f2:	3708      	adds	r7, #8
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}

080019f8 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b082      	sub	sp, #8
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8001a00:	2002      	movs	r0, #2
 8001a02:	f010 fb5d 	bl	80120c0 <UTIL_SEQ_WaitEvt>
  return;
 8001a06:	bf00      	nop
}
 8001a08:	3708      	adds	r7, #8
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}

08001a0e <Error>:
uint8_t value = 0;
uint32_t value32 = 0;
int32_t temper_int;
BME280_CalibData CalibData;

void Error(void) {
 8001a0e:	b480      	push	{r7}
 8001a10:	af00      	add	r7, sp, #0
//    while (1);
}
 8001a12:	bf00      	nop
 8001a14:	46bd      	mov	sp, r7
 8001a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1a:	4770      	bx	lr

08001a1c <BME280_ReadStatus>:

uint8_t BME280_ReadStatus(void) {
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b082      	sub	sp, #8
 8001a20:	af00      	add	r7, sp, #0
    //clear unuset bits
    uint8_t res = BME280_ReadReg(BME280_REGISTER_STATUS) & 0x09;
 8001a22:	20f3      	movs	r0, #243	; 0xf3
 8001a24:	f000 f900 	bl	8001c28 <BME280_ReadReg>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	f003 0309 	and.w	r3, r3, #9
 8001a2e:	71fb      	strb	r3, [r7, #7]
    return res;
 8001a30:	79fb      	ldrb	r3, [r7, #7]
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	3708      	adds	r7, #8
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
	...

08001a3c <BME280_Init>:

void BME280_Init(void) {
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	af00      	add	r7, sp, #0
    value = BME280_ReadReg(BME280_REG_ID);
 8001a40:	20d0      	movs	r0, #208	; 0xd0
 8001a42:	f000 f8f1 	bl	8001c28 <BME280_ReadReg>
 8001a46:	4603      	mov	r3, r0
 8001a48:	461a      	mov	r2, r3
 8001a4a:	4b1e      	ldr	r3, [pc, #120]	; (8001ac4 <BME280_Init+0x88>)
 8001a4c:	701a      	strb	r2, [r3, #0]
    if (value != BME280_ID) {
 8001a4e:	4b1d      	ldr	r3, [pc, #116]	; (8001ac4 <BME280_Init+0x88>)
 8001a50:	781b      	ldrb	r3, [r3, #0]
 8001a52:	2b60      	cmp	r3, #96	; 0x60
 8001a54:	d001      	beq.n	8001a5a <BME280_Init+0x1e>
        Error();
 8001a56:	f7ff ffda 	bl	8001a0e <Error>
    }
    BME280_WriteReg(BME280_REG_SOFTRESET, BME280_SOFTRESET_VALUE);
 8001a5a:	21b6      	movs	r1, #182	; 0xb6
 8001a5c:	20e0      	movs	r0, #224	; 0xe0
 8001a5e:	f000 f8d1 	bl	8001c04 <BME280_WriteReg>
    while (BME280_ReadStatus() & BME280_STATUS_IM_UPDATE);
 8001a62:	bf00      	nop
 8001a64:	f7ff ffda 	bl	8001a1c <BME280_ReadStatus>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	f003 0301 	and.w	r3, r3, #1
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d1f8      	bne.n	8001a64 <BME280_Init+0x28>
    BME280_ReadCoefficients();
 8001a72:	f000 f90b 	bl	8001c8c <BME280_ReadCoefficients>
    BME280_SetStandby(BME280_STBY_1000);
 8001a76:	20a0      	movs	r0, #160	; 0xa0
 8001a78:	f000 f994 	bl	8001da4 <BME280_SetStandby>
    BME280_SetFilter(BME280_FILTER_4);
 8001a7c:	2008      	movs	r0, #8
 8001a7e:	f000 f9b0 	bl	8001de2 <BME280_SetFilter>
    BME280_SetOversamplingTemper(BME280_OSRS_T_x4);
 8001a82:	2060      	movs	r0, #96	; 0x60
 8001a84:	f000 f9cc 	bl	8001e20 <BME280_SetOversamplingTemper>
    BME280_SetOversamplingPressure(BME280_OSRS_P_x1);
 8001a88:	2004      	movs	r0, #4
 8001a8a:	f000 f9e8 	bl	8001e5e <BME280_SetOversamplingPressure>
    BME280_SetOversamplingHum(BME280_OSRS_H_x1);
 8001a8e:	2001      	movs	r0, #1
 8001a90:	f000 fa04 	bl	8001e9c <BME280_SetOversamplingHum>
    value32 = BME280_ReadReg(BME280_REG_CTRL_MEAS);
 8001a94:	20f4      	movs	r0, #244	; 0xf4
 8001a96:	f000 f8c7 	bl	8001c28 <BME280_ReadReg>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	461a      	mov	r2, r3
 8001a9e:	4b0a      	ldr	r3, [pc, #40]	; (8001ac8 <BME280_Init+0x8c>)
 8001aa0:	601a      	str	r2, [r3, #0]
    value32 |= BME280_ReadReg(BME280_REG_CTRL_HUM) << 8;
 8001aa2:	20f2      	movs	r0, #242	; 0xf2
 8001aa4:	f000 f8c0 	bl	8001c28 <BME280_ReadReg>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	021b      	lsls	r3, r3, #8
 8001aac:	461a      	mov	r2, r3
 8001aae:	4b06      	ldr	r3, [pc, #24]	; (8001ac8 <BME280_Init+0x8c>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4313      	orrs	r3, r2
 8001ab4:	4a04      	ldr	r2, [pc, #16]	; (8001ac8 <BME280_Init+0x8c>)
 8001ab6:	6013      	str	r3, [r2, #0]
    BME280_SetMode(BME280_MODE_NORMAL);
 8001ab8:	2003      	movs	r0, #3
 8001aba:	f000 fa18 	bl	8001eee <BME280_SetMode>
}
 8001abe:	bf00      	nop
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	20000264 	.word	0x20000264
 8001ac8:	20000268 	.word	0x20000268

08001acc <I2Cx_WriteData>:

void I2Cx_WriteData(uint16_t Addr, uint8_t Reg, uint8_t Value) {
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b088      	sub	sp, #32
 8001ad0:	af04      	add	r7, sp, #16
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	80fb      	strh	r3, [r7, #6]
 8001ad6:	460b      	mov	r3, r1
 8001ad8:	717b      	strb	r3, [r7, #5]
 8001ada:	4613      	mov	r3, r2
 8001adc:	713b      	strb	r3, [r7, #4]
    HAL_StatusTypeDef status = HAL_OK;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	73fb      	strb	r3, [r7, #15]
    status = HAL_I2C_Mem_Write(&hi2c3, Addr, (uint16_t) Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, 0x10000);
 8001ae2:	797b      	ldrb	r3, [r7, #5]
 8001ae4:	b29a      	uxth	r2, r3
 8001ae6:	88f9      	ldrh	r1, [r7, #6]
 8001ae8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001aec:	9302      	str	r3, [sp, #8]
 8001aee:	2301      	movs	r3, #1
 8001af0:	9301      	str	r3, [sp, #4]
 8001af2:	1d3b      	adds	r3, r7, #4
 8001af4:	9300      	str	r3, [sp, #0]
 8001af6:	2301      	movs	r3, #1
 8001af8:	4806      	ldr	r0, [pc, #24]	; (8001b14 <I2Cx_WriteData+0x48>)
 8001afa:	f006 faf3 	bl	80080e4 <HAL_I2C_Mem_Write>
 8001afe:	4603      	mov	r3, r0
 8001b00:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK) Error();
 8001b02:	7bfb      	ldrb	r3, [r7, #15]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d001      	beq.n	8001b0c <I2Cx_WriteData+0x40>
 8001b08:	f7ff ff81 	bl	8001a0e <Error>
}
 8001b0c:	bf00      	nop
 8001b0e:	3710      	adds	r7, #16
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	20000460 	.word	0x20000460

08001b18 <I2Cx_ReadData>:

//------------------------------------------------

uint8_t I2Cx_ReadData(uint16_t Addr, uint8_t Reg) {
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b088      	sub	sp, #32
 8001b1c:	af04      	add	r7, sp, #16
 8001b1e:	4603      	mov	r3, r0
 8001b20:	460a      	mov	r2, r1
 8001b22:	80fb      	strh	r3, [r7, #6]
 8001b24:	4613      	mov	r3, r2
 8001b26:	717b      	strb	r3, [r7, #5]
    HAL_StatusTypeDef status = HAL_OK;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	73fb      	strb	r3, [r7, #15]
    uint8_t value = 0;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	73bb      	strb	r3, [r7, #14]
    status = HAL_I2C_Mem_Read(&hi2c3, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, 0x10000);
 8001b30:	797b      	ldrb	r3, [r7, #5]
 8001b32:	b29a      	uxth	r2, r3
 8001b34:	88f9      	ldrh	r1, [r7, #6]
 8001b36:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b3a:	9302      	str	r3, [sp, #8]
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	9301      	str	r3, [sp, #4]
 8001b40:	f107 030e 	add.w	r3, r7, #14
 8001b44:	9300      	str	r3, [sp, #0]
 8001b46:	2301      	movs	r3, #1
 8001b48:	4807      	ldr	r0, [pc, #28]	; (8001b68 <I2Cx_ReadData+0x50>)
 8001b4a:	f006 fbdf 	bl	800830c <HAL_I2C_Mem_Read>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK) Error();
 8001b52:	7bfb      	ldrb	r3, [r7, #15]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d001      	beq.n	8001b5c <I2Cx_ReadData+0x44>
 8001b58:	f7ff ff59 	bl	8001a0e <Error>
    return value;
 8001b5c:	7bbb      	ldrb	r3, [r7, #14]
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	3710      	adds	r7, #16
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	20000460 	.word	0x20000460

08001b6c <I2Cx_ReadData16>:

void I2Cx_ReadData16(uint16_t Addr, uint8_t Reg, uint16_t *Value) {
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b088      	sub	sp, #32
 8001b70:	af04      	add	r7, sp, #16
 8001b72:	4603      	mov	r3, r0
 8001b74:	603a      	str	r2, [r7, #0]
 8001b76:	80fb      	strh	r3, [r7, #6]
 8001b78:	460b      	mov	r3, r1
 8001b7a:	717b      	strb	r3, [r7, #5]
    HAL_StatusTypeDef status = HAL_OK;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	73fb      	strb	r3, [r7, #15]
    status = HAL_I2C_Mem_Read(&hi2c3, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t *) Value, 2, 0x10000);
 8001b80:	797b      	ldrb	r3, [r7, #5]
 8001b82:	b29a      	uxth	r2, r3
 8001b84:	88f9      	ldrh	r1, [r7, #6]
 8001b86:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b8a:	9302      	str	r3, [sp, #8]
 8001b8c:	2302      	movs	r3, #2
 8001b8e:	9301      	str	r3, [sp, #4]
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	9300      	str	r3, [sp, #0]
 8001b94:	2301      	movs	r3, #1
 8001b96:	4807      	ldr	r0, [pc, #28]	; (8001bb4 <I2Cx_ReadData16+0x48>)
 8001b98:	f006 fbb8 	bl	800830c <HAL_I2C_Mem_Read>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK) Error();
 8001ba0:	7bfb      	ldrb	r3, [r7, #15]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d001      	beq.n	8001baa <I2Cx_ReadData16+0x3e>
 8001ba6:	f7ff ff32 	bl	8001a0e <Error>
}
 8001baa:	bf00      	nop
 8001bac:	3710      	adds	r7, #16
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	20000460 	.word	0x20000460

08001bb8 <I2Cx_ReadData24>:

//------------------------------------------------

void I2Cx_ReadData24(uint16_t Addr, uint8_t Reg, uint32_t *Value) {
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b088      	sub	sp, #32
 8001bbc:	af04      	add	r7, sp, #16
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	603a      	str	r2, [r7, #0]
 8001bc2:	80fb      	strh	r3, [r7, #6]
 8001bc4:	460b      	mov	r3, r1
 8001bc6:	717b      	strb	r3, [r7, #5]
    HAL_StatusTypeDef status = HAL_OK;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	73fb      	strb	r3, [r7, #15]
    status = HAL_I2C_Mem_Read(&hi2c3, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t *) Value, 3, 0x10000);
 8001bcc:	797b      	ldrb	r3, [r7, #5]
 8001bce:	b29a      	uxth	r2, r3
 8001bd0:	88f9      	ldrh	r1, [r7, #6]
 8001bd2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001bd6:	9302      	str	r3, [sp, #8]
 8001bd8:	2303      	movs	r3, #3
 8001bda:	9301      	str	r3, [sp, #4]
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	9300      	str	r3, [sp, #0]
 8001be0:	2301      	movs	r3, #1
 8001be2:	4807      	ldr	r0, [pc, #28]	; (8001c00 <I2Cx_ReadData24+0x48>)
 8001be4:	f006 fb92 	bl	800830c <HAL_I2C_Mem_Read>
 8001be8:	4603      	mov	r3, r0
 8001bea:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK) Error();
 8001bec:	7bfb      	ldrb	r3, [r7, #15]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d001      	beq.n	8001bf6 <I2Cx_ReadData24+0x3e>
 8001bf2:	f7ff ff0c 	bl	8001a0e <Error>
}
 8001bf6:	bf00      	nop
 8001bf8:	3710      	adds	r7, #16
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	20000460 	.word	0x20000460

08001c04 <BME280_WriteReg>:

void BME280_WriteReg(uint8_t Reg, uint8_t Value) {
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b082      	sub	sp, #8
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	460a      	mov	r2, r1
 8001c0e:	71fb      	strb	r3, [r7, #7]
 8001c10:	4613      	mov	r3, r2
 8001c12:	71bb      	strb	r3, [r7, #6]
    I2Cx_WriteData(BME280_ADDRESS, Reg, Value);
 8001c14:	79ba      	ldrb	r2, [r7, #6]
 8001c16:	79fb      	ldrb	r3, [r7, #7]
 8001c18:	4619      	mov	r1, r3
 8001c1a:	20ec      	movs	r0, #236	; 0xec
 8001c1c:	f7ff ff56 	bl	8001acc <I2Cx_WriteData>
}
 8001c20:	bf00      	nop
 8001c22:	3708      	adds	r7, #8
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}

08001c28 <BME280_ReadReg>:

uint8_t BME280_ReadReg(uint8_t Reg) {
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b084      	sub	sp, #16
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	4603      	mov	r3, r0
 8001c30:	71fb      	strb	r3, [r7, #7]
    uint8_t res = I2Cx_ReadData(BME280_ADDRESS, Reg);
 8001c32:	79fb      	ldrb	r3, [r7, #7]
 8001c34:	4619      	mov	r1, r3
 8001c36:	20ec      	movs	r0, #236	; 0xec
 8001c38:	f7ff ff6e 	bl	8001b18 <I2Cx_ReadData>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	73fb      	strb	r3, [r7, #15]
    return res;
 8001c40:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	3710      	adds	r7, #16
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}

08001c4a <BME280_ReadReg_U16>:

void BME280_ReadReg_U16(uint8_t Reg, uint16_t *Value) {
 8001c4a:	b580      	push	{r7, lr}
 8001c4c:	b082      	sub	sp, #8
 8001c4e:	af00      	add	r7, sp, #0
 8001c50:	4603      	mov	r3, r0
 8001c52:	6039      	str	r1, [r7, #0]
 8001c54:	71fb      	strb	r3, [r7, #7]
    I2Cx_ReadData16(BME280_ADDRESS, Reg, Value);
 8001c56:	79fb      	ldrb	r3, [r7, #7]
 8001c58:	683a      	ldr	r2, [r7, #0]
 8001c5a:	4619      	mov	r1, r3
 8001c5c:	20ec      	movs	r0, #236	; 0xec
 8001c5e:	f7ff ff85 	bl	8001b6c <I2Cx_ReadData16>
}
 8001c62:	bf00      	nop
 8001c64:	3708      	adds	r7, #8
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}

08001c6a <BME280_ReadReg_S16>:

void BME280_ReadReg_S16(uint8_t Reg, int16_t *Value) {
 8001c6a:	b580      	push	{r7, lr}
 8001c6c:	b082      	sub	sp, #8
 8001c6e:	af00      	add	r7, sp, #0
 8001c70:	4603      	mov	r3, r0
 8001c72:	6039      	str	r1, [r7, #0]
 8001c74:	71fb      	strb	r3, [r7, #7]
    I2Cx_ReadData16(BME280_ADDRESS, Reg, (uint16_t *) Value);
 8001c76:	79fb      	ldrb	r3, [r7, #7]
 8001c78:	683a      	ldr	r2, [r7, #0]
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	20ec      	movs	r0, #236	; 0xec
 8001c7e:	f7ff ff75 	bl	8001b6c <I2Cx_ReadData16>
}
 8001c82:	bf00      	nop
 8001c84:	3708      	adds	r7, #8
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
	...

08001c8c <BME280_ReadCoefficients>:

void BME280_ReadCoefficients(void) {
 8001c8c:	b598      	push	{r3, r4, r7, lr}
 8001c8e:	af00      	add	r7, sp, #0
    BME280_ReadReg_U16(BME280_REGISTER_DIG_T1, &CalibData.dig_T1);
 8001c90:	4937      	ldr	r1, [pc, #220]	; (8001d70 <BME280_ReadCoefficients+0xe4>)
 8001c92:	2088      	movs	r0, #136	; 0x88
 8001c94:	f7ff ffd9 	bl	8001c4a <BME280_ReadReg_U16>
//    sprintf(str1, "DIG_T1: %urn", CalibData.dig_T1);
//    HAL_UART_Transmit(&huart2, (uint8_t *) str1, strlen(str1), 0x1000);
    BME280_ReadReg_S16(BME280_REGISTER_DIG_T2, &CalibData.dig_T2);
 8001c98:	4936      	ldr	r1, [pc, #216]	; (8001d74 <BME280_ReadCoefficients+0xe8>)
 8001c9a:	208a      	movs	r0, #138	; 0x8a
 8001c9c:	f7ff ffe5 	bl	8001c6a <BME280_ReadReg_S16>
//    sprintf(str1, "DIG_T2: %drn", CalibData.dig_T2);
//    HAL_UART_Transmit(&huart2, (uint8_t *) str1, strlen(str1), 0x1000);
    BME280_ReadReg_S16(BME280_REGISTER_DIG_T3, &CalibData.dig_T3);
 8001ca0:	4935      	ldr	r1, [pc, #212]	; (8001d78 <BME280_ReadCoefficients+0xec>)
 8001ca2:	208c      	movs	r0, #140	; 0x8c
 8001ca4:	f7ff ffe1 	bl	8001c6a <BME280_ReadReg_S16>
//    sprintf(str1, "DIG_T3: %drn", CalibData.dig_T3);
//    HAL_UART_Transmit(&huart2, (uint8_t *) str1, strlen(str1), 0x1000);
    BME280_ReadReg_U16(BME280_REGISTER_DIG_P1, &CalibData.dig_P1);
 8001ca8:	4934      	ldr	r1, [pc, #208]	; (8001d7c <BME280_ReadCoefficients+0xf0>)
 8001caa:	208e      	movs	r0, #142	; 0x8e
 8001cac:	f7ff ffcd 	bl	8001c4a <BME280_ReadReg_U16>
//    sprintf(str1, "DIG_P1: %urn", CalibData.dig_P1);
//    HAL_UART_Transmit(&huart2, (uint8_t *) str1, strlen(str1), 0x1000);
    BME280_ReadReg_S16(BME280_REGISTER_DIG_P2, &CalibData.dig_P2);
 8001cb0:	4933      	ldr	r1, [pc, #204]	; (8001d80 <BME280_ReadCoefficients+0xf4>)
 8001cb2:	2090      	movs	r0, #144	; 0x90
 8001cb4:	f7ff ffd9 	bl	8001c6a <BME280_ReadReg_S16>
//    sprintf(str1, "DIG_P2: %drn", CalibData.dig_P2);
//    HAL_UART_Transmit(&huart2, (uint8_t *) str1, strlen(str1), 0x1000);
    BME280_ReadReg_S16(BME280_REGISTER_DIG_P3, &CalibData.dig_P3);
 8001cb8:	4932      	ldr	r1, [pc, #200]	; (8001d84 <BME280_ReadCoefficients+0xf8>)
 8001cba:	2092      	movs	r0, #146	; 0x92
 8001cbc:	f7ff ffd5 	bl	8001c6a <BME280_ReadReg_S16>
//    sprintf(str1, "DIG_P3: %drn", CalibData.dig_P3);
//    HAL_UART_Transmit(&huart2, (uint8_t *) str1, strlen(str1), 0x1000);
    BME280_ReadReg_S16(BME280_REGISTER_DIG_P4, &CalibData.dig_P4);
 8001cc0:	4931      	ldr	r1, [pc, #196]	; (8001d88 <BME280_ReadCoefficients+0xfc>)
 8001cc2:	2094      	movs	r0, #148	; 0x94
 8001cc4:	f7ff ffd1 	bl	8001c6a <BME280_ReadReg_S16>
//    sprintf(str1, "DIG_P4: %drn", CalibData.dig_P4);
//    HAL_UART_Transmit(&huart2, (uint8_t *) str1, strlen(str1), 0x1000);
    BME280_ReadReg_S16(BME280_REGISTER_DIG_P5, &CalibData.dig_P5);
 8001cc8:	4930      	ldr	r1, [pc, #192]	; (8001d8c <BME280_ReadCoefficients+0x100>)
 8001cca:	2096      	movs	r0, #150	; 0x96
 8001ccc:	f7ff ffcd 	bl	8001c6a <BME280_ReadReg_S16>
//    sprintf(str1, "DIG_P5: %drn", CalibData.dig_P5);
//    HAL_UART_Transmit(&huart2, (uint8_t *) str1, strlen(str1), 0x1000);
    BME280_ReadReg_S16(BME280_REGISTER_DIG_P6, &CalibData.dig_P6);
 8001cd0:	492f      	ldr	r1, [pc, #188]	; (8001d90 <BME280_ReadCoefficients+0x104>)
 8001cd2:	2098      	movs	r0, #152	; 0x98
 8001cd4:	f7ff ffc9 	bl	8001c6a <BME280_ReadReg_S16>
//    sprintf(str1, "DIG_P6: %drn", CalibData.dig_P6);
//    HAL_UART_Transmit(&huart2, (uint8_t *) str1, strlen(str1), 0x1000);
    BME280_ReadReg_S16(BME280_REGISTER_DIG_P7, &CalibData.dig_P7);
 8001cd8:	492e      	ldr	r1, [pc, #184]	; (8001d94 <BME280_ReadCoefficients+0x108>)
 8001cda:	209a      	movs	r0, #154	; 0x9a
 8001cdc:	f7ff ffc5 	bl	8001c6a <BME280_ReadReg_S16>
//    sprintf(str1, "DIG_P7: %drn", CalibData.dig_P7);
//    HAL_UART_Transmit(&huart2, (uint8_t *) str1, strlen(str1), 0x1000);
    BME280_ReadReg_S16(BME280_REGISTER_DIG_P8, &CalibData.dig_P8);
 8001ce0:	492d      	ldr	r1, [pc, #180]	; (8001d98 <BME280_ReadCoefficients+0x10c>)
 8001ce2:	209c      	movs	r0, #156	; 0x9c
 8001ce4:	f7ff ffc1 	bl	8001c6a <BME280_ReadReg_S16>
//    sprintf(str1, "DIG_P8: %drn", CalibData.dig_P8);
//    HAL_UART_Transmit(&huart2, (uint8_t *) str1, strlen(str1), 0x1000);
    BME280_ReadReg_S16(BME280_REGISTER_DIG_P9, &CalibData.dig_P9);
 8001ce8:	492c      	ldr	r1, [pc, #176]	; (8001d9c <BME280_ReadCoefficients+0x110>)
 8001cea:	209e      	movs	r0, #158	; 0x9e
 8001cec:	f7ff ffbd 	bl	8001c6a <BME280_ReadReg_S16>
//    sprintf(str1, "DIG_P9: %drn", CalibData.dig_P9);
//    HAL_UART_Transmit(&huart2, (uint8_t *) str1, strlen(str1), 0x1000);
    CalibData.dig_H1 = BME280_ReadReg(BME280_REGISTER_DIG_H1);
 8001cf0:	20a1      	movs	r0, #161	; 0xa1
 8001cf2:	f7ff ff99 	bl	8001c28 <BME280_ReadReg>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	461a      	mov	r2, r3
 8001cfa:	4b1d      	ldr	r3, [pc, #116]	; (8001d70 <BME280_ReadCoefficients+0xe4>)
 8001cfc:	761a      	strb	r2, [r3, #24]
//    sprintf(str1, "DIG_H1: %drn", CalibData.dig_H1);
//    HAL_UART_Transmit(&huart2, (uint8_t *) str1, strlen(str1), 0x1000);
    BME280_ReadReg_S16(BME280_REGISTER_DIG_H2, &CalibData.dig_H2);
 8001cfe:	4928      	ldr	r1, [pc, #160]	; (8001da0 <BME280_ReadCoefficients+0x114>)
 8001d00:	20e1      	movs	r0, #225	; 0xe1
 8001d02:	f7ff ffb2 	bl	8001c6a <BME280_ReadReg_S16>
//    sprintf(str1, "DIG_H2: %drn", CalibData.dig_H2);
//    HAL_UART_Transmit(&huart2, (uint8_t *) str1, strlen(str1), 0x1000);
    CalibData.dig_H3 = BME280_ReadReg(BME280_REGISTER_DIG_H3);
 8001d06:	20e3      	movs	r0, #227	; 0xe3
 8001d08:	f7ff ff8e 	bl	8001c28 <BME280_ReadReg>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	461a      	mov	r2, r3
 8001d10:	4b17      	ldr	r3, [pc, #92]	; (8001d70 <BME280_ReadCoefficients+0xe4>)
 8001d12:	771a      	strb	r2, [r3, #28]
//    sprintf(str1, "DIG_H3: %drn", CalibData.dig_H3);
//    HAL_UART_Transmit(&huart2, (uint8_t *) str1, strlen(str1), 0x1000);
    CalibData.dig_H4 =
            (BME280_ReadReg(BME280_REGISTER_DIG_H4) << 4) | (BME280_ReadReg(BME280_REGISTER_DIG_H4 + 1) & 0xF);
 8001d14:	20e4      	movs	r0, #228	; 0xe4
 8001d16:	f7ff ff87 	bl	8001c28 <BME280_ReadReg>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	011b      	lsls	r3, r3, #4
 8001d1e:	b21c      	sxth	r4, r3
 8001d20:	20e5      	movs	r0, #229	; 0xe5
 8001d22:	f7ff ff81 	bl	8001c28 <BME280_ReadReg>
 8001d26:	4603      	mov	r3, r0
 8001d28:	b21b      	sxth	r3, r3
 8001d2a:	f003 030f 	and.w	r3, r3, #15
 8001d2e:	b21b      	sxth	r3, r3
 8001d30:	4323      	orrs	r3, r4
 8001d32:	b21a      	sxth	r2, r3
    CalibData.dig_H4 =
 8001d34:	4b0e      	ldr	r3, [pc, #56]	; (8001d70 <BME280_ReadCoefficients+0xe4>)
 8001d36:	83da      	strh	r2, [r3, #30]
//    sprintf(str1, "DIG_H4: %drn", CalibData.dig_H4);
//    HAL_UART_Transmit(&huart2, (uint8_t *) str1, strlen(str1), 0x1000);
    CalibData.dig_H5 =
            (BME280_ReadReg(BME280_REGISTER_DIG_H5 + 1) << 4) | (BME280_ReadReg(BME280_REGISTER_DIG_H5) >> 4);
 8001d38:	20e6      	movs	r0, #230	; 0xe6
 8001d3a:	f7ff ff75 	bl	8001c28 <BME280_ReadReg>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	011b      	lsls	r3, r3, #4
 8001d42:	b21c      	sxth	r4, r3
 8001d44:	20e5      	movs	r0, #229	; 0xe5
 8001d46:	f7ff ff6f 	bl	8001c28 <BME280_ReadReg>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	091b      	lsrs	r3, r3, #4
 8001d4e:	b2db      	uxtb	r3, r3
 8001d50:	b21b      	sxth	r3, r3
 8001d52:	4323      	orrs	r3, r4
 8001d54:	b21a      	sxth	r2, r3
    CalibData.dig_H5 =
 8001d56:	4b06      	ldr	r3, [pc, #24]	; (8001d70 <BME280_ReadCoefficients+0xe4>)
 8001d58:	841a      	strh	r2, [r3, #32]
//    sprintf(str1, "DIG_H5: %drn", CalibData.dig_H5);
//    HAL_UART_Transmit(&huart2, (uint8_t *) str1, strlen(str1), 0x1000);
    CalibData.dig_H6 = (int8_t) BME280_ReadReg(BME280_REGISTER_DIG_H6);
 8001d5a:	20e7      	movs	r0, #231	; 0xe7
 8001d5c:	f7ff ff64 	bl	8001c28 <BME280_ReadReg>
 8001d60:	4603      	mov	r3, r0
 8001d62:	b25a      	sxtb	r2, r3
 8001d64:	4b02      	ldr	r3, [pc, #8]	; (8001d70 <BME280_ReadCoefficients+0xe4>)
 8001d66:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
//    sprintf(str1, "DIG_H6: %drn", CalibData.dig_H3);
//    HAL_UART_Transmit(&huart2, (uint8_t *) str1, strlen(str1), 0x1000);
}
 8001d6a:	bf00      	nop
 8001d6c:	bd98      	pop	{r3, r4, r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	20000270 	.word	0x20000270
 8001d74:	20000272 	.word	0x20000272
 8001d78:	20000274 	.word	0x20000274
 8001d7c:	20000276 	.word	0x20000276
 8001d80:	20000278 	.word	0x20000278
 8001d84:	2000027a 	.word	0x2000027a
 8001d88:	2000027c 	.word	0x2000027c
 8001d8c:	2000027e 	.word	0x2000027e
 8001d90:	20000280 	.word	0x20000280
 8001d94:	20000282 	.word	0x20000282
 8001d98:	20000284 	.word	0x20000284
 8001d9c:	20000286 	.word	0x20000286
 8001da0:	2000028a 	.word	0x2000028a

08001da4 <BME280_SetStandby>:

void BME280_SetStandby(uint8_t tsb) {
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b084      	sub	sp, #16
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	4603      	mov	r3, r0
 8001dac:	71fb      	strb	r3, [r7, #7]
    uint8_t reg;
    reg = BME280_ReadReg(BME280_REG_CONFIG) & ~BME280_STBY_MSK;
 8001dae:	20f5      	movs	r0, #245	; 0xf5
 8001db0:	f7ff ff3a 	bl	8001c28 <BME280_ReadReg>
 8001db4:	4603      	mov	r3, r0
 8001db6:	f003 031f 	and.w	r3, r3, #31
 8001dba:	73fb      	strb	r3, [r7, #15]
    reg |= tsb & BME280_STBY_MSK;
 8001dbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dc0:	f023 031f 	bic.w	r3, r3, #31
 8001dc4:	b25a      	sxtb	r2, r3
 8001dc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	b25b      	sxtb	r3, r3
 8001dce:	73fb      	strb	r3, [r7, #15]
    BME280_WriteReg(BME280_REG_CONFIG, reg);
 8001dd0:	7bfb      	ldrb	r3, [r7, #15]
 8001dd2:	4619      	mov	r1, r3
 8001dd4:	20f5      	movs	r0, #245	; 0xf5
 8001dd6:	f7ff ff15 	bl	8001c04 <BME280_WriteReg>
}
 8001dda:	bf00      	nop
 8001ddc:	3710      	adds	r7, #16
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}

08001de2 <BME280_SetFilter>:

void BME280_SetFilter(uint8_t filter) {
 8001de2:	b580      	push	{r7, lr}
 8001de4:	b084      	sub	sp, #16
 8001de6:	af00      	add	r7, sp, #0
 8001de8:	4603      	mov	r3, r0
 8001dea:	71fb      	strb	r3, [r7, #7]
    uint8_t reg;
    reg = BME280_ReadReg(BME280_REG_CONFIG) & ~BME280_FILTER_MSK;
 8001dec:	20f5      	movs	r0, #245	; 0xf5
 8001dee:	f7ff ff1b 	bl	8001c28 <BME280_ReadReg>
 8001df2:	4603      	mov	r3, r0
 8001df4:	f023 031c 	bic.w	r3, r3, #28
 8001df8:	73fb      	strb	r3, [r7, #15]
    reg |= filter & BME280_FILTER_MSK;
 8001dfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dfe:	f003 031c 	and.w	r3, r3, #28
 8001e02:	b25a      	sxtb	r2, r3
 8001e04:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	b25b      	sxtb	r3, r3
 8001e0c:	73fb      	strb	r3, [r7, #15]
    BME280_WriteReg(BME280_REG_CONFIG, reg);
 8001e0e:	7bfb      	ldrb	r3, [r7, #15]
 8001e10:	4619      	mov	r1, r3
 8001e12:	20f5      	movs	r0, #245	; 0xf5
 8001e14:	f7ff fef6 	bl	8001c04 <BME280_WriteReg>
}
 8001e18:	bf00      	nop
 8001e1a:	3710      	adds	r7, #16
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}

08001e20 <BME280_SetOversamplingTemper>:

void BME280_SetOversamplingTemper(uint8_t osrs) {
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b084      	sub	sp, #16
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	4603      	mov	r3, r0
 8001e28:	71fb      	strb	r3, [r7, #7]
    uint8_t reg;
    reg = BME280_ReadReg(BME280_REG_CTRL_MEAS) & ~BME280_OSRS_T_MSK;
 8001e2a:	20f4      	movs	r0, #244	; 0xf4
 8001e2c:	f7ff fefc 	bl	8001c28 <BME280_ReadReg>
 8001e30:	4603      	mov	r3, r0
 8001e32:	f003 031f 	and.w	r3, r3, #31
 8001e36:	73fb      	strb	r3, [r7, #15]
    reg |= osrs & BME280_OSRS_T_MSK;
 8001e38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e3c:	f023 031f 	bic.w	r3, r3, #31
 8001e40:	b25a      	sxtb	r2, r3
 8001e42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e46:	4313      	orrs	r3, r2
 8001e48:	b25b      	sxtb	r3, r3
 8001e4a:	73fb      	strb	r3, [r7, #15]
    BME280_WriteReg(BME280_REG_CTRL_MEAS, reg);
 8001e4c:	7bfb      	ldrb	r3, [r7, #15]
 8001e4e:	4619      	mov	r1, r3
 8001e50:	20f4      	movs	r0, #244	; 0xf4
 8001e52:	f7ff fed7 	bl	8001c04 <BME280_WriteReg>
}
 8001e56:	bf00      	nop
 8001e58:	3710      	adds	r7, #16
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}

08001e5e <BME280_SetOversamplingPressure>:

//------------------------------------------------
void BME280_SetOversamplingPressure(uint8_t osrs) {
 8001e5e:	b580      	push	{r7, lr}
 8001e60:	b084      	sub	sp, #16
 8001e62:	af00      	add	r7, sp, #0
 8001e64:	4603      	mov	r3, r0
 8001e66:	71fb      	strb	r3, [r7, #7]
    uint8_t reg;
    reg = BME280_ReadReg(BME280_REG_CTRL_MEAS) & ~BME280_OSRS_P_MSK;
 8001e68:	20f4      	movs	r0, #244	; 0xf4
 8001e6a:	f7ff fedd 	bl	8001c28 <BME280_ReadReg>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	f023 031c 	bic.w	r3, r3, #28
 8001e74:	73fb      	strb	r3, [r7, #15]
    reg |= osrs & BME280_OSRS_P_MSK;
 8001e76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e7a:	f003 031c 	and.w	r3, r3, #28
 8001e7e:	b25a      	sxtb	r2, r3
 8001e80:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e84:	4313      	orrs	r3, r2
 8001e86:	b25b      	sxtb	r3, r3
 8001e88:	73fb      	strb	r3, [r7, #15]
    BME280_WriteReg(BME280_REG_CTRL_MEAS, reg);
 8001e8a:	7bfb      	ldrb	r3, [r7, #15]
 8001e8c:	4619      	mov	r1, r3
 8001e8e:	20f4      	movs	r0, #244	; 0xf4
 8001e90:	f7ff feb8 	bl	8001c04 <BME280_WriteReg>
}
 8001e94:	bf00      	nop
 8001e96:	3710      	adds	r7, #16
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}

08001e9c <BME280_SetOversamplingHum>:

//------------------------------------------------
void BME280_SetOversamplingHum(uint8_t osrs) {
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b084      	sub	sp, #16
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	71fb      	strb	r3, [r7, #7]
    uint8_t reg;
    reg = BME280_ReadReg(BME280_REG_CTRL_HUM) & ~BME280_OSRS_H_MSK;
 8001ea6:	20f2      	movs	r0, #242	; 0xf2
 8001ea8:	f7ff febe 	bl	8001c28 <BME280_ReadReg>
 8001eac:	4603      	mov	r3, r0
 8001eae:	f023 0307 	bic.w	r3, r3, #7
 8001eb2:	73fb      	strb	r3, [r7, #15]
    reg |= osrs & BME280_OSRS_H_MSK;
 8001eb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eb8:	f003 0307 	and.w	r3, r3, #7
 8001ebc:	b25a      	sxtb	r2, r3
 8001ebe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	b25b      	sxtb	r3, r3
 8001ec6:	73fb      	strb	r3, [r7, #15]
    BME280_WriteReg(BME280_REG_CTRL_HUM, reg);
 8001ec8:	7bfb      	ldrb	r3, [r7, #15]
 8001eca:	4619      	mov	r1, r3
 8001ecc:	20f2      	movs	r0, #242	; 0xf2
 8001ece:	f7ff fe99 	bl	8001c04 <BME280_WriteReg>
    //The 'ctrl_hum' register needs to be written
    //after changing 'ctrl_hum' for the changes to become effwctive.
    reg = BME280_ReadReg(BME280_REG_CTRL_MEAS);
 8001ed2:	20f4      	movs	r0, #244	; 0xf4
 8001ed4:	f7ff fea8 	bl	8001c28 <BME280_ReadReg>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	73fb      	strb	r3, [r7, #15]
    BME280_WriteReg(BME280_REG_CTRL_MEAS, reg);
 8001edc:	7bfb      	ldrb	r3, [r7, #15]
 8001ede:	4619      	mov	r1, r3
 8001ee0:	20f4      	movs	r0, #244	; 0xf4
 8001ee2:	f7ff fe8f 	bl	8001c04 <BME280_WriteReg>
}
 8001ee6:	bf00      	nop
 8001ee8:	3710      	adds	r7, #16
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}

08001eee <BME280_SetMode>:

void BME280_SetMode(uint8_t mode) {
 8001eee:	b580      	push	{r7, lr}
 8001ef0:	b084      	sub	sp, #16
 8001ef2:	af00      	add	r7, sp, #0
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	71fb      	strb	r3, [r7, #7]
    uint8_t reg;
    reg = BME280_ReadReg(BME280_REG_CTRL_MEAS) & ~BME280_MODE_MSK;
 8001ef8:	20f4      	movs	r0, #244	; 0xf4
 8001efa:	f7ff fe95 	bl	8001c28 <BME280_ReadReg>
 8001efe:	4603      	mov	r3, r0
 8001f00:	f023 0303 	bic.w	r3, r3, #3
 8001f04:	73fb      	strb	r3, [r7, #15]
    reg |= mode & BME280_MODE_MSK;
 8001f06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f0a:	f003 0303 	and.w	r3, r3, #3
 8001f0e:	b25a      	sxtb	r2, r3
 8001f10:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f14:	4313      	orrs	r3, r2
 8001f16:	b25b      	sxtb	r3, r3
 8001f18:	73fb      	strb	r3, [r7, #15]
    BME280_WriteReg(BME280_REG_CTRL_MEAS, reg);
 8001f1a:	7bfb      	ldrb	r3, [r7, #15]
 8001f1c:	4619      	mov	r1, r3
 8001f1e:	20f4      	movs	r0, #244	; 0xf4
 8001f20:	f7ff fe70 	bl	8001c04 <BME280_WriteReg>
}
 8001f24:	bf00      	nop
 8001f26:	3710      	adds	r7, #16
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}

08001f2c <BME280_ReadTemperature>:

//------------------------------------------------
float BME280_ReadTemperature(void) {
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b084      	sub	sp, #16
 8001f30:	af00      	add	r7, sp, #0
    float temper_float = 0.0f;
 8001f32:	f04f 0300 	mov.w	r3, #0
 8001f36:	60fb      	str	r3, [r7, #12]
    uint32_t temper_raw;
    int32_t val1, val2;
    BME280_ReadReg_BE_U24(BME280_REGISTER_TEMPDATA, &temper_raw);
 8001f38:	463b      	mov	r3, r7
 8001f3a:	4619      	mov	r1, r3
 8001f3c:	20fa      	movs	r0, #250	; 0xfa
 8001f3e:	f000 fc2d 	bl	800279c <BME280_ReadReg_BE_U24>
    temper_raw >>= 4;
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	091b      	lsrs	r3, r3, #4
 8001f46:	603b      	str	r3, [r7, #0]
    //sprintf(str1, "Temperature RAW: 0x%08Xrn", temper_raw);
    //HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);
    val1 = ((((temper_raw >> 3) - ((int32_t) CalibData.dig_T1 << 1))) *
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	08db      	lsrs	r3, r3, #3
 8001f4c:	4a20      	ldr	r2, [pc, #128]	; (8001fd0 <BME280_ReadTemperature+0xa4>)
 8001f4e:	8812      	ldrh	r2, [r2, #0]
 8001f50:	0052      	lsls	r2, r2, #1
 8001f52:	1a9b      	subs	r3, r3, r2
            ((int32_t) CalibData.dig_T2)) >> 11;
 8001f54:	4a1e      	ldr	r2, [pc, #120]	; (8001fd0 <BME280_ReadTemperature+0xa4>)
 8001f56:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
    val1 = ((((temper_raw >> 3) - ((int32_t) CalibData.dig_T1 << 1))) *
 8001f5a:	fb02 f303 	mul.w	r3, r2, r3
            ((int32_t) CalibData.dig_T2)) >> 11;
 8001f5e:	0adb      	lsrs	r3, r3, #11
    val1 = ((((temper_raw >> 3) - ((int32_t) CalibData.dig_T1 << 1))) *
 8001f60:	60bb      	str	r3, [r7, #8]
    /*val2 = (((((temper_raw>>4) - ((int32_t)CalibData.dig_T1)) *
    ((temper_raw>>4) - ((int32_t)CalibData.dig_T1))) >> 12) *
    ((int32_t)CalibData.dig_T3)) >> 14;*/
    val2 = (int32_t)(((((temper_raw >> 4) - CalibData.dig_T1) *
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	091b      	lsrs	r3, r3, #4
 8001f66:	4a1a      	ldr	r2, [pc, #104]	; (8001fd0 <BME280_ReadTemperature+0xa4>)
 8001f68:	8812      	ldrh	r2, [r2, #0]
 8001f6a:	1a9b      	subs	r3, r3, r2
                       ((temper_raw >> 4) - CalibData.dig_T1)) >> 12) * CalibData.dig_T3) >> 14;
 8001f6c:	683a      	ldr	r2, [r7, #0]
 8001f6e:	0912      	lsrs	r2, r2, #4
 8001f70:	4917      	ldr	r1, [pc, #92]	; (8001fd0 <BME280_ReadTemperature+0xa4>)
 8001f72:	8809      	ldrh	r1, [r1, #0]
 8001f74:	1a52      	subs	r2, r2, r1
    val2 = (int32_t)(((((temper_raw >> 4) - CalibData.dig_T1) *
 8001f76:	fb02 f303 	mul.w	r3, r2, r3
                       ((temper_raw >> 4) - CalibData.dig_T1)) >> 12) * CalibData.dig_T3) >> 14;
 8001f7a:	0b1b      	lsrs	r3, r3, #12
 8001f7c:	4a14      	ldr	r2, [pc, #80]	; (8001fd0 <BME280_ReadTemperature+0xa4>)
 8001f7e:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8001f82:	fb02 f303 	mul.w	r3, r2, r3
    val2 = (int32_t)(((((temper_raw >> 4) - CalibData.dig_T1) *
 8001f86:	139b      	asrs	r3, r3, #14
 8001f88:	607b      	str	r3, [r7, #4]
    temper_int = val1 + val2;
 8001f8a:	68ba      	ldr	r2, [r7, #8]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	4413      	add	r3, r2
 8001f90:	4a10      	ldr	r2, [pc, #64]	; (8001fd4 <BME280_ReadTemperature+0xa8>)
 8001f92:	6013      	str	r3, [r2, #0]
    temper_float = ((temper_int * 5 + 128) >> 8);
 8001f94:	4b0f      	ldr	r3, [pc, #60]	; (8001fd4 <BME280_ReadTemperature+0xa8>)
 8001f96:	681a      	ldr	r2, [r3, #0]
 8001f98:	4613      	mov	r3, r2
 8001f9a:	009b      	lsls	r3, r3, #2
 8001f9c:	4413      	add	r3, r2
 8001f9e:	3380      	adds	r3, #128	; 0x80
 8001fa0:	121b      	asrs	r3, r3, #8
 8001fa2:	ee07 3a90 	vmov	s15, r3
 8001fa6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001faa:	edc7 7a03 	vstr	s15, [r7, #12]
    temper_float /= 100.0f;
 8001fae:	ed97 7a03 	vldr	s14, [r7, #12]
 8001fb2:	eddf 6a09 	vldr	s13, [pc, #36]	; 8001fd8 <BME280_ReadTemperature+0xac>
 8001fb6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001fba:	edc7 7a03 	vstr	s15, [r7, #12]
    return temper_float;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	ee07 3a90 	vmov	s15, r3

}
 8001fc4:	eeb0 0a67 	vmov.f32	s0, s15
 8001fc8:	3710      	adds	r7, #16
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	bf00      	nop
 8001fd0:	20000270 	.word	0x20000270
 8001fd4:	2000026c 	.word	0x2000026c
 8001fd8:	42c80000 	.word	0x42c80000

08001fdc <BME280_ReadPressure>:

//------------------------------------------------
float BME280_ReadPressure(void) {
 8001fdc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001fe0:	b0d0      	sub	sp, #320	; 0x140
 8001fe2:	af00      	add	r7, sp, #0
    float press_float = 0.0f;
 8001fe4:	f04f 0300 	mov.w	r3, #0
 8001fe8:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
    uint32_t press_raw, pres_int;
    int64_t val1, val2, p;
    BME280_ReadTemperature(); // must be done first to get t_fine
 8001fec:	f7ff ff9e 	bl	8001f2c <BME280_ReadTemperature>
    BME280_ReadReg_BE_U24(BME280_REGISTER_PRESSUREDATA, &press_raw);
 8001ff0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001ff4:	4619      	mov	r1, r3
 8001ff6:	20f7      	movs	r0, #247	; 0xf7
 8001ff8:	f000 fbd0 	bl	800279c <BME280_ReadReg_BE_U24>
    press_raw >>= 4;
 8001ffc:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8002000:	091b      	lsrs	r3, r3, #4
 8002002:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    val1 = ((int64_t) temper_int) - 128000;
 8002006:	4bac      	ldr	r3, [pc, #688]	; (80022b8 <BME280_ReadPressure+0x2dc>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	17da      	asrs	r2, r3, #31
 800200c:	4698      	mov	r8, r3
 800200e:	4691      	mov	r9, r2
 8002010:	f5b8 33fa 	subs.w	r3, r8, #128000	; 0x1f400
 8002014:	64bb      	str	r3, [r7, #72]	; 0x48
 8002016:	f149 33ff 	adc.w	r3, r9, #4294967295	; 0xffffffff
 800201a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800201c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002020:	e9c7 234c 	strd	r2, r3, [r7, #304]	; 0x130
    val2 = val1 * val1 * (int64_t) CalibData.dig_P6;
 8002024:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8002028:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800202c:	fb03 f102 	mul.w	r1, r3, r2
 8002030:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8002034:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002038:	fb02 f303 	mul.w	r3, r2, r3
 800203c:	18ca      	adds	r2, r1, r3
 800203e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002042:	fba3 4503 	umull	r4, r5, r3, r3
 8002046:	1953      	adds	r3, r2, r5
 8002048:	461d      	mov	r5, r3
 800204a:	4b9c      	ldr	r3, [pc, #624]	; (80022bc <BME280_ReadPressure+0x2e0>)
 800204c:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8002050:	b21b      	sxth	r3, r3
 8002052:	17da      	asrs	r2, r3, #31
 8002054:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002058:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 800205c:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002060:	4603      	mov	r3, r0
 8002062:	fb03 f205 	mul.w	r2, r3, r5
 8002066:	460b      	mov	r3, r1
 8002068:	fb04 f303 	mul.w	r3, r4, r3
 800206c:	4413      	add	r3, r2
 800206e:	4602      	mov	r2, r0
 8002070:	fba4 ab02 	umull	sl, fp, r4, r2
 8002074:	445b      	add	r3, fp
 8002076:	469b      	mov	fp, r3
 8002078:	e9c7 ab4a 	strd	sl, fp, [r7, #296]	; 0x128
 800207c:	e9c7 ab4a 	strd	sl, fp, [r7, #296]	; 0x128
    val2 = val2 + ((val1 * (int64_t) CalibData.dig_P5) << 17);
 8002080:	4b8e      	ldr	r3, [pc, #568]	; (80022bc <BME280_ReadPressure+0x2e0>)
 8002082:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8002086:	b21b      	sxth	r3, r3
 8002088:	17da      	asrs	r2, r3, #31
 800208a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800208e:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002092:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002096:	e9d7 4530 	ldrd	r4, r5, [r7, #192]	; 0xc0
 800209a:	462a      	mov	r2, r5
 800209c:	fb02 f203 	mul.w	r2, r2, r3
 80020a0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80020a4:	4621      	mov	r1, r4
 80020a6:	fb01 f303 	mul.w	r3, r1, r3
 80020aa:	441a      	add	r2, r3
 80020ac:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80020b0:	4621      	mov	r1, r4
 80020b2:	fba3 1301 	umull	r1, r3, r3, r1
 80020b6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80020ba:	460b      	mov	r3, r1
 80020bc:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80020c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80020c4:	18d3      	adds	r3, r2, r3
 80020c6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80020ca:	f04f 0000 	mov.w	r0, #0
 80020ce:	f04f 0100 	mov.w	r1, #0
 80020d2:	e9d7 4544 	ldrd	r4, r5, [r7, #272]	; 0x110
 80020d6:	462b      	mov	r3, r5
 80020d8:	0459      	lsls	r1, r3, #17
 80020da:	4623      	mov	r3, r4
 80020dc:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 80020e0:	4623      	mov	r3, r4
 80020e2:	0458      	lsls	r0, r3, #17
 80020e4:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 80020e8:	1814      	adds	r4, r2, r0
 80020ea:	643c      	str	r4, [r7, #64]	; 0x40
 80020ec:	414b      	adcs	r3, r1
 80020ee:	647b      	str	r3, [r7, #68]	; 0x44
 80020f0:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 80020f4:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
    val2 = val2 + ((int64_t) CalibData.dig_P4 << 35);
 80020f8:	4b70      	ldr	r3, [pc, #448]	; (80022bc <BME280_ReadPressure+0x2e0>)
 80020fa:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80020fe:	b21b      	sxth	r3, r3
 8002100:	17da      	asrs	r2, r3, #31
 8002102:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002106:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800210a:	f04f 0000 	mov.w	r0, #0
 800210e:	f04f 0100 	mov.w	r1, #0
 8002112:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002116:	00d9      	lsls	r1, r3, #3
 8002118:	2000      	movs	r0, #0
 800211a:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800211e:	1814      	adds	r4, r2, r0
 8002120:	63bc      	str	r4, [r7, #56]	; 0x38
 8002122:	414b      	adcs	r3, r1
 8002124:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002126:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 800212a:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
    val1 = ((val1 * val1 * (int64_t) CalibData.dig_P3) >> 8) + ((val1 * (int64_t) CalibData.dig_P2) << 12);
 800212e:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8002132:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002136:	fb03 f102 	mul.w	r1, r3, r2
 800213a:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 800213e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002142:	fb02 f303 	mul.w	r3, r2, r3
 8002146:	18ca      	adds	r2, r1, r3
 8002148:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800214c:	fba3 1303 	umull	r1, r3, r3, r3
 8002150:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8002154:	460b      	mov	r3, r1
 8002156:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800215a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800215e:	18d3      	adds	r3, r2, r3
 8002160:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8002164:	4b55      	ldr	r3, [pc, #340]	; (80022bc <BME280_ReadPressure+0x2e0>)
 8002166:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800216a:	b21b      	sxth	r3, r3
 800216c:	17da      	asrs	r2, r3, #31
 800216e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002172:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8002176:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 800217a:	462b      	mov	r3, r5
 800217c:	e9d7 892c 	ldrd	r8, r9, [r7, #176]	; 0xb0
 8002180:	4642      	mov	r2, r8
 8002182:	fb02 f203 	mul.w	r2, r2, r3
 8002186:	464b      	mov	r3, r9
 8002188:	4621      	mov	r1, r4
 800218a:	fb01 f303 	mul.w	r3, r1, r3
 800218e:	4413      	add	r3, r2
 8002190:	4622      	mov	r2, r4
 8002192:	4641      	mov	r1, r8
 8002194:	fba2 1201 	umull	r1, r2, r2, r1
 8002198:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 800219c:	460a      	mov	r2, r1
 800219e:	f8c7 2100 	str.w	r2, [r7, #256]	; 0x100
 80021a2:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 80021a6:	4413      	add	r3, r2
 80021a8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80021ac:	f04f 0000 	mov.w	r0, #0
 80021b0:	f04f 0100 	mov.w	r1, #0
 80021b4:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 80021b8:	4623      	mov	r3, r4
 80021ba:	0a18      	lsrs	r0, r3, #8
 80021bc:	462b      	mov	r3, r5
 80021be:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 80021c2:	462b      	mov	r3, r5
 80021c4:	1219      	asrs	r1, r3, #8
 80021c6:	4b3d      	ldr	r3, [pc, #244]	; (80022bc <BME280_ReadPressure+0x2e0>)
 80021c8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80021cc:	b21b      	sxth	r3, r3
 80021ce:	17da      	asrs	r2, r3, #31
 80021d0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80021d4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80021d8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80021dc:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	; 0xa8
 80021e0:	464a      	mov	r2, r9
 80021e2:	fb02 f203 	mul.w	r2, r2, r3
 80021e6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80021ea:	4644      	mov	r4, r8
 80021ec:	fb04 f303 	mul.w	r3, r4, r3
 80021f0:	441a      	add	r2, r3
 80021f2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80021f6:	4644      	mov	r4, r8
 80021f8:	fba3 4304 	umull	r4, r3, r3, r4
 80021fc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8002200:	4623      	mov	r3, r4
 8002202:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8002206:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800220a:	18d3      	adds	r3, r2, r3
 800220c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8002210:	f04f 0200 	mov.w	r2, #0
 8002214:	f04f 0300 	mov.w	r3, #0
 8002218:	e9d7 893e 	ldrd	r8, r9, [r7, #248]	; 0xf8
 800221c:	464c      	mov	r4, r9
 800221e:	0323      	lsls	r3, r4, #12
 8002220:	4644      	mov	r4, r8
 8002222:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8002226:	4644      	mov	r4, r8
 8002228:	0322      	lsls	r2, r4, #12
 800222a:	1884      	adds	r4, r0, r2
 800222c:	633c      	str	r4, [r7, #48]	; 0x30
 800222e:	eb41 0303 	adc.w	r3, r1, r3
 8002232:	637b      	str	r3, [r7, #52]	; 0x34
 8002234:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8002238:	e9c7 344c 	strd	r3, r4, [r7, #304]	; 0x130
    val1 = (((((int64_t) 1) << 47) + val1)) * ((int64_t) CalibData.dig_P1) >> 33;
 800223c:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 8002240:	f503 4100 	add.w	r1, r3, #32768	; 0x8000
 8002244:	f8c7 10a4 	str.w	r1, [r7, #164]	; 0xa4
 8002248:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 800224c:	4b1b      	ldr	r3, [pc, #108]	; (80022bc <BME280_ReadPressure+0x2e0>)
 800224e:	88db      	ldrh	r3, [r3, #6]
 8002250:	b29b      	uxth	r3, r3
 8002252:	2200      	movs	r2, #0
 8002254:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002258:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800225c:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	; 0xa0
 8002260:	462b      	mov	r3, r5
 8002262:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	; 0x98
 8002266:	4642      	mov	r2, r8
 8002268:	fb02 f203 	mul.w	r2, r2, r3
 800226c:	464b      	mov	r3, r9
 800226e:	4621      	mov	r1, r4
 8002270:	fb01 f303 	mul.w	r3, r1, r3
 8002274:	4413      	add	r3, r2
 8002276:	4622      	mov	r2, r4
 8002278:	4641      	mov	r1, r8
 800227a:	fba2 1201 	umull	r1, r2, r2, r1
 800227e:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8002282:	460a      	mov	r2, r1
 8002284:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 8002288:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 800228c:	4413      	add	r3, r2
 800228e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8002292:	f04f 0200 	mov.w	r2, #0
 8002296:	f04f 0300 	mov.w	r3, #0
 800229a:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	; 0xf0
 800229e:	4629      	mov	r1, r5
 80022a0:	104a      	asrs	r2, r1, #1
 80022a2:	4629      	mov	r1, r5
 80022a4:	17cb      	asrs	r3, r1, #31
 80022a6:	e9c7 234c 	strd	r2, r3, [r7, #304]	; 0x130
    if (val1 == 0) {
 80022aa:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 80022ae:	4313      	orrs	r3, r2
 80022b0:	d106      	bne.n	80022c0 <BME280_ReadPressure+0x2e4>
        return 0; // avoid exception caused by division by zero
 80022b2:	f04f 0300 	mov.w	r3, #0
 80022b6:	e194      	b.n	80025e2 <BME280_ReadPressure+0x606>
 80022b8:	2000026c 	.word	0x2000026c
 80022bc:	20000270 	.word	0x20000270
    }
    p = 1048576 - press_raw;
 80022c0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80022c4:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 80022c8:	2200      	movs	r2, #0
 80022ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80022cc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80022ce:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 80022d2:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
    p = (((p << 31) - val2) * 3125) / val1;
 80022d6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80022da:	085b      	lsrs	r3, r3, #1
 80022dc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80022e0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80022e4:	07db      	lsls	r3, r3, #31
 80022e6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80022ea:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 80022ee:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80022f2:	4621      	mov	r1, r4
 80022f4:	1a89      	subs	r1, r1, r2
 80022f6:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 80022fa:	4629      	mov	r1, r5
 80022fc:	eb61 0303 	sbc.w	r3, r1, r3
 8002300:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002304:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
 8002308:	4622      	mov	r2, r4
 800230a:	462b      	mov	r3, r5
 800230c:	1891      	adds	r1, r2, r2
 800230e:	6239      	str	r1, [r7, #32]
 8002310:	415b      	adcs	r3, r3
 8002312:	627b      	str	r3, [r7, #36]	; 0x24
 8002314:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002318:	4621      	mov	r1, r4
 800231a:	1851      	adds	r1, r2, r1
 800231c:	61b9      	str	r1, [r7, #24]
 800231e:	4629      	mov	r1, r5
 8002320:	414b      	adcs	r3, r1
 8002322:	61fb      	str	r3, [r7, #28]
 8002324:	f04f 0200 	mov.w	r2, #0
 8002328:	f04f 0300 	mov.w	r3, #0
 800232c:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8002330:	4649      	mov	r1, r9
 8002332:	018b      	lsls	r3, r1, #6
 8002334:	4641      	mov	r1, r8
 8002336:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800233a:	4641      	mov	r1, r8
 800233c:	018a      	lsls	r2, r1, #6
 800233e:	4641      	mov	r1, r8
 8002340:	1889      	adds	r1, r1, r2
 8002342:	6139      	str	r1, [r7, #16]
 8002344:	4649      	mov	r1, r9
 8002346:	eb43 0101 	adc.w	r1, r3, r1
 800234a:	6179      	str	r1, [r7, #20]
 800234c:	f04f 0200 	mov.w	r2, #0
 8002350:	f04f 0300 	mov.w	r3, #0
 8002354:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8002358:	4649      	mov	r1, r9
 800235a:	008b      	lsls	r3, r1, #2
 800235c:	4641      	mov	r1, r8
 800235e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002362:	4641      	mov	r1, r8
 8002364:	008a      	lsls	r2, r1, #2
 8002366:	4610      	mov	r0, r2
 8002368:	4619      	mov	r1, r3
 800236a:	4603      	mov	r3, r0
 800236c:	4622      	mov	r2, r4
 800236e:	189b      	adds	r3, r3, r2
 8002370:	60bb      	str	r3, [r7, #8]
 8002372:	460b      	mov	r3, r1
 8002374:	462a      	mov	r2, r5
 8002376:	eb42 0303 	adc.w	r3, r2, r3
 800237a:	60fb      	str	r3, [r7, #12]
 800237c:	f04f 0200 	mov.w	r2, #0
 8002380:	f04f 0300 	mov.w	r3, #0
 8002384:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8002388:	4649      	mov	r1, r9
 800238a:	008b      	lsls	r3, r1, #2
 800238c:	4641      	mov	r1, r8
 800238e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002392:	4641      	mov	r1, r8
 8002394:	008a      	lsls	r2, r1, #2
 8002396:	4610      	mov	r0, r2
 8002398:	4619      	mov	r1, r3
 800239a:	4603      	mov	r3, r0
 800239c:	4622      	mov	r2, r4
 800239e:	189b      	adds	r3, r3, r2
 80023a0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80023a4:	462b      	mov	r3, r5
 80023a6:	460a      	mov	r2, r1
 80023a8:	eb42 0303 	adc.w	r3, r2, r3
 80023ac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80023b0:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 80023b4:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80023b8:	f7fe fc3e 	bl	8000c38 <__aeabi_ldivmod>
 80023bc:	4602      	mov	r2, r0
 80023be:	460b      	mov	r3, r1
 80023c0:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
    val1 = (((int64_t) CalibData.dig_P9) * (p >> 13) * (p >> 13)) >> 25;
 80023c4:	4b8b      	ldr	r3, [pc, #556]	; (80025f4 <BME280_ReadPressure+0x618>)
 80023c6:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80023ca:	b21b      	sxth	r3, r3
 80023cc:	17da      	asrs	r2, r3, #31
 80023ce:	67bb      	str	r3, [r7, #120]	; 0x78
 80023d0:	67fa      	str	r2, [r7, #124]	; 0x7c
 80023d2:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 80023d6:	f04f 0000 	mov.w	r0, #0
 80023da:	f04f 0100 	mov.w	r1, #0
 80023de:	0b50      	lsrs	r0, r2, #13
 80023e0:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 80023e4:	1359      	asrs	r1, r3, #13
 80023e6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80023ea:	462b      	mov	r3, r5
 80023ec:	fb00 f203 	mul.w	r2, r0, r3
 80023f0:	4623      	mov	r3, r4
 80023f2:	fb03 f301 	mul.w	r3, r3, r1
 80023f6:	4413      	add	r3, r2
 80023f8:	4622      	mov	r2, r4
 80023fa:	fba2 1200 	umull	r1, r2, r2, r0
 80023fe:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002402:	460a      	mov	r2, r1
 8002404:	f8c7 20e8 	str.w	r2, [r7, #232]	; 0xe8
 8002408:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800240c:	4413      	add	r3, r2
 800240e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8002412:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8002416:	f04f 0000 	mov.w	r0, #0
 800241a:	f04f 0100 	mov.w	r1, #0
 800241e:	0b50      	lsrs	r0, r2, #13
 8002420:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8002424:	1359      	asrs	r1, r3, #13
 8002426:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800242a:	462b      	mov	r3, r5
 800242c:	fb00 f203 	mul.w	r2, r0, r3
 8002430:	4623      	mov	r3, r4
 8002432:	fb03 f301 	mul.w	r3, r3, r1
 8002436:	4413      	add	r3, r2
 8002438:	4622      	mov	r2, r4
 800243a:	fba2 1200 	umull	r1, r2, r2, r0
 800243e:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 8002442:	460a      	mov	r2, r1
 8002444:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 8002448:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800244c:	4413      	add	r3, r2
 800244e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002452:	f04f 0200 	mov.w	r2, #0
 8002456:	f04f 0300 	mov.w	r3, #0
 800245a:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 800245e:	4621      	mov	r1, r4
 8002460:	0e4a      	lsrs	r2, r1, #25
 8002462:	4629      	mov	r1, r5
 8002464:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8002468:	4629      	mov	r1, r5
 800246a:	164b      	asrs	r3, r1, #25
 800246c:	e9c7 234c 	strd	r2, r3, [r7, #304]	; 0x130
    val2 = (((int64_t) CalibData.dig_P8) * p) >> 19;
 8002470:	4b60      	ldr	r3, [pc, #384]	; (80025f4 <BME280_ReadPressure+0x618>)
 8002472:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8002476:	b21b      	sxth	r3, r3
 8002478:	17da      	asrs	r2, r3, #31
 800247a:	673b      	str	r3, [r7, #112]	; 0x70
 800247c:	677a      	str	r2, [r7, #116]	; 0x74
 800247e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002482:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	; 0x70
 8002486:	462a      	mov	r2, r5
 8002488:	fb02 f203 	mul.w	r2, r2, r3
 800248c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002490:	4621      	mov	r1, r4
 8002492:	fb01 f303 	mul.w	r3, r1, r3
 8002496:	441a      	add	r2, r3
 8002498:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800249c:	4621      	mov	r1, r4
 800249e:	fba3 1301 	umull	r1, r3, r3, r1
 80024a2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80024a6:	460b      	mov	r3, r1
 80024a8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80024ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80024b0:	18d3      	adds	r3, r2, r3
 80024b2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80024b6:	f04f 0200 	mov.w	r2, #0
 80024ba:	f04f 0300 	mov.w	r3, #0
 80024be:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 80024c2:	4621      	mov	r1, r4
 80024c4:	0cca      	lsrs	r2, r1, #19
 80024c6:	4629      	mov	r1, r5
 80024c8:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 80024cc:	4629      	mov	r1, r5
 80024ce:	14cb      	asrs	r3, r1, #19
 80024d0:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
    p = ((p + val1 + val2) >> 8) + ((int64_t) CalibData.dig_P7 << 4);
 80024d4:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 80024d8:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 80024dc:	1884      	adds	r4, r0, r2
 80024de:	66bc      	str	r4, [r7, #104]	; 0x68
 80024e0:	eb41 0303 	adc.w	r3, r1, r3
 80024e4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80024e6:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 80024ea:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 80024ee:	4621      	mov	r1, r4
 80024f0:	1889      	adds	r1, r1, r2
 80024f2:	6639      	str	r1, [r7, #96]	; 0x60
 80024f4:	4629      	mov	r1, r5
 80024f6:	eb43 0101 	adc.w	r1, r3, r1
 80024fa:	6679      	str	r1, [r7, #100]	; 0x64
 80024fc:	f04f 0000 	mov.w	r0, #0
 8002500:	f04f 0100 	mov.w	r1, #0
 8002504:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002508:	4623      	mov	r3, r4
 800250a:	0a18      	lsrs	r0, r3, #8
 800250c:	462b      	mov	r3, r5
 800250e:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8002512:	462b      	mov	r3, r5
 8002514:	1219      	asrs	r1, r3, #8
 8002516:	4b37      	ldr	r3, [pc, #220]	; (80025f4 <BME280_ReadPressure+0x618>)
 8002518:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800251c:	b21b      	sxth	r3, r3
 800251e:	17da      	asrs	r2, r3, #31
 8002520:	65bb      	str	r3, [r7, #88]	; 0x58
 8002522:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002524:	f04f 0200 	mov.w	r2, #0
 8002528:	f04f 0300 	mov.w	r3, #0
 800252c:	e9d7 8916 	ldrd	r8, r9, [r7, #88]	; 0x58
 8002530:	464c      	mov	r4, r9
 8002532:	0123      	lsls	r3, r4, #4
 8002534:	4644      	mov	r4, r8
 8002536:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 800253a:	4644      	mov	r4, r8
 800253c:	0122      	lsls	r2, r4, #4
 800253e:	1884      	adds	r4, r0, r2
 8002540:	603c      	str	r4, [r7, #0]
 8002542:	eb41 0303 	adc.w	r3, r1, r3
 8002546:	607b      	str	r3, [r7, #4]
 8002548:	e9d7 3400 	ldrd	r3, r4, [r7]
 800254c:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
    pres_int = ((p >> 8) * 1000) + (((p & 0xff) * 390625) / 100000);
 8002550:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 8002554:	f04f 0200 	mov.w	r2, #0
 8002558:	f04f 0300 	mov.w	r3, #0
 800255c:	0a02      	lsrs	r2, r0, #8
 800255e:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002562:	120b      	asrs	r3, r1, #8
 8002564:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002568:	fb03 f402 	mul.w	r4, r3, r2
 800256c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8002570:	f002 03ff 	and.w	r3, r2, #255	; 0xff
 8002574:	653b      	str	r3, [r7, #80]	; 0x50
 8002576:	2300      	movs	r3, #0
 8002578:	657b      	str	r3, [r7, #84]	; 0x54
 800257a:	4b1f      	ldr	r3, [pc, #124]	; (80025f8 <BME280_ReadPressure+0x61c>)
 800257c:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8002580:	464a      	mov	r2, r9
 8002582:	fb03 f202 	mul.w	r2, r3, r2
 8002586:	2300      	movs	r3, #0
 8002588:	4641      	mov	r1, r8
 800258a:	fb01 f303 	mul.w	r3, r1, r3
 800258e:	4413      	add	r3, r2
 8002590:	4a19      	ldr	r2, [pc, #100]	; (80025f8 <BME280_ReadPressure+0x61c>)
 8002592:	4641      	mov	r1, r8
 8002594:	fba1 1202 	umull	r1, r2, r1, r2
 8002598:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800259c:	460a      	mov	r2, r1
 800259e:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 80025a2:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 80025a6:	4413      	add	r3, r2
 80025a8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80025ac:	4a13      	ldr	r2, [pc, #76]	; (80025fc <BME280_ReadPressure+0x620>)
 80025ae:	f04f 0300 	mov.w	r3, #0
 80025b2:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 80025b6:	f7fe fb3f 	bl	8000c38 <__aeabi_ldivmod>
 80025ba:	4602      	mov	r2, r0
 80025bc:	460b      	mov	r3, r1
 80025be:	4613      	mov	r3, r2
 80025c0:	4423      	add	r3, r4
 80025c2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    press_float = pres_int / 100.0f;
 80025c6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80025ca:	ee07 3a90 	vmov	s15, r3
 80025ce:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80025d2:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8002600 <BME280_ReadPressure+0x624>
 80025d6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80025da:	edc7 7a4f 	vstr	s15, [r7, #316]	; 0x13c

    return press_float;
 80025de:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
}
 80025e2:	ee07 3a90 	vmov	s15, r3
 80025e6:	eeb0 0a67 	vmov.f32	s0, s15
 80025ea:	f507 77a0 	add.w	r7, r7, #320	; 0x140
 80025ee:	46bd      	mov	sp, r7
 80025f0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80025f4:	20000270 	.word	0x20000270
 80025f8:	0005f5e1 	.word	0x0005f5e1
 80025fc:	000186a0 	.word	0x000186a0
 8002600:	42c80000 	.word	0x42c80000

08002604 <BME280_ReadHumidity>:

//------------------------------------------------
float BME280_ReadHumidity(void) {
 8002604:	b580      	push	{r7, lr}
 8002606:	b084      	sub	sp, #16
 8002608:	af00      	add	r7, sp, #0
    float hum_float = 0.0f;
 800260a:	f04f 0300 	mov.w	r3, #0
 800260e:	60fb      	str	r3, [r7, #12]
    int16_t hum_raw;
    int32_t hum_raw_sign, v_x1_u32r;
    BME280_ReadTemperature(); // must be done first to get t_fine
 8002610:	f7ff fc8c 	bl	8001f2c <BME280_ReadTemperature>
    BME280_ReadReg_BE_S16(BME280_REGISTER_HUMIDDATA, &hum_raw);
 8002614:	1cbb      	adds	r3, r7, #2
 8002616:	4619      	mov	r1, r3
 8002618:	20fd      	movs	r0, #253	; 0xfd
 800261a:	f000 f8e2 	bl	80027e2 <BME280_ReadReg_BE_S16>
    hum_raw_sign = ((int32_t) hum_raw) & 0x0000FFFF;
 800261e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002622:	b29b      	uxth	r3, r3
 8002624:	60bb      	str	r3, [r7, #8]
    //sprintf(str1, "Humidity RAW: 0x%08X\r\n", hum_raw_sign);
    //HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);
    v_x1_u32r = (temper_int - ((int32_t) 76800));
 8002626:	4b35      	ldr	r3, [pc, #212]	; (80026fc <BME280_ReadHumidity+0xf8>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 800262e:	607b      	str	r3, [r7, #4]
    v_x1_u32r = (((((hum_raw_sign << 14) - (((int32_t) CalibData.dig_H4) << 20) -
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	039a      	lsls	r2, r3, #14
 8002634:	4b32      	ldr	r3, [pc, #200]	; (8002700 <BME280_ReadHumidity+0xfc>)
 8002636:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 800263a:	051b      	lsls	r3, r3, #20
 800263c:	1ad2      	subs	r2, r2, r3
                    (((int32_t) CalibData.dig_H5) * v_x1_u32r)) + ((int32_t) 16384)) >> 15) *
 800263e:	4b30      	ldr	r3, [pc, #192]	; (8002700 <BME280_ReadHumidity+0xfc>)
 8002640:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8002644:	4619      	mov	r1, r3
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	fb01 f303 	mul.w	r3, r1, r3
    v_x1_u32r = (((((hum_raw_sign << 14) - (((int32_t) CalibData.dig_H4) << 20) -
 800264c:	1ad3      	subs	r3, r2, r3
                    (((int32_t) CalibData.dig_H5) * v_x1_u32r)) + ((int32_t) 16384)) >> 15) *
 800264e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8002652:	13db      	asrs	r3, r3, #15
                 (((((((v_x1_u32r * ((int32_t) CalibData.dig_H6)) >> 10) *
 8002654:	4a2a      	ldr	r2, [pc, #168]	; (8002700 <BME280_ReadHumidity+0xfc>)
 8002656:	f992 2022 	ldrsb.w	r2, [r2, #34]	; 0x22
 800265a:	4611      	mov	r1, r2
 800265c:	687a      	ldr	r2, [r7, #4]
 800265e:	fb01 f202 	mul.w	r2, r1, r2
 8002662:	1292      	asrs	r2, r2, #10
                      (((v_x1_u32r * ((int32_t) CalibData.dig_H3)) >> 11) + ((int32_t) 32768))) >> 10) +
 8002664:	4926      	ldr	r1, [pc, #152]	; (8002700 <BME280_ReadHumidity+0xfc>)
 8002666:	7f09      	ldrb	r1, [r1, #28]
 8002668:	4608      	mov	r0, r1
 800266a:	6879      	ldr	r1, [r7, #4]
 800266c:	fb00 f101 	mul.w	r1, r0, r1
 8002670:	12c9      	asrs	r1, r1, #11
 8002672:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
                 (((((((v_x1_u32r * ((int32_t) CalibData.dig_H6)) >> 10) *
 8002676:	fb01 f202 	mul.w	r2, r1, r2
                      (((v_x1_u32r * ((int32_t) CalibData.dig_H3)) >> 11) + ((int32_t) 32768))) >> 10) +
 800267a:	1292      	asrs	r2, r2, #10
 800267c:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
                    ((int32_t) 2097152)) * ((int32_t) CalibData.dig_H2) + 8192) >> 14));
 8002680:	491f      	ldr	r1, [pc, #124]	; (8002700 <BME280_ReadHumidity+0xfc>)
 8002682:	f9b1 101a 	ldrsh.w	r1, [r1, #26]
 8002686:	fb01 f202 	mul.w	r2, r1, r2
 800268a:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 800268e:	1392      	asrs	r2, r2, #14
    v_x1_u32r = (((((hum_raw_sign << 14) - (((int32_t) CalibData.dig_H4) << 20) -
 8002690:	fb02 f303 	mul.w	r3, r2, r3
 8002694:	607b      	str	r3, [r7, #4]
    v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	13db      	asrs	r3, r3, #15
 800269a:	687a      	ldr	r2, [r7, #4]
 800269c:	13d2      	asrs	r2, r2, #15
 800269e:	fb02 f303 	mul.w	r3, r2, r3
 80026a2:	11db      	asrs	r3, r3, #7
                               ((int32_t) CalibData.dig_H1)) >> 4));
 80026a4:	4a16      	ldr	r2, [pc, #88]	; (8002700 <BME280_ReadHumidity+0xfc>)
 80026a6:	7e12      	ldrb	r2, [r2, #24]
    v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *
 80026a8:	fb02 f303 	mul.w	r3, r2, r3
                               ((int32_t) CalibData.dig_H1)) >> 4));
 80026ac:	111b      	asrs	r3, r3, #4
    v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *
 80026ae:	687a      	ldr	r2, [r7, #4]
 80026b0:	1ad3      	subs	r3, r2, r3
 80026b2:	607b      	str	r3, [r7, #4]
    v_x1_u32r = (v_x1_u32r < 0) ? 0 : v_x1_u32r;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80026ba:	607b      	str	r3, [r7, #4]
    v_x1_u32r = (v_x1_u32r > 419430400) ? 419430400 : v_x1_u32r;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 80026c2:	bfa8      	it	ge
 80026c4:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
 80026c8:	607b      	str	r3, [r7, #4]
    hum_float = (v_x1_u32r >> 12);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	131b      	asrs	r3, r3, #12
 80026ce:	ee07 3a90 	vmov	s15, r3
 80026d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80026d6:	edc7 7a03 	vstr	s15, [r7, #12]
    hum_float /= 1024.0f;
 80026da:	ed97 7a03 	vldr	s14, [r7, #12]
 80026de:	eddf 6a09 	vldr	s13, [pc, #36]	; 8002704 <BME280_ReadHumidity+0x100>
 80026e2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80026e6:	edc7 7a03 	vstr	s15, [r7, #12]
    return hum_float;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	ee07 3a90 	vmov	s15, r3
}
 80026f0:	eeb0 0a67 	vmov.f32	s0, s15
 80026f4:	3710      	adds	r7, #16
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}
 80026fa:	bf00      	nop
 80026fc:	2000026c 	.word	0x2000026c
 8002700:	20000270 	.word	0x20000270
 8002704:	44800000 	.word	0x44800000

08002708 <BME280_ReadAltitude>:

//------------------------------------------------
float BME280_ReadAltitude(float seaLevel) {
 8002708:	b580      	push	{r7, lr}
 800270a:	b084      	sub	sp, #16
 800270c:	af00      	add	r7, sp, #0
 800270e:	ed87 0a01 	vstr	s0, [r7, #4]
    float att = 0.0f;
 8002712:	f04f 0300 	mov.w	r3, #0
 8002716:	60fb      	str	r3, [r7, #12]
    float atm = BME280_ReadPressure();
 8002718:	f7ff fc60 	bl	8001fdc <BME280_ReadPressure>
 800271c:	ed87 0a02 	vstr	s0, [r7, #8]
    att = 44330.0 * (1.0 - pow(atm / seaLevel, 0.1903));
 8002720:	ed97 7a02 	vldr	s14, [r7, #8]
 8002724:	edd7 7a01 	vldr	s15, [r7, #4]
 8002728:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800272c:	ee16 0a90 	vmov	r0, s13
 8002730:	f7fd fee2 	bl	80004f8 <__aeabi_f2d>
 8002734:	4602      	mov	r2, r0
 8002736:	460b      	mov	r3, r1
 8002738:	ed9f 1b13 	vldr	d1, [pc, #76]	; 8002788 <BME280_ReadAltitude+0x80>
 800273c:	ec43 2b10 	vmov	d0, r2, r3
 8002740:	f00f fd52 	bl	80121e8 <pow>
 8002744:	ec53 2b10 	vmov	r2, r3, d0
 8002748:	f04f 0000 	mov.w	r0, #0
 800274c:	4912      	ldr	r1, [pc, #72]	; (8002798 <BME280_ReadAltitude+0x90>)
 800274e:	f7fd fd73 	bl	8000238 <__aeabi_dsub>
 8002752:	4602      	mov	r2, r0
 8002754:	460b      	mov	r3, r1
 8002756:	4610      	mov	r0, r2
 8002758:	4619      	mov	r1, r3
 800275a:	a30d      	add	r3, pc, #52	; (adr r3, 8002790 <BME280_ReadAltitude+0x88>)
 800275c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002760:	f7fd ff22 	bl	80005a8 <__aeabi_dmul>
 8002764:	4602      	mov	r2, r0
 8002766:	460b      	mov	r3, r1
 8002768:	4610      	mov	r0, r2
 800276a:	4619      	mov	r1, r3
 800276c:	f7fe fa14 	bl	8000b98 <__aeabi_d2f>
 8002770:	4603      	mov	r3, r0
 8002772:	60fb      	str	r3, [r7, #12]
    return att;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	ee07 3a90 	vmov	s15, r3
}
 800277a:	eeb0 0a67 	vmov.f32	s0, s15
 800277e:	3710      	adds	r7, #16
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}
 8002784:	f3af 8000 	nop.w
 8002788:	1a36e2eb 	.word	0x1a36e2eb
 800278c:	3fc85bc0 	.word	0x3fc85bc0
 8002790:	00000000 	.word	0x00000000
 8002794:	40e5a540 	.word	0x40e5a540
 8002798:	3ff00000 	.word	0x3ff00000

0800279c <BME280_ReadReg_BE_U24>:
void BME280_ReadReg_U24(uint8_t Reg, uint32_t *Value) {
    I2Cx_ReadData24(BME280_ADDRESS, Reg, Value);
    *(uint32_t *) Value &= 0x00FFFFFF;
}

void BME280_ReadReg_BE_U24(uint8_t Reg, uint32_t *Value) {
 800279c:	b580      	push	{r7, lr}
 800279e:	b082      	sub	sp, #8
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	4603      	mov	r3, r0
 80027a4:	6039      	str	r1, [r7, #0]
 80027a6:	71fb      	strb	r3, [r7, #7]
    I2Cx_ReadData24(BME280_ADDRESS, Reg, Value);
 80027a8:	79fb      	ldrb	r3, [r7, #7]
 80027aa:	683a      	ldr	r2, [r7, #0]
 80027ac:	4619      	mov	r1, r3
 80027ae:	20ec      	movs	r0, #236	; 0xec
 80027b0:	f7ff fa02 	bl	8001bb8 <I2Cx_ReadData24>
    *(uint32_t *) Value = be24toword(*(uint32_t *) Value) & 0x00FFFFFF;
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	0c1b      	lsrs	r3, r3, #16
 80027ba:	b2da      	uxtb	r2, r3
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80027c4:	431a      	orrs	r2, r3
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	041b      	lsls	r3, r3, #16
 80027cc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80027d0:	4313      	orrs	r3, r2
 80027d2:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	601a      	str	r2, [r3, #0]
}
 80027da:	bf00      	nop
 80027dc:	3708      	adds	r7, #8
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}

080027e2 <BME280_ReadReg_BE_S16>:

void BME280_ReadReg_BE_S16(uint8_t Reg, int16_t *Value) {
 80027e2:	b580      	push	{r7, lr}
 80027e4:	b082      	sub	sp, #8
 80027e6:	af00      	add	r7, sp, #0
 80027e8:	4603      	mov	r3, r0
 80027ea:	6039      	str	r1, [r7, #0]
 80027ec:	71fb      	strb	r3, [r7, #7]
    I2Cx_ReadData16(BME280_ADDRESS, Reg, (uint16_t *) Value);
 80027ee:	79fb      	ldrb	r3, [r7, #7]
 80027f0:	683a      	ldr	r2, [r7, #0]
 80027f2:	4619      	mov	r1, r3
 80027f4:	20ec      	movs	r0, #236	; 0xec
 80027f6:	f7ff f9b9 	bl	8001b6c <I2Cx_ReadData16>
    *(uint16_t *) Value = be16toword(*(uint16_t *) Value);
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	881b      	ldrh	r3, [r3, #0]
 80027fe:	0a1b      	lsrs	r3, r3, #8
 8002800:	b29b      	uxth	r3, r3
 8002802:	b21a      	sxth	r2, r3
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	881b      	ldrh	r3, [r3, #0]
 8002808:	021b      	lsls	r3, r3, #8
 800280a:	b21b      	sxth	r3, r3
 800280c:	4313      	orrs	r3, r2
 800280e:	b21b      	sxth	r3, r3
 8002810:	b29a      	uxth	r2, r3
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	801a      	strh	r2, [r3, #0]
}
 8002816:	bf00      	nop
 8002818:	3708      	adds	r7, #8
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}

0800281e <bme680_init>:
/*!
 *@brief This API is the entry point.
 *It reads the chip-id and calibration data from the sensor.
 */
int8_t bme680_init(struct bme680_dev *dev)
{
 800281e:	b580      	push	{r7, lr}
 8002820:	b084      	sub	sp, #16
 8002822:	af00      	add	r7, sp, #0
 8002824:	6078      	str	r0, [r7, #4]
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8002826:	6878      	ldr	r0, [r7, #4]
 8002828:	f001 fa64 	bl	8003cf4 <null_ptr_check>
 800282c:	4603      	mov	r3, r0
 800282e:	73fb      	strb	r3, [r7, #15]
	if (rslt == BME680_OK) {
 8002830:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d120      	bne.n	800287a <bme680_init+0x5c>
		/* Soft reset to restore it to default values*/
		rslt = bme680_soft_reset(dev);
 8002838:	6878      	ldr	r0, [r7, #4]
 800283a:	f000 f8ee 	bl	8002a1a <bme680_soft_reset>
 800283e:	4603      	mov	r3, r0
 8002840:	73fb      	strb	r3, [r7, #15]
		if (rslt == BME680_OK) {
 8002842:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d117      	bne.n	800287a <bme680_init+0x5c>
			rslt = bme680_get_regs(BME680_CHIP_ID_ADDR, &dev->chip_id, 1, dev);
 800284a:	6879      	ldr	r1, [r7, #4]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2201      	movs	r2, #1
 8002850:	20d0      	movs	r0, #208	; 0xd0
 8002852:	f000 f818 	bl	8002886 <bme680_get_regs>
 8002856:	4603      	mov	r3, r0
 8002858:	73fb      	strb	r3, [r7, #15]
			if (rslt == BME680_OK) {
 800285a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d10b      	bne.n	800287a <bme680_init+0x5c>
				if (dev->chip_id == BME680_CHIP_ID) {
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	781b      	ldrb	r3, [r3, #0]
 8002866:	2b61      	cmp	r3, #97	; 0x61
 8002868:	d105      	bne.n	8002876 <bme680_init+0x58>
					/* Get the Calibration data */
					rslt = get_calib_data(dev);
 800286a:	6878      	ldr	r0, [r7, #4]
 800286c:	f000 fbce 	bl	800300c <get_calib_data>
 8002870:	4603      	mov	r3, r0
 8002872:	73fb      	strb	r3, [r7, #15]
 8002874:	e001      	b.n	800287a <bme680_init+0x5c>
				} else {
					rslt = BME680_E_DEV_NOT_FOUND;
 8002876:	23fd      	movs	r3, #253	; 0xfd
 8002878:	73fb      	strb	r3, [r7, #15]
				}
			}
		}
	}

	return rslt;
 800287a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800287e:	4618      	mov	r0, r3
 8002880:	3710      	adds	r7, #16
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}

08002886 <bme680_get_regs>:

/*!
 * @brief This API reads the data from the given register address of the sensor.
 */
int8_t bme680_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint16_t len, struct bme680_dev *dev)
{
 8002886:	b590      	push	{r4, r7, lr}
 8002888:	b087      	sub	sp, #28
 800288a:	af00      	add	r7, sp, #0
 800288c:	60b9      	str	r1, [r7, #8]
 800288e:	607b      	str	r3, [r7, #4]
 8002890:	4603      	mov	r3, r0
 8002892:	73fb      	strb	r3, [r7, #15]
 8002894:	4613      	mov	r3, r2
 8002896:	81bb      	strh	r3, [r7, #12]
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8002898:	6878      	ldr	r0, [r7, #4]
 800289a:	f001 fa2b 	bl	8003cf4 <null_ptr_check>
 800289e:	4603      	mov	r3, r0
 80028a0:	75fb      	strb	r3, [r7, #23]
	if (rslt == BME680_OK) {
 80028a2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d126      	bne.n	80028f8 <bme680_get_regs+0x72>
		if (dev->intf == BME680_SPI_INTF) {
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	789b      	ldrb	r3, [r3, #2]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d10e      	bne.n	80028d0 <bme680_get_regs+0x4a>
			/* Set the memory page */
			rslt = set_mem_page(reg_addr, dev);
 80028b2:	7bfb      	ldrb	r3, [r7, #15]
 80028b4:	6879      	ldr	r1, [r7, #4]
 80028b6:	4618      	mov	r0, r3
 80028b8:	f001 f94d 	bl	8003b56 <set_mem_page>
 80028bc:	4603      	mov	r3, r0
 80028be:	75fb      	strb	r3, [r7, #23]
			if (rslt == BME680_OK)
 80028c0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d103      	bne.n	80028d0 <bme680_get_regs+0x4a>
				reg_addr = reg_addr | BME680_SPI_RD_MSK;
 80028c8:	7bfb      	ldrb	r3, [r7, #15]
 80028ca:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80028ce:	73fb      	strb	r3, [r7, #15]
		}
		dev->com_rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6c9c      	ldr	r4, [r3, #72]	; 0x48
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	7858      	ldrb	r0, [r3, #1]
 80028d8:	89bb      	ldrh	r3, [r7, #12]
 80028da:	7bf9      	ldrb	r1, [r7, #15]
 80028dc:	68ba      	ldr	r2, [r7, #8]
 80028de:	47a0      	blx	r4
 80028e0:	4603      	mov	r3, r0
 80028e2:	461a      	mov	r2, r3
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		if (dev->com_rslt != 0)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	f993 3054 	ldrsb.w	r3, [r3, #84]	; 0x54
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d001      	beq.n	80028f8 <bme680_get_regs+0x72>
			rslt = BME680_E_COM_FAIL;
 80028f4:	23fe      	movs	r3, #254	; 0xfe
 80028f6:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 80028f8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80028fc:	4618      	mov	r0, r3
 80028fe:	371c      	adds	r7, #28
 8002900:	46bd      	mov	sp, r7
 8002902:	bd90      	pop	{r4, r7, pc}

08002904 <bme680_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of the sensor.
 */
int8_t bme680_set_regs(const uint8_t *reg_addr, const uint8_t *reg_data, uint8_t len, struct bme680_dev *dev)
{
 8002904:	b5b0      	push	{r4, r5, r7, lr}
 8002906:	b090      	sub	sp, #64	; 0x40
 8002908:	af00      	add	r7, sp, #0
 800290a:	60f8      	str	r0, [r7, #12]
 800290c:	60b9      	str	r1, [r7, #8]
 800290e:	603b      	str	r3, [r7, #0]
 8002910:	4613      	mov	r3, r2
 8002912:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	/* Length of the temporary buffer is 2*(length of register)*/
	uint8_t tmp_buff[BME680_TMP_BUFFER_LENGTH] = { 0 };
 8002914:	2300      	movs	r3, #0
 8002916:	617b      	str	r3, [r7, #20]
 8002918:	f107 0318 	add.w	r3, r7, #24
 800291c:	2224      	movs	r2, #36	; 0x24
 800291e:	2100      	movs	r1, #0
 8002920:	4618      	mov	r0, r3
 8002922:	f010 fbc3 	bl	80130ac <memset>
	uint16_t index;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8002926:	6838      	ldr	r0, [r7, #0]
 8002928:	f001 f9e4 	bl	8003cf4 <null_ptr_check>
 800292c:	4603      	mov	r3, r0
 800292e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (rslt == BME680_OK) {
 8002932:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8002936:	2b00      	cmp	r3, #0
 8002938:	d169      	bne.n	8002a0e <bme680_set_regs+0x10a>
		if ((len > 0) && (len < BME680_TMP_BUFFER_LENGTH / 2)) {
 800293a:	79fb      	ldrb	r3, [r7, #7]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d061      	beq.n	8002a04 <bme680_set_regs+0x100>
 8002940:	79fb      	ldrb	r3, [r7, #7]
 8002942:	2b13      	cmp	r3, #19
 8002944:	d85e      	bhi.n	8002a04 <bme680_set_regs+0x100>
			/* Interleave the 2 arrays */
			for (index = 0; index < len; index++) {
 8002946:	2300      	movs	r3, #0
 8002948:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800294a:	e034      	b.n	80029b6 <bme680_set_regs+0xb2>
				if (dev->intf == BME680_SPI_INTF) {
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	789b      	ldrb	r3, [r3, #2]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d118      	bne.n	8002986 <bme680_set_regs+0x82>
					/* Set the memory page */
					rslt = set_mem_page(reg_addr[index], dev);
 8002954:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8002956:	68fa      	ldr	r2, [r7, #12]
 8002958:	4413      	add	r3, r2
 800295a:	781b      	ldrb	r3, [r3, #0]
 800295c:	6839      	ldr	r1, [r7, #0]
 800295e:	4618      	mov	r0, r3
 8002960:	f001 f8f9 	bl	8003b56 <set_mem_page>
 8002964:	4603      	mov	r3, r0
 8002966:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					tmp_buff[(2 * index)] = reg_addr[index] & BME680_SPI_WR_MSK;
 800296a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800296c:	68fa      	ldr	r2, [r7, #12]
 800296e:	4413      	add	r3, r2
 8002970:	781a      	ldrb	r2, [r3, #0]
 8002972:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8002974:	005b      	lsls	r3, r3, #1
 8002976:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800297a:	b2d2      	uxtb	r2, r2
 800297c:	3340      	adds	r3, #64	; 0x40
 800297e:	443b      	add	r3, r7
 8002980:	f803 2c2c 	strb.w	r2, [r3, #-44]
 8002984:	e009      	b.n	800299a <bme680_set_regs+0x96>
				} else {
					tmp_buff[(2 * index)] = reg_addr[index];
 8002986:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8002988:	68fa      	ldr	r2, [r7, #12]
 800298a:	441a      	add	r2, r3
 800298c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800298e:	005b      	lsls	r3, r3, #1
 8002990:	7812      	ldrb	r2, [r2, #0]
 8002992:	3340      	adds	r3, #64	; 0x40
 8002994:	443b      	add	r3, r7
 8002996:	f803 2c2c 	strb.w	r2, [r3, #-44]
				}
				tmp_buff[(2 * index) + 1] = reg_data[index];
 800299a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800299c:	68ba      	ldr	r2, [r7, #8]
 800299e:	441a      	add	r2, r3
 80029a0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80029a2:	005b      	lsls	r3, r3, #1
 80029a4:	3301      	adds	r3, #1
 80029a6:	7812      	ldrb	r2, [r2, #0]
 80029a8:	3340      	adds	r3, #64	; 0x40
 80029aa:	443b      	add	r3, r7
 80029ac:	f803 2c2c 	strb.w	r2, [r3, #-44]
			for (index = 0; index < len; index++) {
 80029b0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80029b2:	3301      	adds	r3, #1
 80029b4:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80029b6:	79fb      	ldrb	r3, [r7, #7]
 80029b8:	b29b      	uxth	r3, r3
 80029ba:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 80029bc:	429a      	cmp	r2, r3
 80029be:	d3c5      	bcc.n	800294c <bme680_set_regs+0x48>
			}
			/* Write the interleaved array */
			if (rslt == BME680_OK) {
 80029c0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d121      	bne.n	8002a0c <bme680_set_regs+0x108>
				dev->com_rslt = dev->write(dev->dev_id, tmp_buff[0], &tmp_buff[1], (2 * len) - 1);
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	7858      	ldrb	r0, [r3, #1]
 80029d0:	7d39      	ldrb	r1, [r7, #20]
 80029d2:	79fb      	ldrb	r3, [r7, #7]
 80029d4:	b29b      	uxth	r3, r3
 80029d6:	005b      	lsls	r3, r3, #1
 80029d8:	b29b      	uxth	r3, r3
 80029da:	3b01      	subs	r3, #1
 80029dc:	b29d      	uxth	r5, r3
 80029de:	f107 0314 	add.w	r3, r7, #20
 80029e2:	1c5a      	adds	r2, r3, #1
 80029e4:	462b      	mov	r3, r5
 80029e6:	47a0      	blx	r4
 80029e8:	4603      	mov	r3, r0
 80029ea:	461a      	mov	r2, r3
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
				if (dev->com_rslt != 0)
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	f993 3054 	ldrsb.w	r3, [r3, #84]	; 0x54
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d007      	beq.n	8002a0c <bme680_set_regs+0x108>
					rslt = BME680_E_COM_FAIL;
 80029fc:	23fe      	movs	r3, #254	; 0xfe
 80029fe:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			if (rslt == BME680_OK) {
 8002a02:	e003      	b.n	8002a0c <bme680_set_regs+0x108>
			}
		} else {
			rslt = BME680_E_INVALID_LENGTH;
 8002a04:	23fc      	movs	r3, #252	; 0xfc
 8002a06:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8002a0a:	e000      	b.n	8002a0e <bme680_set_regs+0x10a>
			if (rslt == BME680_OK) {
 8002a0c:	bf00      	nop
		}
	}

	return rslt;
 8002a0e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	3740      	adds	r7, #64	; 0x40
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bdb0      	pop	{r4, r5, r7, pc}

08002a1a <bme680_soft_reset>:

/*!
 * @brief This API performs the soft reset of the sensor.
 */
int8_t bme680_soft_reset(struct bme680_dev *dev)
{
 8002a1a:	b580      	push	{r7, lr}
 8002a1c:	b084      	sub	sp, #16
 8002a1e:	af00      	add	r7, sp, #0
 8002a20:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg_addr = BME680_SOFT_RESET_ADDR;
 8002a22:	23e0      	movs	r3, #224	; 0xe0
 8002a24:	73bb      	strb	r3, [r7, #14]
	/* 0xb6 is the soft reset command */
	uint8_t soft_rst_cmd = BME680_SOFT_RESET_CMD;
 8002a26:	23b6      	movs	r3, #182	; 0xb6
 8002a28:	737b      	strb	r3, [r7, #13]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8002a2a:	6878      	ldr	r0, [r7, #4]
 8002a2c:	f001 f962 	bl	8003cf4 <null_ptr_check>
 8002a30:	4603      	mov	r3, r0
 8002a32:	73fb      	strb	r3, [r7, #15]
	if (rslt == BME680_OK) {
 8002a34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d127      	bne.n	8002a8c <bme680_soft_reset+0x72>
		if (dev->intf == BME680_SPI_INTF)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	789b      	ldrb	r3, [r3, #2]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d104      	bne.n	8002a4e <bme680_soft_reset+0x34>
			rslt = get_mem_page(dev);
 8002a44:	6878      	ldr	r0, [r7, #4]
 8002a46:	f001 f8eb 	bl	8003c20 <get_mem_page>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	73fb      	strb	r3, [r7, #15]

		/* Reset the device */
		if (rslt == BME680_OK) {
 8002a4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d11a      	bne.n	8002a8c <bme680_soft_reset+0x72>
			rslt = bme680_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 8002a56:	f107 010d 	add.w	r1, r7, #13
 8002a5a:	f107 000e 	add.w	r0, r7, #14
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2201      	movs	r2, #1
 8002a62:	f7ff ff4f 	bl	8002904 <bme680_set_regs>
 8002a66:	4603      	mov	r3, r0
 8002a68:	73fb      	strb	r3, [r7, #15]
			/* Wait for 5ms */
			dev->delay_ms(BME680_RESET_PERIOD);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a6e:	200a      	movs	r0, #10
 8002a70:	4798      	blx	r3

			if (rslt == BME680_OK) {
 8002a72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d108      	bne.n	8002a8c <bme680_soft_reset+0x72>
				/* After reset get the memory page */
				if (dev->intf == BME680_SPI_INTF)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	789b      	ldrb	r3, [r3, #2]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d104      	bne.n	8002a8c <bme680_soft_reset+0x72>
					rslt = get_mem_page(dev);
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	f001 f8cc 	bl	8003c20 <get_mem_page>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	73fb      	strb	r3, [r7, #15]
			}
		}
	}

	return rslt;
 8002a8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002a90:	4618      	mov	r0, r3
 8002a92:	3710      	adds	r7, #16
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bd80      	pop	{r7, pc}

08002a98 <bme680_set_sensor_settings>:
/*!
 * @brief This API is used to set the oversampling, filter and T,P,H, gas selection
 * settings in the sensor.
 */
int8_t bme680_set_sensor_settings(uint16_t desired_settings, struct bme680_dev *dev)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b088      	sub	sp, #32
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	6039      	str	r1, [r7, #0]
 8002aa2:	80fb      	strh	r3, [r7, #6]
	int8_t rslt;
	uint8_t reg_addr;
	uint8_t data = 0;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	76fb      	strb	r3, [r7, #27]
	uint8_t count = 0;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	77bb      	strb	r3, [r7, #30]
	uint8_t reg_array[BME680_REG_BUFFER_LENGTH] = { 0 };
 8002aac:	2300      	movs	r3, #0
 8002aae:	617b      	str	r3, [r7, #20]
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	833b      	strh	r3, [r7, #24]
	uint8_t data_array[BME680_REG_BUFFER_LENGTH] = { 0 };
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	60fb      	str	r3, [r7, #12]
 8002ab8:	2300      	movs	r3, #0
 8002aba:	823b      	strh	r3, [r7, #16]
	uint8_t intended_power_mode = dev->power_mode; /* Save intended power mode */
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002ac2:	777b      	strb	r3, [r7, #29]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8002ac4:	6838      	ldr	r0, [r7, #0]
 8002ac6:	f001 f915 	bl	8003cf4 <null_ptr_check>
 8002aca:	4603      	mov	r3, r0
 8002acc:	77fb      	strb	r3, [r7, #31]
	if (rslt == BME680_OK) {
 8002ace:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	f040 81a2 	bne.w	8002e1c <bme680_set_sensor_settings+0x384>
		if (desired_settings & BME680_GAS_MEAS_SEL)
 8002ad8:	88fb      	ldrh	r3, [r7, #6]
 8002ada:	f003 0308 	and.w	r3, r3, #8
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d004      	beq.n	8002aec <bme680_set_sensor_settings+0x54>
			rslt = set_gas_config(dev);
 8002ae2:	6838      	ldr	r0, [r7, #0]
 8002ae4:	f000 fbbe 	bl	8003264 <set_gas_config>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	77fb      	strb	r3, [r7, #31]

		dev->power_mode = BME680_SLEEP_MODE;
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	2200      	movs	r2, #0
 8002af0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		if (rslt == BME680_OK)
 8002af4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d104      	bne.n	8002b06 <bme680_set_sensor_settings+0x6e>
			rslt = bme680_set_sensor_mode(dev);
 8002afc:	6838      	ldr	r0, [r7, #0]
 8002afe:	f000 f993 	bl	8002e28 <bme680_set_sensor_mode>
 8002b02:	4603      	mov	r3, r0
 8002b04:	77fb      	strb	r3, [r7, #31]

		/* Selecting the filter */
		if (desired_settings & BME680_FILTER_SEL) {
 8002b06:	88fb      	ldrh	r3, [r7, #6]
 8002b08:	f003 0310 	and.w	r3, r3, #16
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d03d      	beq.n	8002b8c <bme680_set_sensor_settings+0xf4>
			rslt = boundary_check(&dev->tph_sett.filter, BME680_FILTER_SIZE_0, BME680_FILTER_SIZE_127, dev);
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	f103 003b 	add.w	r0, r3, #59	; 0x3b
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	2207      	movs	r2, #7
 8002b1a:	2100      	movs	r1, #0
 8002b1c:	f001 f8af 	bl	8003c7e <boundary_check>
 8002b20:	4603      	mov	r3, r0
 8002b22:	77fb      	strb	r3, [r7, #31]
			reg_addr = BME680_CONF_ODR_FILT_ADDR;
 8002b24:	2375      	movs	r3, #117	; 0x75
 8002b26:	773b      	strb	r3, [r7, #28]

			if (rslt == BME680_OK)
 8002b28:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d108      	bne.n	8002b42 <bme680_set_sensor_settings+0xaa>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 8002b30:	f107 011b 	add.w	r1, r7, #27
 8002b34:	7f38      	ldrb	r0, [r7, #28]
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	2201      	movs	r2, #1
 8002b3a:	f7ff fea4 	bl	8002886 <bme680_get_regs>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	77fb      	strb	r3, [r7, #31]

			if (desired_settings & BME680_FILTER_SEL)
 8002b42:	88fb      	ldrh	r3, [r7, #6]
 8002b44:	f003 0310 	and.w	r3, r3, #16
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d010      	beq.n	8002b6e <bme680_set_sensor_settings+0xd6>
				data = BME680_SET_BITS(data, BME680_FILTER, dev->tph_sett.filter);
 8002b4c:	7efb      	ldrb	r3, [r7, #27]
 8002b4e:	b25b      	sxtb	r3, r3
 8002b50:	f023 031c 	bic.w	r3, r3, #28
 8002b54:	b25a      	sxtb	r2, r3
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 8002b5c:	009b      	lsls	r3, r3, #2
 8002b5e:	b25b      	sxtb	r3, r3
 8002b60:	f003 031c 	and.w	r3, r3, #28
 8002b64:	b25b      	sxtb	r3, r3
 8002b66:	4313      	orrs	r3, r2
 8002b68:	b25b      	sxtb	r3, r3
 8002b6a:	b2db      	uxtb	r3, r3
 8002b6c:	76fb      	strb	r3, [r7, #27]

			reg_array[count] = reg_addr; /* Append configuration */
 8002b6e:	7fbb      	ldrb	r3, [r7, #30]
 8002b70:	3320      	adds	r3, #32
 8002b72:	443b      	add	r3, r7
 8002b74:	7f3a      	ldrb	r2, [r7, #28]
 8002b76:	f803 2c0c 	strb.w	r2, [r3, #-12]
			data_array[count] = data;
 8002b7a:	7fbb      	ldrb	r3, [r7, #30]
 8002b7c:	7efa      	ldrb	r2, [r7, #27]
 8002b7e:	3320      	adds	r3, #32
 8002b80:	443b      	add	r3, r7
 8002b82:	f803 2c14 	strb.w	r2, [r3, #-20]
			count++;
 8002b86:	7fbb      	ldrb	r3, [r7, #30]
 8002b88:	3301      	adds	r3, #1
 8002b8a:	77bb      	strb	r3, [r7, #30]
		}

		/* Selecting heater control for the sensor */
		if (desired_settings & BME680_HCNTRL_SEL) {
 8002b8c:	88fb      	ldrh	r3, [r7, #6]
 8002b8e:	f003 0320 	and.w	r3, r3, #32
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d037      	beq.n	8002c06 <bme680_set_sensor_settings+0x16e>
			rslt = boundary_check(&dev->gas_sett.heatr_ctrl, BME680_ENABLE_HEATER,
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	f103 003d 	add.w	r0, r3, #61	; 0x3d
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	2208      	movs	r2, #8
 8002ba0:	2100      	movs	r1, #0
 8002ba2:	f001 f86c 	bl	8003c7e <boundary_check>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	77fb      	strb	r3, [r7, #31]
				BME680_DISABLE_HEATER, dev);
			reg_addr = BME680_CONF_HEAT_CTRL_ADDR;
 8002baa:	2370      	movs	r3, #112	; 0x70
 8002bac:	773b      	strb	r3, [r7, #28]

			if (rslt == BME680_OK)
 8002bae:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d108      	bne.n	8002bc8 <bme680_set_sensor_settings+0x130>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 8002bb6:	f107 011b 	add.w	r1, r7, #27
 8002bba:	7f38      	ldrb	r0, [r7, #28]
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	f7ff fe61 	bl	8002886 <bme680_get_regs>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	77fb      	strb	r3, [r7, #31]
			data = BME680_SET_BITS_POS_0(data, BME680_HCTRL, dev->gas_sett.heatr_ctrl);
 8002bc8:	7efb      	ldrb	r3, [r7, #27]
 8002bca:	b25b      	sxtb	r3, r3
 8002bcc:	f023 0308 	bic.w	r3, r3, #8
 8002bd0:	b25a      	sxtb	r2, r3
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bd8:	b25b      	sxtb	r3, r3
 8002bda:	f003 0308 	and.w	r3, r3, #8
 8002bde:	b25b      	sxtb	r3, r3
 8002be0:	4313      	orrs	r3, r2
 8002be2:	b25b      	sxtb	r3, r3
 8002be4:	b2db      	uxtb	r3, r3
 8002be6:	76fb      	strb	r3, [r7, #27]

			reg_array[count] = reg_addr; /* Append configuration */
 8002be8:	7fbb      	ldrb	r3, [r7, #30]
 8002bea:	3320      	adds	r3, #32
 8002bec:	443b      	add	r3, r7
 8002bee:	7f3a      	ldrb	r2, [r7, #28]
 8002bf0:	f803 2c0c 	strb.w	r2, [r3, #-12]
			data_array[count] = data;
 8002bf4:	7fbb      	ldrb	r3, [r7, #30]
 8002bf6:	7efa      	ldrb	r2, [r7, #27]
 8002bf8:	3320      	adds	r3, #32
 8002bfa:	443b      	add	r3, r7
 8002bfc:	f803 2c14 	strb.w	r2, [r3, #-20]
			count++;
 8002c00:	7fbb      	ldrb	r3, [r7, #30]
 8002c02:	3301      	adds	r3, #1
 8002c04:	77bb      	strb	r3, [r7, #30]
		}

		/* Selecting heater T,P oversampling for the sensor */
		if (desired_settings & (BME680_OST_SEL | BME680_OSP_SEL)) {
 8002c06:	88fb      	ldrh	r3, [r7, #6]
 8002c08:	f003 0303 	and.w	r3, r3, #3
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d050      	beq.n	8002cb2 <bme680_set_sensor_settings+0x21a>
			rslt = boundary_check(&dev->tph_sett.os_temp, BME680_OS_NONE, BME680_OS_16X, dev);
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	f103 0039 	add.w	r0, r3, #57	; 0x39
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	2205      	movs	r2, #5
 8002c1a:	2100      	movs	r1, #0
 8002c1c:	f001 f82f 	bl	8003c7e <boundary_check>
 8002c20:	4603      	mov	r3, r0
 8002c22:	77fb      	strb	r3, [r7, #31]
			reg_addr = BME680_CONF_T_P_MODE_ADDR;
 8002c24:	2374      	movs	r3, #116	; 0x74
 8002c26:	773b      	strb	r3, [r7, #28]

			if (rslt == BME680_OK)
 8002c28:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d108      	bne.n	8002c42 <bme680_set_sensor_settings+0x1aa>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 8002c30:	f107 011b 	add.w	r1, r7, #27
 8002c34:	7f38      	ldrb	r0, [r7, #28]
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	2201      	movs	r2, #1
 8002c3a:	f7ff fe24 	bl	8002886 <bme680_get_regs>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	77fb      	strb	r3, [r7, #31]

			if (desired_settings & BME680_OST_SEL)
 8002c42:	88fb      	ldrh	r3, [r7, #6]
 8002c44:	f003 0301 	and.w	r3, r3, #1
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d00d      	beq.n	8002c68 <bme680_set_sensor_settings+0x1d0>
				data = BME680_SET_BITS(data, BME680_OST, dev->tph_sett.os_temp);
 8002c4c:	7efb      	ldrb	r3, [r7, #27]
 8002c4e:	b25b      	sxtb	r3, r3
 8002c50:	f003 031f 	and.w	r3, r3, #31
 8002c54:	b25a      	sxtb	r2, r3
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002c5c:	015b      	lsls	r3, r3, #5
 8002c5e:	b25b      	sxtb	r3, r3
 8002c60:	4313      	orrs	r3, r2
 8002c62:	b25b      	sxtb	r3, r3
 8002c64:	b2db      	uxtb	r3, r3
 8002c66:	76fb      	strb	r3, [r7, #27]

			if (desired_settings & BME680_OSP_SEL)
 8002c68:	88fb      	ldrh	r3, [r7, #6]
 8002c6a:	f003 0302 	and.w	r3, r3, #2
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d010      	beq.n	8002c94 <bme680_set_sensor_settings+0x1fc>
				data = BME680_SET_BITS(data, BME680_OSP, dev->tph_sett.os_pres);
 8002c72:	7efb      	ldrb	r3, [r7, #27]
 8002c74:	b25b      	sxtb	r3, r3
 8002c76:	f023 031c 	bic.w	r3, r3, #28
 8002c7a:	b25a      	sxtb	r2, r3
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002c82:	009b      	lsls	r3, r3, #2
 8002c84:	b25b      	sxtb	r3, r3
 8002c86:	f003 031c 	and.w	r3, r3, #28
 8002c8a:	b25b      	sxtb	r3, r3
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	b25b      	sxtb	r3, r3
 8002c90:	b2db      	uxtb	r3, r3
 8002c92:	76fb      	strb	r3, [r7, #27]

			reg_array[count] = reg_addr;
 8002c94:	7fbb      	ldrb	r3, [r7, #30]
 8002c96:	3320      	adds	r3, #32
 8002c98:	443b      	add	r3, r7
 8002c9a:	7f3a      	ldrb	r2, [r7, #28]
 8002c9c:	f803 2c0c 	strb.w	r2, [r3, #-12]
			data_array[count] = data;
 8002ca0:	7fbb      	ldrb	r3, [r7, #30]
 8002ca2:	7efa      	ldrb	r2, [r7, #27]
 8002ca4:	3320      	adds	r3, #32
 8002ca6:	443b      	add	r3, r7
 8002ca8:	f803 2c14 	strb.w	r2, [r3, #-20]
			count++;
 8002cac:	7fbb      	ldrb	r3, [r7, #30]
 8002cae:	3301      	adds	r3, #1
 8002cb0:	77bb      	strb	r3, [r7, #30]
		}

		/* Selecting humidity oversampling for the sensor */
		if (desired_settings & BME680_OSH_SEL) {
 8002cb2:	88fb      	ldrh	r3, [r7, #6]
 8002cb4:	f003 0304 	and.w	r3, r3, #4
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d037      	beq.n	8002d2c <bme680_set_sensor_settings+0x294>
			rslt = boundary_check(&dev->tph_sett.os_hum, BME680_OS_NONE, BME680_OS_16X, dev);
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	2205      	movs	r2, #5
 8002cc6:	2100      	movs	r1, #0
 8002cc8:	f000 ffd9 	bl	8003c7e <boundary_check>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	77fb      	strb	r3, [r7, #31]
			reg_addr = BME680_CONF_OS_H_ADDR;
 8002cd0:	2372      	movs	r3, #114	; 0x72
 8002cd2:	773b      	strb	r3, [r7, #28]

			if (rslt == BME680_OK)
 8002cd4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d108      	bne.n	8002cee <bme680_set_sensor_settings+0x256>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 8002cdc:	f107 011b 	add.w	r1, r7, #27
 8002ce0:	7f38      	ldrb	r0, [r7, #28]
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	2201      	movs	r2, #1
 8002ce6:	f7ff fdce 	bl	8002886 <bme680_get_regs>
 8002cea:	4603      	mov	r3, r0
 8002cec:	77fb      	strb	r3, [r7, #31]
			data = BME680_SET_BITS_POS_0(data, BME680_OSH, dev->tph_sett.os_hum);
 8002cee:	7efb      	ldrb	r3, [r7, #27]
 8002cf0:	b25b      	sxtb	r3, r3
 8002cf2:	f023 0307 	bic.w	r3, r3, #7
 8002cf6:	b25a      	sxtb	r2, r3
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002cfe:	b25b      	sxtb	r3, r3
 8002d00:	f003 0307 	and.w	r3, r3, #7
 8002d04:	b25b      	sxtb	r3, r3
 8002d06:	4313      	orrs	r3, r2
 8002d08:	b25b      	sxtb	r3, r3
 8002d0a:	b2db      	uxtb	r3, r3
 8002d0c:	76fb      	strb	r3, [r7, #27]

			reg_array[count] = reg_addr; /* Append configuration */
 8002d0e:	7fbb      	ldrb	r3, [r7, #30]
 8002d10:	3320      	adds	r3, #32
 8002d12:	443b      	add	r3, r7
 8002d14:	7f3a      	ldrb	r2, [r7, #28]
 8002d16:	f803 2c0c 	strb.w	r2, [r3, #-12]
			data_array[count] = data;
 8002d1a:	7fbb      	ldrb	r3, [r7, #30]
 8002d1c:	7efa      	ldrb	r2, [r7, #27]
 8002d1e:	3320      	adds	r3, #32
 8002d20:	443b      	add	r3, r7
 8002d22:	f803 2c14 	strb.w	r2, [r3, #-20]
			count++;
 8002d26:	7fbb      	ldrb	r3, [r7, #30]
 8002d28:	3301      	adds	r3, #1
 8002d2a:	77bb      	strb	r3, [r7, #30]
		}

		/* Selecting the runGas and NB conversion settings for the sensor */
		if (desired_settings & (BME680_RUN_GAS_SEL | BME680_NBCONV_SEL)) {
 8002d2c:	88fb      	ldrh	r3, [r7, #6]
 8002d2e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d060      	beq.n	8002df8 <bme680_set_sensor_settings+0x360>
			rslt = boundary_check(&dev->gas_sett.run_gas, BME680_RUN_GAS_DISABLE,
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	f103 003e 	add.w	r0, r3, #62	; 0x3e
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	2201      	movs	r2, #1
 8002d40:	2100      	movs	r1, #0
 8002d42:	f000 ff9c 	bl	8003c7e <boundary_check>
 8002d46:	4603      	mov	r3, r0
 8002d48:	77fb      	strb	r3, [r7, #31]
				BME680_RUN_GAS_ENABLE, dev);
			if (rslt == BME680_OK) {
 8002d4a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d109      	bne.n	8002d66 <bme680_set_sensor_settings+0x2ce>
				/* Validate boundary conditions */
				rslt = boundary_check(&dev->gas_sett.nb_conv, BME680_NBCONV_MIN,
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	220a      	movs	r2, #10
 8002d5c:	2100      	movs	r1, #0
 8002d5e:	f000 ff8e 	bl	8003c7e <boundary_check>
 8002d62:	4603      	mov	r3, r0
 8002d64:	77fb      	strb	r3, [r7, #31]
					BME680_NBCONV_MAX, dev);
			}

			reg_addr = BME680_CONF_ODR_RUN_GAS_NBC_ADDR;
 8002d66:	2371      	movs	r3, #113	; 0x71
 8002d68:	773b      	strb	r3, [r7, #28]

			if (rslt == BME680_OK)
 8002d6a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d108      	bne.n	8002d84 <bme680_set_sensor_settings+0x2ec>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 8002d72:	f107 011b 	add.w	r1, r7, #27
 8002d76:	7f38      	ldrb	r0, [r7, #28]
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	f7ff fd83 	bl	8002886 <bme680_get_regs>
 8002d80:	4603      	mov	r3, r0
 8002d82:	77fb      	strb	r3, [r7, #31]

			if (desired_settings & BME680_RUN_GAS_SEL)
 8002d84:	88fb      	ldrh	r3, [r7, #6]
 8002d86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d010      	beq.n	8002db0 <bme680_set_sensor_settings+0x318>
				data = BME680_SET_BITS(data, BME680_RUN_GAS, dev->gas_sett.run_gas);
 8002d8e:	7efb      	ldrb	r3, [r7, #27]
 8002d90:	b25b      	sxtb	r3, r3
 8002d92:	f023 0310 	bic.w	r3, r3, #16
 8002d96:	b25a      	sxtb	r2, r3
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002d9e:	011b      	lsls	r3, r3, #4
 8002da0:	b25b      	sxtb	r3, r3
 8002da2:	f003 0310 	and.w	r3, r3, #16
 8002da6:	b25b      	sxtb	r3, r3
 8002da8:	4313      	orrs	r3, r2
 8002daa:	b25b      	sxtb	r3, r3
 8002dac:	b2db      	uxtb	r3, r3
 8002dae:	76fb      	strb	r3, [r7, #27]

			if (desired_settings & BME680_NBCONV_SEL)
 8002db0:	88fb      	ldrh	r3, [r7, #6]
 8002db2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d00f      	beq.n	8002dda <bme680_set_sensor_settings+0x342>
				data = BME680_SET_BITS_POS_0(data, BME680_NBCONV, dev->gas_sett.nb_conv);
 8002dba:	7efb      	ldrb	r3, [r7, #27]
 8002dbc:	b25b      	sxtb	r3, r3
 8002dbe:	f023 030f 	bic.w	r3, r3, #15
 8002dc2:	b25a      	sxtb	r2, r3
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002dca:	b25b      	sxtb	r3, r3
 8002dcc:	f003 030f 	and.w	r3, r3, #15
 8002dd0:	b25b      	sxtb	r3, r3
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	b25b      	sxtb	r3, r3
 8002dd6:	b2db      	uxtb	r3, r3
 8002dd8:	76fb      	strb	r3, [r7, #27]

			reg_array[count] = reg_addr; /* Append configuration */
 8002dda:	7fbb      	ldrb	r3, [r7, #30]
 8002ddc:	3320      	adds	r3, #32
 8002dde:	443b      	add	r3, r7
 8002de0:	7f3a      	ldrb	r2, [r7, #28]
 8002de2:	f803 2c0c 	strb.w	r2, [r3, #-12]
			data_array[count] = data;
 8002de6:	7fbb      	ldrb	r3, [r7, #30]
 8002de8:	7efa      	ldrb	r2, [r7, #27]
 8002dea:	3320      	adds	r3, #32
 8002dec:	443b      	add	r3, r7
 8002dee:	f803 2c14 	strb.w	r2, [r3, #-20]
			count++;
 8002df2:	7fbb      	ldrb	r3, [r7, #30]
 8002df4:	3301      	adds	r3, #1
 8002df6:	77bb      	strb	r3, [r7, #30]
		}

		if (rslt == BME680_OK)
 8002df8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d109      	bne.n	8002e14 <bme680_set_sensor_settings+0x37c>
			rslt = bme680_set_regs(reg_array, data_array, count, dev);
 8002e00:	7fba      	ldrb	r2, [r7, #30]
 8002e02:	f107 010c 	add.w	r1, r7, #12
 8002e06:	f107 0014 	add.w	r0, r7, #20
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	f7ff fd7a 	bl	8002904 <bme680_set_regs>
 8002e10:	4603      	mov	r3, r0
 8002e12:	77fb      	strb	r3, [r7, #31]

		/* Restore previous intended power mode */
		dev->power_mode = intended_power_mode;
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	7f7a      	ldrb	r2, [r7, #29]
 8002e18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}

	return rslt;
 8002e1c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8002e20:	4618      	mov	r0, r3
 8002e22:	3720      	adds	r7, #32
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bd80      	pop	{r7, pc}

08002e28 <bme680_set_sensor_mode>:

/*!
 * @brief This API is used to set the power mode of the sensor.
 */
int8_t bme680_set_sensor_mode(struct bme680_dev *dev)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b084      	sub	sp, #16
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t tmp_pow_mode;
	uint8_t pow_mode = 0;
 8002e30:	2300      	movs	r3, #0
 8002e32:	73bb      	strb	r3, [r7, #14]
	uint8_t reg_addr = BME680_CONF_T_P_MODE_ADDR;
 8002e34:	2374      	movs	r3, #116	; 0x74
 8002e36:	733b      	strb	r3, [r7, #12]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8002e38:	6878      	ldr	r0, [r7, #4]
 8002e3a:	f000 ff5b 	bl	8003cf4 <null_ptr_check>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	73fb      	strb	r3, [r7, #15]
	if (rslt == BME680_OK) {
 8002e42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d14c      	bne.n	8002ee4 <bme680_set_sensor_mode+0xbc>
		/* Call repeatedly until in sleep */
		do {
			rslt = bme680_get_regs(BME680_CONF_T_P_MODE_ADDR, &tmp_pow_mode, 1, dev);
 8002e4a:	f107 010d 	add.w	r1, r7, #13
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2201      	movs	r2, #1
 8002e52:	2074      	movs	r0, #116	; 0x74
 8002e54:	f7ff fd17 	bl	8002886 <bme680_get_regs>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	73fb      	strb	r3, [r7, #15]
			if (rslt == BME680_OK) {
 8002e5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d119      	bne.n	8002e98 <bme680_set_sensor_mode+0x70>
				/* Put to sleep before changing mode */
				pow_mode = (tmp_pow_mode & BME680_MODE_MSK);
 8002e64:	7b7b      	ldrb	r3, [r7, #13]
 8002e66:	f003 0303 	and.w	r3, r3, #3
 8002e6a:	73bb      	strb	r3, [r7, #14]

				if (pow_mode != BME680_SLEEP_MODE) {
 8002e6c:	7bbb      	ldrb	r3, [r7, #14]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d012      	beq.n	8002e98 <bme680_set_sensor_mode+0x70>
					tmp_pow_mode = tmp_pow_mode & (~BME680_MODE_MSK); /* Set to sleep */
 8002e72:	7b7b      	ldrb	r3, [r7, #13]
 8002e74:	f023 0303 	bic.w	r3, r3, #3
 8002e78:	b2db      	uxtb	r3, r3
 8002e7a:	737b      	strb	r3, [r7, #13]
					rslt = bme680_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
 8002e7c:	f107 010d 	add.w	r1, r7, #13
 8002e80:	f107 000c 	add.w	r0, r7, #12
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2201      	movs	r2, #1
 8002e88:	f7ff fd3c 	bl	8002904 <bme680_set_regs>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	73fb      	strb	r3, [r7, #15]
					dev->delay_ms(BME680_POLL_PERIOD_MS);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e94:	200a      	movs	r0, #10
 8002e96:	4798      	blx	r3
				}
			}
		} while (pow_mode != BME680_SLEEP_MODE);
 8002e98:	7bbb      	ldrb	r3, [r7, #14]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d1d5      	bne.n	8002e4a <bme680_set_sensor_mode+0x22>

		/* Already in sleep */
		if (dev->power_mode != BME680_SLEEP_MODE) {
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d01d      	beq.n	8002ee4 <bme680_set_sensor_mode+0xbc>
			tmp_pow_mode = (tmp_pow_mode & ~BME680_MODE_MSK) | (dev->power_mode & BME680_MODE_MSK);
 8002ea8:	7b7b      	ldrb	r3, [r7, #13]
 8002eaa:	b25b      	sxtb	r3, r3
 8002eac:	f023 0303 	bic.w	r3, r3, #3
 8002eb0:	b25a      	sxtb	r2, r3
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002eb8:	b25b      	sxtb	r3, r3
 8002eba:	f003 0303 	and.w	r3, r3, #3
 8002ebe:	b25b      	sxtb	r3, r3
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	b25b      	sxtb	r3, r3
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	737b      	strb	r3, [r7, #13]
			if (rslt == BME680_OK)
 8002ec8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d109      	bne.n	8002ee4 <bme680_set_sensor_mode+0xbc>
				rslt = bme680_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
 8002ed0:	f107 010d 	add.w	r1, r7, #13
 8002ed4:	f107 000c 	add.w	r0, r7, #12
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2201      	movs	r2, #1
 8002edc:	f7ff fd12 	bl	8002904 <bme680_set_regs>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	73fb      	strb	r3, [r7, #15]
		}
	}

	return rslt;
 8002ee4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	3710      	adds	r7, #16
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bd80      	pop	{r7, pc}

08002ef0 <bme680_get_profile_dur>:

/*!
 * @brief This API is used to get the profile duration of the sensor.
 */
void bme680_get_profile_dur(uint16_t *duration, const struct bme680_dev *dev)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b087      	sub	sp, #28
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
 8002ef8:	6039      	str	r1, [r7, #0]
	uint32_t tph_dur; /* Calculate in us */
	uint32_t meas_cycles;
	uint8_t os_to_meas_cycles[6] = {0, 1, 2, 4, 8, 16};
 8002efa:	4a2c      	ldr	r2, [pc, #176]	; (8002fac <bme680_get_profile_dur+0xbc>)
 8002efc:	f107 0308 	add.w	r3, r7, #8
 8002f00:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002f04:	6018      	str	r0, [r3, #0]
 8002f06:	3304      	adds	r3, #4
 8002f08:	8019      	strh	r1, [r3, #0]

	meas_cycles = os_to_meas_cycles[dev->tph_sett.os_temp];
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002f10:	3318      	adds	r3, #24
 8002f12:	443b      	add	r3, r7
 8002f14:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8002f18:	617b      	str	r3, [r7, #20]
	meas_cycles += os_to_meas_cycles[dev->tph_sett.os_pres];
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002f20:	3318      	adds	r3, #24
 8002f22:	443b      	add	r3, r7
 8002f24:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8002f28:	461a      	mov	r2, r3
 8002f2a:	697b      	ldr	r3, [r7, #20]
 8002f2c:	4413      	add	r3, r2
 8002f2e:	617b      	str	r3, [r7, #20]
	meas_cycles += os_to_meas_cycles[dev->tph_sett.os_hum];
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002f36:	3318      	adds	r3, #24
 8002f38:	443b      	add	r3, r7
 8002f3a:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8002f3e:	461a      	mov	r2, r3
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	4413      	add	r3, r2
 8002f44:	617b      	str	r3, [r7, #20]

	/* TPH measurement duration */
	tph_dur = meas_cycles * UINT32_C(1963);
 8002f46:	697b      	ldr	r3, [r7, #20]
 8002f48:	f240 72ab 	movw	r2, #1963	; 0x7ab
 8002f4c:	fb02 f303 	mul.w	r3, r2, r3
 8002f50:	613b      	str	r3, [r7, #16]
	tph_dur += UINT32_C(477 * 4); /* TPH switching duration */
 8002f52:	693b      	ldr	r3, [r7, #16]
 8002f54:	f203 7374 	addw	r3, r3, #1908	; 0x774
 8002f58:	613b      	str	r3, [r7, #16]
	tph_dur += UINT32_C(477 * 5); /* Gas measurement duration */
 8002f5a:	693b      	ldr	r3, [r7, #16]
 8002f5c:	f603 1351 	addw	r3, r3, #2385	; 0x951
 8002f60:	613b      	str	r3, [r7, #16]
	tph_dur += UINT32_C(500); /* Get it to the closest whole number.*/
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8002f68:	613b      	str	r3, [r7, #16]
	tph_dur /= UINT32_C(1000); /* Convert to ms */
 8002f6a:	693b      	ldr	r3, [r7, #16]
 8002f6c:	4a10      	ldr	r2, [pc, #64]	; (8002fb0 <bme680_get_profile_dur+0xc0>)
 8002f6e:	fba2 2303 	umull	r2, r3, r2, r3
 8002f72:	099b      	lsrs	r3, r3, #6
 8002f74:	613b      	str	r3, [r7, #16]

	tph_dur += UINT32_C(1); /* Wake up duration of 1ms */
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	3301      	adds	r3, #1
 8002f7a:	613b      	str	r3, [r7, #16]

	*duration = (uint16_t) tph_dur;
 8002f7c:	693b      	ldr	r3, [r7, #16]
 8002f7e:	b29a      	uxth	r2, r3
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	801a      	strh	r2, [r3, #0]

	/* Get the gas duration only when the run gas is enabled */
	if (dev->gas_sett.run_gas) {
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d008      	beq.n	8002fa0 <bme680_get_profile_dur+0xb0>
		/* The remaining time should be used for heating */
		*duration += dev->gas_sett.heatr_dur;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	881a      	ldrh	r2, [r3, #0]
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 8002f98:	4413      	add	r3, r2
 8002f9a:	b29a      	uxth	r2, r3
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	801a      	strh	r2, [r3, #0]
	}
}
 8002fa0:	bf00      	nop
 8002fa2:	371c      	adds	r7, #28
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002faa:	4770      	bx	lr
 8002fac:	080163a4 	.word	0x080163a4
 8002fb0:	10624dd3 	.word	0x10624dd3

08002fb4 <bme680_get_sensor_data>:
 * @brief This API reads the pressure, temperature and humidity and gas data
 * from the sensor, compensates the data and store it in the bme680_data
 * structure instance passed by the user.
 */
int8_t bme680_get_sensor_data(struct bme680_field_data *data, struct bme680_dev *dev)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b084      	sub	sp, #16
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
 8002fbc:	6039      	str	r1, [r7, #0]
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8002fbe:	6838      	ldr	r0, [r7, #0]
 8002fc0:	f000 fe98 	bl	8003cf4 <null_ptr_check>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	73fb      	strb	r3, [r7, #15]
	if (rslt == BME680_OK) {
 8002fc8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d117      	bne.n	8003000 <bme680_get_sensor_data+0x4c>
		/* Reading the sensor data in forced mode only */
		rslt = read_field_data(data, dev);
 8002fd0:	6839      	ldr	r1, [r7, #0]
 8002fd2:	6878      	ldr	r0, [r7, #4]
 8002fd4:	f000 fd05 	bl	80039e2 <read_field_data>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	73fb      	strb	r3, [r7, #15]
		if (rslt == BME680_OK) {
 8002fdc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d10d      	bne.n	8003000 <bme680_get_sensor_data+0x4c>
			if (data->status & BME680_NEW_DATA_MSK) {
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	781b      	ldrb	r3, [r3, #0]
 8002fe8:	b25b      	sxtb	r3, r3
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	da04      	bge.n	8002ff8 <bme680_get_sensor_data+0x44>
				dev->new_fields = 1;
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	2201      	movs	r2, #1
 8002ff2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002ff6:	e003      	b.n	8003000 <bme680_get_sensor_data+0x4c>
			} else {
				dev->new_fields = 0;
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}
		}

	}

	return rslt;
 8003000:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003004:	4618      	mov	r0, r3
 8003006:	3710      	adds	r7, #16
 8003008:	46bd      	mov	sp, r7
 800300a:	bd80      	pop	{r7, pc}

0800300c <get_calib_data>:

/*!
 * @brief This internal API is used to read the calibrated data from the sensor.
 */
static int8_t get_calib_data(struct bme680_dev *dev)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b08e      	sub	sp, #56	; 0x38
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t coeff_array[BME680_COEFF_SIZE] = { 0 };
 8003014:	2300      	movs	r3, #0
 8003016:	60fb      	str	r3, [r7, #12]
 8003018:	f107 0310 	add.w	r3, r7, #16
 800301c:	2225      	movs	r2, #37	; 0x25
 800301e:	2100      	movs	r1, #0
 8003020:	4618      	mov	r0, r3
 8003022:	f010 f843 	bl	80130ac <memset>
	uint8_t temp_var = 0; /* Temporary variable */
 8003026:	2300      	movs	r3, #0
 8003028:	72fb      	strb	r3, [r7, #11]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 800302a:	6878      	ldr	r0, [r7, #4]
 800302c:	f000 fe62 	bl	8003cf4 <null_ptr_check>
 8003030:	4603      	mov	r3, r0
 8003032:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (rslt == BME680_OK) {
 8003036:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800303a:	2b00      	cmp	r3, #0
 800303c:	f040 810c 	bne.w	8003258 <get_calib_data+0x24c>
		rslt = bme680_get_regs(BME680_COEFF_ADDR1, coeff_array, BME680_COEFF_ADDR1_LEN, dev);
 8003040:	f107 010c 	add.w	r1, r7, #12
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2219      	movs	r2, #25
 8003048:	2089      	movs	r0, #137	; 0x89
 800304a:	f7ff fc1c 	bl	8002886 <bme680_get_regs>
 800304e:	4603      	mov	r3, r0
 8003050:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		/* Append the second half in the same array */
		if (rslt == BME680_OK)
 8003054:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8003058:	2b00      	cmp	r3, #0
 800305a:	d10b      	bne.n	8003074 <get_calib_data+0x68>
			rslt = bme680_get_regs(BME680_COEFF_ADDR2, &coeff_array[BME680_COEFF_ADDR1_LEN]
 800305c:	f107 030c 	add.w	r3, r7, #12
 8003060:	f103 0119 	add.w	r1, r3, #25
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2210      	movs	r2, #16
 8003068:	20e1      	movs	r0, #225	; 0xe1
 800306a:	f7ff fc0c 	bl	8002886 <bme680_get_regs>
 800306e:	4603      	mov	r3, r0
 8003070:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			, BME680_COEFF_ADDR2_LEN, dev);

		/* Temperature related coefficients */
		dev->calib.par_t1 = (uint16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_T1_MSB_REG],
 8003074:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003078:	021b      	lsls	r3, r3, #8
 800307a:	b21a      	sxth	r2, r3
 800307c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003080:	b21b      	sxth	r3, r3
 8003082:	4313      	orrs	r3, r2
 8003084:	b21b      	sxth	r3, r3
 8003086:	b29a      	uxth	r2, r3
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	82da      	strh	r2, [r3, #22]
			coeff_array[BME680_T1_LSB_REG]));
		dev->calib.par_t2 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_T2_MSB_REG],
 800308c:	7bbb      	ldrb	r3, [r7, #14]
 800308e:	021b      	lsls	r3, r3, #8
 8003090:	b21a      	sxth	r2, r3
 8003092:	7b7b      	ldrb	r3, [r7, #13]
 8003094:	b21b      	sxth	r3, r3
 8003096:	4313      	orrs	r3, r2
 8003098:	b21a      	sxth	r2, r3
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	831a      	strh	r2, [r3, #24]
			coeff_array[BME680_T2_LSB_REG]));
		dev->calib.par_t3 = (int8_t) (coeff_array[BME680_T3_REG]);
 800309e:	7bfb      	ldrb	r3, [r7, #15]
 80030a0:	b25a      	sxtb	r2, r3
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	769a      	strb	r2, [r3, #26]

		/* Pressure related coefficients */
		dev->calib.par_p1 = (uint16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P1_MSB_REG],
 80030a6:	7cbb      	ldrb	r3, [r7, #18]
 80030a8:	021b      	lsls	r3, r3, #8
 80030aa:	b21a      	sxth	r2, r3
 80030ac:	7c7b      	ldrb	r3, [r7, #17]
 80030ae:	b21b      	sxth	r3, r3
 80030b0:	4313      	orrs	r3, r2
 80030b2:	b21b      	sxth	r3, r3
 80030b4:	b29a      	uxth	r2, r3
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	839a      	strh	r2, [r3, #28]
			coeff_array[BME680_P1_LSB_REG]));
		dev->calib.par_p2 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P2_MSB_REG],
 80030ba:	7d3b      	ldrb	r3, [r7, #20]
 80030bc:	021b      	lsls	r3, r3, #8
 80030be:	b21a      	sxth	r2, r3
 80030c0:	7cfb      	ldrb	r3, [r7, #19]
 80030c2:	b21b      	sxth	r3, r3
 80030c4:	4313      	orrs	r3, r2
 80030c6:	b21a      	sxth	r2, r3
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	83da      	strh	r2, [r3, #30]
			coeff_array[BME680_P2_LSB_REG]));
		dev->calib.par_p3 = (int8_t) coeff_array[BME680_P3_REG];
 80030cc:	7d7b      	ldrb	r3, [r7, #21]
 80030ce:	b25a      	sxtb	r2, r3
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	f883 2020 	strb.w	r2, [r3, #32]
		dev->calib.par_p4 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P4_MSB_REG],
 80030d6:	7e3b      	ldrb	r3, [r7, #24]
 80030d8:	021b      	lsls	r3, r3, #8
 80030da:	b21a      	sxth	r2, r3
 80030dc:	7dfb      	ldrb	r3, [r7, #23]
 80030de:	b21b      	sxth	r3, r3
 80030e0:	4313      	orrs	r3, r2
 80030e2:	b21a      	sxth	r2, r3
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	845a      	strh	r2, [r3, #34]	; 0x22
			coeff_array[BME680_P4_LSB_REG]));
		dev->calib.par_p5 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P5_MSB_REG],
 80030e8:	7ebb      	ldrb	r3, [r7, #26]
 80030ea:	021b      	lsls	r3, r3, #8
 80030ec:	b21a      	sxth	r2, r3
 80030ee:	7e7b      	ldrb	r3, [r7, #25]
 80030f0:	b21b      	sxth	r3, r3
 80030f2:	4313      	orrs	r3, r2
 80030f4:	b21a      	sxth	r2, r3
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	849a      	strh	r2, [r3, #36]	; 0x24
			coeff_array[BME680_P5_LSB_REG]));
		dev->calib.par_p6 = (int8_t) (coeff_array[BME680_P6_REG]);
 80030fa:	7f3b      	ldrb	r3, [r7, #28]
 80030fc:	b25a      	sxtb	r2, r3
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
		dev->calib.par_p7 = (int8_t) (coeff_array[BME680_P7_REG]);
 8003104:	7efb      	ldrb	r3, [r7, #27]
 8003106:	b25a      	sxtb	r2, r3
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		dev->calib.par_p8 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P8_MSB_REG],
 800310e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003112:	021b      	lsls	r3, r3, #8
 8003114:	b21a      	sxth	r2, r3
 8003116:	7ffb      	ldrb	r3, [r7, #31]
 8003118:	b21b      	sxth	r3, r3
 800311a:	4313      	orrs	r3, r2
 800311c:	b21a      	sxth	r2, r3
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	851a      	strh	r2, [r3, #40]	; 0x28
			coeff_array[BME680_P8_LSB_REG]));
		dev->calib.par_p9 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P9_MSB_REG],
 8003122:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8003126:	021b      	lsls	r3, r3, #8
 8003128:	b21a      	sxth	r2, r3
 800312a:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800312e:	b21b      	sxth	r3, r3
 8003130:	4313      	orrs	r3, r2
 8003132:	b21a      	sxth	r2, r3
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	855a      	strh	r2, [r3, #42]	; 0x2a
			coeff_array[BME680_P9_LSB_REG]));
		dev->calib.par_p10 = (uint8_t) (coeff_array[BME680_P10_REG]);
 8003138:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

		/* Humidity related coefficients */
		dev->calib.par_h1 = (uint16_t) (((uint16_t) coeff_array[BME680_H1_MSB_REG] << BME680_HUM_REG_SHIFT_VAL)
 8003142:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003146:	011b      	lsls	r3, r3, #4
			| (coeff_array[BME680_H1_LSB_REG] & BME680_BIT_H1_DATA_MSK));
 8003148:	b21a      	sxth	r2, r3
 800314a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800314e:	b21b      	sxth	r3, r3
 8003150:	f003 030f 	and.w	r3, r3, #15
 8003154:	b21b      	sxth	r3, r3
 8003156:	4313      	orrs	r3, r2
 8003158:	b21b      	sxth	r3, r3
		dev->calib.par_h1 = (uint16_t) (((uint16_t) coeff_array[BME680_H1_MSB_REG] << BME680_HUM_REG_SHIFT_VAL)
 800315a:	b29a      	uxth	r2, r3
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	811a      	strh	r2, [r3, #8]
		dev->calib.par_h2 = (uint16_t) (((uint16_t) coeff_array[BME680_H2_MSB_REG] << BME680_HUM_REG_SHIFT_VAL)
 8003160:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003164:	011b      	lsls	r3, r3, #4
			| ((coeff_array[BME680_H2_LSB_REG]) >> BME680_HUM_REG_SHIFT_VAL));
 8003166:	b21a      	sxth	r2, r3
 8003168:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800316c:	091b      	lsrs	r3, r3, #4
 800316e:	b2db      	uxtb	r3, r3
 8003170:	b21b      	sxth	r3, r3
 8003172:	4313      	orrs	r3, r2
 8003174:	b21b      	sxth	r3, r3
		dev->calib.par_h2 = (uint16_t) (((uint16_t) coeff_array[BME680_H2_MSB_REG] << BME680_HUM_REG_SHIFT_VAL)
 8003176:	b29a      	uxth	r2, r3
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	815a      	strh	r2, [r3, #10]
		dev->calib.par_h3 = (int8_t) coeff_array[BME680_H3_REG];
 800317c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003180:	b25a      	sxtb	r2, r3
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	731a      	strb	r2, [r3, #12]
		dev->calib.par_h4 = (int8_t) coeff_array[BME680_H4_REG];
 8003186:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800318a:	b25a      	sxtb	r2, r3
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	735a      	strb	r2, [r3, #13]
		dev->calib.par_h5 = (int8_t) coeff_array[BME680_H5_REG];
 8003190:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8003194:	b25a      	sxtb	r2, r3
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	739a      	strb	r2, [r3, #14]
		dev->calib.par_h6 = (uint8_t) coeff_array[BME680_H6_REG];
 800319a:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	73da      	strb	r2, [r3, #15]
		dev->calib.par_h7 = (int8_t) coeff_array[BME680_H7_REG];
 80031a2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80031a6:	b25a      	sxtb	r2, r3
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	741a      	strb	r2, [r3, #16]

		/* Gas heater related coefficients */
		dev->calib.par_gh1 = (int8_t) coeff_array[BME680_GH1_REG];
 80031ac:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80031b0:	b25a      	sxtb	r2, r3
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	745a      	strb	r2, [r3, #17]
		dev->calib.par_gh2 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_GH2_MSB_REG],
 80031b6:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80031ba:	021b      	lsls	r3, r3, #8
 80031bc:	b21a      	sxth	r2, r3
 80031be:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80031c2:	b21b      	sxth	r3, r3
 80031c4:	4313      	orrs	r3, r2
 80031c6:	b21a      	sxth	r2, r3
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	825a      	strh	r2, [r3, #18]
			coeff_array[BME680_GH2_LSB_REG]));
		dev->calib.par_gh3 = (int8_t) coeff_array[BME680_GH3_REG];
 80031cc:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80031d0:	b25a      	sxtb	r2, r3
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	751a      	strb	r2, [r3, #20]

		/* Other coefficients */
		if (rslt == BME680_OK) {
 80031d6:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d135      	bne.n	800324a <get_calib_data+0x23e>
			rslt = bme680_get_regs(BME680_ADDR_RES_HEAT_RANGE_ADDR, &temp_var, 1, dev);
 80031de:	f107 010b 	add.w	r1, r7, #11
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2201      	movs	r2, #1
 80031e6:	2002      	movs	r0, #2
 80031e8:	f7ff fb4d 	bl	8002886 <bme680_get_regs>
 80031ec:	4603      	mov	r3, r0
 80031ee:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			dev->calib.res_heat_range = ((temp_var & BME680_RHRANGE_MSK) / 16);
 80031f2:	7afb      	ldrb	r3, [r7, #11]
 80031f4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	da00      	bge.n	80031fe <get_calib_data+0x1f2>
 80031fc:	330f      	adds	r3, #15
 80031fe:	111b      	asrs	r3, r3, #4
 8003200:	b2da      	uxtb	r2, r3
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
			if (rslt == BME680_OK) {
 8003208:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800320c:	2b00      	cmp	r3, #0
 800320e:	d11c      	bne.n	800324a <get_calib_data+0x23e>
				rslt = bme680_get_regs(BME680_ADDR_RES_HEAT_VAL_ADDR, &temp_var, 1, dev);
 8003210:	f107 010b 	add.w	r1, r7, #11
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2201      	movs	r2, #1
 8003218:	2000      	movs	r0, #0
 800321a:	f7ff fb34 	bl	8002886 <bme680_get_regs>
 800321e:	4603      	mov	r3, r0
 8003220:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

				dev->calib.res_heat_val = (int8_t) temp_var;
 8003224:	7afb      	ldrb	r3, [r7, #11]
 8003226:	b25a      	sxtb	r2, r3
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
				if (rslt == BME680_OK)
 800322e:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8003232:	2b00      	cmp	r3, #0
 8003234:	d109      	bne.n	800324a <get_calib_data+0x23e>
					rslt = bme680_get_regs(BME680_ADDR_RANGE_SW_ERR_ADDR, &temp_var, 1, dev);
 8003236:	f107 010b 	add.w	r1, r7, #11
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2201      	movs	r2, #1
 800323e:	2004      	movs	r0, #4
 8003240:	f7ff fb21 	bl	8002886 <bme680_get_regs>
 8003244:	4603      	mov	r3, r0
 8003246:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			}
		}
		dev->calib.range_sw_err = ((int8_t) temp_var & (int8_t) BME680_RSERROR_MSK) / 16;
 800324a:	7afb      	ldrb	r3, [r7, #11]
 800324c:	b25b      	sxtb	r3, r3
 800324e:	111b      	asrs	r3, r3, #4
 8003250:	b25a      	sxtb	r2, r3
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	}

	return rslt;
 8003258:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800325c:	4618      	mov	r0, r3
 800325e:	3738      	adds	r7, #56	; 0x38
 8003260:	46bd      	mov	sp, r7
 8003262:	bd80      	pop	{r7, pc}

08003264 <set_gas_config>:

/*!
 * @brief This internal API is used to set the gas configuration of the sensor.
 */
static int8_t set_gas_config(struct bme680_dev *dev)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b084      	sub	sp, #16
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 800326c:	6878      	ldr	r0, [r7, #4]
 800326e:	f000 fd41 	bl	8003cf4 <null_ptr_check>
 8003272:	4603      	mov	r3, r0
 8003274:	73fb      	strb	r3, [r7, #15]
	if (rslt == BME680_OK) {
 8003276:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d132      	bne.n	80032e4 <set_gas_config+0x80>

		uint8_t reg_addr[2] = {0};
 800327e:	2300      	movs	r3, #0
 8003280:	81bb      	strh	r3, [r7, #12]
		uint8_t reg_data[2] = {0};
 8003282:	2300      	movs	r3, #0
 8003284:	813b      	strh	r3, [r7, #8]

		if (dev->power_mode == BME680_FORCED_MODE) {
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800328c:	2b01      	cmp	r3, #1
 800328e:	d119      	bne.n	80032c4 <set_gas_config+0x60>
			reg_addr[0] = BME680_RES_HEAT0_ADDR;
 8003290:	235a      	movs	r3, #90	; 0x5a
 8003292:	733b      	strb	r3, [r7, #12]
			reg_data[0] = calc_heater_res(dev->gas_sett.heatr_temp, dev);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800329a:	6879      	ldr	r1, [r7, #4]
 800329c:	4618      	mov	r0, r3
 800329e:	f000 faff 	bl	80038a0 <calc_heater_res>
 80032a2:	4603      	mov	r3, r0
 80032a4:	723b      	strb	r3, [r7, #8]
			reg_addr[1] = BME680_GAS_WAIT0_ADDR;
 80032a6:	2364      	movs	r3, #100	; 0x64
 80032a8:	737b      	strb	r3, [r7, #13]
			reg_data[1] = calc_heater_dur(dev->gas_sett.heatr_dur);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 80032b0:	4618      	mov	r0, r3
 80032b2:	f000 fb71 	bl	8003998 <calc_heater_dur>
 80032b6:	4603      	mov	r3, r0
 80032b8:	727b      	strb	r3, [r7, #9]
			dev->gas_sett.nb_conv = 0;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2200      	movs	r2, #0
 80032be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80032c2:	e001      	b.n	80032c8 <set_gas_config+0x64>
		} else {
			rslt = BME680_W_DEFINE_PWR_MODE;
 80032c4:	2301      	movs	r3, #1
 80032c6:	73fb      	strb	r3, [r7, #15]
		}
		if (rslt == BME680_OK)
 80032c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d109      	bne.n	80032e4 <set_gas_config+0x80>
			rslt = bme680_set_regs(reg_addr, reg_data, 2, dev);
 80032d0:	f107 0108 	add.w	r1, r7, #8
 80032d4:	f107 000c 	add.w	r0, r7, #12
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2202      	movs	r2, #2
 80032dc:	f7ff fb12 	bl	8002904 <bme680_set_regs>
 80032e0:	4603      	mov	r3, r0
 80032e2:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 80032e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80032e8:	4618      	mov	r0, r3
 80032ea:	3710      	adds	r7, #16
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd80      	pop	{r7, pc}

080032f0 <calc_temperature>:

/*!
 * @brief This internal API is used to calculate the temperature value.
 */
static int16_t calc_temperature(uint32_t temp_adc, struct bme680_dev *dev)
{
 80032f0:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80032f4:	b091      	sub	sp, #68	; 0x44
 80032f6:	af00      	add	r7, sp, #0
 80032f8:	61f8      	str	r0, [r7, #28]
 80032fa:	61b9      	str	r1, [r7, #24]
	int64_t var1;
	int64_t var2;
	int64_t var3;
	int16_t calc_temp;

	var1 = ((int32_t) temp_adc >> 3) - ((int32_t) dev->calib.par_t1 << 1);
 80032fc:	69fb      	ldr	r3, [r7, #28]
 80032fe:	10da      	asrs	r2, r3, #3
 8003300:	69bb      	ldr	r3, [r7, #24]
 8003302:	8adb      	ldrh	r3, [r3, #22]
 8003304:	005b      	lsls	r3, r3, #1
 8003306:	1ad3      	subs	r3, r2, r3
 8003308:	17da      	asrs	r2, r3, #31
 800330a:	603b      	str	r3, [r7, #0]
 800330c:	607a      	str	r2, [r7, #4]
 800330e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003312:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	var2 = (var1 * (int32_t) dev->calib.par_t2) >> 11;
 8003316:	69bb      	ldr	r3, [r7, #24]
 8003318:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 800331c:	b21b      	sxth	r3, r3
 800331e:	17da      	asrs	r2, r3, #31
 8003320:	613b      	str	r3, [r7, #16]
 8003322:	617a      	str	r2, [r7, #20]
 8003324:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003326:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800332a:	460a      	mov	r2, r1
 800332c:	fb02 f203 	mul.w	r2, r2, r3
 8003330:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003332:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8003336:	4601      	mov	r1, r0
 8003338:	fb01 f303 	mul.w	r3, r1, r3
 800333c:	4413      	add	r3, r2
 800333e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003340:	6939      	ldr	r1, [r7, #16]
 8003342:	fba2 4501 	umull	r4, r5, r2, r1
 8003346:	442b      	add	r3, r5
 8003348:	461d      	mov	r5, r3
 800334a:	f04f 0200 	mov.w	r2, #0
 800334e:	f04f 0300 	mov.w	r3, #0
 8003352:	0ae2      	lsrs	r2, r4, #11
 8003354:	ea42 5245 	orr.w	r2, r2, r5, lsl #21
 8003358:	12eb      	asrs	r3, r5, #11
 800335a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	var3 = ((var1 >> 1) * (var1 >> 1)) >> 12;
 800335e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003362:	f04f 0000 	mov.w	r0, #0
 8003366:	f04f 0100 	mov.w	r1, #0
 800336a:	0850      	lsrs	r0, r2, #1
 800336c:	ea40 70c3 	orr.w	r0, r0, r3, lsl #31
 8003370:	1059      	asrs	r1, r3, #1
 8003372:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 8003376:	f04f 0200 	mov.w	r2, #0
 800337a:	f04f 0300 	mov.w	r3, #0
 800337e:	0862      	lsrs	r2, r4, #1
 8003380:	ea42 72c5 	orr.w	r2, r2, r5, lsl #31
 8003384:	106b      	asrs	r3, r5, #1
 8003386:	fb02 f501 	mul.w	r5, r2, r1
 800338a:	fb00 f403 	mul.w	r4, r0, r3
 800338e:	442c      	add	r4, r5
 8003390:	fba0 ab02 	umull	sl, fp, r0, r2
 8003394:	eb04 030b 	add.w	r3, r4, fp
 8003398:	469b      	mov	fp, r3
 800339a:	f04f 0200 	mov.w	r2, #0
 800339e:	f04f 0300 	mov.w	r3, #0
 80033a2:	ea4f 321a 	mov.w	r2, sl, lsr #12
 80033a6:	ea42 520b 	orr.w	r2, r2, fp, lsl #20
 80033aa:	ea4f 332b 	mov.w	r3, fp, asr #12
 80033ae:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	var3 = ((var3) * ((int32_t) dev->calib.par_t3 << 4)) >> 14;
 80033b2:	69bb      	ldr	r3, [r7, #24]
 80033b4:	f993 301a 	ldrsb.w	r3, [r3, #26]
 80033b8:	011b      	lsls	r3, r3, #4
 80033ba:	17da      	asrs	r2, r3, #31
 80033bc:	60bb      	str	r3, [r7, #8]
 80033be:	60fa      	str	r2, [r7, #12]
 80033c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033c2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80033c6:	462a      	mov	r2, r5
 80033c8:	fb02 f203 	mul.w	r2, r2, r3
 80033cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033ce:	4621      	mov	r1, r4
 80033d0:	fb01 f303 	mul.w	r3, r1, r3
 80033d4:	4413      	add	r3, r2
 80033d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80033d8:	4621      	mov	r1, r4
 80033da:	fba2 8901 	umull	r8, r9, r2, r1
 80033de:	444b      	add	r3, r9
 80033e0:	4699      	mov	r9, r3
 80033e2:	f04f 0200 	mov.w	r2, #0
 80033e6:	f04f 0300 	mov.w	r3, #0
 80033ea:	ea4f 3298 	mov.w	r2, r8, lsr #14
 80033ee:	ea42 4289 	orr.w	r2, r2, r9, lsl #18
 80033f2:	ea4f 33a9 	mov.w	r3, r9, asr #14
 80033f6:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	dev->calib.t_fine = (int32_t) (var2 + var3);
 80033fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80033fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033fe:	4413      	add	r3, r2
 8003400:	461a      	mov	r2, r3
 8003402:	69bb      	ldr	r3, [r7, #24]
 8003404:	631a      	str	r2, [r3, #48]	; 0x30
	calc_temp = (int16_t) (((dev->calib.t_fine * 5) + 128) >> 8);
 8003406:	69bb      	ldr	r3, [r7, #24]
 8003408:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800340a:	4613      	mov	r3, r2
 800340c:	009b      	lsls	r3, r3, #2
 800340e:	4413      	add	r3, r2
 8003410:	3380      	adds	r3, #128	; 0x80
 8003412:	121b      	asrs	r3, r3, #8
 8003414:	84fb      	strh	r3, [r7, #38]	; 0x26

	return calc_temp;
 8003416:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
}
 800341a:	4618      	mov	r0, r3
 800341c:	3744      	adds	r7, #68	; 0x44
 800341e:	46bd      	mov	sp, r7
 8003420:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8003424:	4770      	bx	lr

08003426 <calc_pressure>:

/*!
 * @brief This internal API is used to calculate the pressure value.
 */
static uint32_t calc_pressure(uint32_t pres_adc, const struct bme680_dev *dev)
{
 8003426:	b480      	push	{r7}
 8003428:	b087      	sub	sp, #28
 800342a:	af00      	add	r7, sp, #0
 800342c:	6078      	str	r0, [r7, #4]
 800342e:	6039      	str	r1, [r7, #0]
	int32_t var1;
	int32_t var2;
	int32_t var3;
	int32_t pressure_comp;

	var1 = (((int32_t)dev->calib.t_fine) >> 1) - 64000;
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003434:	105b      	asrs	r3, r3, #1
 8003436:	f5a3 437a 	sub.w	r3, r3, #64000	; 0xfa00
 800343a:	613b      	str	r3, [r7, #16]
	var2 = ((((var1 >> 2) * (var1 >> 2)) >> 11) *
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	109b      	asrs	r3, r3, #2
 8003440:	693a      	ldr	r2, [r7, #16]
 8003442:	1092      	asrs	r2, r2, #2
 8003444:	fb02 f303 	mul.w	r3, r2, r3
 8003448:	12db      	asrs	r3, r3, #11
		(int32_t)dev->calib.par_p6) >> 2;
 800344a:	683a      	ldr	r2, [r7, #0]
 800344c:	f992 2026 	ldrsb.w	r2, [r2, #38]	; 0x26
	var2 = ((((var1 >> 2) * (var1 >> 2)) >> 11) *
 8003450:	fb02 f303 	mul.w	r3, r2, r3
 8003454:	109b      	asrs	r3, r3, #2
 8003456:	60fb      	str	r3, [r7, #12]
	var2 = var2 + ((var1 * (int32_t)dev->calib.par_p5) << 1);
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 800345e:	461a      	mov	r2, r3
 8003460:	693b      	ldr	r3, [r7, #16]
 8003462:	fb02 f303 	mul.w	r3, r2, r3
 8003466:	005b      	lsls	r3, r3, #1
 8003468:	68fa      	ldr	r2, [r7, #12]
 800346a:	4413      	add	r3, r2
 800346c:	60fb      	str	r3, [r7, #12]
	var2 = (var2 >> 2) + ((int32_t)dev->calib.par_p4 << 16);
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	109a      	asrs	r2, r3, #2
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8003478:	041b      	lsls	r3, r3, #16
 800347a:	4413      	add	r3, r2
 800347c:	60fb      	str	r3, [r7, #12]
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	109b      	asrs	r3, r3, #2
 8003482:	693a      	ldr	r2, [r7, #16]
 8003484:	1092      	asrs	r2, r2, #2
 8003486:	fb02 f303 	mul.w	r3, r2, r3
 800348a:	135b      	asrs	r3, r3, #13
		((int32_t)dev->calib.par_p3 << 5)) >> 3) +
 800348c:	683a      	ldr	r2, [r7, #0]
 800348e:	f992 2020 	ldrsb.w	r2, [r2, #32]
 8003492:	0152      	lsls	r2, r2, #5
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
 8003494:	fb02 f303 	mul.w	r3, r2, r3
		((int32_t)dev->calib.par_p3 << 5)) >> 3) +
 8003498:	10da      	asrs	r2, r3, #3
		(((int32_t)dev->calib.par_p2 * var1) >> 1);
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 80034a0:	4619      	mov	r1, r3
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	fb01 f303 	mul.w	r3, r1, r3
 80034a8:	105b      	asrs	r3, r3, #1
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
 80034aa:	4413      	add	r3, r2
 80034ac:	613b      	str	r3, [r7, #16]
	var1 = var1 >> 18;
 80034ae:	693b      	ldr	r3, [r7, #16]
 80034b0:	149b      	asrs	r3, r3, #18
 80034b2:	613b      	str	r3, [r7, #16]
	var1 = ((32768 + var1) * (int32_t)dev->calib.par_p1) >> 15;
 80034b4:	693b      	ldr	r3, [r7, #16]
 80034b6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80034ba:	683a      	ldr	r2, [r7, #0]
 80034bc:	8b92      	ldrh	r2, [r2, #28]
 80034be:	fb02 f303 	mul.w	r3, r2, r3
 80034c2:	13db      	asrs	r3, r3, #15
 80034c4:	613b      	str	r3, [r7, #16]
	pressure_comp = 1048576 - pres_adc;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 80034cc:	617b      	str	r3, [r7, #20]
	pressure_comp = (int32_t)((pressure_comp - (var2 >> 12)) * ((uint32_t)3125));
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	131b      	asrs	r3, r3, #12
 80034d2:	697a      	ldr	r2, [r7, #20]
 80034d4:	1ad3      	subs	r3, r2, r3
 80034d6:	461a      	mov	r2, r3
 80034d8:	f640 4335 	movw	r3, #3125	; 0xc35
 80034dc:	fb02 f303 	mul.w	r3, r2, r3
 80034e0:	617b      	str	r3, [r7, #20]
	if (pressure_comp >= BME680_MAX_OVERFLOW_VAL)
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034e8:	db06      	blt.n	80034f8 <calc_pressure+0xd2>
		pressure_comp = ((pressure_comp / var1) << 1);
 80034ea:	697a      	ldr	r2, [r7, #20]
 80034ec:	693b      	ldr	r3, [r7, #16]
 80034ee:	fb92 f3f3 	sdiv	r3, r2, r3
 80034f2:	005b      	lsls	r3, r3, #1
 80034f4:	617b      	str	r3, [r7, #20]
 80034f6:	e005      	b.n	8003504 <calc_pressure+0xde>
	else
		pressure_comp = ((pressure_comp << 1) / var1);
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	005a      	lsls	r2, r3, #1
 80034fc:	693b      	ldr	r3, [r7, #16]
 80034fe:	fb92 f3f3 	sdiv	r3, r2, r3
 8003502:	617b      	str	r3, [r7, #20]
	var1 = ((int32_t)dev->calib.par_p9 * (int32_t)(((pressure_comp >> 3) *
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 800350a:	4619      	mov	r1, r3
 800350c:	697b      	ldr	r3, [r7, #20]
 800350e:	10db      	asrs	r3, r3, #3
		(pressure_comp >> 3)) >> 13)) >> 12;
 8003510:	697a      	ldr	r2, [r7, #20]
 8003512:	10d2      	asrs	r2, r2, #3
	var1 = ((int32_t)dev->calib.par_p9 * (int32_t)(((pressure_comp >> 3) *
 8003514:	fb02 f303 	mul.w	r3, r2, r3
		(pressure_comp >> 3)) >> 13)) >> 12;
 8003518:	135b      	asrs	r3, r3, #13
	var1 = ((int32_t)dev->calib.par_p9 * (int32_t)(((pressure_comp >> 3) *
 800351a:	fb01 f303 	mul.w	r3, r1, r3
 800351e:	131b      	asrs	r3, r3, #12
 8003520:	613b      	str	r3, [r7, #16]
	var2 = ((int32_t)(pressure_comp >> 2) *
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	109b      	asrs	r3, r3, #2
		(int32_t)dev->calib.par_p8) >> 13;
 8003526:	683a      	ldr	r2, [r7, #0]
 8003528:	f9b2 2028 	ldrsh.w	r2, [r2, #40]	; 0x28
	var2 = ((int32_t)(pressure_comp >> 2) *
 800352c:	fb02 f303 	mul.w	r3, r2, r3
 8003530:	135b      	asrs	r3, r3, #13
 8003532:	60fb      	str	r3, [r7, #12]
	var3 = ((int32_t)(pressure_comp >> 8) * (int32_t)(pressure_comp >> 8) *
 8003534:	697b      	ldr	r3, [r7, #20]
 8003536:	121b      	asrs	r3, r3, #8
 8003538:	697a      	ldr	r2, [r7, #20]
 800353a:	1212      	asrs	r2, r2, #8
 800353c:	fb02 f303 	mul.w	r3, r2, r3
		(int32_t)(pressure_comp >> 8) *
 8003540:	697a      	ldr	r2, [r7, #20]
 8003542:	1212      	asrs	r2, r2, #8
	var3 = ((int32_t)(pressure_comp >> 8) * (int32_t)(pressure_comp >> 8) *
 8003544:	fb02 f303 	mul.w	r3, r2, r3
		(int32_t)dev->calib.par_p10) >> 17;
 8003548:	683a      	ldr	r2, [r7, #0]
 800354a:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
		(int32_t)(pressure_comp >> 8) *
 800354e:	fb02 f303 	mul.w	r3, r2, r3
	var3 = ((int32_t)(pressure_comp >> 8) * (int32_t)(pressure_comp >> 8) *
 8003552:	145b      	asrs	r3, r3, #17
 8003554:	60bb      	str	r3, [r7, #8]

	pressure_comp = (int32_t)(pressure_comp) + ((var1 + var2 + var3 +
 8003556:	693a      	ldr	r2, [r7, #16]
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	441a      	add	r2, r3
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	441a      	add	r2, r3
		((int32_t)dev->calib.par_p7 << 7)) >> 4);
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	f993 3027 	ldrsb.w	r3, [r3, #39]	; 0x27
 8003566:	01db      	lsls	r3, r3, #7
	pressure_comp = (int32_t)(pressure_comp) + ((var1 + var2 + var3 +
 8003568:	4413      	add	r3, r2
		((int32_t)dev->calib.par_p7 << 7)) >> 4);
 800356a:	111b      	asrs	r3, r3, #4
	pressure_comp = (int32_t)(pressure_comp) + ((var1 + var2 + var3 +
 800356c:	697a      	ldr	r2, [r7, #20]
 800356e:	4413      	add	r3, r2
 8003570:	617b      	str	r3, [r7, #20]

	return (uint32_t)pressure_comp;
 8003572:	697b      	ldr	r3, [r7, #20]

}
 8003574:	4618      	mov	r0, r3
 8003576:	371c      	adds	r7, #28
 8003578:	46bd      	mov	sp, r7
 800357a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357e:	4770      	bx	lr

08003580 <calc_humidity>:

/*!
 * @brief This internal API is used to calculate the humidity value.
 */
static uint32_t calc_humidity(uint16_t hum_adc, const struct bme680_dev *dev)
{
 8003580:	b480      	push	{r7}
 8003582:	b08b      	sub	sp, #44	; 0x2c
 8003584:	af00      	add	r7, sp, #0
 8003586:	4603      	mov	r3, r0
 8003588:	6039      	str	r1, [r7, #0]
 800358a:	80fb      	strh	r3, [r7, #6]
	int32_t var5;
	int32_t var6;
	int32_t temp_scaled;
	int32_t calc_hum;

	temp_scaled = (((int32_t) dev->calib.t_fine * 5) + 128) >> 8;
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003590:	4613      	mov	r3, r2
 8003592:	009b      	lsls	r3, r3, #2
 8003594:	4413      	add	r3, r2
 8003596:	3380      	adds	r3, #128	; 0x80
 8003598:	121b      	asrs	r3, r3, #8
 800359a:	623b      	str	r3, [r7, #32]
	var1 = (int32_t) (hum_adc - ((int32_t) ((int32_t) dev->calib.par_h1 * 16)))
 800359c:	88fa      	ldrh	r2, [r7, #6]
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	891b      	ldrh	r3, [r3, #8]
 80035a2:	011b      	lsls	r3, r3, #4
 80035a4:	1ad2      	subs	r2, r2, r3
		- (((temp_scaled * (int32_t) dev->calib.par_h3) / ((int32_t) 100)) >> 1);
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	f993 300c 	ldrsb.w	r3, [r3, #12]
 80035ac:	4619      	mov	r1, r3
 80035ae:	6a3b      	ldr	r3, [r7, #32]
 80035b0:	fb01 f303 	mul.w	r3, r1, r3
 80035b4:	493d      	ldr	r1, [pc, #244]	; (80036ac <calc_humidity+0x12c>)
 80035b6:	fb81 0103 	smull	r0, r1, r1, r3
 80035ba:	1149      	asrs	r1, r1, #5
 80035bc:	17db      	asrs	r3, r3, #31
 80035be:	1acb      	subs	r3, r1, r3
 80035c0:	105b      	asrs	r3, r3, #1
	var1 = (int32_t) (hum_adc - ((int32_t) ((int32_t) dev->calib.par_h1 * 16)))
 80035c2:	1ad3      	subs	r3, r2, r3
 80035c4:	61fb      	str	r3, [r7, #28]
	var2 = ((int32_t) dev->calib.par_h2
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	895b      	ldrh	r3, [r3, #10]
 80035ca:	4618      	mov	r0, r3
		* (((temp_scaled * (int32_t) dev->calib.par_h4) / ((int32_t) 100))
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	f993 300d 	ldrsb.w	r3, [r3, #13]
 80035d2:	461a      	mov	r2, r3
 80035d4:	6a3b      	ldr	r3, [r7, #32]
 80035d6:	fb02 f303 	mul.w	r3, r2, r3
 80035da:	4a34      	ldr	r2, [pc, #208]	; (80036ac <calc_humidity+0x12c>)
 80035dc:	fb82 1203 	smull	r1, r2, r2, r3
 80035e0:	1152      	asrs	r2, r2, #5
 80035e2:	17db      	asrs	r3, r3, #31
 80035e4:	1ad2      	subs	r2, r2, r3
			+ (((temp_scaled * ((temp_scaled * (int32_t) dev->calib.par_h5) / ((int32_t) 100))) >> 6)
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	f993 300e 	ldrsb.w	r3, [r3, #14]
 80035ec:	4619      	mov	r1, r3
 80035ee:	6a3b      	ldr	r3, [r7, #32]
 80035f0:	fb01 f303 	mul.w	r3, r1, r3
 80035f4:	492d      	ldr	r1, [pc, #180]	; (80036ac <calc_humidity+0x12c>)
 80035f6:	fb81 c103 	smull	ip, r1, r1, r3
 80035fa:	1149      	asrs	r1, r1, #5
 80035fc:	17db      	asrs	r3, r3, #31
 80035fe:	1acb      	subs	r3, r1, r3
 8003600:	6a39      	ldr	r1, [r7, #32]
 8003602:	fb01 f303 	mul.w	r3, r1, r3
 8003606:	119b      	asrs	r3, r3, #6
				/ ((int32_t) 100)) + (int32_t) (1 << 14))) >> 10;
 8003608:	4928      	ldr	r1, [pc, #160]	; (80036ac <calc_humidity+0x12c>)
 800360a:	fb81 c103 	smull	ip, r1, r1, r3
 800360e:	1149      	asrs	r1, r1, #5
 8003610:	17db      	asrs	r3, r3, #31
 8003612:	1acb      	subs	r3, r1, r3
			+ (((temp_scaled * ((temp_scaled * (int32_t) dev->calib.par_h5) / ((int32_t) 100))) >> 6)
 8003614:	4413      	add	r3, r2
				/ ((int32_t) 100)) + (int32_t) (1 << 14))) >> 10;
 8003616:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
		* (((temp_scaled * (int32_t) dev->calib.par_h4) / ((int32_t) 100))
 800361a:	fb00 f303 	mul.w	r3, r0, r3
	var2 = ((int32_t) dev->calib.par_h2
 800361e:	129b      	asrs	r3, r3, #10
 8003620:	61bb      	str	r3, [r7, #24]
	var3 = var1 * var2;
 8003622:	69fb      	ldr	r3, [r7, #28]
 8003624:	69ba      	ldr	r2, [r7, #24]
 8003626:	fb02 f303 	mul.w	r3, r2, r3
 800362a:	617b      	str	r3, [r7, #20]
	var4 = (int32_t) dev->calib.par_h6 << 7;
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	7bdb      	ldrb	r3, [r3, #15]
 8003630:	01db      	lsls	r3, r3, #7
 8003632:	613b      	str	r3, [r7, #16]
	var4 = ((var4) + ((temp_scaled * (int32_t) dev->calib.par_h7) / ((int32_t) 100))) >> 4;
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	f993 3010 	ldrsb.w	r3, [r3, #16]
 800363a:	461a      	mov	r2, r3
 800363c:	6a3b      	ldr	r3, [r7, #32]
 800363e:	fb02 f303 	mul.w	r3, r2, r3
 8003642:	4a1a      	ldr	r2, [pc, #104]	; (80036ac <calc_humidity+0x12c>)
 8003644:	fb82 1203 	smull	r1, r2, r2, r3
 8003648:	1152      	asrs	r2, r2, #5
 800364a:	17db      	asrs	r3, r3, #31
 800364c:	1ad2      	subs	r2, r2, r3
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	4413      	add	r3, r2
 8003652:	111b      	asrs	r3, r3, #4
 8003654:	613b      	str	r3, [r7, #16]
	var5 = ((var3 >> 14) * (var3 >> 14)) >> 10;
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	139b      	asrs	r3, r3, #14
 800365a:	697a      	ldr	r2, [r7, #20]
 800365c:	1392      	asrs	r2, r2, #14
 800365e:	fb02 f303 	mul.w	r3, r2, r3
 8003662:	129b      	asrs	r3, r3, #10
 8003664:	60fb      	str	r3, [r7, #12]
	var6 = (var4 * var5) >> 1;
 8003666:	693b      	ldr	r3, [r7, #16]
 8003668:	68fa      	ldr	r2, [r7, #12]
 800366a:	fb02 f303 	mul.w	r3, r2, r3
 800366e:	105b      	asrs	r3, r3, #1
 8003670:	60bb      	str	r3, [r7, #8]
	calc_hum = (((var3 + var6) >> 10) * ((int32_t) 1000)) >> 12;
 8003672:	697a      	ldr	r2, [r7, #20]
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	4413      	add	r3, r2
 8003678:	129b      	asrs	r3, r3, #10
 800367a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800367e:	fb02 f303 	mul.w	r3, r2, r3
 8003682:	131b      	asrs	r3, r3, #12
 8003684:	627b      	str	r3, [r7, #36]	; 0x24

	if (calc_hum > 100000) /* Cap at 100%rH */
 8003686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003688:	4a09      	ldr	r2, [pc, #36]	; (80036b0 <calc_humidity+0x130>)
 800368a:	4293      	cmp	r3, r2
 800368c:	dd02      	ble.n	8003694 <calc_humidity+0x114>
		calc_hum = 100000;
 800368e:	4b08      	ldr	r3, [pc, #32]	; (80036b0 <calc_humidity+0x130>)
 8003690:	627b      	str	r3, [r7, #36]	; 0x24
 8003692:	e004      	b.n	800369e <calc_humidity+0x11e>
	else if (calc_hum < 0)
 8003694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003696:	2b00      	cmp	r3, #0
 8003698:	da01      	bge.n	800369e <calc_humidity+0x11e>
		calc_hum = 0;
 800369a:	2300      	movs	r3, #0
 800369c:	627b      	str	r3, [r7, #36]	; 0x24

	return (uint32_t) calc_hum;
 800369e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80036a0:	4618      	mov	r0, r3
 80036a2:	372c      	adds	r7, #44	; 0x2c
 80036a4:	46bd      	mov	sp, r7
 80036a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036aa:	4770      	bx	lr
 80036ac:	51eb851f 	.word	0x51eb851f
 80036b0:	000186a0 	.word	0x000186a0

080036b4 <calc_gas_resistance>:

/*!
 * @brief This internal API is used to calculate the Gas Resistance value.
 */
static uint32_t calc_gas_resistance(uint16_t gas_res_adc, uint8_t gas_range, const struct bme680_dev *dev)
{
 80036b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80036b8:	b0bc      	sub	sp, #240	; 0xf0
 80036ba:	af00      	add	r7, sp, #0
 80036bc:	4603      	mov	r3, r0
 80036be:	64ba      	str	r2, [r7, #72]	; 0x48
 80036c0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80036c4:	460b      	mov	r3, r1
 80036c6:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
	int64_t var1;
	uint64_t var2;
	int64_t var3;
	uint32_t calc_gas_res;
	/**Look up table 1 for the possible gas range values */
	uint32_t lookupTable1[16] = { UINT32_C(2147483647), UINT32_C(2147483647), UINT32_C(2147483647), UINT32_C(2147483647),
 80036ca:	4b73      	ldr	r3, [pc, #460]	; (8003898 <calc_gas_resistance+0x1e4>)
 80036cc:	f107 0594 	add.w	r5, r7, #148	; 0x94
 80036d0:	461c      	mov	r4, r3
 80036d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80036d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80036d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80036d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80036da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80036dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80036de:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80036e2:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
		UINT32_C(2147483647), UINT32_C(2126008810), UINT32_C(2147483647), UINT32_C(2130303777),
		UINT32_C(2147483647), UINT32_C(2147483647), UINT32_C(2143188679), UINT32_C(2136746228),
		UINT32_C(2147483647), UINT32_C(2126008810), UINT32_C(2147483647), UINT32_C(2147483647) };
	/**Look up table 2 for the possible gas range values */
	uint32_t lookupTable2[16] = { UINT32_C(4096000000), UINT32_C(2048000000), UINT32_C(1024000000), UINT32_C(512000000),
 80036e6:	4b6d      	ldr	r3, [pc, #436]	; (800389c <calc_gas_resistance+0x1e8>)
 80036e8:	f107 0554 	add.w	r5, r7, #84	; 0x54
 80036ec:	461c      	mov	r4, r3
 80036ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80036f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80036f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80036f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80036f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80036f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80036fa:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80036fe:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
		UINT32_C(255744255), UINT32_C(127110228), UINT32_C(64000000), UINT32_C(32258064), UINT32_C(16016016),
		UINT32_C(8000000), UINT32_C(4000000), UINT32_C(2000000), UINT32_C(1000000), UINT32_C(500000),
		UINT32_C(250000), UINT32_C(125000) };

	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
 8003702:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003704:	f993 3036 	ldrsb.w	r3, [r3, #54]	; 0x36
 8003708:	b25b      	sxtb	r3, r3
 800370a:	17da      	asrs	r2, r3, #31
 800370c:	63bb      	str	r3, [r7, #56]	; 0x38
 800370e:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003710:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 8003714:	4622      	mov	r2, r4
 8003716:	462b      	mov	r3, r5
 8003718:	f04f 0000 	mov.w	r0, #0
 800371c:	f04f 0100 	mov.w	r1, #0
 8003720:	0099      	lsls	r1, r3, #2
 8003722:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8003726:	0090      	lsls	r0, r2, #2
 8003728:	4602      	mov	r2, r0
 800372a:	460b      	mov	r3, r1
 800372c:	4621      	mov	r1, r4
 800372e:	1851      	adds	r1, r2, r1
 8003730:	6339      	str	r1, [r7, #48]	; 0x30
 8003732:	4629      	mov	r1, r5
 8003734:	eb43 0101 	adc.w	r1, r3, r1
 8003738:	6379      	str	r1, [r7, #52]	; 0x34
 800373a:	f240 533c 	movw	r3, #1340	; 0x53c
 800373e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8003742:	4602      	mov	r2, r0
 8003744:	18d3      	adds	r3, r2, r3
 8003746:	62bb      	str	r3, [r7, #40]	; 0x28
 8003748:	460b      	mov	r3, r1
 800374a:	f143 0300 	adc.w	r3, r3, #0
 800374e:	62fb      	str	r3, [r7, #44]	; 0x2c
		((int64_t) lookupTable1[gas_range])) >> 16;
 8003750:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003754:	009b      	lsls	r3, r3, #2
 8003756:	33a8      	adds	r3, #168	; 0xa8
 8003758:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800375c:	4413      	add	r3, r2
 800375e:	f853 3c5c 	ldr.w	r3, [r3, #-92]
 8003762:	2200      	movs	r2, #0
 8003764:	643b      	str	r3, [r7, #64]	; 0x40
 8003766:	647a      	str	r2, [r7, #68]	; 0x44
	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
 8003768:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800376c:	460b      	mov	r3, r1
 800376e:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 8003772:	4622      	mov	r2, r4
 8003774:	fb02 f203 	mul.w	r2, r2, r3
 8003778:	e9c7 4510 	strd	r4, r5, [r7, #64]	; 0x40
 800377c:	462b      	mov	r3, r5
 800377e:	4604      	mov	r4, r0
 8003780:	460d      	mov	r5, r1
 8003782:	4621      	mov	r1, r4
 8003784:	fb01 f303 	mul.w	r3, r1, r3
 8003788:	4413      	add	r3, r2
 800378a:	4622      	mov	r2, r4
 800378c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800378e:	fba2 8901 	umull	r8, r9, r2, r1
 8003792:	444b      	add	r3, r9
 8003794:	4699      	mov	r9, r3
 8003796:	f04f 0200 	mov.w	r2, #0
 800379a:	f04f 0300 	mov.w	r3, #0
 800379e:	ea4f 4218 	mov.w	r2, r8, lsr #16
 80037a2:	ea42 4209 	orr.w	r2, r2, r9, lsl #16
 80037a6:	ea4f 4329 	mov.w	r3, r9, asr #16
 80037aa:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
	var2 = (((int64_t) ((int64_t) gas_res_adc << 15) - (int64_t) (16777216)) + var1);
 80037ae:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80037b2:	2200      	movs	r2, #0
 80037b4:	623b      	str	r3, [r7, #32]
 80037b6:	627a      	str	r2, [r7, #36]	; 0x24
 80037b8:	f04f 0200 	mov.w	r2, #0
 80037bc:	f04f 0300 	mov.w	r3, #0
 80037c0:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80037c4:	4629      	mov	r1, r5
 80037c6:	03cb      	lsls	r3, r1, #15
 80037c8:	4621      	mov	r1, r4
 80037ca:	ea43 4351 	orr.w	r3, r3, r1, lsr #17
 80037ce:	4621      	mov	r1, r4
 80037d0:	03ca      	lsls	r2, r1, #15
 80037d2:	f112 417f 	adds.w	r1, r2, #4278190080	; 0xff000000
 80037d6:	61b9      	str	r1, [r7, #24]
 80037d8:	f143 33ff 	adc.w	r3, r3, #4294967295	; 0xffffffff
 80037dc:	61fb      	str	r3, [r7, #28]
 80037de:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 80037e2:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 80037e6:	4621      	mov	r1, r4
 80037e8:	1889      	adds	r1, r1, r2
 80037ea:	6139      	str	r1, [r7, #16]
 80037ec:	4629      	mov	r1, r5
 80037ee:	eb43 0101 	adc.w	r1, r3, r1
 80037f2:	6179      	str	r1, [r7, #20]
 80037f4:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80037f8:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
	var3 = (((int64_t) lookupTable2[gas_range] * (int64_t) var1) >> 9);
 80037fc:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003800:	009b      	lsls	r3, r3, #2
 8003802:	33a8      	adds	r3, #168	; 0xa8
 8003804:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003808:	4413      	add	r3, r2
 800380a:	f853 3c9c 	ldr.w	r3, [r3, #-156]
 800380e:	2200      	movs	r2, #0
 8003810:	60bb      	str	r3, [r7, #8]
 8003812:	60fa      	str	r2, [r7, #12]
 8003814:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003818:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800381c:	462a      	mov	r2, r5
 800381e:	fb02 f203 	mul.w	r2, r2, r3
 8003822:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8003826:	4621      	mov	r1, r4
 8003828:	fb01 f303 	mul.w	r3, r1, r3
 800382c:	4413      	add	r3, r2
 800382e:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8003832:	4621      	mov	r1, r4
 8003834:	fba2 ab01 	umull	sl, fp, r2, r1
 8003838:	445b      	add	r3, fp
 800383a:	469b      	mov	fp, r3
 800383c:	f04f 0200 	mov.w	r2, #0
 8003840:	f04f 0300 	mov.w	r3, #0
 8003844:	ea4f 225a 	mov.w	r2, sl, lsr #9
 8003848:	ea42 52cb 	orr.w	r2, r2, fp, lsl #23
 800384c:	ea4f 236b 	mov.w	r3, fp, asr #9
 8003850:	e9c7 2336 	strd	r2, r3, [r7, #216]	; 0xd8
	calc_gas_res = (uint32_t) ((var3 + ((int64_t) var2 >> 1)) / (int64_t) var2);
 8003854:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003858:	f04f 0200 	mov.w	r2, #0
 800385c:	f04f 0300 	mov.w	r3, #0
 8003860:	0842      	lsrs	r2, r0, #1
 8003862:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8003866:	104b      	asrs	r3, r1, #1
 8003868:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 800386c:	1814      	adds	r4, r2, r0
 800386e:	603c      	str	r4, [r7, #0]
 8003870:	414b      	adcs	r3, r1
 8003872:	607b      	str	r3, [r7, #4]
 8003874:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 8003878:	e9d7 0100 	ldrd	r0, r1, [r7]
 800387c:	f7fd f9dc 	bl	8000c38 <__aeabi_ldivmod>
 8003880:	4602      	mov	r2, r0
 8003882:	460b      	mov	r3, r1
 8003884:	4613      	mov	r3, r2
 8003886:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

	return calc_gas_res;
 800388a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
}
 800388e:	4618      	mov	r0, r3
 8003890:	37f0      	adds	r7, #240	; 0xf0
 8003892:	46bd      	mov	sp, r7
 8003894:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003898:	080163ac 	.word	0x080163ac
 800389c:	080163ec 	.word	0x080163ec

080038a0 <calc_heater_res>:

/*!
 * @brief This internal API is used to calculate the Heat Resistance value.
 */
static uint8_t calc_heater_res(uint16_t temp, const struct bme680_dev *dev)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b08b      	sub	sp, #44	; 0x2c
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	4603      	mov	r3, r0
 80038a8:	6039      	str	r1, [r7, #0]
 80038aa:	80fb      	strh	r3, [r7, #6]
	int32_t var3;
	int32_t var4;
	int32_t var5;
	int32_t heatr_res_x100;

	if (temp > 400) /* Cap temperature */
 80038ac:	88fb      	ldrh	r3, [r7, #6]
 80038ae:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80038b2:	d902      	bls.n	80038ba <calc_heater_res+0x1a>
		temp = 400;
 80038b4:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80038b8:	80fb      	strh	r3, [r7, #6]

	var1 = (((int32_t) dev->amb_temp * dev->calib.par_gh3) / 1000) * 256;
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80038c0:	461a      	mov	r2, r3
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	f993 3014 	ldrsb.w	r3, [r3, #20]
 80038c8:	fb02 f303 	mul.w	r3, r2, r3
 80038cc:	4a2f      	ldr	r2, [pc, #188]	; (800398c <calc_heater_res+0xec>)
 80038ce:	fb82 1203 	smull	r1, r2, r2, r3
 80038d2:	1192      	asrs	r2, r2, #6
 80038d4:	17db      	asrs	r3, r3, #31
 80038d6:	1ad3      	subs	r3, r2, r3
 80038d8:	021b      	lsls	r3, r3, #8
 80038da:	627b      	str	r3, [r7, #36]	; 0x24
	var2 = (dev->calib.par_gh1 + 784) * (((((dev->calib.par_gh2 + 154009) * temp * 5) / 100) + 3276800) / 10);
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	f993 3011 	ldrsb.w	r3, [r3, #17]
 80038e2:	f503 7244 	add.w	r2, r3, #784	; 0x310
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80038ec:	f503 3316 	add.w	r3, r3, #153600	; 0x25800
 80038f0:	f203 1399 	addw	r3, r3, #409	; 0x199
 80038f4:	88f9      	ldrh	r1, [r7, #6]
 80038f6:	fb01 f303 	mul.w	r3, r1, r3
 80038fa:	4925      	ldr	r1, [pc, #148]	; (8003990 <calc_heater_res+0xf0>)
 80038fc:	fb81 0103 	smull	r0, r1, r1, r3
 8003900:	10c9      	asrs	r1, r1, #3
 8003902:	17db      	asrs	r3, r3, #31
 8003904:	1acb      	subs	r3, r1, r3
 8003906:	f503 1348 	add.w	r3, r3, #3276800	; 0x320000
 800390a:	4921      	ldr	r1, [pc, #132]	; (8003990 <calc_heater_res+0xf0>)
 800390c:	fb81 0103 	smull	r0, r1, r1, r3
 8003910:	1089      	asrs	r1, r1, #2
 8003912:	17db      	asrs	r3, r3, #31
 8003914:	1acb      	subs	r3, r1, r3
 8003916:	fb02 f303 	mul.w	r3, r2, r3
 800391a:	623b      	str	r3, [r7, #32]
	var3 = var1 + (var2 / 2);
 800391c:	6a3b      	ldr	r3, [r7, #32]
 800391e:	0fda      	lsrs	r2, r3, #31
 8003920:	4413      	add	r3, r2
 8003922:	105b      	asrs	r3, r3, #1
 8003924:	461a      	mov	r2, r3
 8003926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003928:	4413      	add	r3, r2
 800392a:	61fb      	str	r3, [r7, #28]
	var4 = (var3 / (dev->calib.res_heat_range + 4));
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003932:	3304      	adds	r3, #4
 8003934:	69fa      	ldr	r2, [r7, #28]
 8003936:	fb92 f3f3 	sdiv	r3, r2, r3
 800393a:	61bb      	str	r3, [r7, #24]
	var5 = (131 * dev->calib.res_heat_val) + 65536;
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	f993 3035 	ldrsb.w	r3, [r3, #53]	; 0x35
 8003942:	461a      	mov	r2, r3
 8003944:	4613      	mov	r3, r2
 8003946:	019b      	lsls	r3, r3, #6
 8003948:	4413      	add	r3, r2
 800394a:	005b      	lsls	r3, r3, #1
 800394c:	4413      	add	r3, r2
 800394e:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8003952:	617b      	str	r3, [r7, #20]
	heatr_res_x100 = (int32_t) (((var4 / var5) - 250) * 34);
 8003954:	69ba      	ldr	r2, [r7, #24]
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	fb92 f3f3 	sdiv	r3, r2, r3
 800395c:	f1a3 02fa 	sub.w	r2, r3, #250	; 0xfa
 8003960:	4613      	mov	r3, r2
 8003962:	011b      	lsls	r3, r3, #4
 8003964:	4413      	add	r3, r2
 8003966:	005b      	lsls	r3, r3, #1
 8003968:	613b      	str	r3, [r7, #16]
	heatr_res = (uint8_t) ((heatr_res_x100 + 50) / 100);
 800396a:	693b      	ldr	r3, [r7, #16]
 800396c:	3332      	adds	r3, #50	; 0x32
 800396e:	4a09      	ldr	r2, [pc, #36]	; (8003994 <calc_heater_res+0xf4>)
 8003970:	fb82 1203 	smull	r1, r2, r2, r3
 8003974:	1152      	asrs	r2, r2, #5
 8003976:	17db      	asrs	r3, r3, #31
 8003978:	1ad3      	subs	r3, r2, r3
 800397a:	73fb      	strb	r3, [r7, #15]

	return heatr_res;
 800397c:	7bfb      	ldrb	r3, [r7, #15]
}
 800397e:	4618      	mov	r0, r3
 8003980:	372c      	adds	r7, #44	; 0x2c
 8003982:	46bd      	mov	sp, r7
 8003984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003988:	4770      	bx	lr
 800398a:	bf00      	nop
 800398c:	10624dd3 	.word	0x10624dd3
 8003990:	66666667 	.word	0x66666667
 8003994:	51eb851f 	.word	0x51eb851f

08003998 <calc_heater_dur>:

/*!
 * @brief This internal API is used to calculate the Heat duration value.
 */
static uint8_t calc_heater_dur(uint16_t dur)
{
 8003998:	b480      	push	{r7}
 800399a:	b085      	sub	sp, #20
 800399c:	af00      	add	r7, sp, #0
 800399e:	4603      	mov	r3, r0
 80039a0:	80fb      	strh	r3, [r7, #6]
	uint8_t factor = 0;
 80039a2:	2300      	movs	r3, #0
 80039a4:	73fb      	strb	r3, [r7, #15]
	uint8_t durval;

	if (dur >= 0xfc0) {
 80039a6:	88fb      	ldrh	r3, [r7, #6]
 80039a8:	f5b3 6f7c 	cmp.w	r3, #4032	; 0xfc0
 80039ac:	d308      	bcc.n	80039c0 <calc_heater_dur+0x28>
		durval = 0xff; /* Max duration*/
 80039ae:	23ff      	movs	r3, #255	; 0xff
 80039b0:	73bb      	strb	r3, [r7, #14]
 80039b2:	e00f      	b.n	80039d4 <calc_heater_dur+0x3c>
	} else {
		while (dur > 0x3F) {
			dur = dur / 4;
 80039b4:	88fb      	ldrh	r3, [r7, #6]
 80039b6:	089b      	lsrs	r3, r3, #2
 80039b8:	80fb      	strh	r3, [r7, #6]
			factor += 1;
 80039ba:	7bfb      	ldrb	r3, [r7, #15]
 80039bc:	3301      	adds	r3, #1
 80039be:	73fb      	strb	r3, [r7, #15]
		while (dur > 0x3F) {
 80039c0:	88fb      	ldrh	r3, [r7, #6]
 80039c2:	2b3f      	cmp	r3, #63	; 0x3f
 80039c4:	d8f6      	bhi.n	80039b4 <calc_heater_dur+0x1c>
		}
		durval = (uint8_t) (dur + (factor * 64));
 80039c6:	88fb      	ldrh	r3, [r7, #6]
 80039c8:	b2da      	uxtb	r2, r3
 80039ca:	7bfb      	ldrb	r3, [r7, #15]
 80039cc:	019b      	lsls	r3, r3, #6
 80039ce:	b2db      	uxtb	r3, r3
 80039d0:	4413      	add	r3, r2
 80039d2:	73bb      	strb	r3, [r7, #14]
	}

	return durval;
 80039d4:	7bbb      	ldrb	r3, [r7, #14]
}
 80039d6:	4618      	mov	r0, r3
 80039d8:	3714      	adds	r7, #20
 80039da:	46bd      	mov	sp, r7
 80039dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e0:	4770      	bx	lr

080039e2 <read_field_data>:

/*!
 * @brief This internal API is used to calculate the field data of sensor.
 */
static int8_t read_field_data(struct bme680_field_data *data, struct bme680_dev *dev)
{
 80039e2:	b580      	push	{r7, lr}
 80039e4:	b08a      	sub	sp, #40	; 0x28
 80039e6:	af00      	add	r7, sp, #0
 80039e8:	6078      	str	r0, [r7, #4]
 80039ea:	6039      	str	r1, [r7, #0]
	int8_t rslt;
	uint8_t buff[BME680_FIELD_LENGTH] = { 0 };
 80039ec:	2300      	movs	r3, #0
 80039ee:	60bb      	str	r3, [r7, #8]
 80039f0:	f107 030c 	add.w	r3, r7, #12
 80039f4:	2200      	movs	r2, #0
 80039f6:	601a      	str	r2, [r3, #0]
 80039f8:	605a      	str	r2, [r3, #4]
 80039fa:	f8c3 2007 	str.w	r2, [r3, #7]
	uint8_t gas_range;
	uint32_t adc_temp;
	uint32_t adc_pres;
	uint16_t adc_hum;
	uint16_t adc_gas_res;
	uint8_t tries = 10;
 80039fe:	230a      	movs	r3, #10
 8003a00:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8003a04:	6838      	ldr	r0, [r7, #0]
 8003a06:	f000 f975 	bl	8003cf4 <null_ptr_check>
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	do {
		if (rslt == BME680_OK) {
 8003a10:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	f040 8087 	bne.w	8003b28 <read_field_data+0x146>
			rslt = bme680_get_regs(((uint8_t) (BME680_FIELD0_ADDR)), buff, (uint16_t) BME680_FIELD_LENGTH,
 8003a1a:	f107 0108 	add.w	r1, r7, #8
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	220f      	movs	r2, #15
 8003a22:	201d      	movs	r0, #29
 8003a24:	f7fe ff2f 	bl	8002886 <bme680_get_regs>
 8003a28:	4603      	mov	r3, r0
 8003a2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				dev);

			data->status = buff[0] & BME680_NEW_DATA_MSK;
 8003a2e:	7a3b      	ldrb	r3, [r7, #8]
 8003a30:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003a34:	b2da      	uxtb	r2, r3
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	701a      	strb	r2, [r3, #0]
			data->gas_index = buff[0] & BME680_GAS_INDEX_MSK;
 8003a3a:	7a3b      	ldrb	r3, [r7, #8]
 8003a3c:	f003 030f 	and.w	r3, r3, #15
 8003a40:	b2da      	uxtb	r2, r3
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	705a      	strb	r2, [r3, #1]
			data->meas_index = buff[1];
 8003a46:	7a7a      	ldrb	r2, [r7, #9]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	709a      	strb	r2, [r3, #2]

			/* read the raw data from the sensor */
			adc_pres = (uint32_t) (((uint32_t) buff[2] * 4096) | ((uint32_t) buff[3] * 16)
 8003a4c:	7abb      	ldrb	r3, [r7, #10]
 8003a4e:	031a      	lsls	r2, r3, #12
 8003a50:	7afb      	ldrb	r3, [r7, #11]
 8003a52:	011b      	lsls	r3, r3, #4
 8003a54:	4313      	orrs	r3, r2
				| ((uint32_t) buff[4] / 16));
 8003a56:	7b3a      	ldrb	r2, [r7, #12]
 8003a58:	0912      	lsrs	r2, r2, #4
 8003a5a:	b2d2      	uxtb	r2, r2
			adc_pres = (uint32_t) (((uint32_t) buff[2] * 4096) | ((uint32_t) buff[3] * 16)
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	623b      	str	r3, [r7, #32]
			adc_temp = (uint32_t) (((uint32_t) buff[5] * 4096) | ((uint32_t) buff[6] * 16)
 8003a60:	7b7b      	ldrb	r3, [r7, #13]
 8003a62:	031a      	lsls	r2, r3, #12
 8003a64:	7bbb      	ldrb	r3, [r7, #14]
 8003a66:	011b      	lsls	r3, r3, #4
 8003a68:	4313      	orrs	r3, r2
				| ((uint32_t) buff[7] / 16));
 8003a6a:	7bfa      	ldrb	r2, [r7, #15]
 8003a6c:	0912      	lsrs	r2, r2, #4
 8003a6e:	b2d2      	uxtb	r2, r2
			adc_temp = (uint32_t) (((uint32_t) buff[5] * 4096) | ((uint32_t) buff[6] * 16)
 8003a70:	4313      	orrs	r3, r2
 8003a72:	61fb      	str	r3, [r7, #28]
			adc_hum = (uint16_t) (((uint32_t) buff[8] * 256) | (uint32_t) buff[9]);
 8003a74:	7c3b      	ldrb	r3, [r7, #16]
 8003a76:	b29b      	uxth	r3, r3
 8003a78:	021b      	lsls	r3, r3, #8
 8003a7a:	b29a      	uxth	r2, r3
 8003a7c:	7c7b      	ldrb	r3, [r7, #17]
 8003a7e:	b29b      	uxth	r3, r3
 8003a80:	4313      	orrs	r3, r2
 8003a82:	837b      	strh	r3, [r7, #26]
			adc_gas_res = (uint16_t) ((uint32_t) buff[13] * 4 | (((uint32_t) buff[14]) / 64));
 8003a84:	7d7b      	ldrb	r3, [r7, #21]
 8003a86:	b29b      	uxth	r3, r3
 8003a88:	009b      	lsls	r3, r3, #2
 8003a8a:	b29a      	uxth	r2, r3
 8003a8c:	7dbb      	ldrb	r3, [r7, #22]
 8003a8e:	099b      	lsrs	r3, r3, #6
 8003a90:	b2db      	uxtb	r3, r3
 8003a92:	b29b      	uxth	r3, r3
 8003a94:	4313      	orrs	r3, r2
 8003a96:	833b      	strh	r3, [r7, #24]
			gas_range = buff[14] & BME680_GAS_RANGE_MSK;
 8003a98:	7dbb      	ldrb	r3, [r7, #22]
 8003a9a:	f003 030f 	and.w	r3, r3, #15
 8003a9e:	75fb      	strb	r3, [r7, #23]

			data->status |= buff[14] & BME680_GASM_VALID_MSK;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	781b      	ldrb	r3, [r3, #0]
 8003aa4:	b25a      	sxtb	r2, r3
 8003aa6:	7dbb      	ldrb	r3, [r7, #22]
 8003aa8:	b25b      	sxtb	r3, r3
 8003aaa:	f003 0320 	and.w	r3, r3, #32
 8003aae:	b25b      	sxtb	r3, r3
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	b25b      	sxtb	r3, r3
 8003ab4:	b2da      	uxtb	r2, r3
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	701a      	strb	r2, [r3, #0]
			data->status |= buff[14] & BME680_HEAT_STAB_MSK;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	781b      	ldrb	r3, [r3, #0]
 8003abe:	b25a      	sxtb	r2, r3
 8003ac0:	7dbb      	ldrb	r3, [r7, #22]
 8003ac2:	b25b      	sxtb	r3, r3
 8003ac4:	f003 0310 	and.w	r3, r3, #16
 8003ac8:	b25b      	sxtb	r3, r3
 8003aca:	4313      	orrs	r3, r2
 8003acc:	b25b      	sxtb	r3, r3
 8003ace:	b2da      	uxtb	r2, r3
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	701a      	strb	r2, [r3, #0]

			if (data->status & BME680_NEW_DATA_MSK) {
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	781b      	ldrb	r3, [r3, #0]
 8003ad8:	b25b      	sxtb	r3, r3
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	da20      	bge.n	8003b20 <read_field_data+0x13e>
				data->temperature = calc_temperature(adc_temp, dev);
 8003ade:	6839      	ldr	r1, [r7, #0]
 8003ae0:	69f8      	ldr	r0, [r7, #28]
 8003ae2:	f7ff fc05 	bl	80032f0 <calc_temperature>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	461a      	mov	r2, r3
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	809a      	strh	r2, [r3, #4]
				data->pressure = calc_pressure(adc_pres, dev);
 8003aee:	6839      	ldr	r1, [r7, #0]
 8003af0:	6a38      	ldr	r0, [r7, #32]
 8003af2:	f7ff fc98 	bl	8003426 <calc_pressure>
 8003af6:	4602      	mov	r2, r0
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	609a      	str	r2, [r3, #8]
				data->humidity = calc_humidity(adc_hum, dev);
 8003afc:	8b7b      	ldrh	r3, [r7, #26]
 8003afe:	6839      	ldr	r1, [r7, #0]
 8003b00:	4618      	mov	r0, r3
 8003b02:	f7ff fd3d 	bl	8003580 <calc_humidity>
 8003b06:	4602      	mov	r2, r0
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	60da      	str	r2, [r3, #12]
				data->gas_resistance = calc_gas_resistance(adc_gas_res, gas_range, dev);
 8003b0c:	7df9      	ldrb	r1, [r7, #23]
 8003b0e:	8b3b      	ldrh	r3, [r7, #24]
 8003b10:	683a      	ldr	r2, [r7, #0]
 8003b12:	4618      	mov	r0, r3
 8003b14:	f7ff fdce 	bl	80036b4 <calc_gas_resistance>
 8003b18:	4602      	mov	r2, r0
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	611a      	str	r2, [r3, #16]
				break;
 8003b1e:	e00d      	b.n	8003b3c <read_field_data+0x15a>
			}
			/* Delay to poll the data */
			dev->delay_ms(BME680_POLL_PERIOD_MS);
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b24:	200a      	movs	r0, #10
 8003b26:	4798      	blx	r3
		}
		tries--;
 8003b28:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003b2c:	3b01      	subs	r3, #1
 8003b2e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	} while (tries);
 8003b32:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	f47f af6a 	bne.w	8003a10 <read_field_data+0x2e>

	if (!tries)
 8003b3c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d102      	bne.n	8003b4a <read_field_data+0x168>
		rslt = BME680_W_NO_NEW_DATA;
 8003b44:	2302      	movs	r3, #2
 8003b46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	return rslt;
 8003b4a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8003b4e:	4618      	mov	r0, r3
 8003b50:	3728      	adds	r7, #40	; 0x28
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bd80      	pop	{r7, pc}

08003b56 <set_mem_page>:

/*!
 * @brief This internal API is used to set the memory page based on register address.
 */
static int8_t set_mem_page(uint8_t reg_addr, struct bme680_dev *dev)
{
 8003b56:	b590      	push	{r4, r7, lr}
 8003b58:	b085      	sub	sp, #20
 8003b5a:	af00      	add	r7, sp, #0
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	6039      	str	r1, [r7, #0]
 8003b60:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t reg;
	uint8_t mem_page;

	/* Check for null pointers in the device structure*/
	rslt = null_ptr_check(dev);
 8003b62:	6838      	ldr	r0, [r7, #0]
 8003b64:	f000 f8c6 	bl	8003cf4 <null_ptr_check>
 8003b68:	4603      	mov	r3, r0
 8003b6a:	73fb      	strb	r3, [r7, #15]
	if (rslt == BME680_OK) {
 8003b6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d14f      	bne.n	8003c14 <set_mem_page+0xbe>
		if (reg_addr > 0x7f)
 8003b74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	da02      	bge.n	8003b82 <set_mem_page+0x2c>
			mem_page = BME680_MEM_PAGE1;
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	73bb      	strb	r3, [r7, #14]
 8003b80:	e001      	b.n	8003b86 <set_mem_page+0x30>
		else
			mem_page = BME680_MEM_PAGE0;
 8003b82:	2310      	movs	r3, #16
 8003b84:	73bb      	strb	r3, [r7, #14]

		if (mem_page != dev->mem_page) {
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	78db      	ldrb	r3, [r3, #3]
 8003b8a:	7bba      	ldrb	r2, [r7, #14]
 8003b8c:	429a      	cmp	r2, r3
 8003b8e:	d041      	beq.n	8003c14 <set_mem_page+0xbe>
			dev->mem_page = mem_page;
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	7bba      	ldrb	r2, [r7, #14]
 8003b94:	70da      	strb	r2, [r3, #3]

			dev->com_rslt = dev->read(dev->dev_id, BME680_MEM_PAGE_ADDR | BME680_SPI_RD_MSK, &reg, 1);
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	6c9c      	ldr	r4, [r3, #72]	; 0x48
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	7858      	ldrb	r0, [r3, #1]
 8003b9e:	f107 020d 	add.w	r2, r7, #13
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	21f3      	movs	r1, #243	; 0xf3
 8003ba6:	47a0      	blx	r4
 8003ba8:	4603      	mov	r3, r0
 8003baa:	461a      	mov	r2, r3
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			if (dev->com_rslt != 0)
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	f993 3054 	ldrsb.w	r3, [r3, #84]	; 0x54
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d001      	beq.n	8003bc0 <set_mem_page+0x6a>
				rslt = BME680_E_COM_FAIL;
 8003bbc:	23fe      	movs	r3, #254	; 0xfe
 8003bbe:	73fb      	strb	r3, [r7, #15]

			if (rslt == BME680_OK) {
 8003bc0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d125      	bne.n	8003c14 <set_mem_page+0xbe>
				reg = reg & (~BME680_MEM_PAGE_MSK);
 8003bc8:	7b7b      	ldrb	r3, [r7, #13]
 8003bca:	f023 0310 	bic.w	r3, r3, #16
 8003bce:	b2db      	uxtb	r3, r3
 8003bd0:	737b      	strb	r3, [r7, #13]
				reg = reg | (dev->mem_page & BME680_MEM_PAGE_MSK);
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	78db      	ldrb	r3, [r3, #3]
 8003bd6:	b25b      	sxtb	r3, r3
 8003bd8:	f003 0310 	and.w	r3, r3, #16
 8003bdc:	b25a      	sxtb	r2, r3
 8003bde:	7b7b      	ldrb	r3, [r7, #13]
 8003be0:	b25b      	sxtb	r3, r3
 8003be2:	4313      	orrs	r3, r2
 8003be4:	b25b      	sxtb	r3, r3
 8003be6:	b2db      	uxtb	r3, r3
 8003be8:	737b      	strb	r3, [r7, #13]

				dev->com_rslt = dev->write(dev->dev_id, BME680_MEM_PAGE_ADDR & BME680_SPI_WR_MSK,
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	7858      	ldrb	r0, [r3, #1]
 8003bf2:	f107 020d 	add.w	r2, r7, #13
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	2173      	movs	r1, #115	; 0x73
 8003bfa:	47a0      	blx	r4
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	461a      	mov	r2, r3
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
					&reg, 1);
				if (dev->com_rslt != 0)
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	f993 3054 	ldrsb.w	r3, [r3, #84]	; 0x54
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d001      	beq.n	8003c14 <set_mem_page+0xbe>
					rslt = BME680_E_COM_FAIL;
 8003c10:	23fe      	movs	r3, #254	; 0xfe
 8003c12:	73fb      	strb	r3, [r7, #15]
			}
		}
	}

	return rslt;
 8003c14:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003c18:	4618      	mov	r0, r3
 8003c1a:	3714      	adds	r7, #20
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	bd90      	pop	{r4, r7, pc}

08003c20 <get_mem_page>:

/*!
 * @brief This internal API is used to get the memory page based on register address.
 */
static int8_t get_mem_page(struct bme680_dev *dev)
{
 8003c20:	b590      	push	{r4, r7, lr}
 8003c22:	b085      	sub	sp, #20
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8003c28:	6878      	ldr	r0, [r7, #4]
 8003c2a:	f000 f863 	bl	8003cf4 <null_ptr_check>
 8003c2e:	4603      	mov	r3, r0
 8003c30:	73fb      	strb	r3, [r7, #15]
	if (rslt == BME680_OK) {
 8003c32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d11b      	bne.n	8003c72 <get_mem_page+0x52>
		dev->com_rslt = dev->read(dev->dev_id, BME680_MEM_PAGE_ADDR | BME680_SPI_RD_MSK, &reg, 1);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6c9c      	ldr	r4, [r3, #72]	; 0x48
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	7858      	ldrb	r0, [r3, #1]
 8003c42:	f107 020e 	add.w	r2, r7, #14
 8003c46:	2301      	movs	r3, #1
 8003c48:	21f3      	movs	r1, #243	; 0xf3
 8003c4a:	47a0      	blx	r4
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	461a      	mov	r2, r3
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		if (dev->com_rslt != 0)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	f993 3054 	ldrsb.w	r3, [r3, #84]	; 0x54
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d002      	beq.n	8003c66 <get_mem_page+0x46>
			rslt = BME680_E_COM_FAIL;
 8003c60:	23fe      	movs	r3, #254	; 0xfe
 8003c62:	73fb      	strb	r3, [r7, #15]
 8003c64:	e005      	b.n	8003c72 <get_mem_page+0x52>
		else
			dev->mem_page = reg & BME680_MEM_PAGE_MSK;
 8003c66:	7bbb      	ldrb	r3, [r7, #14]
 8003c68:	f003 0310 	and.w	r3, r3, #16
 8003c6c:	b2da      	uxtb	r2, r3
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	70da      	strb	r2, [r3, #3]
	}

	return rslt;
 8003c72:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	3714      	adds	r7, #20
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd90      	pop	{r4, r7, pc}

08003c7e <boundary_check>:
/*!
 * @brief This internal API is used to validate the boundary
 * conditions.
 */
static int8_t boundary_check(uint8_t *value, uint8_t min, uint8_t max, struct bme680_dev *dev)
{
 8003c7e:	b480      	push	{r7}
 8003c80:	b087      	sub	sp, #28
 8003c82:	af00      	add	r7, sp, #0
 8003c84:	60f8      	str	r0, [r7, #12]
 8003c86:	607b      	str	r3, [r7, #4]
 8003c88:	460b      	mov	r3, r1
 8003c8a:	72fb      	strb	r3, [r7, #11]
 8003c8c:	4613      	mov	r3, r2
 8003c8e:	72bb      	strb	r3, [r7, #10]
	int8_t rslt = BME680_OK;
 8003c90:	2300      	movs	r3, #0
 8003c92:	75fb      	strb	r3, [r7, #23]

	if (value != NULL) {
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d022      	beq.n	8003ce0 <boundary_check+0x62>
		/* Check if value is below minimum value */
		if (*value < min) {
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	781b      	ldrb	r3, [r3, #0]
 8003c9e:	7afa      	ldrb	r2, [r7, #11]
 8003ca0:	429a      	cmp	r2, r3
 8003ca2:	d90b      	bls.n	8003cbc <boundary_check+0x3e>
			/* Auto correct the invalid value to minimum value */
			*value = min;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	7afa      	ldrb	r2, [r7, #11]
 8003ca8:	701a      	strb	r2, [r3, #0]
			dev->info_msg |= BME680_I_MIN_CORRECTION;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8003cb0:	f043 0301 	orr.w	r3, r3, #1
 8003cb4:	b2da      	uxtb	r2, r3
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
		}
		/* Check if value is above maximum value */
		if (*value > max) {
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	781b      	ldrb	r3, [r3, #0]
 8003cc0:	7aba      	ldrb	r2, [r7, #10]
 8003cc2:	429a      	cmp	r2, r3
 8003cc4:	d20e      	bcs.n	8003ce4 <boundary_check+0x66>
			/* Auto correct the invalid value to maximum value */
			*value = max;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	7aba      	ldrb	r2, [r7, #10]
 8003cca:	701a      	strb	r2, [r3, #0]
			dev->info_msg |= BME680_I_MAX_CORRECTION;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8003cd2:	f043 0302 	orr.w	r3, r3, #2
 8003cd6:	b2da      	uxtb	r2, r3
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003cde:	e001      	b.n	8003ce4 <boundary_check+0x66>
		}
	} else {
		rslt = BME680_E_NULL_PTR;
 8003ce0:	23ff      	movs	r3, #255	; 0xff
 8003ce2:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 8003ce4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003ce8:	4618      	mov	r0, r3
 8003cea:	371c      	adds	r7, #28
 8003cec:	46bd      	mov	sp, r7
 8003cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf2:	4770      	bx	lr

08003cf4 <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bme680_dev *dev)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	b085      	sub	sp, #20
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
	int8_t rslt;

	if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL)) {
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d00b      	beq.n	8003d1a <null_ptr_check+0x26>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d007      	beq.n	8003d1a <null_ptr_check+0x26>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d003      	beq.n	8003d1a <null_ptr_check+0x26>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d102      	bne.n	8003d20 <null_ptr_check+0x2c>
		/* Device structure pointer is not valid */
		rslt = BME680_E_NULL_PTR;
 8003d1a:	23ff      	movs	r3, #255	; 0xff
 8003d1c:	73fb      	strb	r3, [r7, #15]
 8003d1e:	e001      	b.n	8003d24 <null_ptr_check+0x30>
	} else {
		/* Device structure is fine */
		rslt = BME680_OK;
 8003d20:	2300      	movs	r3, #0
 8003d22:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 8003d24:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003d28:	4618      	mov	r0, r3
 8003d2a:	3714      	adds	r7, #20
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d32:	4770      	bx	lr

08003d34 <bme680_start>:

uint64_t last_tick = 0;
uint8_t wait_for_data = 0;
uint8_t data_is_ready = 0;

int8_t bme680_start(struct bme680_dev *dev) {
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b084      	sub	sp, #16
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
	int8_t rslt = BME680_OK;
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	73fb      	strb	r3, [r7, #15]

	dev->dev_id = BME680_I2C_ADDR_SECONDARY;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2277      	movs	r2, #119	; 0x77
 8003d44:	705a      	strb	r2, [r3, #1]
	dev->amb_temp = 20;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2214      	movs	r2, #20
 8003d4a:	711a      	strb	r2, [r3, #4]
	dev->read = custom_i2c_read;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	4a22      	ldr	r2, [pc, #136]	; (8003dd8 <bme680_start+0xa4>)
 8003d50:	649a      	str	r2, [r3, #72]	; 0x48
	dev->write = custom_i2c_write;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	4a21      	ldr	r2, [pc, #132]	; (8003ddc <bme680_start+0xa8>)
 8003d56:	64da      	str	r2, [r3, #76]	; 0x4c
	dev->intf = BME680_I2C_INTF;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	709a      	strb	r2, [r3, #2]
	dev->delay_ms = HAL_Delay;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	4a1f      	ldr	r2, [pc, #124]	; (8003de0 <bme680_start+0xac>)
 8003d62:	651a      	str	r2, [r3, #80]	; 0x50

	rslt = bme680_init(dev);
 8003d64:	6878      	ldr	r0, [r7, #4]
 8003d66:	f7fe fd5a 	bl	800281e <bme680_init>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	73fb      	strb	r3, [r7, #15]

	if (rslt == BME680_OK) {
 8003d6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d12a      	bne.n	8003dcc <bme680_start+0x98>
		dev->power_mode = BME680_FORCED_MODE;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2201      	movs	r2, #1
 8003d7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

		uint16_t settings_sel;

		dev->tph_sett.filter = BME680_FILTER_SIZE_7;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2203      	movs	r2, #3
 8003d82:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
		dev->tph_sett.os_hum = BME680_OS_2X;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2202      	movs	r2, #2
 8003d8a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
		dev->tph_sett.os_pres = BME680_OS_2X;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2202      	movs	r2, #2
 8003d92:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
		dev->tph_sett.os_temp = BME680_OS_2X;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2202      	movs	r2, #2
 8003d9a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

		dev->gas_sett.run_gas = BME680_ENABLE_GAS_MEAS;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2201      	movs	r2, #1
 8003da2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
		dev->gas_sett.heatr_dur = HEATR_DUR;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8003dac:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42

		settings_sel = BME680_OST_SEL | BME680_OSP_SEL | BME680_OSH_SEL | BME680_GAS_SENSOR_SEL;
 8003db0:	23cf      	movs	r3, #207	; 0xcf
 8003db2:	81bb      	strh	r3, [r7, #12]

		dev->gas_sett.heatr_temp = HIGH_TEMP;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8003dba:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

		rslt = bme680_set_sensor_settings(settings_sel, dev);
 8003dbe:	89bb      	ldrh	r3, [r7, #12]
 8003dc0:	6879      	ldr	r1, [r7, #4]
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	f7fe fe68 	bl	8002a98 <bme680_set_sensor_settings>
 8003dc8:	4603      	mov	r3, r0
 8003dca:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 8003dcc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	3710      	adds	r7, #16
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	bd80      	pop	{r7, pc}
 8003dd8:	08004141 	.word	0x08004141
 8003ddc:	080041b5 	.word	0x080041b5
 8003de0:	08001949 	.word	0x08001949

08003de4 <bme680_refresh_data>:

void bme680_refresh_data(struct bme680_dev *dev, struct bme680_field_data *data) {
 8003de4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003de8:	b084      	sub	sp, #16
 8003dea:	af00      	add	r7, sp, #0
 8003dec:	6078      	str	r0, [r7, #4]
 8003dee:	6039      	str	r1, [r7, #0]
	if(!wait_for_data){
 8003df0:	4b26      	ldr	r3, [pc, #152]	; (8003e8c <bme680_refresh_data+0xa8>)
 8003df2:	781b      	ldrb	r3, [r3, #0]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d127      	bne.n	8003e48 <bme680_refresh_data+0x64>
		int8_t rslt = BME680_OK;
 8003df8:	2300      	movs	r3, #0
 8003dfa:	73fb      	strb	r3, [r7, #15]

		uint16_t profile_dur = 10;
 8003dfc:	230a      	movs	r3, #10
 8003dfe:	81bb      	strh	r3, [r7, #12]
		bme680_get_profile_dur(&profile_dur, dev);
 8003e00:	f107 030c 	add.w	r3, r7, #12
 8003e04:	6879      	ldr	r1, [r7, #4]
 8003e06:	4618      	mov	r0, r3
 8003e08:	f7ff f872 	bl	8002ef0 <bme680_get_profile_dur>

		if (rslt == BME680_OK) {
 8003e0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d136      	bne.n	8003e82 <bme680_refresh_data+0x9e>
			rslt = bme680_set_sensor_mode(dev); /* Trigger a measurement */
 8003e14:	6878      	ldr	r0, [r7, #4]
 8003e16:	f7ff f807 	bl	8002e28 <bme680_set_sensor_mode>
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	73fb      	strb	r3, [r7, #15]
			wait_for_data = 1;
 8003e1e:	4b1b      	ldr	r3, [pc, #108]	; (8003e8c <bme680_refresh_data+0xa8>)
 8003e20:	2201      	movs	r2, #1
 8003e22:	701a      	strb	r2, [r3, #0]
			last_tick = HAL_GetTick();
 8003e24:	f002 fc42 	bl	80066ac <HAL_GetTick>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	469a      	mov	sl, r3
 8003e2e:	4693      	mov	fp, r2
 8003e30:	4b17      	ldr	r3, [pc, #92]	; (8003e90 <bme680_refresh_data+0xac>)
 8003e32:	e9c3 ab00 	strd	sl, fp, [r3]
			if(data_is_ready)
 8003e36:	4b17      	ldr	r3, [pc, #92]	; (8003e94 <bme680_refresh_data+0xb0>)
 8003e38:	781b      	ldrb	r3, [r3, #0]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d021      	beq.n	8003e82 <bme680_refresh_data+0x9e>
				bme680_get_sensor_data(data, dev);
 8003e3e:	6879      	ldr	r1, [r7, #4]
 8003e40:	6838      	ldr	r0, [r7, #0]
 8003e42:	f7ff f8b7 	bl	8002fb4 <bme680_get_sensor_data>
		}
	} else if (wait_for_data && HAL_GetTick() - last_tick > 2500) {
		wait_for_data = 0;
		data_is_ready = 1;
	}
}
 8003e46:	e01c      	b.n	8003e82 <bme680_refresh_data+0x9e>
	} else if (wait_for_data && HAL_GetTick() - last_tick > 2500) {
 8003e48:	4b10      	ldr	r3, [pc, #64]	; (8003e8c <bme680_refresh_data+0xa8>)
 8003e4a:	781b      	ldrb	r3, [r3, #0]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d018      	beq.n	8003e82 <bme680_refresh_data+0x9e>
 8003e50:	f002 fc2c 	bl	80066ac <HAL_GetTick>
 8003e54:	4603      	mov	r3, r0
 8003e56:	2200      	movs	r2, #0
 8003e58:	4698      	mov	r8, r3
 8003e5a:	4691      	mov	r9, r2
 8003e5c:	4b0c      	ldr	r3, [pc, #48]	; (8003e90 <bme680_refresh_data+0xac>)
 8003e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e62:	ebb8 0402 	subs.w	r4, r8, r2
 8003e66:	eb69 0503 	sbc.w	r5, r9, r3
 8003e6a:	f640 13c5 	movw	r3, #2501	; 0x9c5
 8003e6e:	429c      	cmp	r4, r3
 8003e70:	f175 0300 	sbcs.w	r3, r5, #0
 8003e74:	d305      	bcc.n	8003e82 <bme680_refresh_data+0x9e>
		wait_for_data = 0;
 8003e76:	4b05      	ldr	r3, [pc, #20]	; (8003e8c <bme680_refresh_data+0xa8>)
 8003e78:	2200      	movs	r2, #0
 8003e7a:	701a      	strb	r2, [r3, #0]
		data_is_ready = 1;
 8003e7c:	4b05      	ldr	r3, [pc, #20]	; (8003e94 <bme680_refresh_data+0xb0>)
 8003e7e:	2201      	movs	r2, #1
 8003e80:	701a      	strb	r2, [r3, #0]
}
 8003e82:	bf00      	nop
 8003e84:	3710      	adds	r7, #16
 8003e86:	46bd      	mov	sp, r7
 8003e88:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e8c:	200002a0 	.word	0x200002a0
 8003e90:	20000298 	.word	0x20000298
 8003e94:	200002a1 	.word	0x200002a1

08003e98 <bme680_calculate_iaq>:

uint8_t bme680_calculate_iaq(struct bme680_field_data data){
 8003e98:	b084      	sub	sp, #16
 8003e9a:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003e9e:	b088      	sub	sp, #32
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8003ea6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	float humidity_score, gas_score;
	uint16_t humidity_reference = 40;
 8003eaa:	2328      	movs	r3, #40	; 0x28
 8003eac:	82fb      	strh	r3, [r7, #22]
	uint32_t gas_reference = 250000;
 8003eae:	4b78      	ldr	r3, [pc, #480]	; (8004090 <bme680_calculate_iaq+0x1f8>)
 8003eb0:	61bb      	str	r3, [r7, #24]

	if (data.humidity >= 38 && data.humidity <= 42) {
 8003eb2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003eb4:	2b25      	cmp	r3, #37	; 0x25
 8003eb6:	d905      	bls.n	8003ec4 <bme680_calculate_iaq+0x2c>
 8003eb8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003eba:	2b2a      	cmp	r3, #42	; 0x2a
 8003ebc:	d802      	bhi.n	8003ec4 <bme680_calculate_iaq+0x2c>
		humidity_score = 0.25*100; // Humidity +/-5% around optimum
 8003ebe:	4b75      	ldr	r3, [pc, #468]	; (8004094 <bme680_calculate_iaq+0x1fc>)
 8003ec0:	61fb      	str	r3, [r7, #28]
 8003ec2:	e062      	b.n	8003f8a <bme680_calculate_iaq+0xf2>
	} else { //sub-optimal
		if (data.humidity < 38) {
 8003ec4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ec6:	2b25      	cmp	r3, #37	; 0x25
 8003ec8:	d82a      	bhi.n	8003f20 <bme680_calculate_iaq+0x88>
			humidity_score = 0.25 / humidity_reference * data.humidity * 100;
 8003eca:	8afb      	ldrh	r3, [r7, #22]
 8003ecc:	4618      	mov	r0, r3
 8003ece:	f7fc fb01 	bl	80004d4 <__aeabi_i2d>
 8003ed2:	4602      	mov	r2, r0
 8003ed4:	460b      	mov	r3, r1
 8003ed6:	f04f 0000 	mov.w	r0, #0
 8003eda:	496f      	ldr	r1, [pc, #444]	; (8004098 <bme680_calculate_iaq+0x200>)
 8003edc:	f7fc fc8e 	bl	80007fc <__aeabi_ddiv>
 8003ee0:	4602      	mov	r2, r0
 8003ee2:	460b      	mov	r3, r1
 8003ee4:	4614      	mov	r4, r2
 8003ee6:	461d      	mov	r5, r3
 8003ee8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003eea:	4618      	mov	r0, r3
 8003eec:	f7fc fae2 	bl	80004b4 <__aeabi_ui2d>
 8003ef0:	4602      	mov	r2, r0
 8003ef2:	460b      	mov	r3, r1
 8003ef4:	4620      	mov	r0, r4
 8003ef6:	4629      	mov	r1, r5
 8003ef8:	f7fc fb56 	bl	80005a8 <__aeabi_dmul>
 8003efc:	4602      	mov	r2, r0
 8003efe:	460b      	mov	r3, r1
 8003f00:	4610      	mov	r0, r2
 8003f02:	4619      	mov	r1, r3
 8003f04:	f04f 0200 	mov.w	r2, #0
 8003f08:	4b64      	ldr	r3, [pc, #400]	; (800409c <bme680_calculate_iaq+0x204>)
 8003f0a:	f7fc fb4d 	bl	80005a8 <__aeabi_dmul>
 8003f0e:	4602      	mov	r2, r0
 8003f10:	460b      	mov	r3, r1
 8003f12:	4610      	mov	r0, r2
 8003f14:	4619      	mov	r1, r3
 8003f16:	f7fc fe3f 	bl	8000b98 <__aeabi_d2f>
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	61fb      	str	r3, [r7, #28]
 8003f1e:	e034      	b.n	8003f8a <bme680_calculate_iaq+0xf2>
		} else {
			humidity_score = ((-0.25 / (100-humidity_reference) * data.humidity) + 0.416666) * 100;
 8003f20:	8afb      	ldrh	r3, [r7, #22]
 8003f22:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 8003f26:	4618      	mov	r0, r3
 8003f28:	f7fc fad4 	bl	80004d4 <__aeabi_i2d>
 8003f2c:	4602      	mov	r2, r0
 8003f2e:	460b      	mov	r3, r1
 8003f30:	f04f 0000 	mov.w	r0, #0
 8003f34:	495a      	ldr	r1, [pc, #360]	; (80040a0 <bme680_calculate_iaq+0x208>)
 8003f36:	f7fc fc61 	bl	80007fc <__aeabi_ddiv>
 8003f3a:	4602      	mov	r2, r0
 8003f3c:	460b      	mov	r3, r1
 8003f3e:	4614      	mov	r4, r2
 8003f40:	461d      	mov	r5, r3
 8003f42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f44:	4618      	mov	r0, r3
 8003f46:	f7fc fab5 	bl	80004b4 <__aeabi_ui2d>
 8003f4a:	4602      	mov	r2, r0
 8003f4c:	460b      	mov	r3, r1
 8003f4e:	4620      	mov	r0, r4
 8003f50:	4629      	mov	r1, r5
 8003f52:	f7fc fb29 	bl	80005a8 <__aeabi_dmul>
 8003f56:	4602      	mov	r2, r0
 8003f58:	460b      	mov	r3, r1
 8003f5a:	4610      	mov	r0, r2
 8003f5c:	4619      	mov	r1, r3
 8003f5e:	a34a      	add	r3, pc, #296	; (adr r3, 8004088 <bme680_calculate_iaq+0x1f0>)
 8003f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f64:	f7fc f96a 	bl	800023c <__adddf3>
 8003f68:	4602      	mov	r2, r0
 8003f6a:	460b      	mov	r3, r1
 8003f6c:	4610      	mov	r0, r2
 8003f6e:	4619      	mov	r1, r3
 8003f70:	f04f 0200 	mov.w	r2, #0
 8003f74:	4b49      	ldr	r3, [pc, #292]	; (800409c <bme680_calculate_iaq+0x204>)
 8003f76:	f7fc fb17 	bl	80005a8 <__aeabi_dmul>
 8003f7a:	4602      	mov	r2, r0
 8003f7c:	460b      	mov	r3, r1
 8003f7e:	4610      	mov	r0, r2
 8003f80:	4619      	mov	r1, r3
 8003f82:	f7fc fe09 	bl	8000b98 <__aeabi_d2f>
 8003f86:	4603      	mov	r3, r0
 8003f88:	61fb      	str	r3, [r7, #28]
		}
	}

	//Calculate gas contribution to IAQ index
	uint16_t gas_lower_limit = 5000;   // Bad air quality limit
 8003f8a:	f241 3388 	movw	r3, #5000	; 0x1388
 8003f8e:	82bb      	strh	r3, [r7, #20]
	uint16_t gas_upper_limit = 50000;  // Good air quality limit
 8003f90:	f24c 3350 	movw	r3, #50000	; 0xc350
 8003f94:	827b      	strh	r3, [r7, #18]

	if (gas_reference > gas_upper_limit)
 8003f96:	8a7b      	ldrh	r3, [r7, #18]
 8003f98:	69ba      	ldr	r2, [r7, #24]
 8003f9a:	429a      	cmp	r2, r3
 8003f9c:	d901      	bls.n	8003fa2 <bme680_calculate_iaq+0x10a>
		gas_reference = gas_upper_limit;
 8003f9e:	8a7b      	ldrh	r3, [r7, #18]
 8003fa0:	61bb      	str	r3, [r7, #24]
	if (gas_reference < gas_lower_limit)
 8003fa2:	8abb      	ldrh	r3, [r7, #20]
 8003fa4:	69ba      	ldr	r2, [r7, #24]
 8003fa6:	429a      	cmp	r2, r3
 8003fa8:	d201      	bcs.n	8003fae <bme680_calculate_iaq+0x116>
		gas_reference = gas_lower_limit;
 8003faa:	8abb      	ldrh	r3, [r7, #20]
 8003fac:	61bb      	str	r3, [r7, #24]

	gas_score = (0.75/(gas_upper_limit-gas_lower_limit)*gas_reference -(gas_lower_limit*(0.75/(gas_upper_limit-gas_lower_limit))))*100;
 8003fae:	8a7a      	ldrh	r2, [r7, #18]
 8003fb0:	8abb      	ldrh	r3, [r7, #20]
 8003fb2:	1ad3      	subs	r3, r2, r3
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	f7fc fa8d 	bl	80004d4 <__aeabi_i2d>
 8003fba:	4602      	mov	r2, r0
 8003fbc:	460b      	mov	r3, r1
 8003fbe:	f04f 0000 	mov.w	r0, #0
 8003fc2:	4938      	ldr	r1, [pc, #224]	; (80040a4 <bme680_calculate_iaq+0x20c>)
 8003fc4:	f7fc fc1a 	bl	80007fc <__aeabi_ddiv>
 8003fc8:	4602      	mov	r2, r0
 8003fca:	460b      	mov	r3, r1
 8003fcc:	4614      	mov	r4, r2
 8003fce:	461d      	mov	r5, r3
 8003fd0:	69b8      	ldr	r0, [r7, #24]
 8003fd2:	f7fc fa6f 	bl	80004b4 <__aeabi_ui2d>
 8003fd6:	4602      	mov	r2, r0
 8003fd8:	460b      	mov	r3, r1
 8003fda:	4620      	mov	r0, r4
 8003fdc:	4629      	mov	r1, r5
 8003fde:	f7fc fae3 	bl	80005a8 <__aeabi_dmul>
 8003fe2:	4602      	mov	r2, r0
 8003fe4:	460b      	mov	r3, r1
 8003fe6:	4690      	mov	r8, r2
 8003fe8:	4699      	mov	r9, r3
 8003fea:	8abb      	ldrh	r3, [r7, #20]
 8003fec:	4618      	mov	r0, r3
 8003fee:	f7fc fa71 	bl	80004d4 <__aeabi_i2d>
 8003ff2:	4604      	mov	r4, r0
 8003ff4:	460d      	mov	r5, r1
 8003ff6:	8a7a      	ldrh	r2, [r7, #18]
 8003ff8:	8abb      	ldrh	r3, [r7, #20]
 8003ffa:	1ad3      	subs	r3, r2, r3
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	f7fc fa69 	bl	80004d4 <__aeabi_i2d>
 8004002:	4602      	mov	r2, r0
 8004004:	460b      	mov	r3, r1
 8004006:	f04f 0000 	mov.w	r0, #0
 800400a:	4926      	ldr	r1, [pc, #152]	; (80040a4 <bme680_calculate_iaq+0x20c>)
 800400c:	f7fc fbf6 	bl	80007fc <__aeabi_ddiv>
 8004010:	4602      	mov	r2, r0
 8004012:	460b      	mov	r3, r1
 8004014:	4620      	mov	r0, r4
 8004016:	4629      	mov	r1, r5
 8004018:	f7fc fac6 	bl	80005a8 <__aeabi_dmul>
 800401c:	4602      	mov	r2, r0
 800401e:	460b      	mov	r3, r1
 8004020:	4640      	mov	r0, r8
 8004022:	4649      	mov	r1, r9
 8004024:	f7fc f908 	bl	8000238 <__aeabi_dsub>
 8004028:	4602      	mov	r2, r0
 800402a:	460b      	mov	r3, r1
 800402c:	4610      	mov	r0, r2
 800402e:	4619      	mov	r1, r3
 8004030:	f04f 0200 	mov.w	r2, #0
 8004034:	4b19      	ldr	r3, [pc, #100]	; (800409c <bme680_calculate_iaq+0x204>)
 8004036:	f7fc fab7 	bl	80005a8 <__aeabi_dmul>
 800403a:	4602      	mov	r2, r0
 800403c:	460b      	mov	r3, r1
 800403e:	4610      	mov	r0, r2
 8004040:	4619      	mov	r1, r3
 8004042:	f7fc fda9 	bl	8000b98 <__aeabi_d2f>
 8004046:	4603      	mov	r3, r0
 8004048:	60fb      	str	r3, [r7, #12]

	float air_quality_score = humidity_score + gas_score;
 800404a:	ed97 7a07 	vldr	s14, [r7, #28]
 800404e:	edd7 7a03 	vldr	s15, [r7, #12]
 8004052:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004056:	edc7 7a02 	vstr	s15, [r7, #8]
	return (100-air_quality_score) * 5;
 800405a:	ed9f 7a13 	vldr	s14, [pc, #76]	; 80040a8 <bme680_calculate_iaq+0x210>
 800405e:	edd7 7a02 	vldr	s15, [r7, #8]
 8004062:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004066:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 800406a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800406e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004072:	edc7 7a01 	vstr	s15, [r7, #4]
 8004076:	793b      	ldrb	r3, [r7, #4]
 8004078:	b2db      	uxtb	r3, r3
}
 800407a:	4618      	mov	r0, r3
 800407c:	3720      	adds	r7, #32
 800407e:	46bd      	mov	sp, r7
 8004080:	e8bd 43b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, lr}
 8004084:	b004      	add	sp, #16
 8004086:	4770      	bx	lr
 8004088:	ded6ba8c 	.word	0xded6ba8c
 800408c:	3fdaaaa7 	.word	0x3fdaaaa7
 8004090:	0003d090 	.word	0x0003d090
 8004094:	41c80000 	.word	0x41c80000
 8004098:	3fd00000 	.word	0x3fd00000
 800409c:	40590000 	.word	0x40590000
 80040a0:	bfd00000 	.word	0xbfd00000
 80040a4:	3fe80000 	.word	0x3fe80000
 80040a8:	42c80000 	.word	0x42c80000
 80040ac:	00000000 	.word	0x00000000

080040b0 <BME680_ReadAltitude>:

float BME680_ReadAltitude(float atm) {
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b084      	sub	sp, #16
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	ed87 0a01 	vstr	s0, [r7, #4]
    float att = 0.0f;
 80040ba:	f04f 0300 	mov.w	r3, #0
 80040be:	60fb      	str	r3, [r7, #12]
    att = 44330.0 * (1.0 - pow(atm / BME680_EALEVELPRESSURE_PA, 0.1903));
 80040c0:	edd7 7a01 	vldr	s15, [r7, #4]
 80040c4:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8004138 <BME680_ReadAltitude+0x88>
 80040c8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80040cc:	ee16 0a90 	vmov	r0, s13
 80040d0:	f7fc fa12 	bl	80004f8 <__aeabi_f2d>
 80040d4:	4602      	mov	r2, r0
 80040d6:	460b      	mov	r3, r1
 80040d8:	ed9f 1b13 	vldr	d1, [pc, #76]	; 8004128 <BME680_ReadAltitude+0x78>
 80040dc:	ec43 2b10 	vmov	d0, r2, r3
 80040e0:	f00e f882 	bl	80121e8 <pow>
 80040e4:	ec53 2b10 	vmov	r2, r3, d0
 80040e8:	f04f 0000 	mov.w	r0, #0
 80040ec:	4913      	ldr	r1, [pc, #76]	; (800413c <BME680_ReadAltitude+0x8c>)
 80040ee:	f7fc f8a3 	bl	8000238 <__aeabi_dsub>
 80040f2:	4602      	mov	r2, r0
 80040f4:	460b      	mov	r3, r1
 80040f6:	4610      	mov	r0, r2
 80040f8:	4619      	mov	r1, r3
 80040fa:	a30d      	add	r3, pc, #52	; (adr r3, 8004130 <BME680_ReadAltitude+0x80>)
 80040fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004100:	f7fc fa52 	bl	80005a8 <__aeabi_dmul>
 8004104:	4602      	mov	r2, r0
 8004106:	460b      	mov	r3, r1
 8004108:	4610      	mov	r0, r2
 800410a:	4619      	mov	r1, r3
 800410c:	f7fc fd44 	bl	8000b98 <__aeabi_d2f>
 8004110:	4603      	mov	r3, r0
 8004112:	60fb      	str	r3, [r7, #12]
    return att;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	ee07 3a90 	vmov	s15, r3
}
 800411a:	eeb0 0a67 	vmov.f32	s0, s15
 800411e:	3710      	adds	r7, #16
 8004120:	46bd      	mov	sp, r7
 8004122:	bd80      	pop	{r7, pc}
 8004124:	f3af 8000 	nop.w
 8004128:	1a36e2eb 	.word	0x1a36e2eb
 800412c:	3fc85bc0 	.word	0x3fc85bc0
 8004130:	00000000 	.word	0x00000000
 8004134:	40e5a540 	.word	0x40e5a540
 8004138:	49776020 	.word	0x49776020
 800413c:	3ff00000 	.word	0x3ff00000

08004140 <custom_i2c_read>:


int8_t custom_i2c_read(uint8_t dev_id, uint8_t reg_addr, uint8_t *reg_data, uint16_t len)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b086      	sub	sp, #24
 8004144:	af02      	add	r7, sp, #8
 8004146:	603a      	str	r2, [r7, #0]
 8004148:	461a      	mov	r2, r3
 800414a:	4603      	mov	r3, r0
 800414c:	71fb      	strb	r3, [r7, #7]
 800414e:	460b      	mov	r3, r1
 8004150:	71bb      	strb	r3, [r7, #6]
 8004152:	4613      	mov	r3, r2
 8004154:	80bb      	strh	r3, [r7, #4]
	int8_t result;

	if (HAL_I2C_Master_Transmit(&hi2c1, (dev_id << 1), &reg_addr, 1, 10) != HAL_OK) {
 8004156:	79fb      	ldrb	r3, [r7, #7]
 8004158:	b29b      	uxth	r3, r3
 800415a:	005b      	lsls	r3, r3, #1
 800415c:	b299      	uxth	r1, r3
 800415e:	1dba      	adds	r2, r7, #6
 8004160:	230a      	movs	r3, #10
 8004162:	9300      	str	r3, [sp, #0]
 8004164:	2301      	movs	r3, #1
 8004166:	4812      	ldr	r0, [pc, #72]	; (80041b0 <custom_i2c_read+0x70>)
 8004168:	f003 fdd2 	bl	8007d10 <HAL_I2C_Master_Transmit>
 800416c:	4603      	mov	r3, r0
 800416e:	2b00      	cmp	r3, #0
 8004170:	d002      	beq.n	8004178 <custom_i2c_read+0x38>
		result = -1;
 8004172:	23ff      	movs	r3, #255	; 0xff
 8004174:	73fb      	strb	r3, [r7, #15]
 8004176:	e015      	b.n	80041a4 <custom_i2c_read+0x64>
	} else if (HAL_I2C_Master_Receive (&hi2c1, (dev_id << 1) | 0x01, reg_data, len, 10) != HAL_OK) {
 8004178:	79fb      	ldrb	r3, [r7, #7]
 800417a:	005b      	lsls	r3, r3, #1
 800417c:	b21b      	sxth	r3, r3
 800417e:	f043 0301 	orr.w	r3, r3, #1
 8004182:	b21b      	sxth	r3, r3
 8004184:	b299      	uxth	r1, r3
 8004186:	88bb      	ldrh	r3, [r7, #4]
 8004188:	220a      	movs	r2, #10
 800418a:	9200      	str	r2, [sp, #0]
 800418c:	683a      	ldr	r2, [r7, #0]
 800418e:	4808      	ldr	r0, [pc, #32]	; (80041b0 <custom_i2c_read+0x70>)
 8004190:	f003 feb2 	bl	8007ef8 <HAL_I2C_Master_Receive>
 8004194:	4603      	mov	r3, r0
 8004196:	2b00      	cmp	r3, #0
 8004198:	d002      	beq.n	80041a0 <custom_i2c_read+0x60>
		result = -1;
 800419a:	23ff      	movs	r3, #255	; 0xff
 800419c:	73fb      	strb	r3, [r7, #15]
 800419e:	e001      	b.n	80041a4 <custom_i2c_read+0x64>
	} else {
		result = 0;
 80041a0:	2300      	movs	r3, #0
 80041a2:	73fb      	strb	r3, [r7, #15]
	}
	return result;
 80041a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80041a8:	4618      	mov	r0, r3
 80041aa:	3710      	adds	r7, #16
 80041ac:	46bd      	mov	sp, r7
 80041ae:	bd80      	pop	{r7, pc}
 80041b0:	2000040c 	.word	0x2000040c

080041b4 <custom_i2c_write>:

int8_t custom_i2c_write(uint8_t dev_id, uint8_t reg_addr, uint8_t *reg_data, uint16_t len) {
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b086      	sub	sp, #24
 80041b8:	af02      	add	r7, sp, #8
 80041ba:	603a      	str	r2, [r7, #0]
 80041bc:	461a      	mov	r2, r3
 80041be:	4603      	mov	r3, r0
 80041c0:	71fb      	strb	r3, [r7, #7]
 80041c2:	460b      	mov	r3, r1
 80041c4:	71bb      	strb	r3, [r7, #6]
 80041c6:	4613      	mov	r3, r2
 80041c8:	80bb      	strh	r3, [r7, #4]
	int8_t result;
	int8_t *buf;

	// Allocate and load I2C transmit buffer
	buf = malloc(len + 1);
 80041ca:	88bb      	ldrh	r3, [r7, #4]
 80041cc:	3301      	adds	r3, #1
 80041ce:	4618      	mov	r0, r3
 80041d0:	f00e ff4e 	bl	8013070 <malloc>
 80041d4:	4603      	mov	r3, r0
 80041d6:	60bb      	str	r3, [r7, #8]
	buf[0] = reg_addr;
 80041d8:	f997 2006 	ldrsb.w	r2, [r7, #6]
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	701a      	strb	r2, [r3, #0]
	memcpy(buf + 1, reg_data, len);
 80041e0:	68bb      	ldr	r3, [r7, #8]
 80041e2:	3301      	adds	r3, #1
 80041e4:	88ba      	ldrh	r2, [r7, #4]
 80041e6:	6839      	ldr	r1, [r7, #0]
 80041e8:	4618      	mov	r0, r3
 80041ea:	f00e ff51 	bl	8013090 <memcpy>

	if (HAL_I2C_Master_Transmit(&hi2c1, (dev_id << 1), (uint8_t *) buf, len + 1, HAL_MAX_DELAY) != HAL_OK) {
 80041ee:	79fb      	ldrb	r3, [r7, #7]
 80041f0:	b29b      	uxth	r3, r3
 80041f2:	005b      	lsls	r3, r3, #1
 80041f4:	b299      	uxth	r1, r3
 80041f6:	88bb      	ldrh	r3, [r7, #4]
 80041f8:	3301      	adds	r3, #1
 80041fa:	b29b      	uxth	r3, r3
 80041fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004200:	9200      	str	r2, [sp, #0]
 8004202:	68ba      	ldr	r2, [r7, #8]
 8004204:	4809      	ldr	r0, [pc, #36]	; (800422c <custom_i2c_write+0x78>)
 8004206:	f003 fd83 	bl	8007d10 <HAL_I2C_Master_Transmit>
 800420a:	4603      	mov	r3, r0
 800420c:	2b00      	cmp	r3, #0
 800420e:	d002      	beq.n	8004216 <custom_i2c_write+0x62>
		result = -1;
 8004210:	23ff      	movs	r3, #255	; 0xff
 8004212:	73fb      	strb	r3, [r7, #15]
 8004214:	e001      	b.n	800421a <custom_i2c_write+0x66>
	} else {
		result = 0;
 8004216:	2300      	movs	r3, #0
 8004218:	73fb      	strb	r3, [r7, #15]
	}

	free(buf);
 800421a:	68b8      	ldr	r0, [r7, #8]
 800421c:	f00e ff30 	bl	8013080 <free>
	return result;
 8004220:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004224:	4618      	mov	r0, r3
 8004226:	3710      	adds	r7, #16
 8004228:	46bd      	mov	sp, r7
 800422a:	bd80      	pop	{r7, pc}
 800422c:	2000040c 	.word	0x2000040c

08004230 <LL_EXTI_EnableIT_0_31>:
{
 8004230:	b480      	push	{r7}
 8004232:	b083      	sub	sp, #12
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8004238:	4b06      	ldr	r3, [pc, #24]	; (8004254 <LL_EXTI_EnableIT_0_31+0x24>)
 800423a:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800423e:	4905      	ldr	r1, [pc, #20]	; (8004254 <LL_EXTI_EnableIT_0_31+0x24>)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	4313      	orrs	r3, r2
 8004244:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8004248:	bf00      	nop
 800424a:	370c      	adds	r7, #12
 800424c:	46bd      	mov	sp, r7
 800424e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004252:	4770      	bx	lr
 8004254:	58000800 	.word	0x58000800

08004258 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8004258:	b480      	push	{r7}
 800425a:	b083      	sub	sp, #12
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8004260:	4b05      	ldr	r3, [pc, #20]	; (8004278 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8004262:	681a      	ldr	r2, [r3, #0]
 8004264:	4904      	ldr	r1, [pc, #16]	; (8004278 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	4313      	orrs	r3, r2
 800426a:	600b      	str	r3, [r1, #0]

}
 800426c:	bf00      	nop
 800426e:	370c      	adds	r7, #12
 8004270:	46bd      	mov	sp, r7
 8004272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004276:	4770      	bx	lr
 8004278:	58000800 	.word	0x58000800

0800427c <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 800427c:	b480      	push	{r7}
 800427e:	b083      	sub	sp, #12
 8004280:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8004282:	4b0d      	ldr	r3, [pc, #52]	; (80042b8 <ReadRtcSsrValue+0x3c>)
 8004284:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004286:	b29b      	uxth	r3, r3
 8004288:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 800428a:	4b0b      	ldr	r3, [pc, #44]	; (80042b8 <ReadRtcSsrValue+0x3c>)
 800428c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800428e:	b29b      	uxth	r3, r3
 8004290:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 8004292:	e005      	b.n	80042a0 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8004298:	4b07      	ldr	r3, [pc, #28]	; (80042b8 <ReadRtcSsrValue+0x3c>)
 800429a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800429c:	b29b      	uxth	r3, r3
 800429e:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 80042a0:	687a      	ldr	r2, [r7, #4]
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	429a      	cmp	r2, r3
 80042a6:	d1f5      	bne.n	8004294 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 80042a8:	683b      	ldr	r3, [r7, #0]
}
 80042aa:	4618      	mov	r0, r3
 80042ac:	370c      	adds	r7, #12
 80042ae:	46bd      	mov	sp, r7
 80042b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b4:	4770      	bx	lr
 80042b6:	bf00      	nop
 80042b8:	40002800 	.word	0x40002800

080042bc <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 80042bc:	b480      	push	{r7}
 80042be:	b085      	sub	sp, #20
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	4603      	mov	r3, r0
 80042c4:	460a      	mov	r2, r1
 80042c6:	71fb      	strb	r3, [r7, #7]
 80042c8:	4613      	mov	r3, r2
 80042ca:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 80042cc:	79ba      	ldrb	r2, [r7, #6]
 80042ce:	491d      	ldr	r1, [pc, #116]	; (8004344 <LinkTimerAfter+0x88>)
 80042d0:	4613      	mov	r3, r2
 80042d2:	005b      	lsls	r3, r3, #1
 80042d4:	4413      	add	r3, r2
 80042d6:	00db      	lsls	r3, r3, #3
 80042d8:	440b      	add	r3, r1
 80042da:	3315      	adds	r3, #21
 80042dc:	781b      	ldrb	r3, [r3, #0]
 80042de:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80042e0:	7bfb      	ldrb	r3, [r7, #15]
 80042e2:	2b06      	cmp	r3, #6
 80042e4:	d009      	beq.n	80042fa <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 80042e6:	7bfa      	ldrb	r2, [r7, #15]
 80042e8:	4916      	ldr	r1, [pc, #88]	; (8004344 <LinkTimerAfter+0x88>)
 80042ea:	4613      	mov	r3, r2
 80042ec:	005b      	lsls	r3, r3, #1
 80042ee:	4413      	add	r3, r2
 80042f0:	00db      	lsls	r3, r3, #3
 80042f2:	440b      	add	r3, r1
 80042f4:	3314      	adds	r3, #20
 80042f6:	79fa      	ldrb	r2, [r7, #7]
 80042f8:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 80042fa:	79fa      	ldrb	r2, [r7, #7]
 80042fc:	4911      	ldr	r1, [pc, #68]	; (8004344 <LinkTimerAfter+0x88>)
 80042fe:	4613      	mov	r3, r2
 8004300:	005b      	lsls	r3, r3, #1
 8004302:	4413      	add	r3, r2
 8004304:	00db      	lsls	r3, r3, #3
 8004306:	440b      	add	r3, r1
 8004308:	3315      	adds	r3, #21
 800430a:	7bfa      	ldrb	r2, [r7, #15]
 800430c:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 800430e:	79fa      	ldrb	r2, [r7, #7]
 8004310:	490c      	ldr	r1, [pc, #48]	; (8004344 <LinkTimerAfter+0x88>)
 8004312:	4613      	mov	r3, r2
 8004314:	005b      	lsls	r3, r3, #1
 8004316:	4413      	add	r3, r2
 8004318:	00db      	lsls	r3, r3, #3
 800431a:	440b      	add	r3, r1
 800431c:	3314      	adds	r3, #20
 800431e:	79ba      	ldrb	r2, [r7, #6]
 8004320:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 8004322:	79ba      	ldrb	r2, [r7, #6]
 8004324:	4907      	ldr	r1, [pc, #28]	; (8004344 <LinkTimerAfter+0x88>)
 8004326:	4613      	mov	r3, r2
 8004328:	005b      	lsls	r3, r3, #1
 800432a:	4413      	add	r3, r2
 800432c:	00db      	lsls	r3, r3, #3
 800432e:	440b      	add	r3, r1
 8004330:	3315      	adds	r3, #21
 8004332:	79fa      	ldrb	r2, [r7, #7]
 8004334:	701a      	strb	r2, [r3, #0]

  return;
 8004336:	bf00      	nop
}
 8004338:	3714      	adds	r7, #20
 800433a:	46bd      	mov	sp, r7
 800433c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004340:	4770      	bx	lr
 8004342:	bf00      	nop
 8004344:	200002a4 	.word	0x200002a4

08004348 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8004348:	b480      	push	{r7}
 800434a:	b085      	sub	sp, #20
 800434c:	af00      	add	r7, sp, #0
 800434e:	4603      	mov	r3, r0
 8004350:	460a      	mov	r2, r1
 8004352:	71fb      	strb	r3, [r7, #7]
 8004354:	4613      	mov	r3, r2
 8004356:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8004358:	4b29      	ldr	r3, [pc, #164]	; (8004400 <LinkTimerBefore+0xb8>)
 800435a:	781b      	ldrb	r3, [r3, #0]
 800435c:	b2db      	uxtb	r3, r3
 800435e:	79ba      	ldrb	r2, [r7, #6]
 8004360:	429a      	cmp	r2, r3
 8004362:	d032      	beq.n	80043ca <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8004364:	79ba      	ldrb	r2, [r7, #6]
 8004366:	4927      	ldr	r1, [pc, #156]	; (8004404 <LinkTimerBefore+0xbc>)
 8004368:	4613      	mov	r3, r2
 800436a:	005b      	lsls	r3, r3, #1
 800436c:	4413      	add	r3, r2
 800436e:	00db      	lsls	r3, r3, #3
 8004370:	440b      	add	r3, r1
 8004372:	3314      	adds	r3, #20
 8004374:	781b      	ldrb	r3, [r3, #0]
 8004376:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8004378:	7bfa      	ldrb	r2, [r7, #15]
 800437a:	4922      	ldr	r1, [pc, #136]	; (8004404 <LinkTimerBefore+0xbc>)
 800437c:	4613      	mov	r3, r2
 800437e:	005b      	lsls	r3, r3, #1
 8004380:	4413      	add	r3, r2
 8004382:	00db      	lsls	r3, r3, #3
 8004384:	440b      	add	r3, r1
 8004386:	3315      	adds	r3, #21
 8004388:	79fa      	ldrb	r2, [r7, #7]
 800438a:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 800438c:	79fa      	ldrb	r2, [r7, #7]
 800438e:	491d      	ldr	r1, [pc, #116]	; (8004404 <LinkTimerBefore+0xbc>)
 8004390:	4613      	mov	r3, r2
 8004392:	005b      	lsls	r3, r3, #1
 8004394:	4413      	add	r3, r2
 8004396:	00db      	lsls	r3, r3, #3
 8004398:	440b      	add	r3, r1
 800439a:	3315      	adds	r3, #21
 800439c:	79ba      	ldrb	r2, [r7, #6]
 800439e:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 80043a0:	79fa      	ldrb	r2, [r7, #7]
 80043a2:	4918      	ldr	r1, [pc, #96]	; (8004404 <LinkTimerBefore+0xbc>)
 80043a4:	4613      	mov	r3, r2
 80043a6:	005b      	lsls	r3, r3, #1
 80043a8:	4413      	add	r3, r2
 80043aa:	00db      	lsls	r3, r3, #3
 80043ac:	440b      	add	r3, r1
 80043ae:	3314      	adds	r3, #20
 80043b0:	7bfa      	ldrb	r2, [r7, #15]
 80043b2:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 80043b4:	79ba      	ldrb	r2, [r7, #6]
 80043b6:	4913      	ldr	r1, [pc, #76]	; (8004404 <LinkTimerBefore+0xbc>)
 80043b8:	4613      	mov	r3, r2
 80043ba:	005b      	lsls	r3, r3, #1
 80043bc:	4413      	add	r3, r2
 80043be:	00db      	lsls	r3, r3, #3
 80043c0:	440b      	add	r3, r1
 80043c2:	3314      	adds	r3, #20
 80043c4:	79fa      	ldrb	r2, [r7, #7]
 80043c6:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 80043c8:	e014      	b.n	80043f4 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 80043ca:	79fa      	ldrb	r2, [r7, #7]
 80043cc:	490d      	ldr	r1, [pc, #52]	; (8004404 <LinkTimerBefore+0xbc>)
 80043ce:	4613      	mov	r3, r2
 80043d0:	005b      	lsls	r3, r3, #1
 80043d2:	4413      	add	r3, r2
 80043d4:	00db      	lsls	r3, r3, #3
 80043d6:	440b      	add	r3, r1
 80043d8:	3315      	adds	r3, #21
 80043da:	79ba      	ldrb	r2, [r7, #6]
 80043dc:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 80043de:	79ba      	ldrb	r2, [r7, #6]
 80043e0:	4908      	ldr	r1, [pc, #32]	; (8004404 <LinkTimerBefore+0xbc>)
 80043e2:	4613      	mov	r3, r2
 80043e4:	005b      	lsls	r3, r3, #1
 80043e6:	4413      	add	r3, r2
 80043e8:	00db      	lsls	r3, r3, #3
 80043ea:	440b      	add	r3, r1
 80043ec:	3314      	adds	r3, #20
 80043ee:	79fa      	ldrb	r2, [r7, #7]
 80043f0:	701a      	strb	r2, [r3, #0]
  return;
 80043f2:	bf00      	nop
}
 80043f4:	3714      	adds	r7, #20
 80043f6:	46bd      	mov	sp, r7
 80043f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fc:	4770      	bx	lr
 80043fe:	bf00      	nop
 8004400:	20000334 	.word	0x20000334
 8004404:	200002a4 	.word	0x200002a4

08004408 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b084      	sub	sp, #16
 800440c:	af00      	add	r7, sp, #0
 800440e:	4603      	mov	r3, r0
 8004410:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8004412:	4b4e      	ldr	r3, [pc, #312]	; (800454c <linkTimer+0x144>)
 8004414:	781b      	ldrb	r3, [r3, #0]
 8004416:	b2db      	uxtb	r3, r3
 8004418:	2b06      	cmp	r3, #6
 800441a:	d118      	bne.n	800444e <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 800441c:	4b4b      	ldr	r3, [pc, #300]	; (800454c <linkTimer+0x144>)
 800441e:	781b      	ldrb	r3, [r3, #0]
 8004420:	b2da      	uxtb	r2, r3
 8004422:	4b4b      	ldr	r3, [pc, #300]	; (8004550 <linkTimer+0x148>)
 8004424:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 8004426:	4a49      	ldr	r2, [pc, #292]	; (800454c <linkTimer+0x144>)
 8004428:	79fb      	ldrb	r3, [r7, #7]
 800442a:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 800442c:	79fa      	ldrb	r2, [r7, #7]
 800442e:	4949      	ldr	r1, [pc, #292]	; (8004554 <linkTimer+0x14c>)
 8004430:	4613      	mov	r3, r2
 8004432:	005b      	lsls	r3, r3, #1
 8004434:	4413      	add	r3, r2
 8004436:	00db      	lsls	r3, r3, #3
 8004438:	440b      	add	r3, r1
 800443a:	3315      	adds	r3, #21
 800443c:	2206      	movs	r2, #6
 800443e:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8004440:	4b45      	ldr	r3, [pc, #276]	; (8004558 <linkTimer+0x150>)
 8004442:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004446:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8004448:	2300      	movs	r3, #0
 800444a:	81fb      	strh	r3, [r7, #14]
 800444c:	e078      	b.n	8004540 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 800444e:	f000 f909 	bl	8004664 <ReturnTimeElapsed>
 8004452:	4603      	mov	r3, r0
 8004454:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 8004456:	79fa      	ldrb	r2, [r7, #7]
 8004458:	493e      	ldr	r1, [pc, #248]	; (8004554 <linkTimer+0x14c>)
 800445a:	4613      	mov	r3, r2
 800445c:	005b      	lsls	r3, r3, #1
 800445e:	4413      	add	r3, r2
 8004460:	00db      	lsls	r3, r3, #3
 8004462:	440b      	add	r3, r1
 8004464:	3308      	adds	r3, #8
 8004466:	6819      	ldr	r1, [r3, #0]
 8004468:	89fb      	ldrh	r3, [r7, #14]
 800446a:	79fa      	ldrb	r2, [r7, #7]
 800446c:	4419      	add	r1, r3
 800446e:	4839      	ldr	r0, [pc, #228]	; (8004554 <linkTimer+0x14c>)
 8004470:	4613      	mov	r3, r2
 8004472:	005b      	lsls	r3, r3, #1
 8004474:	4413      	add	r3, r2
 8004476:	00db      	lsls	r3, r3, #3
 8004478:	4403      	add	r3, r0
 800447a:	3308      	adds	r3, #8
 800447c:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 800447e:	79fa      	ldrb	r2, [r7, #7]
 8004480:	4934      	ldr	r1, [pc, #208]	; (8004554 <linkTimer+0x14c>)
 8004482:	4613      	mov	r3, r2
 8004484:	005b      	lsls	r3, r3, #1
 8004486:	4413      	add	r3, r2
 8004488:	00db      	lsls	r3, r3, #3
 800448a:	440b      	add	r3, r1
 800448c:	3308      	adds	r3, #8
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8004492:	4b2e      	ldr	r3, [pc, #184]	; (800454c <linkTimer+0x144>)
 8004494:	781b      	ldrb	r3, [r3, #0]
 8004496:	b2db      	uxtb	r3, r3
 8004498:	4619      	mov	r1, r3
 800449a:	4a2e      	ldr	r2, [pc, #184]	; (8004554 <linkTimer+0x14c>)
 800449c:	460b      	mov	r3, r1
 800449e:	005b      	lsls	r3, r3, #1
 80044a0:	440b      	add	r3, r1
 80044a2:	00db      	lsls	r3, r3, #3
 80044a4:	4413      	add	r3, r2
 80044a6:	3308      	adds	r3, #8
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	68ba      	ldr	r2, [r7, #8]
 80044ac:	429a      	cmp	r2, r3
 80044ae:	d337      	bcc.n	8004520 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 80044b0:	4b26      	ldr	r3, [pc, #152]	; (800454c <linkTimer+0x144>)
 80044b2:	781b      	ldrb	r3, [r3, #0]
 80044b4:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 80044b6:	7b7a      	ldrb	r2, [r7, #13]
 80044b8:	4926      	ldr	r1, [pc, #152]	; (8004554 <linkTimer+0x14c>)
 80044ba:	4613      	mov	r3, r2
 80044bc:	005b      	lsls	r3, r3, #1
 80044be:	4413      	add	r3, r2
 80044c0:	00db      	lsls	r3, r3, #3
 80044c2:	440b      	add	r3, r1
 80044c4:	3315      	adds	r3, #21
 80044c6:	781b      	ldrb	r3, [r3, #0]
 80044c8:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 80044ca:	e013      	b.n	80044f4 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 80044cc:	7b7a      	ldrb	r2, [r7, #13]
 80044ce:	4921      	ldr	r1, [pc, #132]	; (8004554 <linkTimer+0x14c>)
 80044d0:	4613      	mov	r3, r2
 80044d2:	005b      	lsls	r3, r3, #1
 80044d4:	4413      	add	r3, r2
 80044d6:	00db      	lsls	r3, r3, #3
 80044d8:	440b      	add	r3, r1
 80044da:	3315      	adds	r3, #21
 80044dc:	781b      	ldrb	r3, [r3, #0]
 80044de:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 80044e0:	7b7a      	ldrb	r2, [r7, #13]
 80044e2:	491c      	ldr	r1, [pc, #112]	; (8004554 <linkTimer+0x14c>)
 80044e4:	4613      	mov	r3, r2
 80044e6:	005b      	lsls	r3, r3, #1
 80044e8:	4413      	add	r3, r2
 80044ea:	00db      	lsls	r3, r3, #3
 80044ec:	440b      	add	r3, r1
 80044ee:	3315      	adds	r3, #21
 80044f0:	781b      	ldrb	r3, [r3, #0]
 80044f2:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 80044f4:	7b3b      	ldrb	r3, [r7, #12]
 80044f6:	2b06      	cmp	r3, #6
 80044f8:	d00b      	beq.n	8004512 <linkTimer+0x10a>
 80044fa:	7b3a      	ldrb	r2, [r7, #12]
 80044fc:	4915      	ldr	r1, [pc, #84]	; (8004554 <linkTimer+0x14c>)
 80044fe:	4613      	mov	r3, r2
 8004500:	005b      	lsls	r3, r3, #1
 8004502:	4413      	add	r3, r2
 8004504:	00db      	lsls	r3, r3, #3
 8004506:	440b      	add	r3, r1
 8004508:	3308      	adds	r3, #8
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	68ba      	ldr	r2, [r7, #8]
 800450e:	429a      	cmp	r2, r3
 8004510:	d2dc      	bcs.n	80044cc <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 8004512:	7b7a      	ldrb	r2, [r7, #13]
 8004514:	79fb      	ldrb	r3, [r7, #7]
 8004516:	4611      	mov	r1, r2
 8004518:	4618      	mov	r0, r3
 800451a:	f7ff fecf 	bl	80042bc <LinkTimerAfter>
 800451e:	e00f      	b.n	8004540 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8004520:	4b0a      	ldr	r3, [pc, #40]	; (800454c <linkTimer+0x144>)
 8004522:	781b      	ldrb	r3, [r3, #0]
 8004524:	b2da      	uxtb	r2, r3
 8004526:	79fb      	ldrb	r3, [r7, #7]
 8004528:	4611      	mov	r1, r2
 800452a:	4618      	mov	r0, r3
 800452c:	f7ff ff0c 	bl	8004348 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8004530:	4b06      	ldr	r3, [pc, #24]	; (800454c <linkTimer+0x144>)
 8004532:	781b      	ldrb	r3, [r3, #0]
 8004534:	b2da      	uxtb	r2, r3
 8004536:	4b06      	ldr	r3, [pc, #24]	; (8004550 <linkTimer+0x148>)
 8004538:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 800453a:	4a04      	ldr	r2, [pc, #16]	; (800454c <linkTimer+0x144>)
 800453c:	79fb      	ldrb	r3, [r7, #7]
 800453e:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8004540:	89fb      	ldrh	r3, [r7, #14]
}
 8004542:	4618      	mov	r0, r3
 8004544:	3710      	adds	r7, #16
 8004546:	46bd      	mov	sp, r7
 8004548:	bd80      	pop	{r7, pc}
 800454a:	bf00      	nop
 800454c:	20000334 	.word	0x20000334
 8004550:	20000335 	.word	0x20000335
 8004554:	200002a4 	.word	0x200002a4
 8004558:	20000338 	.word	0x20000338

0800455c <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 800455c:	b480      	push	{r7}
 800455e:	b085      	sub	sp, #20
 8004560:	af00      	add	r7, sp, #0
 8004562:	4603      	mov	r3, r0
 8004564:	460a      	mov	r2, r1
 8004566:	71fb      	strb	r3, [r7, #7]
 8004568:	4613      	mov	r3, r2
 800456a:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 800456c:	4b39      	ldr	r3, [pc, #228]	; (8004654 <UnlinkTimer+0xf8>)
 800456e:	781b      	ldrb	r3, [r3, #0]
 8004570:	b2db      	uxtb	r3, r3
 8004572:	79fa      	ldrb	r2, [r7, #7]
 8004574:	429a      	cmp	r2, r3
 8004576:	d111      	bne.n	800459c <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8004578:	4b36      	ldr	r3, [pc, #216]	; (8004654 <UnlinkTimer+0xf8>)
 800457a:	781b      	ldrb	r3, [r3, #0]
 800457c:	b2da      	uxtb	r2, r3
 800457e:	4b36      	ldr	r3, [pc, #216]	; (8004658 <UnlinkTimer+0xfc>)
 8004580:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8004582:	79fa      	ldrb	r2, [r7, #7]
 8004584:	4935      	ldr	r1, [pc, #212]	; (800465c <UnlinkTimer+0x100>)
 8004586:	4613      	mov	r3, r2
 8004588:	005b      	lsls	r3, r3, #1
 800458a:	4413      	add	r3, r2
 800458c:	00db      	lsls	r3, r3, #3
 800458e:	440b      	add	r3, r1
 8004590:	3315      	adds	r3, #21
 8004592:	781b      	ldrb	r3, [r3, #0]
 8004594:	b2da      	uxtb	r2, r3
 8004596:	4b2f      	ldr	r3, [pc, #188]	; (8004654 <UnlinkTimer+0xf8>)
 8004598:	701a      	strb	r2, [r3, #0]
 800459a:	e03e      	b.n	800461a <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 800459c:	79fa      	ldrb	r2, [r7, #7]
 800459e:	492f      	ldr	r1, [pc, #188]	; (800465c <UnlinkTimer+0x100>)
 80045a0:	4613      	mov	r3, r2
 80045a2:	005b      	lsls	r3, r3, #1
 80045a4:	4413      	add	r3, r2
 80045a6:	00db      	lsls	r3, r3, #3
 80045a8:	440b      	add	r3, r1
 80045aa:	3314      	adds	r3, #20
 80045ac:	781b      	ldrb	r3, [r3, #0]
 80045ae:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 80045b0:	79fa      	ldrb	r2, [r7, #7]
 80045b2:	492a      	ldr	r1, [pc, #168]	; (800465c <UnlinkTimer+0x100>)
 80045b4:	4613      	mov	r3, r2
 80045b6:	005b      	lsls	r3, r3, #1
 80045b8:	4413      	add	r3, r2
 80045ba:	00db      	lsls	r3, r3, #3
 80045bc:	440b      	add	r3, r1
 80045be:	3315      	adds	r3, #21
 80045c0:	781b      	ldrb	r3, [r3, #0]
 80045c2:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 80045c4:	79f9      	ldrb	r1, [r7, #7]
 80045c6:	7bfa      	ldrb	r2, [r7, #15]
 80045c8:	4824      	ldr	r0, [pc, #144]	; (800465c <UnlinkTimer+0x100>)
 80045ca:	460b      	mov	r3, r1
 80045cc:	005b      	lsls	r3, r3, #1
 80045ce:	440b      	add	r3, r1
 80045d0:	00db      	lsls	r3, r3, #3
 80045d2:	4403      	add	r3, r0
 80045d4:	3315      	adds	r3, #21
 80045d6:	781b      	ldrb	r3, [r3, #0]
 80045d8:	b2d8      	uxtb	r0, r3
 80045da:	4920      	ldr	r1, [pc, #128]	; (800465c <UnlinkTimer+0x100>)
 80045dc:	4613      	mov	r3, r2
 80045de:	005b      	lsls	r3, r3, #1
 80045e0:	4413      	add	r3, r2
 80045e2:	00db      	lsls	r3, r3, #3
 80045e4:	440b      	add	r3, r1
 80045e6:	3315      	adds	r3, #21
 80045e8:	4602      	mov	r2, r0
 80045ea:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80045ec:	7bbb      	ldrb	r3, [r7, #14]
 80045ee:	2b06      	cmp	r3, #6
 80045f0:	d013      	beq.n	800461a <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 80045f2:	79f9      	ldrb	r1, [r7, #7]
 80045f4:	7bba      	ldrb	r2, [r7, #14]
 80045f6:	4819      	ldr	r0, [pc, #100]	; (800465c <UnlinkTimer+0x100>)
 80045f8:	460b      	mov	r3, r1
 80045fa:	005b      	lsls	r3, r3, #1
 80045fc:	440b      	add	r3, r1
 80045fe:	00db      	lsls	r3, r3, #3
 8004600:	4403      	add	r3, r0
 8004602:	3314      	adds	r3, #20
 8004604:	781b      	ldrb	r3, [r3, #0]
 8004606:	b2d8      	uxtb	r0, r3
 8004608:	4914      	ldr	r1, [pc, #80]	; (800465c <UnlinkTimer+0x100>)
 800460a:	4613      	mov	r3, r2
 800460c:	005b      	lsls	r3, r3, #1
 800460e:	4413      	add	r3, r2
 8004610:	00db      	lsls	r3, r3, #3
 8004612:	440b      	add	r3, r1
 8004614:	3314      	adds	r3, #20
 8004616:	4602      	mov	r2, r0
 8004618:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 800461a:	79fa      	ldrb	r2, [r7, #7]
 800461c:	490f      	ldr	r1, [pc, #60]	; (800465c <UnlinkTimer+0x100>)
 800461e:	4613      	mov	r3, r2
 8004620:	005b      	lsls	r3, r3, #1
 8004622:	4413      	add	r3, r2
 8004624:	00db      	lsls	r3, r3, #3
 8004626:	440b      	add	r3, r1
 8004628:	330c      	adds	r3, #12
 800462a:	2201      	movs	r2, #1
 800462c:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 800462e:	4b09      	ldr	r3, [pc, #36]	; (8004654 <UnlinkTimer+0xf8>)
 8004630:	781b      	ldrb	r3, [r3, #0]
 8004632:	b2db      	uxtb	r3, r3
 8004634:	2b06      	cmp	r3, #6
 8004636:	d107      	bne.n	8004648 <UnlinkTimer+0xec>
 8004638:	79bb      	ldrb	r3, [r7, #6]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d104      	bne.n	8004648 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 800463e:	4b08      	ldr	r3, [pc, #32]	; (8004660 <UnlinkTimer+0x104>)
 8004640:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004644:	601a      	str	r2, [r3, #0]
  }

  return;
 8004646:	bf00      	nop
 8004648:	bf00      	nop
}
 800464a:	3714      	adds	r7, #20
 800464c:	46bd      	mov	sp, r7
 800464e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004652:	4770      	bx	lr
 8004654:	20000334 	.word	0x20000334
 8004658:	20000335 	.word	0x20000335
 800465c:	200002a4 	.word	0x200002a4
 8004660:	20000338 	.word	0x20000338

08004664 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b082      	sub	sp, #8
 8004668:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 800466a:	4b1a      	ldr	r3, [pc, #104]	; (80046d4 <ReturnTimeElapsed+0x70>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004672:	d026      	beq.n	80046c2 <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8004674:	f7ff fe02 	bl	800427c <ReadRtcSsrValue>
 8004678:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 800467a:	4b16      	ldr	r3, [pc, #88]	; (80046d4 <ReturnTimeElapsed+0x70>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	687a      	ldr	r2, [r7, #4]
 8004680:	429a      	cmp	r2, r3
 8004682:	d805      	bhi.n	8004690 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8004684:	4b13      	ldr	r3, [pc, #76]	; (80046d4 <ReturnTimeElapsed+0x70>)
 8004686:	681a      	ldr	r2, [r3, #0]
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	1ad3      	subs	r3, r2, r3
 800468c:	607b      	str	r3, [r7, #4]
 800468e:	e00a      	b.n	80046a6 <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8004690:	4b11      	ldr	r3, [pc, #68]	; (80046d8 <ReturnTimeElapsed+0x74>)
 8004692:	881b      	ldrh	r3, [r3, #0]
 8004694:	461a      	mov	r2, r3
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	1ad3      	subs	r3, r2, r3
 800469a:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 800469c:	4b0d      	ldr	r3, [pc, #52]	; (80046d4 <ReturnTimeElapsed+0x70>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	683a      	ldr	r2, [r7, #0]
 80046a2:	4413      	add	r3, r2
 80046a4:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 80046a6:	4b0d      	ldr	r3, [pc, #52]	; (80046dc <ReturnTimeElapsed+0x78>)
 80046a8:	781b      	ldrb	r3, [r3, #0]
 80046aa:	461a      	mov	r2, r3
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	fb02 f303 	mul.w	r3, r2, r3
 80046b2:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 80046b4:	4b0a      	ldr	r3, [pc, #40]	; (80046e0 <ReturnTimeElapsed+0x7c>)
 80046b6:	781b      	ldrb	r3, [r3, #0]
 80046b8:	461a      	mov	r2, r3
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	40d3      	lsrs	r3, r2
 80046be:	607b      	str	r3, [r7, #4]
 80046c0:	e001      	b.n	80046c6 <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 80046c2:	2300      	movs	r3, #0
 80046c4:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	b29b      	uxth	r3, r3
}
 80046ca:	4618      	mov	r0, r3
 80046cc:	3708      	adds	r7, #8
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bd80      	pop	{r7, pc}
 80046d2:	bf00      	nop
 80046d4:	20000338 	.word	0x20000338
 80046d8:	20000340 	.word	0x20000340
 80046dc:	2000033e 	.word	0x2000033e
 80046e0:	2000033d 	.word	0x2000033d

080046e4 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b082      	sub	sp, #8
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	4603      	mov	r3, r0
 80046ec:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
   */

  if(Value == 0)
 80046ee:	88fb      	ldrh	r3, [r7, #6]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d108      	bne.n	8004706 <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 80046f4:	f7ff fdc2 	bl	800427c <ReadRtcSsrValue>
 80046f8:	4603      	mov	r3, r0
 80046fa:	4a21      	ldr	r2, [pc, #132]	; (8004780 <RestartWakeupCounter+0x9c>)
 80046fc:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 80046fe:	2003      	movs	r0, #3
 8004700:	f002 fd61 	bl	80071c6 <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8004704:	e039      	b.n	800477a <RestartWakeupCounter+0x96>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8004706:	88fb      	ldrh	r3, [r7, #6]
 8004708:	2b01      	cmp	r3, #1
 800470a:	d803      	bhi.n	8004714 <RestartWakeupCounter+0x30>
 800470c:	4b1d      	ldr	r3, [pc, #116]	; (8004784 <RestartWakeupCounter+0xa0>)
 800470e:	781b      	ldrb	r3, [r3, #0]
 8004710:	2b01      	cmp	r3, #1
 8004712:	d002      	beq.n	800471a <RestartWakeupCounter+0x36>
      Value -= 1;
 8004714:	88fb      	ldrh	r3, [r7, #6]
 8004716:	3b01      	subs	r3, #1
 8004718:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 800471a:	bf00      	nop
 800471c:	4b1a      	ldr	r3, [pc, #104]	; (8004788 <RestartWakeupCounter+0xa4>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	68db      	ldr	r3, [r3, #12]
 8004722:	f003 0304 	and.w	r3, r3, #4
 8004726:	2b00      	cmp	r3, #0
 8004728:	d0f8      	beq.n	800471c <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 800472a:	4b17      	ldr	r3, [pc, #92]	; (8004788 <RestartWakeupCounter+0xa4>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	68db      	ldr	r3, [r3, #12]
 8004730:	b2da      	uxtb	r2, r3
 8004732:	4b15      	ldr	r3, [pc, #84]	; (8004788 <RestartWakeupCounter+0xa4>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800473a:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 800473c:	4b13      	ldr	r3, [pc, #76]	; (800478c <RestartWakeupCounter+0xa8>)
 800473e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004742:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8004744:	2003      	movs	r0, #3
 8004746:	f002 fd4c 	bl	80071e2 <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 800474a:	4b11      	ldr	r3, [pc, #68]	; (8004790 <RestartWakeupCounter+0xac>)
 800474c:	695b      	ldr	r3, [r3, #20]
 800474e:	0c1b      	lsrs	r3, r3, #16
 8004750:	041b      	lsls	r3, r3, #16
 8004752:	88fa      	ldrh	r2, [r7, #6]
 8004754:	490e      	ldr	r1, [pc, #56]	; (8004790 <RestartWakeupCounter+0xac>)
 8004756:	4313      	orrs	r3, r2
 8004758:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 800475a:	f7ff fd8f 	bl	800427c <ReadRtcSsrValue>
 800475e:	4603      	mov	r3, r0
 8004760:	4a07      	ldr	r2, [pc, #28]	; (8004780 <RestartWakeupCounter+0x9c>)
 8004762:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */
 8004764:	4b08      	ldr	r3, [pc, #32]	; (8004788 <RestartWakeupCounter+0xa4>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	689a      	ldr	r2, [r3, #8]
 800476a:	4b07      	ldr	r3, [pc, #28]	; (8004788 <RestartWakeupCounter+0xa4>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004772:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8004774:	f3af 8000 	nop.w
  return ;
 8004778:	bf00      	nop
}
 800477a:	3708      	adds	r7, #8
 800477c:	46bd      	mov	sp, r7
 800477e:	bd80      	pop	{r7, pc}
 8004780:	20000338 	.word	0x20000338
 8004784:	2000033d 	.word	0x2000033d
 8004788:	200004f0 	.word	0x200004f0
 800478c:	58000800 	.word	0x58000800
 8004790:	40002800 	.word	0x40002800

08004794 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b084      	sub	sp, #16
 8004798:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 800479a:	4b45      	ldr	r3, [pc, #276]	; (80048b0 <RescheduleTimerList+0x11c>)
 800479c:	689b      	ldr	r3, [r3, #8]
 800479e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047a6:	d107      	bne.n	80047b8 <RescheduleTimerList+0x24>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 80047a8:	bf00      	nop
 80047aa:	4b42      	ldr	r3, [pc, #264]	; (80048b4 <RescheduleTimerList+0x120>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	68db      	ldr	r3, [r3, #12]
 80047b0:	f003 0304 	and.w	r3, r3, #4
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d1f8      	bne.n	80047aa <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 80047b8:	4b3e      	ldr	r3, [pc, #248]	; (80048b4 <RescheduleTimerList+0x120>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	689a      	ldr	r2, [r3, #8]
 80047be:	4b3d      	ldr	r3, [pc, #244]	; (80048b4 <RescheduleTimerList+0x120>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047c6:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 80047c8:	4b3b      	ldr	r3, [pc, #236]	; (80048b8 <RescheduleTimerList+0x124>)
 80047ca:	781b      	ldrb	r3, [r3, #0]
 80047cc:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 80047ce:	7bfa      	ldrb	r2, [r7, #15]
 80047d0:	493a      	ldr	r1, [pc, #232]	; (80048bc <RescheduleTimerList+0x128>)
 80047d2:	4613      	mov	r3, r2
 80047d4:	005b      	lsls	r3, r3, #1
 80047d6:	4413      	add	r3, r2
 80047d8:	00db      	lsls	r3, r3, #3
 80047da:	440b      	add	r3, r1
 80047dc:	3308      	adds	r3, #8
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 80047e2:	f7ff ff3f 	bl	8004664 <ReturnTimeElapsed>
 80047e6:	4603      	mov	r3, r0
 80047e8:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 80047ea:	88fb      	ldrh	r3, [r7, #6]
 80047ec:	68ba      	ldr	r2, [r7, #8]
 80047ee:	429a      	cmp	r2, r3
 80047f0:	d205      	bcs.n	80047fe <RescheduleTimerList+0x6a>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 80047f2:	2300      	movs	r3, #0
 80047f4:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80047f6:	4b32      	ldr	r3, [pc, #200]	; (80048c0 <RescheduleTimerList+0x12c>)
 80047f8:	2201      	movs	r2, #1
 80047fa:	701a      	strb	r2, [r3, #0]
 80047fc:	e04d      	b.n	800489a <RescheduleTimerList+0x106>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 80047fe:	88fb      	ldrh	r3, [r7, #6]
 8004800:	4a30      	ldr	r2, [pc, #192]	; (80048c4 <RescheduleTimerList+0x130>)
 8004802:	8812      	ldrh	r2, [r2, #0]
 8004804:	b292      	uxth	r2, r2
 8004806:	4413      	add	r3, r2
 8004808:	461a      	mov	r2, r3
 800480a:	68bb      	ldr	r3, [r7, #8]
 800480c:	4293      	cmp	r3, r2
 800480e:	d906      	bls.n	800481e <RescheduleTimerList+0x8a>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8004810:	4b2c      	ldr	r3, [pc, #176]	; (80048c4 <RescheduleTimerList+0x130>)
 8004812:	881b      	ldrh	r3, [r3, #0]
 8004814:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8004816:	4b2a      	ldr	r3, [pc, #168]	; (80048c0 <RescheduleTimerList+0x12c>)
 8004818:	2200      	movs	r2, #0
 800481a:	701a      	strb	r2, [r3, #0]
 800481c:	e03d      	b.n	800489a <RescheduleTimerList+0x106>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 800481e:	68bb      	ldr	r3, [r7, #8]
 8004820:	b29a      	uxth	r2, r3
 8004822:	88fb      	ldrh	r3, [r7, #6]
 8004824:	1ad3      	subs	r3, r2, r3
 8004826:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8004828:	4b25      	ldr	r3, [pc, #148]	; (80048c0 <RescheduleTimerList+0x12c>)
 800482a:	2201      	movs	r2, #1
 800482c:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800482e:	e034      	b.n	800489a <RescheduleTimerList+0x106>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8004830:	7bfa      	ldrb	r2, [r7, #15]
 8004832:	4922      	ldr	r1, [pc, #136]	; (80048bc <RescheduleTimerList+0x128>)
 8004834:	4613      	mov	r3, r2
 8004836:	005b      	lsls	r3, r3, #1
 8004838:	4413      	add	r3, r2
 800483a:	00db      	lsls	r3, r3, #3
 800483c:	440b      	add	r3, r1
 800483e:	3308      	adds	r3, #8
 8004840:	681a      	ldr	r2, [r3, #0]
 8004842:	88fb      	ldrh	r3, [r7, #6]
 8004844:	429a      	cmp	r2, r3
 8004846:	d20a      	bcs.n	800485e <RescheduleTimerList+0xca>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8004848:	7bfa      	ldrb	r2, [r7, #15]
 800484a:	491c      	ldr	r1, [pc, #112]	; (80048bc <RescheduleTimerList+0x128>)
 800484c:	4613      	mov	r3, r2
 800484e:	005b      	lsls	r3, r3, #1
 8004850:	4413      	add	r3, r2
 8004852:	00db      	lsls	r3, r3, #3
 8004854:	440b      	add	r3, r1
 8004856:	3308      	adds	r3, #8
 8004858:	2200      	movs	r2, #0
 800485a:	601a      	str	r2, [r3, #0]
 800485c:	e013      	b.n	8004886 <RescheduleTimerList+0xf2>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 800485e:	7bfa      	ldrb	r2, [r7, #15]
 8004860:	4916      	ldr	r1, [pc, #88]	; (80048bc <RescheduleTimerList+0x128>)
 8004862:	4613      	mov	r3, r2
 8004864:	005b      	lsls	r3, r3, #1
 8004866:	4413      	add	r3, r2
 8004868:	00db      	lsls	r3, r3, #3
 800486a:	440b      	add	r3, r1
 800486c:	3308      	adds	r3, #8
 800486e:	6819      	ldr	r1, [r3, #0]
 8004870:	88fb      	ldrh	r3, [r7, #6]
 8004872:	7bfa      	ldrb	r2, [r7, #15]
 8004874:	1ac9      	subs	r1, r1, r3
 8004876:	4811      	ldr	r0, [pc, #68]	; (80048bc <RescheduleTimerList+0x128>)
 8004878:	4613      	mov	r3, r2
 800487a:	005b      	lsls	r3, r3, #1
 800487c:	4413      	add	r3, r2
 800487e:	00db      	lsls	r3, r3, #3
 8004880:	4403      	add	r3, r0
 8004882:	3308      	adds	r3, #8
 8004884:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8004886:	7bfa      	ldrb	r2, [r7, #15]
 8004888:	490c      	ldr	r1, [pc, #48]	; (80048bc <RescheduleTimerList+0x128>)
 800488a:	4613      	mov	r3, r2
 800488c:	005b      	lsls	r3, r3, #1
 800488e:	4413      	add	r3, r2
 8004890:	00db      	lsls	r3, r3, #3
 8004892:	440b      	add	r3, r1
 8004894:	3315      	adds	r3, #21
 8004896:	781b      	ldrb	r3, [r3, #0]
 8004898:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800489a:	7bfb      	ldrb	r3, [r7, #15]
 800489c:	2b06      	cmp	r3, #6
 800489e:	d1c7      	bne.n	8004830 <RescheduleTimerList+0x9c>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 80048a0:	89bb      	ldrh	r3, [r7, #12]
 80048a2:	4618      	mov	r0, r3
 80048a4:	f7ff ff1e 	bl	80046e4 <RestartWakeupCounter>

  return ;
 80048a8:	bf00      	nop
}
 80048aa:	3710      	adds	r7, #16
 80048ac:	46bd      	mov	sp, r7
 80048ae:	bd80      	pop	{r7, pc}
 80048b0:	40002800 	.word	0x40002800
 80048b4:	200004f0 	.word	0x200004f0
 80048b8:	20000334 	.word	0x20000334
 80048bc:	200002a4 	.word	0x200002a4
 80048c0:	2000033c 	.word	0x2000033c
 80048c4:	20000342 	.word	0x20000342

080048c8 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b08a      	sub	sp, #40	; 0x28
 80048cc:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80048ce:	f3ef 8310 	mrs	r3, PRIMASK
 80048d2:	617b      	str	r3, [r7, #20]
  return(result);
 80048d4:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80048d6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 80048d8:	b672      	cpsid	i
}
 80048da:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80048dc:	4b59      	ldr	r3, [pc, #356]	; (8004a44 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	22ca      	movs	r2, #202	; 0xca
 80048e2:	625a      	str	r2, [r3, #36]	; 0x24
 80048e4:	4b57      	ldr	r3, [pc, #348]	; (8004a44 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	2253      	movs	r2, #83	; 0x53
 80048ea:	625a      	str	r2, [r3, #36]	; 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
 80048ec:	4b55      	ldr	r3, [pc, #340]	; (8004a44 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	689a      	ldr	r2, [r3, #8]
 80048f2:	4b54      	ldr	r3, [pc, #336]	; (8004a44 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048fa:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 80048fc:	4b52      	ldr	r3, [pc, #328]	; (8004a48 <HW_TS_RTC_Wakeup_Handler+0x180>)
 80048fe:	781b      	ldrb	r3, [r3, #0]
 8004900:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8004904:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8004908:	4950      	ldr	r1, [pc, #320]	; (8004a4c <HW_TS_RTC_Wakeup_Handler+0x184>)
 800490a:	4613      	mov	r3, r2
 800490c:	005b      	lsls	r3, r3, #1
 800490e:	4413      	add	r3, r2
 8004910:	00db      	lsls	r3, r3, #3
 8004912:	440b      	add	r3, r1
 8004914:	330c      	adds	r3, #12
 8004916:	781b      	ldrb	r3, [r3, #0]
 8004918:	b2db      	uxtb	r3, r3
 800491a:	2b02      	cmp	r3, #2
 800491c:	d16e      	bne.n	80049fc <HW_TS_RTC_Wakeup_Handler+0x134>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 800491e:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8004922:	494a      	ldr	r1, [pc, #296]	; (8004a4c <HW_TS_RTC_Wakeup_Handler+0x184>)
 8004924:	4613      	mov	r3, r2
 8004926:	005b      	lsls	r3, r3, #1
 8004928:	4413      	add	r3, r2
 800492a:	00db      	lsls	r3, r3, #3
 800492c:	440b      	add	r3, r1
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 8004932:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8004936:	4945      	ldr	r1, [pc, #276]	; (8004a4c <HW_TS_RTC_Wakeup_Handler+0x184>)
 8004938:	4613      	mov	r3, r2
 800493a:	005b      	lsls	r3, r3, #1
 800493c:	4413      	add	r3, r2
 800493e:	00db      	lsls	r3, r3, #3
 8004940:	440b      	add	r3, r1
 8004942:	3310      	adds	r3, #16
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8004948:	4b41      	ldr	r3, [pc, #260]	; (8004a50 <HW_TS_RTC_Wakeup_Handler+0x188>)
 800494a:	781b      	ldrb	r3, [r3, #0]
 800494c:	b2db      	uxtb	r3, r3
 800494e:	2b00      	cmp	r3, #0
 8004950:	d04c      	beq.n	80049ec <HW_TS_RTC_Wakeup_Handler+0x124>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 8004952:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8004956:	493d      	ldr	r1, [pc, #244]	; (8004a4c <HW_TS_RTC_Wakeup_Handler+0x184>)
 8004958:	4613      	mov	r3, r2
 800495a:	005b      	lsls	r3, r3, #1
 800495c:	4413      	add	r3, r2
 800495e:	00db      	lsls	r3, r3, #3
 8004960:	440b      	add	r3, r1
 8004962:	330d      	adds	r3, #13
 8004964:	781b      	ldrb	r3, [r3, #0]
 8004966:	b2db      	uxtb	r3, r3
 8004968:	2b01      	cmp	r3, #1
 800496a:	d124      	bne.n	80049b6 <HW_TS_RTC_Wakeup_Handler+0xee>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 800496c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004970:	2101      	movs	r1, #1
 8004972:	4618      	mov	r0, r3
 8004974:	f7ff fdf2 	bl	800455c <UnlinkTimer>
 8004978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800497a:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800497c:	693b      	ldr	r3, [r7, #16]
 800497e:	f383 8810 	msr	PRIMASK, r3
}
 8004982:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8004984:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8004988:	4930      	ldr	r1, [pc, #192]	; (8004a4c <HW_TS_RTC_Wakeup_Handler+0x184>)
 800498a:	4613      	mov	r3, r2
 800498c:	005b      	lsls	r3, r3, #1
 800498e:	4413      	add	r3, r2
 8004990:	00db      	lsls	r3, r3, #3
 8004992:	440b      	add	r3, r1
 8004994:	3304      	adds	r3, #4
 8004996:	681a      	ldr	r2, [r3, #0]
 8004998:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800499c:	4611      	mov	r1, r2
 800499e:	4618      	mov	r0, r3
 80049a0:	f000 f9b8 	bl	8004d14 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80049a4:	4b27      	ldr	r3, [pc, #156]	; (8004a44 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	22ca      	movs	r2, #202	; 0xca
 80049aa:	625a      	str	r2, [r3, #36]	; 0x24
 80049ac:	4b25      	ldr	r3, [pc, #148]	; (8004a44 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	2253      	movs	r2, #83	; 0x53
 80049b2:	625a      	str	r2, [r3, #36]	; 0x24
 80049b4:	e012      	b.n	80049dc <HW_TS_RTC_Wakeup_Handler+0x114>
 80049b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	f383 8810 	msr	PRIMASK, r3
}
 80049c0:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 80049c2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80049c6:	4618      	mov	r0, r3
 80049c8:	f000 f920 	bl	8004c0c <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80049cc:	4b1d      	ldr	r3, [pc, #116]	; (8004a44 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	22ca      	movs	r2, #202	; 0xca
 80049d2:	625a      	str	r2, [r3, #36]	; 0x24
 80049d4:	4b1b      	ldr	r3, [pc, #108]	; (8004a44 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	2253      	movs	r2, #83	; 0x53
 80049da:	625a      	str	r2, [r3, #36]	; 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 80049dc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80049e0:	69fa      	ldr	r2, [r7, #28]
 80049e2:	4619      	mov	r1, r3
 80049e4:	69b8      	ldr	r0, [r7, #24]
 80049e6:	f000 fa1b 	bl	8004e20 <HW_TS_RTC_Int_AppNot>
 80049ea:	e022      	b.n	8004a32 <HW_TS_RTC_Wakeup_Handler+0x16a>
    }
    else
    {
      RescheduleTimerList();
 80049ec:	f7ff fed2 	bl	8004794 <RescheduleTimerList>
 80049f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049f2:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049f4:	68bb      	ldr	r3, [r7, #8]
 80049f6:	f383 8810 	msr	PRIMASK, r3
}
 80049fa:	e01a      	b.n	8004a32 <HW_TS_RTC_Wakeup_Handler+0x16a>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 80049fc:	bf00      	nop
 80049fe:	4b11      	ldr	r3, [pc, #68]	; (8004a44 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	68db      	ldr	r3, [r3, #12]
 8004a04:	f003 0304 	and.w	r3, r3, #4
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d0f8      	beq.n	80049fe <HW_TS_RTC_Wakeup_Handler+0x136>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8004a0c:	4b0d      	ldr	r3, [pc, #52]	; (8004a44 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	68db      	ldr	r3, [r3, #12]
 8004a12:	b2da      	uxtb	r2, r3
 8004a14:	4b0b      	ldr	r3, [pc, #44]	; (8004a44 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8004a1c:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8004a1e:	4b0d      	ldr	r3, [pc, #52]	; (8004a54 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8004a20:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004a24:	60da      	str	r2, [r3, #12]
 8004a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a28:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	f383 8810 	msr	PRIMASK, r3
}
 8004a30:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8004a32:	4b04      	ldr	r3, [pc, #16]	; (8004a44 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	22ff      	movs	r2, #255	; 0xff
 8004a38:	625a      	str	r2, [r3, #36]	; 0x24

  return;
 8004a3a:	bf00      	nop
}
 8004a3c:	3728      	adds	r7, #40	; 0x28
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bd80      	pop	{r7, pc}
 8004a42:	bf00      	nop
 8004a44:	200004f0 	.word	0x200004f0
 8004a48:	20000334 	.word	0x20000334
 8004a4c:	200002a4 	.word	0x200002a4
 8004a50:	2000033c 	.word	0x2000033c
 8004a54:	58000800 	.word	0x58000800

08004a58 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b088      	sub	sp, #32
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	4603      	mov	r3, r0
 8004a60:	6039      	str	r1, [r7, #0]
 8004a62:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8004a64:	4b5e      	ldr	r3, [pc, #376]	; (8004be0 <HW_TS_Init+0x188>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	22ca      	movs	r2, #202	; 0xca
 8004a6a:	625a      	str	r2, [r3, #36]	; 0x24
 8004a6c:	4b5c      	ldr	r3, [pc, #368]	; (8004be0 <HW_TS_Init+0x188>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	2253      	movs	r2, #83	; 0x53
 8004a72:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004a74:	4b5b      	ldr	r3, [pc, #364]	; (8004be4 <HW_TS_Init+0x18c>)
 8004a76:	689b      	ldr	r3, [r3, #8]
 8004a78:	4a5a      	ldr	r2, [pc, #360]	; (8004be4 <HW_TS_Init+0x18c>)
 8004a7a:	f043 0320 	orr.w	r3, r3, #32
 8004a7e:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8004a80:	4b58      	ldr	r3, [pc, #352]	; (8004be4 <HW_TS_Init+0x18c>)
 8004a82:	689b      	ldr	r3, [r3, #8]
 8004a84:	b2db      	uxtb	r3, r3
 8004a86:	f003 0307 	and.w	r3, r3, #7
 8004a8a:	b2db      	uxtb	r3, r3
 8004a8c:	f1c3 0304 	rsb	r3, r3, #4
 8004a90:	b2da      	uxtb	r2, r3
 8004a92:	4b55      	ldr	r3, [pc, #340]	; (8004be8 <HW_TS_Init+0x190>)
 8004a94:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8004a96:	4b53      	ldr	r3, [pc, #332]	; (8004be4 <HW_TS_Init+0x18c>)
 8004a98:	691b      	ldr	r3, [r3, #16]
 8004a9a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004a9e:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 8004aa2:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004aa4:	693a      	ldr	r2, [r7, #16]
 8004aa6:	fa92 f2a2 	rbit	r2, r2
 8004aaa:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004aac:	68fa      	ldr	r2, [r7, #12]
 8004aae:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004ab0:	697a      	ldr	r2, [r7, #20]
 8004ab2:	2a00      	cmp	r2, #0
 8004ab4:	d101      	bne.n	8004aba <HW_TS_Init+0x62>
  {
    return 32U;
 8004ab6:	2220      	movs	r2, #32
 8004ab8:	e003      	b.n	8004ac2 <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 8004aba:	697a      	ldr	r2, [r7, #20]
 8004abc:	fab2 f282 	clz	r2, r2
 8004ac0:	b2d2      	uxtb	r2, r2
 8004ac2:	40d3      	lsrs	r3, r2
 8004ac4:	b2db      	uxtb	r3, r3
 8004ac6:	3301      	adds	r3, #1
 8004ac8:	b2da      	uxtb	r2, r3
 8004aca:	4b48      	ldr	r3, [pc, #288]	; (8004bec <HW_TS_Init+0x194>)
 8004acc:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8004ace:	4b45      	ldr	r3, [pc, #276]	; (8004be4 <HW_TS_Init+0x18c>)
 8004ad0:	691b      	ldr	r3, [r3, #16]
 8004ad2:	b29b      	uxth	r3, r3
 8004ad4:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8004ad8:	b29b      	uxth	r3, r3
 8004ada:	3301      	adds	r3, #1
 8004adc:	b29a      	uxth	r2, r3
 8004ade:	4b44      	ldr	r3, [pc, #272]	; (8004bf0 <HW_TS_Init+0x198>)
 8004ae0:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 8004ae2:	4b43      	ldr	r3, [pc, #268]	; (8004bf0 <HW_TS_Init+0x198>)
 8004ae4:	881b      	ldrh	r3, [r3, #0]
 8004ae6:	3b01      	subs	r3, #1
 8004ae8:	4a40      	ldr	r2, [pc, #256]	; (8004bec <HW_TS_Init+0x194>)
 8004aea:	7812      	ldrb	r2, [r2, #0]
 8004aec:	fb02 f303 	mul.w	r3, r2, r3
 8004af0:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8004af4:	4a3c      	ldr	r2, [pc, #240]	; (8004be8 <HW_TS_Init+0x190>)
 8004af6:	7812      	ldrb	r2, [r2, #0]
 8004af8:	40d3      	lsrs	r3, r2
 8004afa:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8004afc:	69bb      	ldr	r3, [r7, #24]
 8004afe:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d904      	bls.n	8004b10 <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 8004b06:	4b3b      	ldr	r3, [pc, #236]	; (8004bf4 <HW_TS_Init+0x19c>)
 8004b08:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004b0c:	801a      	strh	r2, [r3, #0]
 8004b0e:	e003      	b.n	8004b18 <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8004b10:	69bb      	ldr	r3, [r7, #24]
 8004b12:	b29a      	uxth	r2, r3
 8004b14:	4b37      	ldr	r3, [pc, #220]	; (8004bf4 <HW_TS_Init+0x19c>)
 8004b16:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8004b18:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8004b1c:	f7ff fb9c 	bl	8004258 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8004b20:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8004b24:	f7ff fb84 	bl	8004230 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8004b28:	79fb      	ldrb	r3, [r7, #7]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d13d      	bne.n	8004baa <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8004b2e:	4b32      	ldr	r3, [pc, #200]	; (8004bf8 <HW_TS_Init+0x1a0>)
 8004b30:	2201      	movs	r2, #1
 8004b32:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8004b34:	4b31      	ldr	r3, [pc, #196]	; (8004bfc <HW_TS_Init+0x1a4>)
 8004b36:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004b3a:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	77fb      	strb	r3, [r7, #31]
 8004b40:	e00c      	b.n	8004b5c <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8004b42:	7ffa      	ldrb	r2, [r7, #31]
 8004b44:	492e      	ldr	r1, [pc, #184]	; (8004c00 <HW_TS_Init+0x1a8>)
 8004b46:	4613      	mov	r3, r2
 8004b48:	005b      	lsls	r3, r3, #1
 8004b4a:	4413      	add	r3, r2
 8004b4c:	00db      	lsls	r3, r3, #3
 8004b4e:	440b      	add	r3, r1
 8004b50:	330c      	adds	r3, #12
 8004b52:	2200      	movs	r2, #0
 8004b54:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8004b56:	7ffb      	ldrb	r3, [r7, #31]
 8004b58:	3301      	adds	r3, #1
 8004b5a:	77fb      	strb	r3, [r7, #31]
 8004b5c:	7ffb      	ldrb	r3, [r7, #31]
 8004b5e:	2b05      	cmp	r3, #5
 8004b60:	d9ef      	bls.n	8004b42 <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8004b62:	4b28      	ldr	r3, [pc, #160]	; (8004c04 <HW_TS_Init+0x1ac>)
 8004b64:	2206      	movs	r2, #6
 8004b66:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 8004b68:	4b1d      	ldr	r3, [pc, #116]	; (8004be0 <HW_TS_Init+0x188>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	689a      	ldr	r2, [r3, #8]
 8004b6e:	4b1c      	ldr	r3, [pc, #112]	; (8004be0 <HW_TS_Init+0x188>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b76:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8004b78:	4b19      	ldr	r3, [pc, #100]	; (8004be0 <HW_TS_Init+0x188>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	68db      	ldr	r3, [r3, #12]
 8004b7e:	b2da      	uxtb	r2, r3
 8004b80:	4b17      	ldr	r3, [pc, #92]	; (8004be0 <HW_TS_Init+0x188>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8004b88:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8004b8a:	4b1f      	ldr	r3, [pc, #124]	; (8004c08 <HW_TS_Init+0x1b0>)
 8004b8c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004b90:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8004b92:	2003      	movs	r0, #3
 8004b94:	f002 fb25 	bl	80071e2 <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8004b98:	4b11      	ldr	r3, [pc, #68]	; (8004be0 <HW_TS_Init+0x188>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	689a      	ldr	r2, [r3, #8]
 8004b9e:	4b10      	ldr	r3, [pc, #64]	; (8004be0 <HW_TS_Init+0x188>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004ba6:	609a      	str	r2, [r3, #8]
 8004ba8:	e009      	b.n	8004bbe <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 8004baa:	4b0d      	ldr	r3, [pc, #52]	; (8004be0 <HW_TS_Init+0x188>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	68db      	ldr	r3, [r3, #12]
 8004bb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d002      	beq.n	8004bbe <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8004bb8:	2003      	movs	r0, #3
 8004bba:	f002 fb04 	bl	80071c6 <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8004bbe:	4b08      	ldr	r3, [pc, #32]	; (8004be0 <HW_TS_Init+0x188>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	22ff      	movs	r2, #255	; 0xff
 8004bc4:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	2103      	movs	r1, #3
 8004bca:	2003      	movs	r0, #3
 8004bcc:	f002 fab9 	bl	8007142 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8004bd0:	2003      	movs	r0, #3
 8004bd2:	f002 fad0 	bl	8007176 <HAL_NVIC_EnableIRQ>

  return;
 8004bd6:	bf00      	nop
}
 8004bd8:	3720      	adds	r7, #32
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	bd80      	pop	{r7, pc}
 8004bde:	bf00      	nop
 8004be0:	200004f0 	.word	0x200004f0
 8004be4:	40002800 	.word	0x40002800
 8004be8:	2000033d 	.word	0x2000033d
 8004bec:	2000033e 	.word	0x2000033e
 8004bf0:	20000340 	.word	0x20000340
 8004bf4:	20000342 	.word	0x20000342
 8004bf8:	2000033c 	.word	0x2000033c
 8004bfc:	20000338 	.word	0x20000338
 8004c00:	200002a4 	.word	0x200002a4
 8004c04:	20000334 	.word	0x20000334
 8004c08:	58000800 	.word	0x58000800

08004c0c <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b086      	sub	sp, #24
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	4603      	mov	r3, r0
 8004c14:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c16:	f3ef 8310 	mrs	r3, PRIMASK
 8004c1a:	60fb      	str	r3, [r7, #12]
  return(result);
 8004c1c:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8004c1e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8004c20:	b672      	cpsid	i
}
 8004c22:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8004c24:	2003      	movs	r0, #3
 8004c26:	f002 fab4 	bl	8007192 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8004c2a:	4b34      	ldr	r3, [pc, #208]	; (8004cfc <HW_TS_Stop+0xf0>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	22ca      	movs	r2, #202	; 0xca
 8004c30:	625a      	str	r2, [r3, #36]	; 0x24
 8004c32:	4b32      	ldr	r3, [pc, #200]	; (8004cfc <HW_TS_Stop+0xf0>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	2253      	movs	r2, #83	; 0x53
 8004c38:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8004c3a:	79fa      	ldrb	r2, [r7, #7]
 8004c3c:	4930      	ldr	r1, [pc, #192]	; (8004d00 <HW_TS_Stop+0xf4>)
 8004c3e:	4613      	mov	r3, r2
 8004c40:	005b      	lsls	r3, r3, #1
 8004c42:	4413      	add	r3, r2
 8004c44:	00db      	lsls	r3, r3, #3
 8004c46:	440b      	add	r3, r1
 8004c48:	330c      	adds	r3, #12
 8004c4a:	781b      	ldrb	r3, [r3, #0]
 8004c4c:	b2db      	uxtb	r3, r3
 8004c4e:	2b02      	cmp	r3, #2
 8004c50:	d142      	bne.n	8004cd8 <HW_TS_Stop+0xcc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 8004c52:	79fb      	ldrb	r3, [r7, #7]
 8004c54:	2100      	movs	r1, #0
 8004c56:	4618      	mov	r0, r3
 8004c58:	f7ff fc80 	bl	800455c <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8004c5c:	4b29      	ldr	r3, [pc, #164]	; (8004d04 <HW_TS_Stop+0xf8>)
 8004c5e:	781b      	ldrb	r3, [r3, #0]
 8004c60:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8004c62:	7cfb      	ldrb	r3, [r7, #19]
 8004c64:	2b06      	cmp	r3, #6
 8004c66:	d12f      	bne.n	8004cc8 <HW_TS_Stop+0xbc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8004c68:	4b27      	ldr	r3, [pc, #156]	; (8004d08 <HW_TS_Stop+0xfc>)
 8004c6a:	689b      	ldr	r3, [r3, #8]
 8004c6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c74:	d107      	bne.n	8004c86 <HW_TS_Stop+0x7a>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8004c76:	bf00      	nop
 8004c78:	4b20      	ldr	r3, [pc, #128]	; (8004cfc <HW_TS_Stop+0xf0>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	68db      	ldr	r3, [r3, #12]
 8004c7e:	f003 0304 	and.w	r3, r3, #4
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d1f8      	bne.n	8004c78 <HW_TS_Stop+0x6c>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8004c86:	4b1d      	ldr	r3, [pc, #116]	; (8004cfc <HW_TS_Stop+0xf0>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	689a      	ldr	r2, [r3, #8]
 8004c8c:	4b1b      	ldr	r3, [pc, #108]	; (8004cfc <HW_TS_Stop+0xf0>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c94:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8004c96:	bf00      	nop
 8004c98:	4b18      	ldr	r3, [pc, #96]	; (8004cfc <HW_TS_Stop+0xf0>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	68db      	ldr	r3, [r3, #12]
 8004c9e:	f003 0304 	and.w	r3, r3, #4
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d0f8      	beq.n	8004c98 <HW_TS_Stop+0x8c>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8004ca6:	4b15      	ldr	r3, [pc, #84]	; (8004cfc <HW_TS_Stop+0xf0>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	68db      	ldr	r3, [r3, #12]
 8004cac:	b2da      	uxtb	r2, r3
 8004cae:	4b13      	ldr	r3, [pc, #76]	; (8004cfc <HW_TS_Stop+0xf0>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8004cb6:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8004cb8:	4b14      	ldr	r3, [pc, #80]	; (8004d0c <HW_TS_Stop+0x100>)
 8004cba:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004cbe:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8004cc0:	2003      	movs	r0, #3
 8004cc2:	f002 fa8e 	bl	80071e2 <HAL_NVIC_ClearPendingIRQ>
 8004cc6:	e007      	b.n	8004cd8 <HW_TS_Stop+0xcc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8004cc8:	4b11      	ldr	r3, [pc, #68]	; (8004d10 <HW_TS_Stop+0x104>)
 8004cca:	781b      	ldrb	r3, [r3, #0]
 8004ccc:	b2db      	uxtb	r3, r3
 8004cce:	7cfa      	ldrb	r2, [r7, #19]
 8004cd0:	429a      	cmp	r2, r3
 8004cd2:	d001      	beq.n	8004cd8 <HW_TS_Stop+0xcc>
    {
      RescheduleTimerList();
 8004cd4:	f7ff fd5e 	bl	8004794 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8004cd8:	4b08      	ldr	r3, [pc, #32]	; (8004cfc <HW_TS_Stop+0xf0>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	22ff      	movs	r2, #255	; 0xff
 8004cde:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8004ce0:	2003      	movs	r0, #3
 8004ce2:	f002 fa48 	bl	8007176 <HAL_NVIC_EnableIRQ>
 8004ce6:	697b      	ldr	r3, [r7, #20]
 8004ce8:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cea:	68bb      	ldr	r3, [r7, #8]
 8004cec:	f383 8810 	msr	PRIMASK, r3
}
 8004cf0:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8004cf2:	bf00      	nop
}
 8004cf4:	3718      	adds	r7, #24
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	bd80      	pop	{r7, pc}
 8004cfa:	bf00      	nop
 8004cfc:	200004f0 	.word	0x200004f0
 8004d00:	200002a4 	.word	0x200002a4
 8004d04:	20000334 	.word	0x20000334
 8004d08:	40002800 	.word	0x40002800
 8004d0c:	58000800 	.word	0x58000800
 8004d10:	20000335 	.word	0x20000335

08004d14 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b086      	sub	sp, #24
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	4603      	mov	r3, r0
 8004d1c:	6039      	str	r1, [r7, #0]
 8004d1e:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8004d20:	79fa      	ldrb	r2, [r7, #7]
 8004d22:	493b      	ldr	r1, [pc, #236]	; (8004e10 <HW_TS_Start+0xfc>)
 8004d24:	4613      	mov	r3, r2
 8004d26:	005b      	lsls	r3, r3, #1
 8004d28:	4413      	add	r3, r2
 8004d2a:	00db      	lsls	r3, r3, #3
 8004d2c:	440b      	add	r3, r1
 8004d2e:	330c      	adds	r3, #12
 8004d30:	781b      	ldrb	r3, [r3, #0]
 8004d32:	b2db      	uxtb	r3, r3
 8004d34:	2b02      	cmp	r3, #2
 8004d36:	d103      	bne.n	8004d40 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8004d38:	79fb      	ldrb	r3, [r7, #7]
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	f7ff ff66 	bl	8004c0c <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d40:	f3ef 8310 	mrs	r3, PRIMASK
 8004d44:	60fb      	str	r3, [r7, #12]
  return(result);
 8004d46:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8004d48:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8004d4a:	b672      	cpsid	i
}
 8004d4c:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8004d4e:	2003      	movs	r0, #3
 8004d50:	f002 fa1f 	bl	8007192 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8004d54:	4b2f      	ldr	r3, [pc, #188]	; (8004e14 <HW_TS_Start+0x100>)
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	22ca      	movs	r2, #202	; 0xca
 8004d5a:	625a      	str	r2, [r3, #36]	; 0x24
 8004d5c:	4b2d      	ldr	r3, [pc, #180]	; (8004e14 <HW_TS_Start+0x100>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	2253      	movs	r2, #83	; 0x53
 8004d62:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8004d64:	79fa      	ldrb	r2, [r7, #7]
 8004d66:	492a      	ldr	r1, [pc, #168]	; (8004e10 <HW_TS_Start+0xfc>)
 8004d68:	4613      	mov	r3, r2
 8004d6a:	005b      	lsls	r3, r3, #1
 8004d6c:	4413      	add	r3, r2
 8004d6e:	00db      	lsls	r3, r3, #3
 8004d70:	440b      	add	r3, r1
 8004d72:	330c      	adds	r3, #12
 8004d74:	2202      	movs	r2, #2
 8004d76:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 8004d78:	79fa      	ldrb	r2, [r7, #7]
 8004d7a:	4925      	ldr	r1, [pc, #148]	; (8004e10 <HW_TS_Start+0xfc>)
 8004d7c:	4613      	mov	r3, r2
 8004d7e:	005b      	lsls	r3, r3, #1
 8004d80:	4413      	add	r3, r2
 8004d82:	00db      	lsls	r3, r3, #3
 8004d84:	440b      	add	r3, r1
 8004d86:	3308      	adds	r3, #8
 8004d88:	683a      	ldr	r2, [r7, #0]
 8004d8a:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 8004d8c:	79fa      	ldrb	r2, [r7, #7]
 8004d8e:	4920      	ldr	r1, [pc, #128]	; (8004e10 <HW_TS_Start+0xfc>)
 8004d90:	4613      	mov	r3, r2
 8004d92:	005b      	lsls	r3, r3, #1
 8004d94:	4413      	add	r3, r2
 8004d96:	00db      	lsls	r3, r3, #3
 8004d98:	440b      	add	r3, r1
 8004d9a:	3304      	adds	r3, #4
 8004d9c:	683a      	ldr	r2, [r7, #0]
 8004d9e:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 8004da0:	79fb      	ldrb	r3, [r7, #7]
 8004da2:	4618      	mov	r0, r3
 8004da4:	f7ff fb30 	bl	8004408 <linkTimer>
 8004da8:	4603      	mov	r3, r0
 8004daa:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 8004dac:	4b1a      	ldr	r3, [pc, #104]	; (8004e18 <HW_TS_Start+0x104>)
 8004dae:	781b      	ldrb	r3, [r3, #0]
 8004db0:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8004db2:	4b1a      	ldr	r3, [pc, #104]	; (8004e1c <HW_TS_Start+0x108>)
 8004db4:	781b      	ldrb	r3, [r3, #0]
 8004db6:	b2db      	uxtb	r3, r3
 8004db8:	7c7a      	ldrb	r2, [r7, #17]
 8004dba:	429a      	cmp	r2, r3
 8004dbc:	d002      	beq.n	8004dc4 <HW_TS_Start+0xb0>
  {
    RescheduleTimerList();
 8004dbe:	f7ff fce9 	bl	8004794 <RescheduleTimerList>
 8004dc2:	e013      	b.n	8004dec <HW_TS_Start+0xd8>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 8004dc4:	79fa      	ldrb	r2, [r7, #7]
 8004dc6:	4912      	ldr	r1, [pc, #72]	; (8004e10 <HW_TS_Start+0xfc>)
 8004dc8:	4613      	mov	r3, r2
 8004dca:	005b      	lsls	r3, r3, #1
 8004dcc:	4413      	add	r3, r2
 8004dce:	00db      	lsls	r3, r3, #3
 8004dd0:	440b      	add	r3, r1
 8004dd2:	3308      	adds	r3, #8
 8004dd4:	6819      	ldr	r1, [r3, #0]
 8004dd6:	8a7b      	ldrh	r3, [r7, #18]
 8004dd8:	79fa      	ldrb	r2, [r7, #7]
 8004dda:	1ac9      	subs	r1, r1, r3
 8004ddc:	480c      	ldr	r0, [pc, #48]	; (8004e10 <HW_TS_Start+0xfc>)
 8004dde:	4613      	mov	r3, r2
 8004de0:	005b      	lsls	r3, r3, #1
 8004de2:	4413      	add	r3, r2
 8004de4:	00db      	lsls	r3, r3, #3
 8004de6:	4403      	add	r3, r0
 8004de8:	3308      	adds	r3, #8
 8004dea:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8004dec:	4b09      	ldr	r3, [pc, #36]	; (8004e14 <HW_TS_Start+0x100>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	22ff      	movs	r2, #255	; 0xff
 8004df2:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8004df4:	2003      	movs	r0, #3
 8004df6:	f002 f9be 	bl	8007176 <HAL_NVIC_EnableIRQ>
 8004dfa:	697b      	ldr	r3, [r7, #20]
 8004dfc:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004dfe:	68bb      	ldr	r3, [r7, #8]
 8004e00:	f383 8810 	msr	PRIMASK, r3
}
 8004e04:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8004e06:	bf00      	nop
}
 8004e08:	3718      	adds	r7, #24
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	bd80      	pop	{r7, pc}
 8004e0e:	bf00      	nop
 8004e10:	200002a4 	.word	0x200002a4
 8004e14:	200004f0 	.word	0x200004f0
 8004e18:	20000334 	.word	0x20000334
 8004e1c:	20000335 	.word	0x20000335

08004e20 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b084      	sub	sp, #16
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	60f8      	str	r0, [r7, #12]
 8004e28:	460b      	mov	r3, r1
 8004e2a:	607a      	str	r2, [r7, #4]
 8004e2c:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	4798      	blx	r3

  return;
 8004e32:	bf00      	nop
}
 8004e34:	3710      	adds	r7, #16
 8004e36:	46bd      	mov	sp, r7
 8004e38:	bd80      	pop	{r7, pc}
	...

08004e3c <HW_UART_Transmit_DMA>:

    return hw_status;
}

hw_status_t HW_UART_Transmit_DMA(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size, void (*cb)(void))
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b086      	sub	sp, #24
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	60b9      	str	r1, [r7, #8]
 8004e44:	607b      	str	r3, [r7, #4]
 8004e46:	4603      	mov	r3, r0
 8004e48:	73fb      	strb	r3, [r7, #15]
 8004e4a:	4613      	mov	r3, r2
 8004e4c:	81bb      	strh	r3, [r7, #12]
    HAL_StatusTypeDef hal_status = HAL_OK;
 8004e4e:	2300      	movs	r3, #0
 8004e50:	75fb      	strb	r3, [r7, #23]
    hw_status_t hw_status = hw_uart_ok;
 8004e52:	2300      	movs	r3, #0
 8004e54:	75bb      	strb	r3, [r7, #22]

    switch (hw_uart_id)
 8004e56:	7bfb      	ldrb	r3, [r7, #15]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d10e      	bne.n	8004e7a <HW_UART_Transmit_DMA+0x3e>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case hw_uart1:
            HW_huart1TxCb = cb;
 8004e5c:	4a17      	ldr	r2, [pc, #92]	; (8004ebc <HW_UART_Transmit_DMA+0x80>)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6013      	str	r3, [r2, #0]
            huart1.Instance = USART1;
 8004e62:	4b17      	ldr	r3, [pc, #92]	; (8004ec0 <HW_UART_Transmit_DMA+0x84>)
 8004e64:	4a17      	ldr	r2, [pc, #92]	; (8004ec4 <HW_UART_Transmit_DMA+0x88>)
 8004e66:	601a      	str	r2, [r3, #0]
            hal_status = HAL_UART_Transmit_DMA(&huart1, p_data, size);
 8004e68:	89bb      	ldrh	r3, [r7, #12]
 8004e6a:	461a      	mov	r2, r3
 8004e6c:	68b9      	ldr	r1, [r7, #8]
 8004e6e:	4814      	ldr	r0, [pc, #80]	; (8004ec0 <HW_UART_Transmit_DMA+0x84>)
 8004e70:	f007 f9f4 	bl	800c25c <HAL_UART_Transmit_DMA>
 8004e74:	4603      	mov	r3, r0
 8004e76:	75fb      	strb	r3, [r7, #23]
            break;
 8004e78:	e000      	b.n	8004e7c <HW_UART_Transmit_DMA+0x40>
            hal_status = HAL_UART_Transmit_DMA(&hlpuart1, p_data, size);
            break;
#endif

        default:
            break;
 8004e7a:	bf00      	nop
    }

    switch (hal_status)
 8004e7c:	7dfb      	ldrb	r3, [r7, #23]
 8004e7e:	2b03      	cmp	r3, #3
 8004e80:	d816      	bhi.n	8004eb0 <HW_UART_Transmit_DMA+0x74>
 8004e82:	a201      	add	r2, pc, #4	; (adr r2, 8004e88 <HW_UART_Transmit_DMA+0x4c>)
 8004e84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e88:	08004e99 	.word	0x08004e99
 8004e8c:	08004e9f 	.word	0x08004e9f
 8004e90:	08004ea5 	.word	0x08004ea5
 8004e94:	08004eab 	.word	0x08004eab
    {
        case HAL_OK:
            hw_status = hw_uart_ok;
 8004e98:	2300      	movs	r3, #0
 8004e9a:	75bb      	strb	r3, [r7, #22]
            break;
 8004e9c:	e009      	b.n	8004eb2 <HW_UART_Transmit_DMA+0x76>

        case HAL_ERROR:
            hw_status = hw_uart_error;
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	75bb      	strb	r3, [r7, #22]
            break;
 8004ea2:	e006      	b.n	8004eb2 <HW_UART_Transmit_DMA+0x76>

        case HAL_BUSY:
            hw_status = hw_uart_busy;
 8004ea4:	2302      	movs	r3, #2
 8004ea6:	75bb      	strb	r3, [r7, #22]
            break;
 8004ea8:	e003      	b.n	8004eb2 <HW_UART_Transmit_DMA+0x76>

        case HAL_TIMEOUT:
            hw_status = hw_uart_to;
 8004eaa:	2303      	movs	r3, #3
 8004eac:	75bb      	strb	r3, [r7, #22]
            break;
 8004eae:	e000      	b.n	8004eb2 <HW_UART_Transmit_DMA+0x76>

        default:
            break;
 8004eb0:	bf00      	nop
    }

    return hw_status;
 8004eb2:	7dbb      	ldrb	r3, [r7, #22]
}
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	3718      	adds	r7, #24
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	bd80      	pop	{r7, pc}
 8004ebc:	20000344 	.word	0x20000344
 8004ec0:	200005ac 	.word	0x200005ac
 8004ec4:	40013800 	.word	0x40013800

08004ec8 <HAL_UART_TxCpltCallback>:

    return;
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b082      	sub	sp, #8
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)huart->Instance)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	461a      	mov	r2, r3
 8004ed6:	4b09      	ldr	r3, [pc, #36]	; (8004efc <HAL_UART_TxCpltCallback+0x34>)
 8004ed8:	429a      	cmp	r2, r3
 8004eda:	d107      	bne.n	8004eec <HAL_UART_TxCpltCallback+0x24>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case (uint32_t)USART1:
            if(HW_huart1TxCb)
 8004edc:	4b08      	ldr	r3, [pc, #32]	; (8004f00 <HAL_UART_TxCpltCallback+0x38>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d005      	beq.n	8004ef0 <HAL_UART_TxCpltCallback+0x28>
            {
                HW_huart1TxCb();
 8004ee4:	4b06      	ldr	r3, [pc, #24]	; (8004f00 <HAL_UART_TxCpltCallback+0x38>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4798      	blx	r3
            }
            break;
 8004eea:	e001      	b.n	8004ef0 <HAL_UART_TxCpltCallback+0x28>
            }
            break;
#endif

        default:
            break;
 8004eec:	bf00      	nop
 8004eee:	e000      	b.n	8004ef2 <HAL_UART_TxCpltCallback+0x2a>
            break;
 8004ef0:	bf00      	nop
    }

    return;
 8004ef2:	bf00      	nop
}
 8004ef4:	3708      	adds	r7, #8
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	bd80      	pop	{r7, pc}
 8004efa:	bf00      	nop
 8004efc:	40013800 	.word	0x40013800
 8004f00:	20000344 	.word	0x20000344

08004f04 <LL_RCC_LSE_SetDriveCapability>:
{
 8004f04:	b480      	push	{r7}
 8004f06:	b083      	sub	sp, #12
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8004f0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f14:	f023 0218 	bic.w	r2, r3, #24
 8004f18:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8004f24:	bf00      	nop
 8004f26:	370c      	adds	r7, #12
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2e:	4770      	bx	lr

08004f30 <LL_AHB1_GRP1_EnableClock>:
{
 8004f30:	b480      	push	{r7}
 8004f32:	b085      	sub	sp, #20
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8004f38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f3c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004f3e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	4313      	orrs	r3, r2
 8004f46:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8004f48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f4c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	4013      	ands	r3, r2
 8004f52:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004f54:	68fb      	ldr	r3, [r7, #12]
}
 8004f56:	bf00      	nop
 8004f58:	3714      	adds	r7, #20
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f60:	4770      	bx	lr

08004f62 <LL_AHB2_GRP1_EnableClock>:
{
 8004f62:	b480      	push	{r7}
 8004f64:	b085      	sub	sp, #20
 8004f66:	af00      	add	r7, sp, #0
 8004f68:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8004f6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f6e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004f70:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	4313      	orrs	r3, r2
 8004f78:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8004f7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f7e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	4013      	ands	r3, r2
 8004f84:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004f86:	68fb      	ldr	r3, [r7, #12]
}
 8004f88:	bf00      	nop
 8004f8a:	3714      	adds	r7, #20
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f92:	4770      	bx	lr
 8004f94:	0000      	movs	r0, r0
	...

08004f98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b084      	sub	sp, #16
 8004f9c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004f9e:	f001 fb17 	bl	80065d0 <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 8004fa2:	f7fc fad1 	bl	8001548 <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004fa6:	f000 f989 	bl	80052bc <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8004faa:	f000 f9ff 	bl	80053ac <PeriphCommonClock_Config>

  /* IPCC initialisation */
  MX_IPCC_Init();
 8004fae:	f000 faeb 	bl	8005588 <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004fb2:	f000 fcd1 	bl	8005958 <MX_GPIO_Init>
  MX_DMA_Init();
 8004fb6:	f000 fcad 	bl	8005914 <MX_DMA_Init>
  MX_ADC1_Init();
 8004fba:	f000 fa2b 	bl	8005414 <MX_ADC1_Init>
  MX_TIM1_Init();
 8004fbe:	f000 fb33 	bl	8005628 <MX_TIM1_Init>
  MX_I2C3_Init();
 8004fc2:	f000 faa1 	bl	8005508 <MX_I2C3_Init>
  MX_RF_Init();
 8004fc6:	f000 faf3 	bl	80055b0 <MX_RF_Init>
  MX_RTC_Init();
 8004fca:	f000 faf9 	bl	80055c0 <MX_RTC_Init>
  MX_USB_PCD_Init();
 8004fce:	f000 fc79 	bl	80058c4 <MX_USB_PCD_Init>
  MX_I2C1_Init();
 8004fd2:	f000 fa59 	bl	8005488 <MX_I2C1_Init>
  MX_TIM2_Init();
 8004fd6:	f000 fbd9 	bl	800578c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  BME280_Init();
 8004fda:	f7fc fd2f 	bl	8001a3c <BME280_Init>
  bme680_start(&dev);
 8004fde:	48a6      	ldr	r0, [pc, #664]	; (8005278 <main+0x2e0>)
 8004fe0:	f7fe fea8 	bl	8003d34 <bme680_start>

  reg.mode = 1;
 8004fe4:	4ba5      	ldr	r3, [pc, #660]	; (800527c <main+0x2e4>)
 8004fe6:	2201      	movs	r2, #1
 8004fe8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80


//  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
  HAL_TIM_Base_Start_IT(&htim2);
 8004fec:	48a4      	ldr	r0, [pc, #656]	; (8005280 <main+0x2e8>)
 8004fee:	f005 ffdf 	bl	800afb0 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 8004ff2:	f7fc fab7 	bl	8001564 <MX_APPE_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		HAL_GPIO_TogglePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin);
 8004ff6:	2120      	movs	r1, #32
 8004ff8:	48a2      	ldr	r0, [pc, #648]	; (8005284 <main+0x2ec>)
 8004ffa:	f002 fdbb 	bl	8007b74 <HAL_GPIO_TogglePin>

		reg.bme280_temperature = BME280_ReadTemperature();
 8004ffe:	f7fc ff95 	bl	8001f2c <BME280_ReadTemperature>
 8005002:	eef0 7a40 	vmov.f32	s15, s0
 8005006:	4b9d      	ldr	r3, [pc, #628]	; (800527c <main+0x2e4>)
 8005008:	edc3 7a22 	vstr	s15, [r3, #136]	; 0x88
		reg.bme280_pressure = BME280_ReadPressure();
 800500c:	f7fc ffe6 	bl	8001fdc <BME280_ReadPressure>
 8005010:	eef0 7a40 	vmov.f32	s15, s0
 8005014:	4b99      	ldr	r3, [pc, #612]	; (800527c <main+0x2e4>)
 8005016:	edc3 7a24 	vstr	s15, [r3, #144]	; 0x90
		reg.bme280_altitude = BME280_ReadAltitude(SEALEVELPRESSURE_PA);
 800501a:	ed9f 0a9b 	vldr	s0, [pc, #620]	; 8005288 <main+0x2f0>
 800501e:	f7fd fb73 	bl	8002708 <BME280_ReadAltitude>
 8005022:	eef0 7a40 	vmov.f32	s15, s0
 8005026:	4b95      	ldr	r3, [pc, #596]	; (800527c <main+0x2e4>)
 8005028:	edc3 7a25 	vstr	s15, [r3, #148]	; 0x94
		reg.bme280_humidity = BME280_ReadHumidity();
 800502c:	f7fd faea 	bl	8002604 <BME280_ReadHumidity>
 8005030:	eef0 7a40 	vmov.f32	s15, s0
 8005034:	4b91      	ldr	r3, [pc, #580]	; (800527c <main+0x2e4>)
 8005036:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c

		if(dev.new_fields == 1){
 800503a:	4b8f      	ldr	r3, [pc, #572]	; (8005278 <main+0x2e0>)
 800503c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005040:	2b01      	cmp	r3, #1
 8005042:	d13e      	bne.n	80050c2 <main+0x12a>
			reg.bme680_temperature = data.temperature;
 8005044:	4b91      	ldr	r3, [pc, #580]	; (800528c <main+0x2f4>)
 8005046:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800504a:	ee07 3a90 	vmov	s15, r3
 800504e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005052:	4b8a      	ldr	r3, [pc, #552]	; (800527c <main+0x2e4>)
 8005054:	edc3 7a26 	vstr	s15, [r3, #152]	; 0x98
			reg.bme680_pressure = data.pressure;
 8005058:	4b8c      	ldr	r3, [pc, #560]	; (800528c <main+0x2f4>)
 800505a:	689b      	ldr	r3, [r3, #8]
 800505c:	4a87      	ldr	r2, [pc, #540]	; (800527c <main+0x2e4>)
 800505e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
			reg.bme680_humidity = data.humidity * 0.001;
 8005062:	4b8a      	ldr	r3, [pc, #552]	; (800528c <main+0x2f4>)
 8005064:	68db      	ldr	r3, [r3, #12]
 8005066:	4618      	mov	r0, r3
 8005068:	f7fb fa24 	bl	80004b4 <__aeabi_ui2d>
 800506c:	a378      	add	r3, pc, #480	; (adr r3, 8005250 <main+0x2b8>)
 800506e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005072:	f7fb fa99 	bl	80005a8 <__aeabi_dmul>
 8005076:	4602      	mov	r2, r0
 8005078:	460b      	mov	r3, r1
 800507a:	4610      	mov	r0, r2
 800507c:	4619      	mov	r1, r3
 800507e:	f7fb fd8b 	bl	8000b98 <__aeabi_d2f>
 8005082:	4603      	mov	r3, r0
 8005084:	4a7d      	ldr	r2, [pc, #500]	; (800527c <main+0x2e4>)
 8005086:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
			reg.bme680_altitude = BME680_ReadAltitude(reg.bme680_humidity);
 800508a:	4b7c      	ldr	r3, [pc, #496]	; (800527c <main+0x2e4>)
 800508c:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 8005090:	eeb0 0a67 	vmov.f32	s0, s15
 8005094:	f7ff f80c 	bl	80040b0 <BME680_ReadAltitude>
 8005098:	eef0 7a40 	vmov.f32	s15, s0
 800509c:	4b77      	ldr	r3, [pc, #476]	; (800527c <main+0x2e4>)
 800509e:	edc3 7a29 	vstr	s15, [r3, #164]	; 0xa4
			reg.bme680_gas = data.gas_resistance;
 80050a2:	4b7a      	ldr	r3, [pc, #488]	; (800528c <main+0x2f4>)
 80050a4:	691b      	ldr	r3, [r3, #16]
 80050a6:	4a75      	ldr	r2, [pc, #468]	; (800527c <main+0x2e4>)
 80050a8:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
			reg.bme680_iaq = bme680_calculate_iaq(data);
 80050ac:	4b77      	ldr	r3, [pc, #476]	; (800528c <main+0x2f4>)
 80050ae:	691a      	ldr	r2, [r3, #16]
 80050b0:	9200      	str	r2, [sp, #0]
 80050b2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80050b4:	f7fe fef0 	bl	8003e98 <bme680_calculate_iaq>
 80050b8:	4603      	mov	r3, r0
 80050ba:	b29a      	uxth	r2, r3
 80050bc:	4b6f      	ldr	r3, [pc, #444]	; (800527c <main+0x2e4>)
 80050be:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
		}

		reg.MiCS_CO = (uint16_t) adc_raw_dma[0]/MiCS_CO_PROPORTION_COEF;
 80050c2:	4b73      	ldr	r3, [pc, #460]	; (8005290 <main+0x2f8>)
 80050c4:	881b      	ldrh	r3, [r3, #0]
 80050c6:	4618      	mov	r0, r3
 80050c8:	f7fb fa04 	bl	80004d4 <__aeabi_i2d>
 80050cc:	a362      	add	r3, pc, #392	; (adr r3, 8005258 <main+0x2c0>)
 80050ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050d2:	f7fb fb93 	bl	80007fc <__aeabi_ddiv>
 80050d6:	4602      	mov	r2, r0
 80050d8:	460b      	mov	r3, r1
 80050da:	4610      	mov	r0, r2
 80050dc:	4619      	mov	r1, r3
 80050de:	f7fb fd3b 	bl	8000b58 <__aeabi_d2uiz>
 80050e2:	4603      	mov	r3, r0
 80050e4:	b29a      	uxth	r2, r3
 80050e6:	4b65      	ldr	r3, [pc, #404]	; (800527c <main+0x2e4>)
 80050e8:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
		reg.MiCS_NH3 = (uint16_t) adc_raw_dma[2]/MiCS_NH3_PROPORTION_COEF;
 80050ec:	4b68      	ldr	r3, [pc, #416]	; (8005290 <main+0x2f8>)
 80050ee:	889b      	ldrh	r3, [r3, #4]
 80050f0:	4618      	mov	r0, r3
 80050f2:	f7fb f9ef 	bl	80004d4 <__aeabi_i2d>
 80050f6:	a35a      	add	r3, pc, #360	; (adr r3, 8005260 <main+0x2c8>)
 80050f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050fc:	f7fb fb7e 	bl	80007fc <__aeabi_ddiv>
 8005100:	4602      	mov	r2, r0
 8005102:	460b      	mov	r3, r1
 8005104:	4610      	mov	r0, r2
 8005106:	4619      	mov	r1, r3
 8005108:	f7fb fd26 	bl	8000b58 <__aeabi_d2uiz>
 800510c:	4603      	mov	r3, r0
 800510e:	b29a      	uxth	r2, r3
 8005110:	4b5a      	ldr	r3, [pc, #360]	; (800527c <main+0x2e4>)
 8005112:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
		reg.MiCS_NO2 = (uint16_t) adc_raw_dma[3]/MiCS_NO2_PROPORTION_COEF;
 8005116:	4b5e      	ldr	r3, [pc, #376]	; (8005290 <main+0x2f8>)
 8005118:	88db      	ldrh	r3, [r3, #6]
 800511a:	4618      	mov	r0, r3
 800511c:	f7fb f9da 	bl	80004d4 <__aeabi_i2d>
 8005120:	a351      	add	r3, pc, #324	; (adr r3, 8005268 <main+0x2d0>)
 8005122:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005126:	f7fb fb69 	bl	80007fc <__aeabi_ddiv>
 800512a:	4602      	mov	r2, r0
 800512c:	460b      	mov	r3, r1
 800512e:	4610      	mov	r0, r2
 8005130:	4619      	mov	r1, r3
 8005132:	f7fb fd11 	bl	8000b58 <__aeabi_d2uiz>
 8005136:	4603      	mov	r3, r0
 8005138:	b29a      	uxth	r2, r3
 800513a:	4b50      	ldr	r3, [pc, #320]	; (800527c <main+0x2e4>)
 800513c:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2

		reg.vref = ADC_CALC_VOLTAGE(4096, 5, adc_raw_dma[5]) * 3.3f;
 8005140:	4b53      	ldr	r3, [pc, #332]	; (8005290 <main+0x2f8>)
 8005142:	895b      	ldrh	r3, [r3, #10]
 8005144:	ee07 3a90 	vmov	s15, r3
 8005148:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800514c:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8005150:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005154:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005294 <main+0x2fc>
 8005158:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800515c:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 8005298 <main+0x300>
 8005160:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005164:	4b45      	ldr	r3, [pc, #276]	; (800527c <main+0x2e4>)
 8005166:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84
		reg.battery_lvl = (((float) adc_raw_dma[0] / 2925 - BATTERY_LOW) / (BATTERY_HIGH - BATTERY_LOW)) * 100;
 800516a:	4b49      	ldr	r3, [pc, #292]	; (8005290 <main+0x2f8>)
 800516c:	881b      	ldrh	r3, [r3, #0]
 800516e:	ee07 3a90 	vmov	s15, r3
 8005172:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005176:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800529c <main+0x304>
 800517a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800517e:	ee16 0a90 	vmov	r0, s13
 8005182:	f7fb f9b9 	bl	80004f8 <__aeabi_f2d>
 8005186:	f04f 0200 	mov.w	r2, #0
 800518a:	4b45      	ldr	r3, [pc, #276]	; (80052a0 <main+0x308>)
 800518c:	f7fb f854 	bl	8000238 <__aeabi_dsub>
 8005190:	4602      	mov	r2, r0
 8005192:	460b      	mov	r3, r1
 8005194:	4610      	mov	r0, r2
 8005196:	4619      	mov	r1, r3
 8005198:	a335      	add	r3, pc, #212	; (adr r3, 8005270 <main+0x2d8>)
 800519a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800519e:	f7fb fb2d 	bl	80007fc <__aeabi_ddiv>
 80051a2:	4602      	mov	r2, r0
 80051a4:	460b      	mov	r3, r1
 80051a6:	4610      	mov	r0, r2
 80051a8:	4619      	mov	r1, r3
 80051aa:	f04f 0200 	mov.w	r2, #0
 80051ae:	4b3d      	ldr	r3, [pc, #244]	; (80052a4 <main+0x30c>)
 80051b0:	f7fb f9fa 	bl	80005a8 <__aeabi_dmul>
 80051b4:	4602      	mov	r2, r0
 80051b6:	460b      	mov	r3, r1
 80051b8:	4610      	mov	r0, r2
 80051ba:	4619      	mov	r1, r3
 80051bc:	f7fb fccc 	bl	8000b58 <__aeabi_d2uiz>
 80051c0:	4603      	mov	r3, r0
 80051c2:	b2da      	uxtb	r2, r3
 80051c4:	4b2d      	ldr	r3, [pc, #180]	; (800527c <main+0x2e4>)
 80051c6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
		reg.mcu_temp = ADC_CALC_TEMPERATURE(reg.vref * 1000, adc_raw_dma[4], ADC_RESOLUTION_12B);
 80051ca:	4b31      	ldr	r3, [pc, #196]	; (8005290 <main+0x2f8>)
 80051cc:	891b      	ldrh	r3, [r3, #8]
 80051ce:	ee07 3a90 	vmov	s15, r3
 80051d2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80051d6:	4b29      	ldr	r3, [pc, #164]	; (800527c <main+0x2e4>)
 80051d8:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 80051dc:	eddf 6a32 	vldr	s13, [pc, #200]	; 80052a8 <main+0x310>
 80051e0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80051e4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80051e8:	eddf 6a30 	vldr	s13, [pc, #192]	; 80052ac <main+0x314>
 80051ec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80051f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80051f4:	ee17 2a90 	vmov	r2, s15
 80051f8:	4b2d      	ldr	r3, [pc, #180]	; (80052b0 <main+0x318>)
 80051fa:	881b      	ldrh	r3, [r3, #0]
 80051fc:	1ad3      	subs	r3, r2, r3
 80051fe:	4a2d      	ldr	r2, [pc, #180]	; (80052b4 <main+0x31c>)
 8005200:	fb03 f202 	mul.w	r2, r3, r2
 8005204:	4b2c      	ldr	r3, [pc, #176]	; (80052b8 <main+0x320>)
 8005206:	881b      	ldrh	r3, [r3, #0]
 8005208:	4619      	mov	r1, r3
 800520a:	4b29      	ldr	r3, [pc, #164]	; (80052b0 <main+0x318>)
 800520c:	881b      	ldrh	r3, [r3, #0]
 800520e:	1acb      	subs	r3, r1, r3
 8005210:	fb92 f3f3 	sdiv	r3, r2, r3
 8005214:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
 8005218:	3330      	adds	r3, #48	; 0x30
 800521a:	ee07 3a90 	vmov	s15, r3
 800521e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005222:	eddf 6a21 	vldr	s13, [pc, #132]	; 80052a8 <main+0x310>
 8005226:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800522a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800522e:	edc7 7a01 	vstr	s15, [r7, #4]
 8005232:	793b      	ldrb	r3, [r7, #4]
 8005234:	b2da      	uxtb	r2, r3
 8005236:	4b11      	ldr	r3, [pc, #68]	; (800527c <main+0x2e4>)
 8005238:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82

    /* USER CODE END WHILE */
    MX_APPE_Process();
 800523c:	f7fc fba9 	bl	8001992 <MX_APPE_Process>

    /* USER CODE BEGIN 3 */
	UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8005240:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005244:	f00c fd92 	bl	8011d6c <UTIL_SEQ_Run>
		HAL_GPIO_TogglePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin);
 8005248:	e6d5      	b.n	8004ff6 <main+0x5e>
 800524a:	bf00      	nop
 800524c:	f3af 8000 	nop.w
 8005250:	d2f1a9fc 	.word	0xd2f1a9fc
 8005254:	3f50624d 	.word	0x3f50624d
 8005258:	a9fbe76d 	.word	0xa9fbe76d
 800525c:	4008d2f1 	.word	0x4008d2f1
 8005260:	7ae147ae 	.word	0x7ae147ae
 8005264:	4024ae14 	.word	0x4024ae14
 8005268:	147ae148 	.word	0x147ae148
 800526c:	402f07ae 	.word	0x402f07ae
 8005270:	33333334 	.word	0x33333334
 8005274:	3fe33333 	.word	0x3fe33333
 8005278:	20000b20 	.word	0x20000b20
 800527c:	200009f4 	.word	0x200009f4
 8005280:	20000560 	.word	0x20000560
 8005284:	48000400 	.word	0x48000400
 8005288:	49776020 	.word	0x49776020
 800528c:	20000b0c 	.word	0x20000b0c
 8005290:	20000b78 	.word	0x20000b78
 8005294:	45800000 	.word	0x45800000
 8005298:	40533333 	.word	0x40533333
 800529c:	4536d000 	.word	0x4536d000
 80052a0:	3ff80000 	.word	0x3ff80000
 80052a4:	40590000 	.word	0x40590000
 80052a8:	447a0000 	.word	0x447a0000
 80052ac:	453b8000 	.word	0x453b8000
 80052b0:	1fff75a8 	.word	0x1fff75a8
 80052b4:	000186a0 	.word	0x000186a0
 80052b8:	1fff75ca 	.word	0x1fff75ca

080052bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b09a      	sub	sp, #104	; 0x68
 80052c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80052c2:	f107 0320 	add.w	r3, r7, #32
 80052c6:	2248      	movs	r2, #72	; 0x48
 80052c8:	2100      	movs	r1, #0
 80052ca:	4618      	mov	r0, r3
 80052cc:	f00d feee 	bl	80130ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80052d0:	1d3b      	adds	r3, r7, #4
 80052d2:	2200      	movs	r2, #0
 80052d4:	601a      	str	r2, [r3, #0]
 80052d6:	605a      	str	r2, [r3, #4]
 80052d8:	609a      	str	r2, [r3, #8]
 80052da:	60da      	str	r2, [r3, #12]
 80052dc:	611a      	str	r2, [r3, #16]
 80052de:	615a      	str	r2, [r3, #20]
 80052e0:	619a      	str	r2, [r3, #24]

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV2);
 80052e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052e6:	68db      	ldr	r3, [r3, #12]
 80052e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052ec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80052f0:	f043 0310 	orr.w	r3, r3, #16
 80052f4:	60d3      	str	r3, [r2, #12]

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 80052f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052fa:	68db      	ldr	r3, [r3, #12]
 80052fc:	f023 0303 	bic.w	r3, r3, #3
 8005300:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005304:	f043 0301 	orr.w	r3, r3, #1
 8005308:	60d3      	str	r3, [r2, #12]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800530a:	f003 fe5b 	bl	8008fc4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
 800530e:	2010      	movs	r0, #16
 8005310:	f7ff fdf8 	bl	8004f04 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005314:	4b24      	ldr	r3, [pc, #144]	; (80053a8 <SystemClock_Config+0xec>)
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800531c:	4a22      	ldr	r2, [pc, #136]	; (80053a8 <SystemClock_Config+0xec>)
 800531e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005322:	6013      	str	r3, [r2, #0]
 8005324:	4b20      	ldr	r3, [pc, #128]	; (80053a8 <SystemClock_Config+0xec>)
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800532c:	603b      	str	r3, [r7, #0]
 800532e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8005330:	2327      	movs	r3, #39	; 0x27
 8005332:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005334:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005338:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800533a:	2301      	movs	r3, #1
 800533c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800533e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005342:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8005344:	2301      	movs	r3, #1
 8005346:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8005348:	2340      	movs	r3, #64	; 0x40
 800534a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800534c:	2300      	movs	r3, #0
 800534e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_10;
 8005350:	23a0      	movs	r3, #160	; 0xa0
 8005352:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8005354:	2300      	movs	r3, #0
 8005356:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005358:	f107 0320 	add.w	r3, r7, #32
 800535c:	4618      	mov	r0, r3
 800535e:	f004 f9c5 	bl	80096ec <HAL_RCC_OscConfig>
 8005362:	4603      	mov	r3, r0
 8005364:	2b00      	cmp	r3, #0
 8005366:	d001      	beq.n	800536c <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8005368:	f000 fc7c 	bl	8005c64 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 800536c:	236f      	movs	r3, #111	; 0x6f
 800536e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8005370:	2302      	movs	r3, #2
 8005372:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005374:	2300      	movs	r3, #0
 8005376:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8005378:	2300      	movs	r3, #0
 800537a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800537c:	2300      	movs	r3, #0
 800537e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8005380:	2300      	movs	r3, #0
 8005382:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8005384:	2300      	movs	r3, #0
 8005386:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8005388:	1d3b      	adds	r3, r7, #4
 800538a:	2101      	movs	r1, #1
 800538c:	4618      	mov	r0, r3
 800538e:	f004 fd21 	bl	8009dd4 <HAL_RCC_ClockConfig>
 8005392:	4603      	mov	r3, r0
 8005394:	2b00      	cmp	r3, #0
 8005396:	d001      	beq.n	800539c <SystemClock_Config+0xe0>
  {
    Error_Handler();
 8005398:	f000 fc64 	bl	8005c64 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800539c:	f005 fadc 	bl	800a958 <HAL_RCCEx_EnableMSIPLLMode>
}
 80053a0:	bf00      	nop
 80053a2:	3768      	adds	r7, #104	; 0x68
 80053a4:	46bd      	mov	sp, r7
 80053a6:	bd80      	pop	{r7, pc}
 80053a8:	58000400 	.word	0x58000400

080053ac <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b094      	sub	sp, #80	; 0x50
 80053b0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80053b2:	463b      	mov	r3, r7
 80053b4:	2250      	movs	r2, #80	; 0x50
 80053b6:	2100      	movs	r1, #0
 80053b8:	4618      	mov	r0, r3
 80053ba:	f00d fe77 	bl	80130ac <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP
 80053be:	f44f 5354 	mov.w	r3, #13568	; 0x3500
 80053c2:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC;
  PeriphClkInitStruct.PLLSAI1.PLLN = 6;
 80053c4:	2306      	movs	r3, #6
 80053c6:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 80053c8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80053cc:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 80053ce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80053d2:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 80053d4:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80053d8:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK|RCC_PLLSAI1_ADCCLK;
 80053da:	f04f 5388 	mov.w	r3, #285212672	; 0x11000000
 80053de:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80053e0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80053e4:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80053e6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80053ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 80053ec:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80053f0:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 80053f2:	2300      	movs	r3, #0
 80053f4:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 80053f6:	2300      	movs	r3, #0
 80053f8:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80053fa:	463b      	mov	r3, r7
 80053fc:	4618      	mov	r0, r3
 80053fe:	f005 f935 	bl	800a66c <HAL_RCCEx_PeriphCLKConfig>
 8005402:	4603      	mov	r3, r0
 8005404:	2b00      	cmp	r3, #0
 8005406:	d001      	beq.n	800540c <PeriphCommonClock_Config+0x60>
  {
    Error_Handler();
 8005408:	f000 fc2c 	bl	8005c64 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 800540c:	bf00      	nop
 800540e:	3750      	adds	r7, #80	; 0x50
 8005410:	46bd      	mov	sp, r7
 8005412:	bd80      	pop	{r7, pc}

08005414 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	af00      	add	r7, sp, #0

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8005418:	4b19      	ldr	r3, [pc, #100]	; (8005480 <MX_ADC1_Init+0x6c>)
 800541a:	4a1a      	ldr	r2, [pc, #104]	; (8005484 <MX_ADC1_Init+0x70>)
 800541c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800541e:	4b18      	ldr	r3, [pc, #96]	; (8005480 <MX_ADC1_Init+0x6c>)
 8005420:	2200      	movs	r2, #0
 8005422:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8005424:	4b16      	ldr	r3, [pc, #88]	; (8005480 <MX_ADC1_Init+0x6c>)
 8005426:	2200      	movs	r2, #0
 8005428:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800542a:	4b15      	ldr	r3, [pc, #84]	; (8005480 <MX_ADC1_Init+0x6c>)
 800542c:	2200      	movs	r2, #0
 800542e:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8005430:	4b13      	ldr	r3, [pc, #76]	; (8005480 <MX_ADC1_Init+0x6c>)
 8005432:	2200      	movs	r2, #0
 8005434:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8005436:	4b12      	ldr	r3, [pc, #72]	; (8005480 <MX_ADC1_Init+0x6c>)
 8005438:	2208      	movs	r2, #8
 800543a:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800543c:	4b10      	ldr	r3, [pc, #64]	; (8005480 <MX_ADC1_Init+0x6c>)
 800543e:	2200      	movs	r2, #0
 8005440:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8005442:	4b0f      	ldr	r3, [pc, #60]	; (8005480 <MX_ADC1_Init+0x6c>)
 8005444:	2201      	movs	r2, #1
 8005446:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8005448:	4b0d      	ldr	r3, [pc, #52]	; (8005480 <MX_ADC1_Init+0x6c>)
 800544a:	2201      	movs	r2, #1
 800544c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800544e:	4b0c      	ldr	r3, [pc, #48]	; (8005480 <MX_ADC1_Init+0x6c>)
 8005450:	2200      	movs	r2, #0
 8005452:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8005456:	4b0a      	ldr	r3, [pc, #40]	; (8005480 <MX_ADC1_Init+0x6c>)
 8005458:	2201      	movs	r2, #1
 800545a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800545e:	4b08      	ldr	r3, [pc, #32]	; (8005480 <MX_ADC1_Init+0x6c>)
 8005460:	2200      	movs	r2, #0
 8005462:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8005464:	4b06      	ldr	r3, [pc, #24]	; (8005480 <MX_ADC1_Init+0x6c>)
 8005466:	2200      	movs	r2, #0
 8005468:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800546c:	4804      	ldr	r0, [pc, #16]	; (8005480 <MX_ADC1_Init+0x6c>)
 800546e:	f001 fa31 	bl	80068d4 <HAL_ADC_Init>
 8005472:	4603      	mov	r3, r0
 8005474:	2b00      	cmp	r3, #0
 8005476:	d001      	beq.n	800547c <MX_ADC1_Init+0x68>
  {
    Error_Handler();
 8005478:	f000 fbf4 	bl	8005c64 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800547c:	bf00      	nop
 800547e:	bd80      	pop	{r7, pc}
 8005480:	20000348 	.word	0x20000348
 8005484:	50040000 	.word	0x50040000

08005488 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8005488:	b580      	push	{r7, lr}
 800548a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800548c:	4b1b      	ldr	r3, [pc, #108]	; (80054fc <MX_I2C1_Init+0x74>)
 800548e:	4a1c      	ldr	r2, [pc, #112]	; (8005500 <MX_I2C1_Init+0x78>)
 8005490:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8005492:	4b1a      	ldr	r3, [pc, #104]	; (80054fc <MX_I2C1_Init+0x74>)
 8005494:	4a1b      	ldr	r2, [pc, #108]	; (8005504 <MX_I2C1_Init+0x7c>)
 8005496:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8005498:	4b18      	ldr	r3, [pc, #96]	; (80054fc <MX_I2C1_Init+0x74>)
 800549a:	2200      	movs	r2, #0
 800549c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800549e:	4b17      	ldr	r3, [pc, #92]	; (80054fc <MX_I2C1_Init+0x74>)
 80054a0:	2201      	movs	r2, #1
 80054a2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80054a4:	4b15      	ldr	r3, [pc, #84]	; (80054fc <MX_I2C1_Init+0x74>)
 80054a6:	2200      	movs	r2, #0
 80054a8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80054aa:	4b14      	ldr	r3, [pc, #80]	; (80054fc <MX_I2C1_Init+0x74>)
 80054ac:	2200      	movs	r2, #0
 80054ae:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80054b0:	4b12      	ldr	r3, [pc, #72]	; (80054fc <MX_I2C1_Init+0x74>)
 80054b2:	2200      	movs	r2, #0
 80054b4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80054b6:	4b11      	ldr	r3, [pc, #68]	; (80054fc <MX_I2C1_Init+0x74>)
 80054b8:	2200      	movs	r2, #0
 80054ba:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80054bc:	4b0f      	ldr	r3, [pc, #60]	; (80054fc <MX_I2C1_Init+0x74>)
 80054be:	2200      	movs	r2, #0
 80054c0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80054c2:	480e      	ldr	r0, [pc, #56]	; (80054fc <MX_I2C1_Init+0x74>)
 80054c4:	f002 fb94 	bl	8007bf0 <HAL_I2C_Init>
 80054c8:	4603      	mov	r3, r0
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d001      	beq.n	80054d2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80054ce:	f000 fbc9 	bl	8005c64 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80054d2:	2100      	movs	r1, #0
 80054d4:	4809      	ldr	r0, [pc, #36]	; (80054fc <MX_I2C1_Init+0x74>)
 80054d6:	f003 fb53 	bl	8008b80 <HAL_I2CEx_ConfigAnalogFilter>
 80054da:	4603      	mov	r3, r0
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d001      	beq.n	80054e4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80054e0:	f000 fbc0 	bl	8005c64 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80054e4:	2100      	movs	r1, #0
 80054e6:	4805      	ldr	r0, [pc, #20]	; (80054fc <MX_I2C1_Init+0x74>)
 80054e8:	f003 fb95 	bl	8008c16 <HAL_I2CEx_ConfigDigitalFilter>
 80054ec:	4603      	mov	r3, r0
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d001      	beq.n	80054f6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80054f2:	f000 fbb7 	bl	8005c64 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80054f6:	bf00      	nop
 80054f8:	bd80      	pop	{r7, pc}
 80054fa:	bf00      	nop
 80054fc:	2000040c 	.word	0x2000040c
 8005500:	40005400 	.word	0x40005400
 8005504:	00707cbb 	.word	0x00707cbb

08005508 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8005508:	b580      	push	{r7, lr}
 800550a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800550c:	4b1b      	ldr	r3, [pc, #108]	; (800557c <MX_I2C3_Init+0x74>)
 800550e:	4a1c      	ldr	r2, [pc, #112]	; (8005580 <MX_I2C3_Init+0x78>)
 8005510:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00707CBB;
 8005512:	4b1a      	ldr	r3, [pc, #104]	; (800557c <MX_I2C3_Init+0x74>)
 8005514:	4a1b      	ldr	r2, [pc, #108]	; (8005584 <MX_I2C3_Init+0x7c>)
 8005516:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8005518:	4b18      	ldr	r3, [pc, #96]	; (800557c <MX_I2C3_Init+0x74>)
 800551a:	2200      	movs	r2, #0
 800551c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800551e:	4b17      	ldr	r3, [pc, #92]	; (800557c <MX_I2C3_Init+0x74>)
 8005520:	2201      	movs	r2, #1
 8005522:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005524:	4b15      	ldr	r3, [pc, #84]	; (800557c <MX_I2C3_Init+0x74>)
 8005526:	2200      	movs	r2, #0
 8005528:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800552a:	4b14      	ldr	r3, [pc, #80]	; (800557c <MX_I2C3_Init+0x74>)
 800552c:	2200      	movs	r2, #0
 800552e:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8005530:	4b12      	ldr	r3, [pc, #72]	; (800557c <MX_I2C3_Init+0x74>)
 8005532:	2200      	movs	r2, #0
 8005534:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005536:	4b11      	ldr	r3, [pc, #68]	; (800557c <MX_I2C3_Init+0x74>)
 8005538:	2200      	movs	r2, #0
 800553a:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800553c:	4b0f      	ldr	r3, [pc, #60]	; (800557c <MX_I2C3_Init+0x74>)
 800553e:	2200      	movs	r2, #0
 8005540:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8005542:	480e      	ldr	r0, [pc, #56]	; (800557c <MX_I2C3_Init+0x74>)
 8005544:	f002 fb54 	bl	8007bf0 <HAL_I2C_Init>
 8005548:	4603      	mov	r3, r0
 800554a:	2b00      	cmp	r3, #0
 800554c:	d001      	beq.n	8005552 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 800554e:	f000 fb89 	bl	8005c64 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8005552:	2100      	movs	r1, #0
 8005554:	4809      	ldr	r0, [pc, #36]	; (800557c <MX_I2C3_Init+0x74>)
 8005556:	f003 fb13 	bl	8008b80 <HAL_I2CEx_ConfigAnalogFilter>
 800555a:	4603      	mov	r3, r0
 800555c:	2b00      	cmp	r3, #0
 800555e:	d001      	beq.n	8005564 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8005560:	f000 fb80 	bl	8005c64 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8005564:	2100      	movs	r1, #0
 8005566:	4805      	ldr	r0, [pc, #20]	; (800557c <MX_I2C3_Init+0x74>)
 8005568:	f003 fb55 	bl	8008c16 <HAL_I2CEx_ConfigDigitalFilter>
 800556c:	4603      	mov	r3, r0
 800556e:	2b00      	cmp	r3, #0
 8005570:	d001      	beq.n	8005576 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8005572:	f000 fb77 	bl	8005c64 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8005576:	bf00      	nop
 8005578:	bd80      	pop	{r7, pc}
 800557a:	bf00      	nop
 800557c:	20000460 	.word	0x20000460
 8005580:	40005c00 	.word	0x40005c00
 8005584:	00707cbb 	.word	0x00707cbb

08005588 <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 800558c:	4b06      	ldr	r3, [pc, #24]	; (80055a8 <MX_IPCC_Init+0x20>)
 800558e:	4a07      	ldr	r2, [pc, #28]	; (80055ac <MX_IPCC_Init+0x24>)
 8005590:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 8005592:	4805      	ldr	r0, [pc, #20]	; (80055a8 <MX_IPCC_Init+0x20>)
 8005594:	f003 fb8c 	bl	8008cb0 <HAL_IPCC_Init>
 8005598:	4603      	mov	r3, r0
 800559a:	2b00      	cmp	r3, #0
 800559c:	d001      	beq.n	80055a2 <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 800559e:	f000 fb61 	bl	8005c64 <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 80055a2:	bf00      	nop
 80055a4:	bd80      	pop	{r7, pc}
 80055a6:	bf00      	nop
 80055a8:	200004b4 	.word	0x200004b4
 80055ac:	58000c00 	.word	0x58000c00

080055b0 <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 80055b0:	b480      	push	{r7}
 80055b2:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 80055b4:	bf00      	nop
 80055b6:	46bd      	mov	sp, r7
 80055b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055bc:	4770      	bx	lr
	...

080055c0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80055c4:	4b16      	ldr	r3, [pc, #88]	; (8005620 <MX_RTC_Init+0x60>)
 80055c6:	4a17      	ldr	r2, [pc, #92]	; (8005624 <MX_RTC_Init+0x64>)
 80055c8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80055ca:	4b15      	ldr	r3, [pc, #84]	; (8005620 <MX_RTC_Init+0x60>)
 80055cc:	2200      	movs	r2, #0
 80055ce:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 80055d0:	4b13      	ldr	r3, [pc, #76]	; (8005620 <MX_RTC_Init+0x60>)
 80055d2:	220f      	movs	r2, #15
 80055d4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 80055d6:	4b12      	ldr	r3, [pc, #72]	; (8005620 <MX_RTC_Init+0x60>)
 80055d8:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80055dc:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80055de:	4b10      	ldr	r3, [pc, #64]	; (8005620 <MX_RTC_Init+0x60>)
 80055e0:	2200      	movs	r2, #0
 80055e2:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80055e4:	4b0e      	ldr	r3, [pc, #56]	; (8005620 <MX_RTC_Init+0x60>)
 80055e6:	2200      	movs	r2, #0
 80055e8:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80055ea:	4b0d      	ldr	r3, [pc, #52]	; (8005620 <MX_RTC_Init+0x60>)
 80055ec:	2200      	movs	r2, #0
 80055ee:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80055f0:	4b0b      	ldr	r3, [pc, #44]	; (8005620 <MX_RTC_Init+0x60>)
 80055f2:	2200      	movs	r2, #0
 80055f4:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80055f6:	480a      	ldr	r0, [pc, #40]	; (8005620 <MX_RTC_Init+0x60>)
 80055f8:	f005 fac6 	bl	800ab88 <HAL_RTC_Init>
 80055fc:	4603      	mov	r3, r0
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d001      	beq.n	8005606 <MX_RTC_Init+0x46>
  {
    Error_Handler();
 8005602:	f000 fb2f 	bl	8005c64 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8005606:	2200      	movs	r2, #0
 8005608:	2100      	movs	r1, #0
 800560a:	4805      	ldr	r0, [pc, #20]	; (8005620 <MX_RTC_Init+0x60>)
 800560c:	f005 fbbc 	bl	800ad88 <HAL_RTCEx_SetWakeUpTimer_IT>
 8005610:	4603      	mov	r3, r0
 8005612:	2b00      	cmp	r3, #0
 8005614:	d001      	beq.n	800561a <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 8005616:	f000 fb25 	bl	8005c64 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800561a:	bf00      	nop
 800561c:	bd80      	pop	{r7, pc}
 800561e:	bf00      	nop
 8005620:	200004f0 	.word	0x200004f0
 8005624:	40002800 	.word	0x40002800

08005628 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b09c      	sub	sp, #112	; 0x70
 800562c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800562e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8005632:	2200      	movs	r2, #0
 8005634:	601a      	str	r2, [r3, #0]
 8005636:	605a      	str	r2, [r3, #4]
 8005638:	609a      	str	r2, [r3, #8]
 800563a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800563c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005640:	2200      	movs	r2, #0
 8005642:	601a      	str	r2, [r3, #0]
 8005644:	605a      	str	r2, [r3, #4]
 8005646:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005648:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800564c:	2200      	movs	r2, #0
 800564e:	601a      	str	r2, [r3, #0]
 8005650:	605a      	str	r2, [r3, #4]
 8005652:	609a      	str	r2, [r3, #8]
 8005654:	60da      	str	r2, [r3, #12]
 8005656:	611a      	str	r2, [r3, #16]
 8005658:	615a      	str	r2, [r3, #20]
 800565a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800565c:	1d3b      	adds	r3, r7, #4
 800565e:	2234      	movs	r2, #52	; 0x34
 8005660:	2100      	movs	r1, #0
 8005662:	4618      	mov	r0, r3
 8005664:	f00d fd22 	bl	80130ac <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8005668:	4b46      	ldr	r3, [pc, #280]	; (8005784 <MX_TIM1_Init+0x15c>)
 800566a:	4a47      	ldr	r2, [pc, #284]	; (8005788 <MX_TIM1_Init+0x160>)
 800566c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1000;
 800566e:	4b45      	ldr	r3, [pc, #276]	; (8005784 <MX_TIM1_Init+0x15c>)
 8005670:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005674:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005676:	4b43      	ldr	r3, [pc, #268]	; (8005784 <MX_TIM1_Init+0x15c>)
 8005678:	2200      	movs	r2, #0
 800567a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 16000;
 800567c:	4b41      	ldr	r3, [pc, #260]	; (8005784 <MX_TIM1_Init+0x15c>)
 800567e:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8005682:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005684:	4b3f      	ldr	r3, [pc, #252]	; (8005784 <MX_TIM1_Init+0x15c>)
 8005686:	2200      	movs	r2, #0
 8005688:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800568a:	4b3e      	ldr	r3, [pc, #248]	; (8005784 <MX_TIM1_Init+0x15c>)
 800568c:	2200      	movs	r2, #0
 800568e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005690:	4b3c      	ldr	r3, [pc, #240]	; (8005784 <MX_TIM1_Init+0x15c>)
 8005692:	2280      	movs	r2, #128	; 0x80
 8005694:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8005696:	483b      	ldr	r0, [pc, #236]	; (8005784 <MX_TIM1_Init+0x15c>)
 8005698:	f005 fc32 	bl	800af00 <HAL_TIM_Base_Init>
 800569c:	4603      	mov	r3, r0
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d001      	beq.n	80056a6 <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 80056a2:	f000 fadf 	bl	8005c64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80056a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80056aa:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80056ac:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80056b0:	4619      	mov	r1, r3
 80056b2:	4834      	ldr	r0, [pc, #208]	; (8005784 <MX_TIM1_Init+0x15c>)
 80056b4:	f005 ff5e 	bl	800b574 <HAL_TIM_ConfigClockSource>
 80056b8:	4603      	mov	r3, r0
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d001      	beq.n	80056c2 <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 80056be:	f000 fad1 	bl	8005c64 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80056c2:	4830      	ldr	r0, [pc, #192]	; (8005784 <MX_TIM1_Init+0x15c>)
 80056c4:	f005 fcc2 	bl	800b04c <HAL_TIM_PWM_Init>
 80056c8:	4603      	mov	r3, r0
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d001      	beq.n	80056d2 <MX_TIM1_Init+0xaa>
  {
    Error_Handler();
 80056ce:	f000 fac9 	bl	8005c64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80056d2:	2300      	movs	r3, #0
 80056d4:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80056d6:	2300      	movs	r3, #0
 80056d8:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80056da:	2300      	movs	r3, #0
 80056dc:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80056de:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80056e2:	4619      	mov	r1, r3
 80056e4:	4827      	ldr	r0, [pc, #156]	; (8005784 <MX_TIM1_Init+0x15c>)
 80056e6:	f006 fbb5 	bl	800be54 <HAL_TIMEx_MasterConfigSynchronization>
 80056ea:	4603      	mov	r3, r0
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d001      	beq.n	80056f4 <MX_TIM1_Init+0xcc>
  {
    Error_Handler();
 80056f0:	f000 fab8 	bl	8005c64 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80056f4:	2360      	movs	r3, #96	; 0x60
 80056f6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 80056f8:	2300      	movs	r3, #0
 80056fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80056fc:	2300      	movs	r3, #0
 80056fe:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8005700:	2300      	movs	r3, #0
 8005702:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005704:	2300      	movs	r3, #0
 8005706:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8005708:	2300      	movs	r3, #0
 800570a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800570c:	2300      	movs	r3, #0
 800570e:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8005710:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005714:	2208      	movs	r2, #8
 8005716:	4619      	mov	r1, r3
 8005718:	481a      	ldr	r0, [pc, #104]	; (8005784 <MX_TIM1_Init+0x15c>)
 800571a:	f005 fe17 	bl	800b34c <HAL_TIM_PWM_ConfigChannel>
 800571e:	4603      	mov	r3, r0
 8005720:	2b00      	cmp	r3, #0
 8005722:	d001      	beq.n	8005728 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8005724:	f000 fa9e 	bl	8005c64 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8005728:	2300      	movs	r3, #0
 800572a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800572c:	2300      	movs	r3, #0
 800572e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8005730:	2300      	movs	r3, #0
 8005732:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8005734:	2300      	movs	r3, #0
 8005736:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8005738:	2300      	movs	r3, #0
 800573a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800573c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005740:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8005742:	2300      	movs	r3, #0
 8005744:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8005746:	2300      	movs	r3, #0
 8005748:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800574a:	2300      	movs	r3, #0
 800574c:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800574e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005752:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8005754:	2300      	movs	r3, #0
 8005756:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8005758:	2300      	movs	r3, #0
 800575a:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800575c:	2300      	movs	r3, #0
 800575e:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8005760:	1d3b      	adds	r3, r7, #4
 8005762:	4619      	mov	r1, r3
 8005764:	4807      	ldr	r0, [pc, #28]	; (8005784 <MX_TIM1_Init+0x15c>)
 8005766:	f006 fbd5 	bl	800bf14 <HAL_TIMEx_ConfigBreakDeadTime>
 800576a:	4603      	mov	r3, r0
 800576c:	2b00      	cmp	r3, #0
 800576e:	d001      	beq.n	8005774 <MX_TIM1_Init+0x14c>
  {
    Error_Handler();
 8005770:	f000 fa78 	bl	8005c64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8005774:	4803      	ldr	r0, [pc, #12]	; (8005784 <MX_TIM1_Init+0x15c>)
 8005776:	f000 fc5f 	bl	8006038 <HAL_TIM_MspPostInit>

}
 800577a:	bf00      	nop
 800577c:	3770      	adds	r7, #112	; 0x70
 800577e:	46bd      	mov	sp, r7
 8005780:	bd80      	pop	{r7, pc}
 8005782:	bf00      	nop
 8005784:	20000514 	.word	0x20000514
 8005788:	40012c00 	.word	0x40012c00

0800578c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800578c:	b580      	push	{r7, lr}
 800578e:	b088      	sub	sp, #32
 8005790:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005792:	f107 0310 	add.w	r3, r7, #16
 8005796:	2200      	movs	r2, #0
 8005798:	601a      	str	r2, [r3, #0]
 800579a:	605a      	str	r2, [r3, #4]
 800579c:	609a      	str	r2, [r3, #8]
 800579e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80057a0:	1d3b      	adds	r3, r7, #4
 80057a2:	2200      	movs	r2, #0
 80057a4:	601a      	str	r2, [r3, #0]
 80057a6:	605a      	str	r2, [r3, #4]
 80057a8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80057aa:	4b1e      	ldr	r3, [pc, #120]	; (8005824 <MX_TIM2_Init+0x98>)
 80057ac:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80057b0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1000;
 80057b2:	4b1c      	ldr	r3, [pc, #112]	; (8005824 <MX_TIM2_Init+0x98>)
 80057b4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80057b8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80057ba:	4b1a      	ldr	r3, [pc, #104]	; (8005824 <MX_TIM2_Init+0x98>)
 80057bc:	2200      	movs	r2, #0
 80057be:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 16000;
 80057c0:	4b18      	ldr	r3, [pc, #96]	; (8005824 <MX_TIM2_Init+0x98>)
 80057c2:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 80057c6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80057c8:	4b16      	ldr	r3, [pc, #88]	; (8005824 <MX_TIM2_Init+0x98>)
 80057ca:	2200      	movs	r2, #0
 80057cc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80057ce:	4b15      	ldr	r3, [pc, #84]	; (8005824 <MX_TIM2_Init+0x98>)
 80057d0:	2280      	movs	r2, #128	; 0x80
 80057d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80057d4:	4813      	ldr	r0, [pc, #76]	; (8005824 <MX_TIM2_Init+0x98>)
 80057d6:	f005 fb93 	bl	800af00 <HAL_TIM_Base_Init>
 80057da:	4603      	mov	r3, r0
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d001      	beq.n	80057e4 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 80057e0:	f000 fa40 	bl	8005c64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80057e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80057e8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80057ea:	f107 0310 	add.w	r3, r7, #16
 80057ee:	4619      	mov	r1, r3
 80057f0:	480c      	ldr	r0, [pc, #48]	; (8005824 <MX_TIM2_Init+0x98>)
 80057f2:	f005 febf 	bl	800b574 <HAL_TIM_ConfigClockSource>
 80057f6:	4603      	mov	r3, r0
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d001      	beq.n	8005800 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 80057fc:	f000 fa32 	bl	8005c64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005800:	2300      	movs	r3, #0
 8005802:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005804:	2300      	movs	r3, #0
 8005806:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8005808:	1d3b      	adds	r3, r7, #4
 800580a:	4619      	mov	r1, r3
 800580c:	4805      	ldr	r0, [pc, #20]	; (8005824 <MX_TIM2_Init+0x98>)
 800580e:	f006 fb21 	bl	800be54 <HAL_TIMEx_MasterConfigSynchronization>
 8005812:	4603      	mov	r3, r0
 8005814:	2b00      	cmp	r3, #0
 8005816:	d001      	beq.n	800581c <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8005818:	f000 fa24 	bl	8005c64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800581c:	bf00      	nop
 800581e:	3720      	adds	r7, #32
 8005820:	46bd      	mov	sp, r7
 8005822:	bd80      	pop	{r7, pc}
 8005824:	20000560 	.word	0x20000560

08005828 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init(void)
{
 8005828:	b580      	push	{r7, lr}
 800582a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800582c:	4b23      	ldr	r3, [pc, #140]	; (80058bc <MX_USART1_UART_Init+0x94>)
 800582e:	4a24      	ldr	r2, [pc, #144]	; (80058c0 <MX_USART1_UART_Init+0x98>)
 8005830:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8005832:	4b22      	ldr	r3, [pc, #136]	; (80058bc <MX_USART1_UART_Init+0x94>)
 8005834:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005838:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800583a:	4b20      	ldr	r3, [pc, #128]	; (80058bc <MX_USART1_UART_Init+0x94>)
 800583c:	2200      	movs	r2, #0
 800583e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005840:	4b1e      	ldr	r3, [pc, #120]	; (80058bc <MX_USART1_UART_Init+0x94>)
 8005842:	2200      	movs	r2, #0
 8005844:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8005846:	4b1d      	ldr	r3, [pc, #116]	; (80058bc <MX_USART1_UART_Init+0x94>)
 8005848:	2200      	movs	r2, #0
 800584a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800584c:	4b1b      	ldr	r3, [pc, #108]	; (80058bc <MX_USART1_UART_Init+0x94>)
 800584e:	220c      	movs	r2, #12
 8005850:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005852:	4b1a      	ldr	r3, [pc, #104]	; (80058bc <MX_USART1_UART_Init+0x94>)
 8005854:	2200      	movs	r2, #0
 8005856:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 8005858:	4b18      	ldr	r3, [pc, #96]	; (80058bc <MX_USART1_UART_Init+0x94>)
 800585a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800585e:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005860:	4b16      	ldr	r3, [pc, #88]	; (80058bc <MX_USART1_UART_Init+0x94>)
 8005862:	2200      	movs	r2, #0
 8005864:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8005866:	4b15      	ldr	r3, [pc, #84]	; (80058bc <MX_USART1_UART_Init+0x94>)
 8005868:	2200      	movs	r2, #0
 800586a:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800586c:	4b13      	ldr	r3, [pc, #76]	; (80058bc <MX_USART1_UART_Init+0x94>)
 800586e:	2200      	movs	r2, #0
 8005870:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8005872:	4812      	ldr	r0, [pc, #72]	; (80058bc <MX_USART1_UART_Init+0x94>)
 8005874:	f006 fc1c 	bl	800c0b0 <HAL_UART_Init>
 8005878:	4603      	mov	r3, r0
 800587a:	2b00      	cmp	r3, #0
 800587c:	d001      	beq.n	8005882 <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 800587e:	f000 f9f1 	bl	8005c64 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005882:	2100      	movs	r1, #0
 8005884:	480d      	ldr	r0, [pc, #52]	; (80058bc <MX_USART1_UART_Init+0x94>)
 8005886:	f007 fe67 	bl	800d558 <HAL_UARTEx_SetTxFifoThreshold>
 800588a:	4603      	mov	r3, r0
 800588c:	2b00      	cmp	r3, #0
 800588e:	d001      	beq.n	8005894 <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 8005890:	f000 f9e8 	bl	8005c64 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005894:	2100      	movs	r1, #0
 8005896:	4809      	ldr	r0, [pc, #36]	; (80058bc <MX_USART1_UART_Init+0x94>)
 8005898:	f007 fe9c 	bl	800d5d4 <HAL_UARTEx_SetRxFifoThreshold>
 800589c:	4603      	mov	r3, r0
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d001      	beq.n	80058a6 <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 80058a2:	f000 f9df 	bl	8005c64 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80058a6:	4805      	ldr	r0, [pc, #20]	; (80058bc <MX_USART1_UART_Init+0x94>)
 80058a8:	f007 fe1d 	bl	800d4e6 <HAL_UARTEx_DisableFifoMode>
 80058ac:	4603      	mov	r3, r0
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d001      	beq.n	80058b6 <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 80058b2:	f000 f9d7 	bl	8005c64 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80058b6:	bf00      	nop
 80058b8:	bd80      	pop	{r7, pc}
 80058ba:	bf00      	nop
 80058bc:	200005ac 	.word	0x200005ac
 80058c0:	40013800 	.word	0x40013800

080058c4 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 80058c8:	4b10      	ldr	r3, [pc, #64]	; (800590c <MX_USB_PCD_Init+0x48>)
 80058ca:	4a11      	ldr	r2, [pc, #68]	; (8005910 <MX_USB_PCD_Init+0x4c>)
 80058cc:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80058ce:	4b0f      	ldr	r3, [pc, #60]	; (800590c <MX_USB_PCD_Init+0x48>)
 80058d0:	2208      	movs	r2, #8
 80058d2:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80058d4:	4b0d      	ldr	r3, [pc, #52]	; (800590c <MX_USB_PCD_Init+0x48>)
 80058d6:	2202      	movs	r2, #2
 80058d8:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80058da:	4b0c      	ldr	r3, [pc, #48]	; (800590c <MX_USB_PCD_Init+0x48>)
 80058dc:	2202      	movs	r2, #2
 80058de:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 80058e0:	4b0a      	ldr	r3, [pc, #40]	; (800590c <MX_USB_PCD_Init+0x48>)
 80058e2:	2200      	movs	r2, #0
 80058e4:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80058e6:	4b09      	ldr	r3, [pc, #36]	; (800590c <MX_USB_PCD_Init+0x48>)
 80058e8:	2200      	movs	r2, #0
 80058ea:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80058ec:	4b07      	ldr	r3, [pc, #28]	; (800590c <MX_USB_PCD_Init+0x48>)
 80058ee:	2200      	movs	r2, #0
 80058f0:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80058f2:	4b06      	ldr	r3, [pc, #24]	; (800590c <MX_USB_PCD_Init+0x48>)
 80058f4:	2200      	movs	r2, #0
 80058f6:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80058f8:	4804      	ldr	r0, [pc, #16]	; (800590c <MX_USB_PCD_Init+0x48>)
 80058fa:	f003 fa5f 	bl	8008dbc <HAL_PCD_Init>
 80058fe:	4603      	mov	r3, r0
 8005900:	2b00      	cmp	r3, #0
 8005902:	d001      	beq.n	8005908 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8005904:	f000 f9ae 	bl	8005c64 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8005908:	bf00      	nop
 800590a:	bd80      	pop	{r7, pc}
 800590c:	20000700 	.word	0x20000700
 8005910:	40006800 	.word	0x40006800

08005914 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8005918:	2004      	movs	r0, #4
 800591a:	f7ff fb09 	bl	8004f30 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 800591e:	2001      	movs	r0, #1
 8005920:	f7ff fb06 	bl	8004f30 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8005924:	2200      	movs	r2, #0
 8005926:	2100      	movs	r1, #0
 8005928:	200b      	movs	r0, #11
 800592a:	f001 fc0a 	bl	8007142 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800592e:	200b      	movs	r0, #11
 8005930:	f001 fc21 	bl	8007176 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8005934:	2200      	movs	r2, #0
 8005936:	2100      	movs	r1, #0
 8005938:	200c      	movs	r0, #12
 800593a:	f001 fc02 	bl	8007142 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800593e:	200c      	movs	r0, #12
 8005940:	f001 fc19 	bl	8007176 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8005944:	2200      	movs	r2, #0
 8005946:	2100      	movs	r1, #0
 8005948:	200d      	movs	r0, #13
 800594a:	f001 fbfa 	bl	8007142 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 800594e:	200d      	movs	r0, #13
 8005950:	f001 fc11 	bl	8007176 <HAL_NVIC_EnableIRQ>

}
 8005954:	bf00      	nop
 8005956:	bd80      	pop	{r7, pc}

08005958 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005958:	b580      	push	{r7, lr}
 800595a:	b086      	sub	sp, #24
 800595c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800595e:	1d3b      	adds	r3, r7, #4
 8005960:	2200      	movs	r2, #0
 8005962:	601a      	str	r2, [r3, #0]
 8005964:	605a      	str	r2, [r3, #4]
 8005966:	609a      	str	r2, [r3, #8]
 8005968:	60da      	str	r2, [r3, #12]
 800596a:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800596c:	2004      	movs	r0, #4
 800596e:	f7ff faf8 	bl	8004f62 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005972:	2002      	movs	r0, #2
 8005974:	f7ff faf5 	bl	8004f62 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005978:	2001      	movs	r0, #1
 800597a:	f7ff faf2 	bl	8004f62 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800597e:	2008      	movs	r0, #8
 8005980:	f7ff faef 	bl	8004f62 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SWITCH_3V_Pin|SWITCH_5V_Pin, GPIO_PIN_RESET);
 8005984:	2200      	movs	r2, #0
 8005986:	210c      	movs	r1, #12
 8005988:	4818      	ldr	r0, [pc, #96]	; (80059ec <MX_GPIO_Init+0x94>)
 800598a:	f002 f8db 	bl	8007b44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 800598e:	2200      	movs	r2, #0
 8005990:	2123      	movs	r1, #35	; 0x23
 8005992:	4817      	ldr	r0, [pc, #92]	; (80059f0 <MX_GPIO_Init+0x98>)
 8005994:	f002 f8d6 	bl	8007b44 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SWITCH_3V_Pin SWITCH_5V_Pin */
  GPIO_InitStruct.Pin = SWITCH_3V_Pin|SWITCH_5V_Pin;
 8005998:	230c      	movs	r3, #12
 800599a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800599c:	2301      	movs	r3, #1
 800599e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80059a0:	2300      	movs	r3, #0
 80059a2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80059a4:	2300      	movs	r3, #0
 80059a6:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80059a8:	1d3b      	adds	r3, r7, #4
 80059aa:	4619      	mov	r1, r3
 80059ac:	480f      	ldr	r0, [pc, #60]	; (80059ec <MX_GPIO_Init+0x94>)
 80059ae:	f001 ff59 	bl	8007864 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin LED_BLUE_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin|LED_BLUE_Pin;
 80059b2:	2323      	movs	r3, #35	; 0x23
 80059b4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80059b6:	2301      	movs	r3, #1
 80059b8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80059ba:	2300      	movs	r3, #0
 80059bc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80059be:	2300      	movs	r3, #0
 80059c0:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80059c2:	1d3b      	adds	r3, r7, #4
 80059c4:	4619      	mov	r1, r3
 80059c6:	480a      	ldr	r0, [pc, #40]	; (80059f0 <MX_GPIO_Init+0x98>)
 80059c8:	f001 ff4c 	bl	8007864 <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 80059cc:	2303      	movs	r3, #3
 80059ce:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80059d0:	2300      	movs	r3, #0
 80059d2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80059d4:	2301      	movs	r3, #1
 80059d6:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80059d8:	1d3b      	adds	r3, r7, #4
 80059da:	4619      	mov	r1, r3
 80059dc:	4805      	ldr	r0, [pc, #20]	; (80059f4 <MX_GPIO_Init+0x9c>)
 80059de:	f001 ff41 	bl	8007864 <HAL_GPIO_Init>

}
 80059e2:	bf00      	nop
 80059e4:	3718      	adds	r7, #24
 80059e6:	46bd      	mov	sp, r7
 80059e8:	bd80      	pop	{r7, pc}
 80059ea:	bf00      	nop
 80059ec:	48000800 	.word	0x48000800
 80059f0:	48000400 	.word	0x48000400
 80059f4:	48000c00 	.word	0x48000c00

080059f8 <send_float_by_uart>:

/* USER CODE BEGIN 4 */

void send_float_by_uart(const char *format, float value){
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b082      	sub	sp, #8
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
 8005a00:	ed87 0a00 	vstr	s0, [r7]
	sprintf(buffer, format, value);
 8005a04:	6838      	ldr	r0, [r7, #0]
 8005a06:	f7fa fd77 	bl	80004f8 <__aeabi_f2d>
 8005a0a:	4602      	mov	r2, r0
 8005a0c:	460b      	mov	r3, r1
 8005a0e:	6879      	ldr	r1, [r7, #4]
 8005a10:	4808      	ldr	r0, [pc, #32]	; (8005a34 <send_float_by_uart+0x3c>)
 8005a12:	f00e f951 	bl	8013cb8 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t *) buffer, strlen(buffer), 0x1000);
 8005a16:	4807      	ldr	r0, [pc, #28]	; (8005a34 <send_float_by_uart+0x3c>)
 8005a18:	f7fa fbb2 	bl	8000180 <strlen>
 8005a1c:	4603      	mov	r3, r0
 8005a1e:	b29a      	uxth	r2, r3
 8005a20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005a24:	4903      	ldr	r1, [pc, #12]	; (8005a34 <send_float_by_uart+0x3c>)
 8005a26:	4804      	ldr	r0, [pc, #16]	; (8005a38 <send_float_by_uart+0x40>)
 8005a28:	f006 fb92 	bl	800c150 <HAL_UART_Transmit>
}
 8005a2c:	bf00      	nop
 8005a2e:	3708      	adds	r7, #8
 8005a30:	46bd      	mov	sp, r7
 8005a32:	bd80      	pop	{r7, pc}
 8005a34:	20000aa8 	.word	0x20000aa8
 8005a38:	200005ac 	.word	0x200005ac

08005a3c <send_int_by_uart>:

void send_int_by_uart(const char *format, int value){
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b082      	sub	sp, #8
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
 8005a44:	6039      	str	r1, [r7, #0]
	sprintf(buffer, format, value);
 8005a46:	683a      	ldr	r2, [r7, #0]
 8005a48:	6879      	ldr	r1, [r7, #4]
 8005a4a:	4809      	ldr	r0, [pc, #36]	; (8005a70 <send_int_by_uart+0x34>)
 8005a4c:	f00e f934 	bl	8013cb8 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t *) buffer, strlen(buffer), 0x1000);
 8005a50:	4807      	ldr	r0, [pc, #28]	; (8005a70 <send_int_by_uart+0x34>)
 8005a52:	f7fa fb95 	bl	8000180 <strlen>
 8005a56:	4603      	mov	r3, r0
 8005a58:	b29a      	uxth	r2, r3
 8005a5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005a5e:	4904      	ldr	r1, [pc, #16]	; (8005a70 <send_int_by_uart+0x34>)
 8005a60:	4804      	ldr	r0, [pc, #16]	; (8005a74 <send_int_by_uart+0x38>)
 8005a62:	f006 fb75 	bl	800c150 <HAL_UART_Transmit>
}
 8005a66:	bf00      	nop
 8005a68:	3708      	adds	r7, #8
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	bd80      	pop	{r7, pc}
 8005a6e:	bf00      	nop
 8005a70:	20000aa8 	.word	0x20000aa8
 8005a74:	200005ac 	.word	0x200005ac

08005a78 <send_str_by_uart>:
void send_char_by_uart(const char *format, char value){
	sprintf(buffer, format, value);
	HAL_UART_Transmit(&huart1, (uint8_t *) buffer, strlen(buffer), 0x1000);
}

void send_str_by_uart(const char *format){
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b082      	sub	sp, #8
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
	sprintf(buffer, format);
 8005a80:	6879      	ldr	r1, [r7, #4]
 8005a82:	4809      	ldr	r0, [pc, #36]	; (8005aa8 <send_str_by_uart+0x30>)
 8005a84:	f00e f918 	bl	8013cb8 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t *) buffer, strlen(buffer), 0x1000);
 8005a88:	4807      	ldr	r0, [pc, #28]	; (8005aa8 <send_str_by_uart+0x30>)
 8005a8a:	f7fa fb79 	bl	8000180 <strlen>
 8005a8e:	4603      	mov	r3, r0
 8005a90:	b29a      	uxth	r2, r3
 8005a92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005a96:	4904      	ldr	r1, [pc, #16]	; (8005aa8 <send_str_by_uart+0x30>)
 8005a98:	4804      	ldr	r0, [pc, #16]	; (8005aac <send_str_by_uart+0x34>)
 8005a9a:	f006 fb59 	bl	800c150 <HAL_UART_Transmit>
}
 8005a9e:	bf00      	nop
 8005aa0:	3708      	adds	r7, #8
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	bd80      	pop	{r7, pc}
 8005aa6:	bf00      	nop
 8005aa8:	20000aa8 	.word	0x20000aa8
 8005aac:	200005ac 	.word	0x200005ac

08005ab0 <HAL_TIM_PeriodElapsedCallback>:
////	}
//	send_str_by_uart("\n\r== COVERTION DONE ==");
//}


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim) {
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b082      	sub	sp, #8
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
	tim_internal_counter++;
 8005ab8:	4b50      	ldr	r3, [pc, #320]	; (8005bfc <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8005aba:	881b      	ldrh	r3, [r3, #0]
 8005abc:	3301      	adds	r3, #1
 8005abe:	b29a      	uxth	r2, r3
 8005ac0:	4b4e      	ldr	r3, [pc, #312]	; (8005bfc <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8005ac2:	801a      	strh	r2, [r3, #0]

    HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 8005ac4:	2102      	movs	r1, #2
 8005ac6:	484e      	ldr	r0, [pc, #312]	; (8005c00 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8005ac8:	f002 f854 	bl	8007b74 <HAL_GPIO_TogglePin>

    to_notify = 1;
 8005acc:	4b4d      	ldr	r3, [pc, #308]	; (8005c04 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8005ace:	2201      	movs	r2, #1
 8005ad0:	701a      	strb	r2, [r3, #0]

    bme680_refresh_data(&dev, &data);
 8005ad2:	494d      	ldr	r1, [pc, #308]	; (8005c08 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8005ad4:	484d      	ldr	r0, [pc, #308]	; (8005c0c <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8005ad6:	f7fe f985 	bl	8003de4 <bme680_refresh_data>

    if(tim_internal_counter % 5 == 0){
 8005ada:	4b48      	ldr	r3, [pc, #288]	; (8005bfc <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8005adc:	881a      	ldrh	r2, [r3, #0]
 8005ade:	4b4c      	ldr	r3, [pc, #304]	; (8005c10 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8005ae0:	fba3 1302 	umull	r1, r3, r3, r2
 8005ae4:	0899      	lsrs	r1, r3, #2
 8005ae6:	460b      	mov	r3, r1
 8005ae8:	009b      	lsls	r3, r3, #2
 8005aea:	440b      	add	r3, r1
 8005aec:	1ad3      	subs	r3, r2, r3
 8005aee:	b29b      	uxth	r3, r3
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d104      	bne.n	8005afe <HAL_TIM_PeriodElapsedCallback+0x4e>
    	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adc_raw_dma, 6);
 8005af4:	2206      	movs	r2, #6
 8005af6:	4947      	ldr	r1, [pc, #284]	; (8005c14 <HAL_TIM_PeriodElapsedCallback+0x164>)
 8005af8:	4847      	ldr	r0, [pc, #284]	; (8005c18 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8005afa:	f001 f837 	bl	8006b6c <HAL_ADC_Start_DMA>
    }


#ifdef DEBUG
    send_int_by_uart("\n\rInternal: MCU temperature: %d", reg.mcu_temp);
 8005afe:	4b47      	ldr	r3, [pc, #284]	; (8005c1c <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8005b00:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8005b04:	4619      	mov	r1, r3
 8005b06:	4846      	ldr	r0, [pc, #280]	; (8005c20 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8005b08:	f7ff ff98 	bl	8005a3c <send_int_by_uart>
	send_int_by_uart("\n\rInternal: Battery: %d", reg.battery_lvl);
 8005b0c:	4b43      	ldr	r3, [pc, #268]	; (8005c1c <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8005b0e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8005b12:	4619      	mov	r1, r3
 8005b14:	4843      	ldr	r0, [pc, #268]	; (8005c24 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8005b16:	f7ff ff91 	bl	8005a3c <send_int_by_uart>
	send_float_by_uart("\n\rInternal: Vref: %.3f V", reg.vref);
 8005b1a:	4b40      	ldr	r3, [pc, #256]	; (8005c1c <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8005b1c:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8005b20:	eeb0 0a67 	vmov.f32	s0, s15
 8005b24:	4840      	ldr	r0, [pc, #256]	; (8005c28 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8005b26:	f7ff ff67 	bl	80059f8 <send_float_by_uart>

	send_float_by_uart("\n\rBME280: temperature: %.3f *C", reg.bme280_temperature);
 8005b2a:	4b3c      	ldr	r3, [pc, #240]	; (8005c1c <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8005b2c:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8005b30:	eeb0 0a67 	vmov.f32	s0, s15
 8005b34:	483d      	ldr	r0, [pc, #244]	; (8005c2c <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8005b36:	f7ff ff5f 	bl	80059f8 <send_float_by_uart>
	send_float_by_uart("\n\rBME280: pressure: %.3f Pa", reg.bme280_pressure);
 8005b3a:	4b38      	ldr	r3, [pc, #224]	; (8005c1c <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8005b3c:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 8005b40:	eeb0 0a67 	vmov.f32	s0, s15
 8005b44:	483a      	ldr	r0, [pc, #232]	; (8005c30 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8005b46:	f7ff ff57 	bl	80059f8 <send_float_by_uart>
	send_float_by_uart("\n\rBME280: altitude: %.3f m", reg.bme280_altitude);
 8005b4a:	4b34      	ldr	r3, [pc, #208]	; (8005c1c <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8005b4c:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 8005b50:	eeb0 0a67 	vmov.f32	s0, s15
 8005b54:	4837      	ldr	r0, [pc, #220]	; (8005c34 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8005b56:	f7ff ff4f 	bl	80059f8 <send_float_by_uart>
	send_float_by_uart("\n\rBME280: humidity: %.3f %%", reg.bme280_humidity);
 8005b5a:	4b30      	ldr	r3, [pc, #192]	; (8005c1c <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8005b5c:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8005b60:	eeb0 0a67 	vmov.f32	s0, s15
 8005b64:	4834      	ldr	r0, [pc, #208]	; (8005c38 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8005b66:	f7ff ff47 	bl	80059f8 <send_float_by_uart>

	send_float_by_uart("\n\rBME680: temperature: %.3f *C", reg.bme680_temperature);
 8005b6a:	4b2c      	ldr	r3, [pc, #176]	; (8005c1c <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8005b6c:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 8005b70:	eeb0 0a67 	vmov.f32	s0, s15
 8005b74:	4831      	ldr	r0, [pc, #196]	; (8005c3c <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8005b76:	f7ff ff3f 	bl	80059f8 <send_float_by_uart>
	send_int_by_uart("\n\rBME680: pressure: %d Pa", reg.bme680_pressure);
 8005b7a:	4b28      	ldr	r3, [pc, #160]	; (8005c1c <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8005b7c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005b80:	4619      	mov	r1, r3
 8005b82:	482f      	ldr	r0, [pc, #188]	; (8005c40 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8005b84:	f7ff ff5a 	bl	8005a3c <send_int_by_uart>
	send_float_by_uart("\n\rBME680: humidity: %.3f %%", reg.bme680_humidity);
 8005b88:	4b24      	ldr	r3, [pc, #144]	; (8005c1c <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8005b8a:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 8005b8e:	eeb0 0a67 	vmov.f32	s0, s15
 8005b92:	482c      	ldr	r0, [pc, #176]	; (8005c44 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8005b94:	f7ff ff30 	bl	80059f8 <send_float_by_uart>
	send_float_by_uart("\n\rBME680: altitude: %.3f m", reg.bme680_altitude);
 8005b98:	4b20      	ldr	r3, [pc, #128]	; (8005c1c <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8005b9a:	edd3 7a29 	vldr	s15, [r3, #164]	; 0xa4
 8005b9e:	eeb0 0a67 	vmov.f32	s0, s15
 8005ba2:	4829      	ldr	r0, [pc, #164]	; (8005c48 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8005ba4:	f7ff ff28 	bl	80059f8 <send_float_by_uart>
	send_int_by_uart("\n\rBME680: gas: %d", reg.bme680_gas);
 8005ba8:	4b1c      	ldr	r3, [pc, #112]	; (8005c1c <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8005baa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005bae:	4619      	mov	r1, r3
 8005bb0:	4826      	ldr	r0, [pc, #152]	; (8005c4c <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8005bb2:	f7ff ff43 	bl	8005a3c <send_int_by_uart>
	send_int_by_uart("\n\rBME680: IAQ: %d", reg.bme680_iaq);
 8005bb6:	4b19      	ldr	r3, [pc, #100]	; (8005c1c <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8005bb8:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8005bbc:	4619      	mov	r1, r3
 8005bbe:	4824      	ldr	r0, [pc, #144]	; (8005c50 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8005bc0:	f7ff ff3c 	bl	8005a3c <send_int_by_uart>

	send_int_by_uart("\n\rMiCS: CO: %d ppm", reg.MiCS_CO);
 8005bc4:	4b15      	ldr	r3, [pc, #84]	; (8005c1c <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8005bc6:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	; 0xae
 8005bca:	4619      	mov	r1, r3
 8005bcc:	4821      	ldr	r0, [pc, #132]	; (8005c54 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8005bce:	f7ff ff35 	bl	8005a3c <send_int_by_uart>
	send_int_by_uart("\n\rMiCS: NH3: %d ppm", reg.MiCS_NH3);
 8005bd2:	4b12      	ldr	r3, [pc, #72]	; (8005c1c <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8005bd4:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	; 0xb0
 8005bd8:	4619      	mov	r1, r3
 8005bda:	481f      	ldr	r0, [pc, #124]	; (8005c58 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8005bdc:	f7ff ff2e 	bl	8005a3c <send_int_by_uart>
	send_int_by_uart("\n\rMiCS: NO2: %d ppm", reg.MiCS_NO2);
 8005be0:	4b0e      	ldr	r3, [pc, #56]	; (8005c1c <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8005be2:	f8b3 30b2 	ldrh.w	r3, [r3, #178]	; 0xb2
 8005be6:	4619      	mov	r1, r3
 8005be8:	481c      	ldr	r0, [pc, #112]	; (8005c5c <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8005bea:	f7ff ff27 	bl	8005a3c <send_int_by_uart>

	send_str_by_uart("\n\r==========================");
 8005bee:	481c      	ldr	r0, [pc, #112]	; (8005c60 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8005bf0:	f7ff ff42 	bl	8005a78 <send_str_by_uart>
#endif
}
 8005bf4:	bf00      	nop
 8005bf6:	3708      	adds	r7, #8
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	bd80      	pop	{r7, pc}
 8005bfc:	20000b86 	.word	0x20000b86
 8005c00:	48000400 	.word	0x48000400
 8005c04:	20000b84 	.word	0x20000b84
 8005c08:	20000b0c 	.word	0x20000b0c
 8005c0c:	20000b20 	.word	0x20000b20
 8005c10:	cccccccd 	.word	0xcccccccd
 8005c14:	20000b78 	.word	0x20000b78
 8005c18:	20000348 	.word	0x20000348
 8005c1c:	200009f4 	.word	0x200009f4
 8005c20:	0801642c 	.word	0x0801642c
 8005c24:	0801644c 	.word	0x0801644c
 8005c28:	08016464 	.word	0x08016464
 8005c2c:	08016480 	.word	0x08016480
 8005c30:	080164a0 	.word	0x080164a0
 8005c34:	080164bc 	.word	0x080164bc
 8005c38:	080164d8 	.word	0x080164d8
 8005c3c:	080164f4 	.word	0x080164f4
 8005c40:	08016514 	.word	0x08016514
 8005c44:	08016530 	.word	0x08016530
 8005c48:	0801654c 	.word	0x0801654c
 8005c4c:	08016568 	.word	0x08016568
 8005c50:	0801657c 	.word	0x0801657c
 8005c54:	08016590 	.word	0x08016590
 8005c58:	080165a4 	.word	0x080165a4
 8005c5c:	080165b8 	.word	0x080165b8
 8005c60:	080165cc 	.word	0x080165cc

08005c64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005c64:	b480      	push	{r7}
 8005c66:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8005c68:	b672      	cpsid	i
}
 8005c6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8005c6c:	e7fe      	b.n	8005c6c <Error_Handler+0x8>

08005c6e <LL_RCC_EnableRTC>:
{
 8005c6e:	b480      	push	{r7}
 8005c70:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8005c72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c7a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005c7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c82:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005c86:	bf00      	nop
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8e:	4770      	bx	lr

08005c90 <LL_AHB2_GRP1_EnableClock>:
{
 8005c90:	b480      	push	{r7}
 8005c92:	b085      	sub	sp, #20
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8005c98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c9c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005c9e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	4313      	orrs	r3, r2
 8005ca6:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8005ca8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cac:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	4013      	ands	r3, r2
 8005cb2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
}
 8005cb6:	bf00      	nop
 8005cb8:	3714      	adds	r7, #20
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc0:	4770      	bx	lr

08005cc2 <LL_AHB3_GRP1_EnableClock>:
{
 8005cc2:	b480      	push	{r7}
 8005cc4:	b085      	sub	sp, #20
 8005cc6:	af00      	add	r7, sp, #0
 8005cc8:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8005cca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cce:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005cd0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	4313      	orrs	r3, r2
 8005cd8:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8005cda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cde:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	4013      	ands	r3, r2
 8005ce4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
}
 8005ce8:	bf00      	nop
 8005cea:	3714      	adds	r7, #20
 8005cec:	46bd      	mov	sp, r7
 8005cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf2:	4770      	bx	lr

08005cf4 <LL_APB1_GRP1_EnableClock>:
{
 8005cf4:	b480      	push	{r7}
 8005cf6:	b085      	sub	sp, #20
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8005cfc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d00:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005d02:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	4313      	orrs	r3, r2
 8005d0a:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8005d0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d10:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	4013      	ands	r3, r2
 8005d16:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005d18:	68fb      	ldr	r3, [r7, #12]
}
 8005d1a:	bf00      	nop
 8005d1c:	3714      	adds	r7, #20
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d24:	4770      	bx	lr

08005d26 <LL_APB2_GRP1_EnableClock>:
{
 8005d26:	b480      	push	{r7}
 8005d28:	b085      	sub	sp, #20
 8005d2a:	af00      	add	r7, sp, #0
 8005d2c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8005d2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d32:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005d34:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	4313      	orrs	r3, r2
 8005d3c:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8005d3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d42:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	4013      	ands	r3, r2
 8005d48:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
}
 8005d4c:	bf00      	nop
 8005d4e:	3714      	adds	r7, #20
 8005d50:	46bd      	mov	sp, r7
 8005d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d56:	4770      	bx	lr

08005d58 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8005d5c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8005d60:	f7ff ffaf 	bl	8005cc2 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8005d64:	2200      	movs	r2, #0
 8005d66:	2100      	movs	r1, #0
 8005d68:	202e      	movs	r0, #46	; 0x2e
 8005d6a:	f001 f9ea 	bl	8007142 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8005d6e:	202e      	movs	r0, #46	; 0x2e
 8005d70:	f001 fa01 	bl	8007176 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005d74:	bf00      	nop
 8005d76:	bd80      	pop	{r7, pc}

08005d78 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b088      	sub	sp, #32
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005d80:	f107 030c 	add.w	r3, r7, #12
 8005d84:	2200      	movs	r2, #0
 8005d86:	601a      	str	r2, [r3, #0]
 8005d88:	605a      	str	r2, [r3, #4]
 8005d8a:	609a      	str	r2, [r3, #8]
 8005d8c:	60da      	str	r2, [r3, #12]
 8005d8e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	4a2a      	ldr	r2, [pc, #168]	; (8005e40 <HAL_ADC_MspInit+0xc8>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d14e      	bne.n	8005e38 <HAL_ADC_MspInit+0xc0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8005d9a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8005d9e:	f7ff ff77 	bl	8005c90 <LL_AHB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005da2:	2001      	movs	r0, #1
 8005da4:	f7ff ff74 	bl	8005c90 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005da8:	2004      	movs	r0, #4
 8005daa:	f7ff ff71 	bl	8005c90 <LL_AHB2_GRP1_EnableClock>
    PA7     ------> ADC1_IN12
    PA8     ------> ADC1_IN15
    PA9     ------> ADC1_IN16
    PC4     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = CO_Pin|NH3_Pin|NO2_Pin;
 8005dae:	f44f 7360 	mov.w	r3, #896	; 0x380
 8005db2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005db4:	2303      	movs	r3, #3
 8005db6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005db8:	2300      	movs	r3, #0
 8005dba:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005dbc:	f107 030c 	add.w	r3, r7, #12
 8005dc0:	4619      	mov	r1, r3
 8005dc2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005dc6:	f001 fd4d 	bl	8007864 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BATTERY_LVL_Pin;
 8005dca:	2310      	movs	r3, #16
 8005dcc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005dce:	2303      	movs	r3, #3
 8005dd0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(BATTERY_LVL_GPIO_Port, &GPIO_InitStruct);
 8005dd6:	f107 030c 	add.w	r3, r7, #12
 8005dda:	4619      	mov	r1, r3
 8005ddc:	4819      	ldr	r0, [pc, #100]	; (8005e44 <HAL_ADC_MspInit+0xcc>)
 8005dde:	f001 fd41 	bl	8007864 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel3;
 8005de2:	4b19      	ldr	r3, [pc, #100]	; (8005e48 <HAL_ADC_MspInit+0xd0>)
 8005de4:	4a19      	ldr	r2, [pc, #100]	; (8005e4c <HAL_ADC_MspInit+0xd4>)
 8005de6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8005de8:	4b17      	ldr	r3, [pc, #92]	; (8005e48 <HAL_ADC_MspInit+0xd0>)
 8005dea:	2205      	movs	r2, #5
 8005dec:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005dee:	4b16      	ldr	r3, [pc, #88]	; (8005e48 <HAL_ADC_MspInit+0xd0>)
 8005df0:	2200      	movs	r2, #0
 8005df2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8005df4:	4b14      	ldr	r3, [pc, #80]	; (8005e48 <HAL_ADC_MspInit+0xd0>)
 8005df6:	2200      	movs	r2, #0
 8005df8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8005dfa:	4b13      	ldr	r3, [pc, #76]	; (8005e48 <HAL_ADC_MspInit+0xd0>)
 8005dfc:	2280      	movs	r2, #128	; 0x80
 8005dfe:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8005e00:	4b11      	ldr	r3, [pc, #68]	; (8005e48 <HAL_ADC_MspInit+0xd0>)
 8005e02:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005e06:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8005e08:	4b0f      	ldr	r3, [pc, #60]	; (8005e48 <HAL_ADC_MspInit+0xd0>)
 8005e0a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005e0e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8005e10:	4b0d      	ldr	r3, [pc, #52]	; (8005e48 <HAL_ADC_MspInit+0xd0>)
 8005e12:	2200      	movs	r2, #0
 8005e14:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8005e16:	4b0c      	ldr	r3, [pc, #48]	; (8005e48 <HAL_ADC_MspInit+0xd0>)
 8005e18:	2200      	movs	r2, #0
 8005e1a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8005e1c:	480a      	ldr	r0, [pc, #40]	; (8005e48 <HAL_ADC_MspInit+0xd0>)
 8005e1e:	f001 f9ef 	bl	8007200 <HAL_DMA_Init>
 8005e22:	4603      	mov	r3, r0
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d001      	beq.n	8005e2c <HAL_ADC_MspInit+0xb4>
    {
      Error_Handler();
 8005e28:	f7ff ff1c 	bl	8005c64 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	4a06      	ldr	r2, [pc, #24]	; (8005e48 <HAL_ADC_MspInit+0xd0>)
 8005e30:	64da      	str	r2, [r3, #76]	; 0x4c
 8005e32:	4a05      	ldr	r2, [pc, #20]	; (8005e48 <HAL_ADC_MspInit+0xd0>)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8005e38:	bf00      	nop
 8005e3a:	3720      	adds	r7, #32
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	bd80      	pop	{r7, pc}
 8005e40:	50040000 	.word	0x50040000
 8005e44:	48000800 	.word	0x48000800
 8005e48:	200003ac 	.word	0x200003ac
 8005e4c:	40020030 	.word	0x40020030

08005e50 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b09c      	sub	sp, #112	; 0x70
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005e58:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	601a      	str	r2, [r3, #0]
 8005e60:	605a      	str	r2, [r3, #4]
 8005e62:	609a      	str	r2, [r3, #8]
 8005e64:	60da      	str	r2, [r3, #12]
 8005e66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005e68:	f107 030c 	add.w	r3, r7, #12
 8005e6c:	2250      	movs	r2, #80	; 0x50
 8005e6e:	2100      	movs	r1, #0
 8005e70:	4618      	mov	r0, r3
 8005e72:	f00d f91b 	bl	80130ac <memset>
  if(hi2c->Instance==I2C1)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	4a2d      	ldr	r2, [pc, #180]	; (8005f30 <HAL_I2C_MspInit+0xe0>)
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d127      	bne.n	8005ed0 <HAL_I2C_MspInit+0x80>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8005e80:	2304      	movs	r3, #4
 8005e82:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8005e84:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8005e88:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005e8a:	f107 030c 	add.w	r3, r7, #12
 8005e8e:	4618      	mov	r0, r3
 8005e90:	f004 fbec 	bl	800a66c <HAL_RCCEx_PeriphCLKConfig>
 8005e94:	4603      	mov	r3, r0
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d001      	beq.n	8005e9e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8005e9a:	f7ff fee3 	bl	8005c64 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005e9e:	2002      	movs	r0, #2
 8005ea0:	f7ff fef6 	bl	8005c90 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = SCL_Pin|SDA_Pin;
 8005ea4:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005ea8:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005eaa:	2312      	movs	r3, #18
 8005eac:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005eae:	2300      	movs	r3, #0
 8005eb0:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005eb6:	2304      	movs	r3, #4
 8005eb8:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005eba:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8005ebe:	4619      	mov	r1, r3
 8005ec0:	481c      	ldr	r0, [pc, #112]	; (8005f34 <HAL_I2C_MspInit+0xe4>)
 8005ec2:	f001 fccf 	bl	8007864 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005ec6:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8005eca:	f7ff ff13 	bl	8005cf4 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8005ece:	e02a      	b.n	8005f26 <HAL_I2C_MspInit+0xd6>
  else if(hi2c->Instance==I2C3)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	4a18      	ldr	r2, [pc, #96]	; (8005f38 <HAL_I2C_MspInit+0xe8>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d125      	bne.n	8005f26 <HAL_I2C_MspInit+0xd6>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8005eda:	2308      	movs	r3, #8
 8005edc:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8005ede:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 8005ee2:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005ee4:	f107 030c 	add.w	r3, r7, #12
 8005ee8:	4618      	mov	r0, r3
 8005eea:	f004 fbbf 	bl	800a66c <HAL_RCCEx_PeriphCLKConfig>
 8005eee:	4603      	mov	r3, r0
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d001      	beq.n	8005ef8 <HAL_I2C_MspInit+0xa8>
      Error_Handler();
 8005ef4:	f7ff feb6 	bl	8005c64 <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005ef8:	2004      	movs	r0, #4
 8005efa:	f7ff fec9 	bl	8005c90 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8005efe:	2303      	movs	r3, #3
 8005f00:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005f02:	2312      	movs	r3, #18
 8005f04:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f06:	2300      	movs	r3, #0
 8005f08:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8005f0e:	2304      	movs	r3, #4
 8005f10:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005f12:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8005f16:	4619      	mov	r1, r3
 8005f18:	4808      	ldr	r0, [pc, #32]	; (8005f3c <HAL_I2C_MspInit+0xec>)
 8005f1a:	f001 fca3 	bl	8007864 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8005f1e:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8005f22:	f7ff fee7 	bl	8005cf4 <LL_APB1_GRP1_EnableClock>
}
 8005f26:	bf00      	nop
 8005f28:	3770      	adds	r7, #112	; 0x70
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	bd80      	pop	{r7, pc}
 8005f2e:	bf00      	nop
 8005f30:	40005400 	.word	0x40005400
 8005f34:	48000400 	.word	0x48000400
 8005f38:	40005c00 	.word	0x40005c00
 8005f3c:	48000800 	.word	0x48000800

08005f40 <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b082      	sub	sp, #8
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	4a0d      	ldr	r2, [pc, #52]	; (8005f84 <HAL_IPCC_MspInit+0x44>)
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	d113      	bne.n	8005f7a <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 8005f52:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8005f56:	f7ff feb4 	bl	8005cc2 <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	2100      	movs	r1, #0
 8005f5e:	202c      	movs	r0, #44	; 0x2c
 8005f60:	f001 f8ef 	bl	8007142 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8005f64:	202c      	movs	r0, #44	; 0x2c
 8005f66:	f001 f906 	bl	8007176 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	2100      	movs	r1, #0
 8005f6e:	202d      	movs	r0, #45	; 0x2d
 8005f70:	f001 f8e7 	bl	8007142 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8005f74:	202d      	movs	r0, #45	; 0x2d
 8005f76:	f001 f8fe 	bl	8007176 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }

}
 8005f7a:	bf00      	nop
 8005f7c:	3708      	adds	r7, #8
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	bd80      	pop	{r7, pc}
 8005f82:	bf00      	nop
 8005f84:	58000c00 	.word	0x58000c00

08005f88 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b096      	sub	sp, #88	; 0x58
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005f90:	f107 0308 	add.w	r3, r7, #8
 8005f94:	2250      	movs	r2, #80	; 0x50
 8005f96:	2100      	movs	r1, #0
 8005f98:	4618      	mov	r0, r3
 8005f9a:	f00d f887 	bl	80130ac <memset>
  if(hrtc->Instance==RTC)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	4a12      	ldr	r2, [pc, #72]	; (8005fec <HAL_RTC_MspInit+0x64>)
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	d11d      	bne.n	8005fe4 <HAL_RTC_MspInit+0x5c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8005fa8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005fac:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8005fae:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005fb2:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005fb4:	f107 0308 	add.w	r3, r7, #8
 8005fb8:	4618      	mov	r0, r3
 8005fba:	f004 fb57 	bl	800a66c <HAL_RCCEx_PeriphCLKConfig>
 8005fbe:	4603      	mov	r3, r0
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d001      	beq.n	8005fc8 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8005fc4:	f7ff fe4e 	bl	8005c64 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8005fc8:	f7ff fe51 	bl	8005c6e <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8005fcc:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8005fd0:	f7ff fe90 	bl	8005cf4 <LL_APB1_GRP1_EnableClock>
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	2100      	movs	r1, #0
 8005fd8:	2003      	movs	r0, #3
 8005fda:	f001 f8b2 	bl	8007142 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8005fde:	2003      	movs	r0, #3
 8005fe0:	f001 f8c9 	bl	8007176 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8005fe4:	bf00      	nop
 8005fe6:	3758      	adds	r7, #88	; 0x58
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	bd80      	pop	{r7, pc}
 8005fec:	40002800 	.word	0x40002800

08005ff0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b082      	sub	sp, #8
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	4a0d      	ldr	r2, [pc, #52]	; (8006034 <HAL_TIM_Base_MspInit+0x44>)
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d104      	bne.n	800600c <HAL_TIM_Base_MspInit+0x1c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8006002:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8006006:	f7ff fe8e 	bl	8005d26 <LL_APB2_GRP1_EnableClock>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800600a:	e00f      	b.n	800602c <HAL_TIM_Base_MspInit+0x3c>
  else if(htim_base->Instance==TIM2)
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006014:	d10a      	bne.n	800602c <HAL_TIM_Base_MspInit+0x3c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8006016:	2001      	movs	r0, #1
 8006018:	f7ff fe6c 	bl	8005cf4 <LL_APB1_GRP1_EnableClock>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800601c:	2200      	movs	r2, #0
 800601e:	2100      	movs	r1, #0
 8006020:	201c      	movs	r0, #28
 8006022:	f001 f88e 	bl	8007142 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8006026:	201c      	movs	r0, #28
 8006028:	f001 f8a5 	bl	8007176 <HAL_NVIC_EnableIRQ>
}
 800602c:	bf00      	nop
 800602e:	3708      	adds	r7, #8
 8006030:	46bd      	mov	sp, r7
 8006032:	bd80      	pop	{r7, pc}
 8006034:	40012c00 	.word	0x40012c00

08006038 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8006038:	b580      	push	{r7, lr}
 800603a:	b088      	sub	sp, #32
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006040:	f107 030c 	add.w	r3, r7, #12
 8006044:	2200      	movs	r2, #0
 8006046:	601a      	str	r2, [r3, #0]
 8006048:	605a      	str	r2, [r3, #4]
 800604a:	609a      	str	r2, [r3, #8]
 800604c:	60da      	str	r2, [r3, #12]
 800604e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	4a0d      	ldr	r2, [pc, #52]	; (800608c <HAL_TIM_MspPostInit+0x54>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d114      	bne.n	8006084 <HAL_TIM_MspPostInit+0x4c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800605a:	2001      	movs	r0, #1
 800605c:	f7ff fe18 	bl	8005c90 <LL_AHB2_GRP1_EnableClock>
    /**TIM1 GPIO Configuration
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = RGB_LED_Pin;
 8006060:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006064:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006066:	2302      	movs	r3, #2
 8006068:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800606a:	2300      	movs	r3, #0
 800606c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800606e:	2300      	movs	r3, #0
 8006070:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8006072:	2301      	movs	r3, #1
 8006074:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(RGB_LED_GPIO_Port, &GPIO_InitStruct);
 8006076:	f107 030c 	add.w	r3, r7, #12
 800607a:	4619      	mov	r1, r3
 800607c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006080:	f001 fbf0 	bl	8007864 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8006084:	bf00      	nop
 8006086:	3720      	adds	r7, #32
 8006088:	46bd      	mov	sp, r7
 800608a:	bd80      	pop	{r7, pc}
 800608c:	40012c00 	.word	0x40012c00

08006090 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006090:	b580      	push	{r7, lr}
 8006092:	b09c      	sub	sp, #112	; 0x70
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006098:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800609c:	2200      	movs	r2, #0
 800609e:	601a      	str	r2, [r3, #0]
 80060a0:	605a      	str	r2, [r3, #4]
 80060a2:	609a      	str	r2, [r3, #8]
 80060a4:	60da      	str	r2, [r3, #12]
 80060a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80060a8:	f107 030c 	add.w	r3, r7, #12
 80060ac:	2250      	movs	r2, #80	; 0x50
 80060ae:	2100      	movs	r1, #0
 80060b0:	4618      	mov	r0, r3
 80060b2:	f00c fffb 	bl	80130ac <memset>
  if(huart->Instance==USART1)
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	4a43      	ldr	r2, [pc, #268]	; (80061c8 <HAL_UART_MspInit+0x138>)
 80060bc:	4293      	cmp	r3, r2
 80060be:	d17f      	bne.n	80061c0 <HAL_UART_MspInit+0x130>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80060c0:	2301      	movs	r3, #1
 80060c2:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80060c4:	2300      	movs	r3, #0
 80060c6:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80060c8:	f107 030c 	add.w	r3, r7, #12
 80060cc:	4618      	mov	r0, r3
 80060ce:	f004 facd 	bl	800a66c <HAL_RCCEx_PeriphCLKConfig>
 80060d2:	4603      	mov	r3, r0
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d001      	beq.n	80060dc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80060d8:	f7ff fdc4 	bl	8005c64 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80060dc:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80060e0:	f7ff fe21 	bl	8005d26 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80060e4:	2002      	movs	r0, #2
 80060e6:	f7ff fdd3 	bl	8005c90 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80060ea:	23c0      	movs	r3, #192	; 0xc0
 80060ec:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80060ee:	2302      	movs	r3, #2
 80060f0:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80060f2:	2300      	movs	r3, #0
 80060f4:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80060f6:	2300      	movs	r3, #0
 80060f8:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80060fa:	2307      	movs	r3, #7
 80060fc:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80060fe:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8006102:	4619      	mov	r1, r3
 8006104:	4831      	ldr	r0, [pc, #196]	; (80061cc <HAL_UART_MspInit+0x13c>)
 8006106:	f001 fbad 	bl	8007864 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel1;
 800610a:	4b31      	ldr	r3, [pc, #196]	; (80061d0 <HAL_UART_MspInit+0x140>)
 800610c:	4a31      	ldr	r2, [pc, #196]	; (80061d4 <HAL_UART_MspInit+0x144>)
 800610e:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8006110:	4b2f      	ldr	r3, [pc, #188]	; (80061d0 <HAL_UART_MspInit+0x140>)
 8006112:	220f      	movs	r2, #15
 8006114:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006116:	4b2e      	ldr	r3, [pc, #184]	; (80061d0 <HAL_UART_MspInit+0x140>)
 8006118:	2210      	movs	r2, #16
 800611a:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800611c:	4b2c      	ldr	r3, [pc, #176]	; (80061d0 <HAL_UART_MspInit+0x140>)
 800611e:	2200      	movs	r2, #0
 8006120:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006122:	4b2b      	ldr	r3, [pc, #172]	; (80061d0 <HAL_UART_MspInit+0x140>)
 8006124:	2280      	movs	r2, #128	; 0x80
 8006126:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006128:	4b29      	ldr	r3, [pc, #164]	; (80061d0 <HAL_UART_MspInit+0x140>)
 800612a:	2200      	movs	r2, #0
 800612c:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800612e:	4b28      	ldr	r3, [pc, #160]	; (80061d0 <HAL_UART_MspInit+0x140>)
 8006130:	2200      	movs	r2, #0
 8006132:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8006134:	4b26      	ldr	r3, [pc, #152]	; (80061d0 <HAL_UART_MspInit+0x140>)
 8006136:	2200      	movs	r2, #0
 8006138:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800613a:	4b25      	ldr	r3, [pc, #148]	; (80061d0 <HAL_UART_MspInit+0x140>)
 800613c:	2200      	movs	r2, #0
 800613e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8006140:	4823      	ldr	r0, [pc, #140]	; (80061d0 <HAL_UART_MspInit+0x140>)
 8006142:	f001 f85d 	bl	8007200 <HAL_DMA_Init>
 8006146:	4603      	mov	r3, r0
 8006148:	2b00      	cmp	r3, #0
 800614a:	d001      	beq.n	8006150 <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 800614c:	f7ff fd8a 	bl	8005c64 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	4a1f      	ldr	r2, [pc, #124]	; (80061d0 <HAL_UART_MspInit+0x140>)
 8006154:	67da      	str	r2, [r3, #124]	; 0x7c
 8006156:	4a1e      	ldr	r2, [pc, #120]	; (80061d0 <HAL_UART_MspInit+0x140>)
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel2;
 800615c:	4b1e      	ldr	r3, [pc, #120]	; (80061d8 <HAL_UART_MspInit+0x148>)
 800615e:	4a1f      	ldr	r2, [pc, #124]	; (80061dc <HAL_UART_MspInit+0x14c>)
 8006160:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8006162:	4b1d      	ldr	r3, [pc, #116]	; (80061d8 <HAL_UART_MspInit+0x148>)
 8006164:	220e      	movs	r2, #14
 8006166:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006168:	4b1b      	ldr	r3, [pc, #108]	; (80061d8 <HAL_UART_MspInit+0x148>)
 800616a:	2200      	movs	r2, #0
 800616c:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800616e:	4b1a      	ldr	r3, [pc, #104]	; (80061d8 <HAL_UART_MspInit+0x148>)
 8006170:	2200      	movs	r2, #0
 8006172:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006174:	4b18      	ldr	r3, [pc, #96]	; (80061d8 <HAL_UART_MspInit+0x148>)
 8006176:	2280      	movs	r2, #128	; 0x80
 8006178:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800617a:	4b17      	ldr	r3, [pc, #92]	; (80061d8 <HAL_UART_MspInit+0x148>)
 800617c:	2200      	movs	r2, #0
 800617e:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006180:	4b15      	ldr	r3, [pc, #84]	; (80061d8 <HAL_UART_MspInit+0x148>)
 8006182:	2200      	movs	r2, #0
 8006184:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8006186:	4b14      	ldr	r3, [pc, #80]	; (80061d8 <HAL_UART_MspInit+0x148>)
 8006188:	2200      	movs	r2, #0
 800618a:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800618c:	4b12      	ldr	r3, [pc, #72]	; (80061d8 <HAL_UART_MspInit+0x148>)
 800618e:	2200      	movs	r2, #0
 8006190:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8006192:	4811      	ldr	r0, [pc, #68]	; (80061d8 <HAL_UART_MspInit+0x148>)
 8006194:	f001 f834 	bl	8007200 <HAL_DMA_Init>
 8006198:	4603      	mov	r3, r0
 800619a:	2b00      	cmp	r3, #0
 800619c:	d001      	beq.n	80061a2 <HAL_UART_MspInit+0x112>
    {
      Error_Handler();
 800619e:	f7ff fd61 	bl	8005c64 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	4a0c      	ldr	r2, [pc, #48]	; (80061d8 <HAL_UART_MspInit+0x148>)
 80061a6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80061aa:	4a0b      	ldr	r2, [pc, #44]	; (80061d8 <HAL_UART_MspInit+0x148>)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80061b0:	2200      	movs	r2, #0
 80061b2:	2100      	movs	r1, #0
 80061b4:	2024      	movs	r0, #36	; 0x24
 80061b6:	f000 ffc4 	bl	8007142 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80061ba:	2024      	movs	r0, #36	; 0x24
 80061bc:	f000 ffdb 	bl	8007176 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80061c0:	bf00      	nop
 80061c2:	3770      	adds	r7, #112	; 0x70
 80061c4:	46bd      	mov	sp, r7
 80061c6:	bd80      	pop	{r7, pc}
 80061c8:	40013800 	.word	0x40013800
 80061cc:	48000400 	.word	0x48000400
 80061d0:	20000640 	.word	0x20000640
 80061d4:	40020008 	.word	0x40020008
 80061d8:	200006a0 	.word	0x200006a0
 80061dc:	4002001c 	.word	0x4002001c

080061e0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b088      	sub	sp, #32
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80061e8:	f107 030c 	add.w	r3, r7, #12
 80061ec:	2200      	movs	r2, #0
 80061ee:	601a      	str	r2, [r3, #0]
 80061f0:	605a      	str	r2, [r3, #4]
 80061f2:	609a      	str	r2, [r3, #8]
 80061f4:	60da      	str	r2, [r3, #12]
 80061f6:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	4a0f      	ldr	r2, [pc, #60]	; (800623c <HAL_PCD_MspInit+0x5c>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	d118      	bne.n	8006234 <HAL_PCD_MspInit+0x54>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006202:	2001      	movs	r0, #1
 8006204:	f7ff fd44 	bl	8005c90 <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8006208:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800620c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800620e:	2302      	movs	r3, #2
 8006210:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006212:	2300      	movs	r3, #0
 8006214:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006216:	2300      	movs	r3, #0
 8006218:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 800621a:	230a      	movs	r3, #10
 800621c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800621e:	f107 030c 	add.w	r3, r7, #12
 8006222:	4619      	mov	r1, r3
 8006224:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006228:	f001 fb1c 	bl	8007864 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800622c:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8006230:	f7ff fd60 	bl	8005cf4 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8006234:	bf00      	nop
 8006236:	3720      	adds	r7, #32
 8006238:	46bd      	mov	sp, r7
 800623a:	bd80      	pop	{r7, pc}
 800623c:	40006800 	.word	0x40006800

08006240 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006240:	b480      	push	{r7}
 8006242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8006244:	e7fe      	b.n	8006244 <NMI_Handler+0x4>

08006246 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006246:	b480      	push	{r7}
 8006248:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800624a:	e7fe      	b.n	800624a <HardFault_Handler+0x4>

0800624c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800624c:	b480      	push	{r7}
 800624e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006250:	e7fe      	b.n	8006250 <MemManage_Handler+0x4>

08006252 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006252:	b480      	push	{r7}
 8006254:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006256:	e7fe      	b.n	8006256 <BusFault_Handler+0x4>

08006258 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006258:	b480      	push	{r7}
 800625a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800625c:	e7fe      	b.n	800625c <UsageFault_Handler+0x4>

0800625e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800625e:	b480      	push	{r7}
 8006260:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006262:	bf00      	nop
 8006264:	46bd      	mov	sp, r7
 8006266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626a:	4770      	bx	lr

0800626c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800626c:	b480      	push	{r7}
 800626e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006270:	bf00      	nop
 8006272:	46bd      	mov	sp, r7
 8006274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006278:	4770      	bx	lr

0800627a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800627a:	b480      	push	{r7}
 800627c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800627e:	bf00      	nop
 8006280:	46bd      	mov	sp, r7
 8006282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006286:	4770      	bx	lr

08006288 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006288:	b580      	push	{r7, lr}
 800628a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800628c:	f000 f9fa 	bl	8006684 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006290:	bf00      	nop
 8006292:	bd80      	pop	{r7, pc}

08006294 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 8006294:	b580      	push	{r7, lr}
 8006296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8006298:	f7fe fb16 	bl	80048c8 <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 800629c:	bf00      	nop
 800629e:	bd80      	pop	{r7, pc}

080062a0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80062a4:	4802      	ldr	r0, [pc, #8]	; (80062b0 <DMA1_Channel1_IRQHandler+0x10>)
 80062a6:	f001 f98c 	bl	80075c2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80062aa:	bf00      	nop
 80062ac:	bd80      	pop	{r7, pc}
 80062ae:	bf00      	nop
 80062b0:	20000640 	.word	0x20000640

080062b4 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80062b8:	4802      	ldr	r0, [pc, #8]	; (80062c4 <DMA1_Channel2_IRQHandler+0x10>)
 80062ba:	f001 f982 	bl	80075c2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80062be:	bf00      	nop
 80062c0:	bd80      	pop	{r7, pc}
 80062c2:	bf00      	nop
 80062c4:	200006a0 	.word	0x200006a0

080062c8 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80062cc:	4802      	ldr	r0, [pc, #8]	; (80062d8 <DMA1_Channel3_IRQHandler+0x10>)
 80062ce:	f001 f978 	bl	80075c2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80062d2:	bf00      	nop
 80062d4:	bd80      	pop	{r7, pc}
 80062d6:	bf00      	nop
 80062d8:	200003ac 	.word	0x200003ac

080062dc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80062e0:	4802      	ldr	r0, [pc, #8]	; (80062ec <TIM2_IRQHandler+0x10>)
 80062e2:	f004 ff14 	bl	800b10e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80062e6:	bf00      	nop
 80062e8:	bd80      	pop	{r7, pc}
 80062ea:	bf00      	nop
 80062ec:	20000560 	.word	0x20000560

080062f0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80062f4:	4802      	ldr	r0, [pc, #8]	; (8006300 <USART1_IRQHandler+0x10>)
 80062f6:	f006 f831 	bl	800c35c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80062fa:	bf00      	nop
 80062fc:	bd80      	pop	{r7, pc}
 80062fe:	bf00      	nop
 8006300:	200005ac 	.word	0x200005ac

08006304 <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 8006304:	b580      	push	{r7, lr}
 8006306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 8006308:	f00b fbaa 	bl	8011a60 <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 800630c:	bf00      	nop
 800630e:	bd80      	pop	{r7, pc}

08006310 <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 8006310:	b580      	push	{r7, lr}
 8006312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 8006314:	f00b fbdc 	bl	8011ad0 <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 8006318:	bf00      	nop
 800631a:	bd80      	pop	{r7, pc}

0800631c <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 800631c:	b580      	push	{r7, lr}
 800631e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8006320:	f001 fc42 	bl	8007ba8 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8006324:	bf00      	nop
 8006326:	bd80      	pop	{r7, pc}

08006328 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8006328:	b480      	push	{r7}
 800632a:	af00      	add	r7, sp, #0
	return 1;
 800632c:	2301      	movs	r3, #1
}
 800632e:	4618      	mov	r0, r3
 8006330:	46bd      	mov	sp, r7
 8006332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006336:	4770      	bx	lr

08006338 <_kill>:

int _kill(int pid, int sig)
{
 8006338:	b580      	push	{r7, lr}
 800633a:	b082      	sub	sp, #8
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
 8006340:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8006342:	f00c fe6b 	bl	801301c <__errno>
 8006346:	4603      	mov	r3, r0
 8006348:	2216      	movs	r2, #22
 800634a:	601a      	str	r2, [r3, #0]
	return -1;
 800634c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8006350:	4618      	mov	r0, r3
 8006352:	3708      	adds	r7, #8
 8006354:	46bd      	mov	sp, r7
 8006356:	bd80      	pop	{r7, pc}

08006358 <_exit>:

void _exit (int status)
{
 8006358:	b580      	push	{r7, lr}
 800635a:	b082      	sub	sp, #8
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8006360:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006364:	6878      	ldr	r0, [r7, #4]
 8006366:	f7ff ffe7 	bl	8006338 <_kill>
	while (1) {}		/* Make sure we hang here */
 800636a:	e7fe      	b.n	800636a <_exit+0x12>

0800636c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800636c:	b580      	push	{r7, lr}
 800636e:	b086      	sub	sp, #24
 8006370:	af00      	add	r7, sp, #0
 8006372:	60f8      	str	r0, [r7, #12]
 8006374:	60b9      	str	r1, [r7, #8]
 8006376:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006378:	2300      	movs	r3, #0
 800637a:	617b      	str	r3, [r7, #20]
 800637c:	e00a      	b.n	8006394 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800637e:	f3af 8000 	nop.w
 8006382:	4601      	mov	r1, r0
 8006384:	68bb      	ldr	r3, [r7, #8]
 8006386:	1c5a      	adds	r2, r3, #1
 8006388:	60ba      	str	r2, [r7, #8]
 800638a:	b2ca      	uxtb	r2, r1
 800638c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800638e:	697b      	ldr	r3, [r7, #20]
 8006390:	3301      	adds	r3, #1
 8006392:	617b      	str	r3, [r7, #20]
 8006394:	697a      	ldr	r2, [r7, #20]
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	429a      	cmp	r2, r3
 800639a:	dbf0      	blt.n	800637e <_read+0x12>
	}

return len;
 800639c:	687b      	ldr	r3, [r7, #4]
}
 800639e:	4618      	mov	r0, r3
 80063a0:	3718      	adds	r7, #24
 80063a2:	46bd      	mov	sp, r7
 80063a4:	bd80      	pop	{r7, pc}

080063a6 <_close>:
	}
	return len;
}

int _close(int file)
{
 80063a6:	b480      	push	{r7}
 80063a8:	b083      	sub	sp, #12
 80063aa:	af00      	add	r7, sp, #0
 80063ac:	6078      	str	r0, [r7, #4]
	return -1;
 80063ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80063b2:	4618      	mov	r0, r3
 80063b4:	370c      	adds	r7, #12
 80063b6:	46bd      	mov	sp, r7
 80063b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063bc:	4770      	bx	lr

080063be <_fstat>:


int _fstat(int file, struct stat *st)
{
 80063be:	b480      	push	{r7}
 80063c0:	b083      	sub	sp, #12
 80063c2:	af00      	add	r7, sp, #0
 80063c4:	6078      	str	r0, [r7, #4]
 80063c6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80063ce:	605a      	str	r2, [r3, #4]
	return 0;
 80063d0:	2300      	movs	r3, #0
}
 80063d2:	4618      	mov	r0, r3
 80063d4:	370c      	adds	r7, #12
 80063d6:	46bd      	mov	sp, r7
 80063d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063dc:	4770      	bx	lr

080063de <_isatty>:

int _isatty(int file)
{
 80063de:	b480      	push	{r7}
 80063e0:	b083      	sub	sp, #12
 80063e2:	af00      	add	r7, sp, #0
 80063e4:	6078      	str	r0, [r7, #4]
	return 1;
 80063e6:	2301      	movs	r3, #1
}
 80063e8:	4618      	mov	r0, r3
 80063ea:	370c      	adds	r7, #12
 80063ec:	46bd      	mov	sp, r7
 80063ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f2:	4770      	bx	lr

080063f4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80063f4:	b480      	push	{r7}
 80063f6:	b085      	sub	sp, #20
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	60f8      	str	r0, [r7, #12]
 80063fc:	60b9      	str	r1, [r7, #8]
 80063fe:	607a      	str	r2, [r7, #4]
	return 0;
 8006400:	2300      	movs	r3, #0
}
 8006402:	4618      	mov	r0, r3
 8006404:	3714      	adds	r7, #20
 8006406:	46bd      	mov	sp, r7
 8006408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640c:	4770      	bx	lr
	...

08006410 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006410:	b580      	push	{r7, lr}
 8006412:	b086      	sub	sp, #24
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006418:	4a14      	ldr	r2, [pc, #80]	; (800646c <_sbrk+0x5c>)
 800641a:	4b15      	ldr	r3, [pc, #84]	; (8006470 <_sbrk+0x60>)
 800641c:	1ad3      	subs	r3, r2, r3
 800641e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006420:	697b      	ldr	r3, [r7, #20]
 8006422:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006424:	4b13      	ldr	r3, [pc, #76]	; (8006474 <_sbrk+0x64>)
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d102      	bne.n	8006432 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800642c:	4b11      	ldr	r3, [pc, #68]	; (8006474 <_sbrk+0x64>)
 800642e:	4a12      	ldr	r2, [pc, #72]	; (8006478 <_sbrk+0x68>)
 8006430:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006432:	4b10      	ldr	r3, [pc, #64]	; (8006474 <_sbrk+0x64>)
 8006434:	681a      	ldr	r2, [r3, #0]
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	4413      	add	r3, r2
 800643a:	693a      	ldr	r2, [r7, #16]
 800643c:	429a      	cmp	r2, r3
 800643e:	d207      	bcs.n	8006450 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006440:	f00c fdec 	bl	801301c <__errno>
 8006444:	4603      	mov	r3, r0
 8006446:	220c      	movs	r2, #12
 8006448:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800644a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800644e:	e009      	b.n	8006464 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006450:	4b08      	ldr	r3, [pc, #32]	; (8006474 <_sbrk+0x64>)
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006456:	4b07      	ldr	r3, [pc, #28]	; (8006474 <_sbrk+0x64>)
 8006458:	681a      	ldr	r2, [r3, #0]
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	4413      	add	r3, r2
 800645e:	4a05      	ldr	r2, [pc, #20]	; (8006474 <_sbrk+0x64>)
 8006460:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8006462:	68fb      	ldr	r3, [r7, #12]
}
 8006464:	4618      	mov	r0, r3
 8006466:	3718      	adds	r7, #24
 8006468:	46bd      	mov	sp, r7
 800646a:	bd80      	pop	{r7, pc}
 800646c:	20030000 	.word	0x20030000
 8006470:	00000400 	.word	0x00000400
 8006474:	20000b88 	.word	0x20000b88
 8006478:	20001d88 	.word	0x20001d88

0800647c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800647c:	b480      	push	{r7}
 800647e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 8006480:	4b24      	ldr	r3, [pc, #144]	; (8006514 <SystemInit+0x98>)
 8006482:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006486:	4a23      	ldr	r2, [pc, #140]	; (8006514 <SystemInit+0x98>)
 8006488:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800648c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8006490:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800649a:	f043 0301 	orr.w	r3, r3, #1
 800649e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 80064a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80064a4:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 80064a8:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 80064aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80064ae:	681a      	ldr	r2, [r3, #0]
 80064b0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80064b4:	4b18      	ldr	r3, [pc, #96]	; (8006518 <SystemInit+0x9c>)
 80064b6:	4013      	ands	r3, r2
 80064b8:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 80064ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80064be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80064c2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80064c6:	f023 0305 	bic.w	r3, r3, #5
 80064ca:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80064ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80064d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80064d6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80064da:	f023 0301 	bic.w	r3, r3, #1
 80064de:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 80064e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80064e6:	4a0d      	ldr	r2, [pc, #52]	; (800651c <SystemInit+0xa0>)
 80064e8:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 80064ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80064ee:	4a0b      	ldr	r2, [pc, #44]	; (800651c <SystemInit+0xa0>)
 80064f0:	611a      	str	r2, [r3, #16]
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80064f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80064fc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006500:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8006502:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006506:	2200      	movs	r2, #0
 8006508:	619a      	str	r2, [r3, #24]
}
 800650a:	bf00      	nop
 800650c:	46bd      	mov	sp, r7
 800650e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006512:	4770      	bx	lr
 8006514:	e000ed00 	.word	0xe000ed00
 8006518:	faf6fefb 	.word	0xfaf6fefb
 800651c:	22041000 	.word	0x22041000

08006520 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8006520:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006522:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006524:	3304      	adds	r3, #4

08006526 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006526:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006528:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 800652a:	d3f9      	bcc.n	8006520 <CopyDataInit>
  bx lr
 800652c:	4770      	bx	lr

0800652e <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 800652e:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8006530:	3004      	adds	r0, #4

08006532 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8006532:	4288      	cmp	r0, r1
  bcc FillZerobss
 8006534:	d3fb      	bcc.n	800652e <FillZerobss>
  bx lr
 8006536:	4770      	bx	lr

08006538 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8006538:	480c      	ldr	r0, [pc, #48]	; (800656c <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 800653a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800653c:	f7ff ff9e 	bl	800647c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8006540:	480b      	ldr	r0, [pc, #44]	; (8006570 <LoopForever+0x8>)
 8006542:	490c      	ldr	r1, [pc, #48]	; (8006574 <LoopForever+0xc>)
 8006544:	4a0c      	ldr	r2, [pc, #48]	; (8006578 <LoopForever+0x10>)
 8006546:	2300      	movs	r3, #0
 8006548:	f7ff ffed 	bl	8006526 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 800654c:	480b      	ldr	r0, [pc, #44]	; (800657c <LoopForever+0x14>)
 800654e:	490c      	ldr	r1, [pc, #48]	; (8006580 <LoopForever+0x18>)
 8006550:	2300      	movs	r3, #0
 8006552:	f7ff ffee 	bl	8006532 <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8006556:	480b      	ldr	r0, [pc, #44]	; (8006584 <LoopForever+0x1c>)
 8006558:	490b      	ldr	r1, [pc, #44]	; (8006588 <LoopForever+0x20>)
 800655a:	2300      	movs	r3, #0
 800655c:	f7ff ffe9 	bl	8006532 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8006560:	f00c fd62 	bl	8013028 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8006564:	f7fe fd18 	bl	8004f98 <main>

08006568 <LoopForever>:

LoopForever:
  b LoopForever
 8006568:	e7fe      	b.n	8006568 <LoopForever>
 800656a:	0000      	.short	0x0000
  ldr   r0, =_estack
 800656c:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8006570:	20000004 	.word	0x20000004
 8006574:	200001fc 	.word	0x200001fc
 8006578:	08018394 	.word	0x08018394
  INIT_BSS _sbss, _ebss
 800657c:	20000248 	.word	0x20000248
 8006580:	20001d84 	.word	0x20001d84
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8006584:	200301e4 	.word	0x200301e4
 8006588:	20030a67 	.word	0x20030a67

0800658c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800658c:	e7fe      	b.n	800658c <ADC1_IRQHandler>
	...

08006590 <LL_DBGMCU_EnableDBGSleepMode>:
  * @brief  Enable the Debug Module during SLEEP mode
  * @rmtoll DBGMCU_CR    DBG_SLEEP     LL_DBGMCU_EnableDBGSleepMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_EnableDBGSleepMode(void)
{
 8006590:	b480      	push	{r7}
 8006592:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8006594:	4b05      	ldr	r3, [pc, #20]	; (80065ac <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 8006596:	685b      	ldr	r3, [r3, #4]
 8006598:	4a04      	ldr	r2, [pc, #16]	; (80065ac <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 800659a:	f043 0301 	orr.w	r3, r3, #1
 800659e:	6053      	str	r3, [r2, #4]
}
 80065a0:	bf00      	nop
 80065a2:	46bd      	mov	sp, r7
 80065a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a8:	4770      	bx	lr
 80065aa:	bf00      	nop
 80065ac:	e0042000 	.word	0xe0042000

080065b0 <LL_DBGMCU_EnableDBGStopMode>:
  * @brief  Enable the Debug Module during STOP mode
  * @rmtoll DBGMCU_CR    DBG_STOP      LL_DBGMCU_EnableDBGStopMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_EnableDBGStopMode(void)
{
 80065b0:	b480      	push	{r7}
 80065b2:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 80065b4:	4b05      	ldr	r3, [pc, #20]	; (80065cc <LL_DBGMCU_EnableDBGStopMode+0x1c>)
 80065b6:	685b      	ldr	r3, [r3, #4]
 80065b8:	4a04      	ldr	r2, [pc, #16]	; (80065cc <LL_DBGMCU_EnableDBGStopMode+0x1c>)
 80065ba:	f043 0302 	orr.w	r3, r3, #2
 80065be:	6053      	str	r3, [r2, #4]
}
 80065c0:	bf00      	nop
 80065c2:	46bd      	mov	sp, r7
 80065c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c8:	4770      	bx	lr
 80065ca:	bf00      	nop
 80065cc:	e0042000 	.word	0xe0042000

080065d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b082      	sub	sp, #8
 80065d4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80065d6:	2300      	movs	r3, #0
 80065d8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80065da:	4b0c      	ldr	r3, [pc, #48]	; (800660c <HAL_Init+0x3c>)
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	4a0b      	ldr	r2, [pc, #44]	; (800660c <HAL_Init+0x3c>)
 80065e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80065e4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80065e6:	2003      	movs	r0, #3
 80065e8:	f000 fda0 	bl	800712c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80065ec:	200f      	movs	r0, #15
 80065ee:	f000 f80f 	bl	8006610 <HAL_InitTick>
 80065f2:	4603      	mov	r3, r0
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d002      	beq.n	80065fe <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80065f8:	2301      	movs	r3, #1
 80065fa:	71fb      	strb	r3, [r7, #7]
 80065fc:	e001      	b.n	8006602 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80065fe:	f7ff fbab 	bl	8005d58 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8006602:	79fb      	ldrb	r3, [r7, #7]
}
 8006604:	4618      	mov	r0, r3
 8006606:	3708      	adds	r7, #8
 8006608:	46bd      	mov	sp, r7
 800660a:	bd80      	pop	{r7, pc}
 800660c:	58004000 	.word	0x58004000

08006610 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006610:	b580      	push	{r7, lr}
 8006612:	b084      	sub	sp, #16
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8006618:	2300      	movs	r3, #0
 800661a:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 800661c:	4b17      	ldr	r3, [pc, #92]	; (800667c <HAL_InitTick+0x6c>)
 800661e:	781b      	ldrb	r3, [r3, #0]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d024      	beq.n	800666e <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8006624:	f003 fd82 	bl	800a12c <HAL_RCC_GetHCLKFreq>
 8006628:	4602      	mov	r2, r0
 800662a:	4b14      	ldr	r3, [pc, #80]	; (800667c <HAL_InitTick+0x6c>)
 800662c:	781b      	ldrb	r3, [r3, #0]
 800662e:	4619      	mov	r1, r3
 8006630:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006634:	fbb3 f3f1 	udiv	r3, r3, r1
 8006638:	fbb2 f3f3 	udiv	r3, r2, r3
 800663c:	4618      	mov	r0, r3
 800663e:	f000 fdb6 	bl	80071ae <HAL_SYSTICK_Config>
 8006642:	4603      	mov	r3, r0
 8006644:	2b00      	cmp	r3, #0
 8006646:	d10f      	bne.n	8006668 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2b0f      	cmp	r3, #15
 800664c:	d809      	bhi.n	8006662 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800664e:	2200      	movs	r2, #0
 8006650:	6879      	ldr	r1, [r7, #4]
 8006652:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006656:	f000 fd74 	bl	8007142 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800665a:	4a09      	ldr	r2, [pc, #36]	; (8006680 <HAL_InitTick+0x70>)
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	6013      	str	r3, [r2, #0]
 8006660:	e007      	b.n	8006672 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8006662:	2301      	movs	r3, #1
 8006664:	73fb      	strb	r3, [r7, #15]
 8006666:	e004      	b.n	8006672 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8006668:	2301      	movs	r3, #1
 800666a:	73fb      	strb	r3, [r7, #15]
 800666c:	e001      	b.n	8006672 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 800666e:	2301      	movs	r3, #1
 8006670:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8006672:	7bfb      	ldrb	r3, [r7, #15]
}
 8006674:	4618      	mov	r0, r3
 8006676:	3710      	adds	r7, #16
 8006678:	46bd      	mov	sp, r7
 800667a:	bd80      	pop	{r7, pc}
 800667c:	2000000c 	.word	0x2000000c
 8006680:	20000008 	.word	0x20000008

08006684 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006684:	b480      	push	{r7}
 8006686:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8006688:	4b06      	ldr	r3, [pc, #24]	; (80066a4 <HAL_IncTick+0x20>)
 800668a:	781b      	ldrb	r3, [r3, #0]
 800668c:	461a      	mov	r2, r3
 800668e:	4b06      	ldr	r3, [pc, #24]	; (80066a8 <HAL_IncTick+0x24>)
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	4413      	add	r3, r2
 8006694:	4a04      	ldr	r2, [pc, #16]	; (80066a8 <HAL_IncTick+0x24>)
 8006696:	6013      	str	r3, [r2, #0]
}
 8006698:	bf00      	nop
 800669a:	46bd      	mov	sp, r7
 800669c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a0:	4770      	bx	lr
 80066a2:	bf00      	nop
 80066a4:	2000000c 	.word	0x2000000c
 80066a8:	20000b8c 	.word	0x20000b8c

080066ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80066ac:	b480      	push	{r7}
 80066ae:	af00      	add	r7, sp, #0
  return uwTick;
 80066b0:	4b03      	ldr	r3, [pc, #12]	; (80066c0 <HAL_GetTick+0x14>)
 80066b2:	681b      	ldr	r3, [r3, #0]
}
 80066b4:	4618      	mov	r0, r3
 80066b6:	46bd      	mov	sp, r7
 80066b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066bc:	4770      	bx	lr
 80066be:	bf00      	nop
 80066c0:	20000b8c 	.word	0x20000b8c

080066c4 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 80066c4:	b480      	push	{r7}
 80066c6:	af00      	add	r7, sp, #0
  return uwTickPrio;
 80066c8:	4b03      	ldr	r3, [pc, #12]	; (80066d8 <HAL_GetTickPrio+0x14>)
 80066ca:	681b      	ldr	r3, [r3, #0]
}
 80066cc:	4618      	mov	r0, r3
 80066ce:	46bd      	mov	sp, r7
 80066d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d4:	4770      	bx	lr
 80066d6:	bf00      	nop
 80066d8:	20000008 	.word	0x20000008

080066dc <HAL_GetTickFreq>:
/**
  * @brief Return tick frequency.
  * @retval tick period in Hz
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 80066dc:	b480      	push	{r7}
 80066de:	af00      	add	r7, sp, #0
  return uwTickFreq;
 80066e0:	4b03      	ldr	r3, [pc, #12]	; (80066f0 <HAL_GetTickFreq+0x14>)
 80066e2:	781b      	ldrb	r3, [r3, #0]
}
 80066e4:	4618      	mov	r0, r3
 80066e6:	46bd      	mov	sp, r7
 80066e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ec:	4770      	bx	lr
 80066ee:	bf00      	nop
 80066f0:	2000000c 	.word	0x2000000c

080066f4 <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 80066f4:	b580      	push	{r7, lr}
 80066f6:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGSleepMode();
 80066f8:	f7ff ff4a 	bl	8006590 <LL_DBGMCU_EnableDBGSleepMode>
}
 80066fc:	bf00      	nop
 80066fe:	bd80      	pop	{r7, pc}

08006700 <HAL_DBGMCU_EnableDBGStopMode>:
/**
  * @brief  Enable the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 8006700:	b580      	push	{r7, lr}
 8006702:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStopMode();
 8006704:	f7ff ff54 	bl	80065b0 <LL_DBGMCU_EnableDBGStopMode>
}
 8006708:	bf00      	nop
 800670a:	bd80      	pop	{r7, pc}

0800670c <LL_ADC_SetCommonClock>:
  *
  *         (*) Value available on all STM32 devices except: STM32W10xxx, STM32W15xxx.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800670c:	b480      	push	{r7}
 800670e:	b083      	sub	sp, #12
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
 8006714:	6039      	str	r1, [r7, #0]
#if defined(ADC_SUPPORT_2_5_MSPS)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
#else
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	689b      	ldr	r3, [r3, #8]
 800671a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	431a      	orrs	r2, r3
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	609a      	str	r2, [r3, #8]
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8006726:	bf00      	nop
 8006728:	370c      	adds	r7, #12
 800672a:	46bd      	mov	sp, r7
 800672c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006730:	4770      	bx	lr

08006732 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8006732:	b480      	push	{r7}
 8006734:	b083      	sub	sp, #12
 8006736:	af00      	add	r7, sp, #0
 8006738:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	689b      	ldr	r3, [r3, #8]
 800673e:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8006742:	4618      	mov	r0, r3
 8006744:	370c      	adds	r7, #12
 8006746:	46bd      	mov	sp, r7
 8006748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674c:	4770      	bx	lr

0800674e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800674e:	b480      	push	{r7}
 8006750:	b083      	sub	sp, #12
 8006752:	af00      	add	r7, sp, #0
 8006754:	6078      	str	r0, [r7, #4]
#if defined(ADC_SUPPORT_2_5_MSPS)
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
#else
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	68db      	ldr	r3, [r3, #12]
 800675a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800675e:	2b00      	cmp	r3, #0
 8006760:	d101      	bne.n	8006766 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8006762:	2301      	movs	r3, #1
 8006764:	e000      	b.n	8006768 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8006766:	2300      	movs	r3, #0
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8006768:	4618      	mov	r0, r3
 800676a:	370c      	adds	r7, #12
 800676c:	46bd      	mov	sp, r7
 800676e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006772:	4770      	bx	lr

08006774 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8006774:	b480      	push	{r7}
 8006776:	b083      	sub	sp, #12
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	689b      	ldr	r3, [r3, #8]
 8006780:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8006784:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006788:	687a      	ldr	r2, [r7, #4]
 800678a:	6093      	str	r3, [r2, #8]
}
 800678c:	bf00      	nop
 800678e:	370c      	adds	r7, #12
 8006790:	46bd      	mov	sp, r7
 8006792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006796:	4770      	bx	lr

08006798 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8006798:	b480      	push	{r7}
 800679a:	b083      	sub	sp, #12
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	689b      	ldr	r3, [r3, #8]
 80067a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80067a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80067ac:	d101      	bne.n	80067b2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80067ae:	2301      	movs	r3, #1
 80067b0:	e000      	b.n	80067b4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80067b2:	2300      	movs	r3, #0
}
 80067b4:	4618      	mov	r0, r3
 80067b6:	370c      	adds	r7, #12
 80067b8:	46bd      	mov	sp, r7
 80067ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067be:	4770      	bx	lr

080067c0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80067c0:	b480      	push	{r7}
 80067c2:	b083      	sub	sp, #12
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	689b      	ldr	r3, [r3, #8]
 80067cc:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80067d0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80067d4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80067dc:	bf00      	nop
 80067de:	370c      	adds	r7, #12
 80067e0:	46bd      	mov	sp, r7
 80067e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e6:	4770      	bx	lr

080067e8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80067e8:	b480      	push	{r7}
 80067ea:	b083      	sub	sp, #12
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	689b      	ldr	r3, [r3, #8]
 80067f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80067f8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80067fc:	d101      	bne.n	8006802 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80067fe:	2301      	movs	r3, #1
 8006800:	e000      	b.n	8006804 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8006802:	2300      	movs	r3, #0
}
 8006804:	4618      	mov	r0, r3
 8006806:	370c      	adds	r7, #12
 8006808:	46bd      	mov	sp, r7
 800680a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680e:	4770      	bx	lr

08006810 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8006810:	b480      	push	{r7}
 8006812:	b083      	sub	sp, #12
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	689b      	ldr	r3, [r3, #8]
 800681c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006820:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006824:	f043 0201 	orr.w	r2, r3, #1
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800682c:	bf00      	nop
 800682e:	370c      	adds	r7, #12
 8006830:	46bd      	mov	sp, r7
 8006832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006836:	4770      	bx	lr

08006838 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8006838:	b480      	push	{r7}
 800683a:	b083      	sub	sp, #12
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	689b      	ldr	r3, [r3, #8]
 8006844:	f003 0301 	and.w	r3, r3, #1
 8006848:	2b01      	cmp	r3, #1
 800684a:	d101      	bne.n	8006850 <LL_ADC_IsEnabled+0x18>
 800684c:	2301      	movs	r3, #1
 800684e:	e000      	b.n	8006852 <LL_ADC_IsEnabled+0x1a>
 8006850:	2300      	movs	r3, #0
}
 8006852:	4618      	mov	r0, r3
 8006854:	370c      	adds	r7, #12
 8006856:	46bd      	mov	sp, r7
 8006858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685c:	4770      	bx	lr

0800685e <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800685e:	b480      	push	{r7}
 8006860:	b083      	sub	sp, #12
 8006862:	af00      	add	r7, sp, #0
 8006864:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	689b      	ldr	r3, [r3, #8]
 800686a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800686e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006872:	f043 0204 	orr.w	r2, r3, #4
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800687a:	bf00      	nop
 800687c:	370c      	adds	r7, #12
 800687e:	46bd      	mov	sp, r7
 8006880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006884:	4770      	bx	lr

08006886 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8006886:	b480      	push	{r7}
 8006888:	b083      	sub	sp, #12
 800688a:	af00      	add	r7, sp, #0
 800688c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	689b      	ldr	r3, [r3, #8]
 8006892:	f003 0304 	and.w	r3, r3, #4
 8006896:	2b04      	cmp	r3, #4
 8006898:	d101      	bne.n	800689e <LL_ADC_REG_IsConversionOngoing+0x18>
 800689a:	2301      	movs	r3, #1
 800689c:	e000      	b.n	80068a0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800689e:	2300      	movs	r3, #0
}
 80068a0:	4618      	mov	r0, r3
 80068a2:	370c      	adds	r7, #12
 80068a4:	46bd      	mov	sp, r7
 80068a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068aa:	4770      	bx	lr

080068ac <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80068ac:	b480      	push	{r7}
 80068ae:	b083      	sub	sp, #12
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	689b      	ldr	r3, [r3, #8]
 80068b8:	f003 0308 	and.w	r3, r3, #8
 80068bc:	2b08      	cmp	r3, #8
 80068be:	d101      	bne.n	80068c4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80068c0:	2301      	movs	r3, #1
 80068c2:	e000      	b.n	80068c6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80068c4:	2300      	movs	r3, #0
}
 80068c6:	4618      	mov	r0, r3
 80068c8:	370c      	adds	r7, #12
 80068ca:	46bd      	mov	sp, r7
 80068cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d0:	4770      	bx	lr
	...

080068d4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b088      	sub	sp, #32
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80068dc:	2300      	movs	r3, #0
 80068de:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR = 0UL;
 80068e0:	2300      	movs	r3, #0
 80068e2:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80068e4:	2300      	movs	r3, #0
 80068e6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Check ADC handle */
  if (hadc == NULL)
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d101      	bne.n	80068f2 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 80068ee:	2301      	movs	r3, #1
 80068f0:	e12e      	b.n	8006b50 <HAL_ADC_Init+0x27c>
    }
  }
#else
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	691b      	ldr	r3, [r3, #16]
 80068f6:	2b00      	cmp	r3, #0
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d109      	bne.n	8006914 <HAL_ADC_Init+0x40>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006900:	6878      	ldr	r0, [r7, #4]
 8006902:	f7ff fa39 	bl	8005d78 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	2200      	movs	r2, #0
 800690a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2200      	movs	r2, #0
 8006910:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* - Exit from deep power-down mode and ADC voltage regulator enable        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  /* Feature "deep power-down" not available on ADC peripheral of this STM32WB device */
#else
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	4618      	mov	r0, r3
 800691a:	f7ff ff3d 	bl	8006798 <LL_ADC_IsDeepPowerDownEnabled>
 800691e:	4603      	mov	r3, r0
 8006920:	2b00      	cmp	r3, #0
 8006922:	d004      	beq.n	800692e <HAL_ADC_Init+0x5a>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	4618      	mov	r0, r3
 800692a:	f7ff ff23 	bl	8006774 <LL_ADC_DisableDeepPowerDown>
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	4618      	mov	r0, r3
 8006934:	f7ff ff58 	bl	80067e8 <LL_ADC_IsInternalRegulatorEnabled>
 8006938:	4603      	mov	r3, r0
 800693a:	2b00      	cmp	r3, #0
 800693c:	d115      	bne.n	800696a <HAL_ADC_Init+0x96>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	4618      	mov	r0, r3
 8006944:	f7ff ff3c 	bl	80067c0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006948:	4b83      	ldr	r3, [pc, #524]	; (8006b58 <HAL_ADC_Init+0x284>)
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	099b      	lsrs	r3, r3, #6
 800694e:	4a83      	ldr	r2, [pc, #524]	; (8006b5c <HAL_ADC_Init+0x288>)
 8006950:	fba2 2303 	umull	r2, r3, r2, r3
 8006954:	099b      	lsrs	r3, r3, #6
 8006956:	3301      	adds	r3, #1
 8006958:	005b      	lsls	r3, r3, #1
 800695a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800695c:	e002      	b.n	8006964 <HAL_ADC_Init+0x90>
    {
      wait_loop_index--;
 800695e:	68bb      	ldr	r3, [r7, #8]
 8006960:	3b01      	subs	r3, #1
 8006962:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8006964:	68bb      	ldr	r3, [r7, #8]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d1f9      	bne.n	800695e <HAL_ADC_Init+0x8a>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	4618      	mov	r0, r3
 8006970:	f7ff ff3a 	bl	80067e8 <LL_ADC_IsInternalRegulatorEnabled>
 8006974:	4603      	mov	r3, r0
 8006976:	2b00      	cmp	r3, #0
 8006978:	d10d      	bne.n	8006996 <HAL_ADC_Init+0xc2>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800697e:	f043 0210 	orr.w	r2, r3, #16
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800698a:	f043 0201 	orr.w	r2, r3, #1
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8006992:	2301      	movs	r3, #1
 8006994:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	4618      	mov	r0, r3
 800699c:	f7ff ff73 	bl	8006886 <LL_ADC_REG_IsConversionOngoing>
 80069a0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069a6:	f003 0310 	and.w	r3, r3, #16
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	f040 80c7 	bne.w	8006b3e <HAL_ADC_Init+0x26a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80069b0:	697b      	ldr	r3, [r7, #20]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	f040 80c3 	bne.w	8006b3e <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069bc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80069c0:	f043 0202 	orr.w	r2, r3, #2
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	4618      	mov	r0, r3
 80069ce:	f7ff ff33 	bl	8006838 <LL_ADC_IsEnabled>
 80069d2:	4603      	mov	r3, r0
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d10b      	bne.n	80069f0 <HAL_ADC_Init+0x11c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80069d8:	4861      	ldr	r0, [pc, #388]	; (8006b60 <HAL_ADC_Init+0x28c>)
 80069da:	f7ff ff2d 	bl	8006838 <LL_ADC_IsEnabled>
 80069de:	4603      	mov	r3, r0
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d105      	bne.n	80069f0 <HAL_ADC_Init+0x11c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	685b      	ldr	r3, [r3, #4]
 80069e8:	4619      	mov	r1, r3
 80069ea:	485e      	ldr	r0, [pc, #376]	; (8006b64 <HAL_ADC_Init+0x290>)
 80069ec:	f7ff fe8e 	bl	800670c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	7e5b      	ldrb	r3, [r3, #25]
 80069f4:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80069fa:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8006a00:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8006a06:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006a0e:	041b      	lsls	r3, r3, #16
                hadc->Init.Resolution                                                  |
 8006a10:	4313      	orrs	r3, r2
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006a12:	69ba      	ldr	r2, [r7, #24]
 8006a14:	4313      	orrs	r3, r2
 8006a16:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006a1e:	2b01      	cmp	r3, #1
 8006a20:	d106      	bne.n	8006a30 <HAL_ADC_Init+0x15c>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a26:	3b01      	subs	r3, #1
 8006a28:	045b      	lsls	r3, r3, #17
 8006a2a:	69ba      	ldr	r2, [r7, #24]
 8006a2c:	4313      	orrs	r3, r2
 8006a2e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d009      	beq.n	8006a4c <HAL_ADC_Init+0x178>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a3c:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a44:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8006a46:	69ba      	ldr	r2, [r7, #24]
 8006a48:	4313      	orrs	r3, r2
 8006a4a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	68da      	ldr	r2, [r3, #12]
 8006a52:	4b45      	ldr	r3, [pc, #276]	; (8006b68 <HAL_ADC_Init+0x294>)
 8006a54:	4013      	ands	r3, r2
 8006a56:	687a      	ldr	r2, [r7, #4]
 8006a58:	6812      	ldr	r2, [r2, #0]
 8006a5a:	69b9      	ldr	r1, [r7, #24]
 8006a5c:	430b      	orrs	r3, r1
 8006a5e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	4618      	mov	r0, r3
 8006a66:	f7ff ff0e 	bl	8006886 <LL_ADC_REG_IsConversionOngoing>
 8006a6a:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	4618      	mov	r0, r3
 8006a72:	f7ff ff1b 	bl	80068ac <LL_ADC_INJ_IsConversionOngoing>
 8006a76:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8006a78:	693b      	ldr	r3, [r7, #16]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d13d      	bne.n	8006afa <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d13a      	bne.n	8006afa <HAL_ADC_Init+0x226>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8006a88:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006a90:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8006a92:	4313      	orrs	r3, r2
 8006a94:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	68db      	ldr	r3, [r3, #12]
 8006a9c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006aa0:	f023 0302 	bic.w	r3, r3, #2
 8006aa4:	687a      	ldr	r2, [r7, #4]
 8006aa6:	6812      	ldr	r2, [r2, #0]
 8006aa8:	69b9      	ldr	r1, [r7, #24]
 8006aaa:	430b      	orrs	r3, r1
 8006aac:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006ab4:	2b01      	cmp	r3, #1
 8006ab6:	d118      	bne.n	8006aea <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	691b      	ldr	r3, [r3, #16]
 8006abe:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006ac2:	f023 0304 	bic.w	r3, r3, #4
 8006ac6:	687a      	ldr	r2, [r7, #4]
 8006ac8:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8006aca:	687a      	ldr	r2, [r7, #4]
 8006acc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8006ace:	4311      	orrs	r1, r2
 8006ad0:	687a      	ldr	r2, [r7, #4]
 8006ad2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8006ad4:	4311      	orrs	r1, r2
 8006ad6:	687a      	ldr	r2, [r7, #4]
 8006ad8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006ada:	430a      	orrs	r2, r1
 8006adc:	431a      	orrs	r2, r3
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f042 0201 	orr.w	r2, r2, #1
 8006ae6:	611a      	str	r2, [r3, #16]
 8006ae8:	e007      	b.n	8006afa <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	691a      	ldr	r2, [r3, #16]
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f022 0201 	bic.w	r2, r2, #1
 8006af8:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	691b      	ldr	r3, [r3, #16]
 8006afe:	2b01      	cmp	r3, #1
 8006b00:	d10c      	bne.n	8006b1c <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b08:	f023 010f 	bic.w	r1, r3, #15
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	69db      	ldr	r3, [r3, #28]
 8006b10:	1e5a      	subs	r2, r3, #1
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	430a      	orrs	r2, r1
 8006b18:	631a      	str	r2, [r3, #48]	; 0x30
 8006b1a:	e007      	b.n	8006b2c <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f022 020f 	bic.w	r2, r2, #15
 8006b2a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b30:	f023 0303 	bic.w	r3, r3, #3
 8006b34:	f043 0201 	orr.w	r2, r3, #1
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	655a      	str	r2, [r3, #84]	; 0x54
 8006b3c:	e007      	b.n	8006b4e <HAL_ADC_Init+0x27a>
#endif /* ADC_SUPPORT_2_5_MSPS */
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b42:	f043 0210 	orr.w	r2, r3, #16
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8006b4a:	2301      	movs	r3, #1
 8006b4c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8006b4e:	7ffb      	ldrb	r3, [r7, #31]
}
 8006b50:	4618      	mov	r0, r3
 8006b52:	3720      	adds	r7, #32
 8006b54:	46bd      	mov	sp, r7
 8006b56:	bd80      	pop	{r7, pc}
 8006b58:	20000004 	.word	0x20000004
 8006b5c:	053e2d63 	.word	0x053e2d63
 8006b60:	50040000 	.word	0x50040000
 8006b64:	50040300 	.word	0x50040300
 8006b68:	fff0c007 	.word	0xfff0c007

08006b6c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	b086      	sub	sp, #24
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	60f8      	str	r0, [r7, #12]
 8006b74:	60b9      	str	r1, [r7, #8]
 8006b76:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	f7ff fe82 	bl	8006886 <LL_ADC_REG_IsConversionOngoing>
 8006b82:	4603      	mov	r3, r0
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d167      	bne.n	8006c58 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006b8e:	2b01      	cmp	r3, #1
 8006b90:	d101      	bne.n	8006b96 <HAL_ADC_Start_DMA+0x2a>
 8006b92:	2302      	movs	r3, #2
 8006b94:	e063      	b.n	8006c5e <HAL_ADC_Start_DMA+0xf2>
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	2201      	movs	r2, #1
 8006b9a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8006b9e:	68f8      	ldr	r0, [r7, #12]
 8006ba0:	f000 f886 	bl	8006cb0 <ADC_Enable>
 8006ba4:	4603      	mov	r3, r0
 8006ba6:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8006ba8:	7dfb      	ldrb	r3, [r7, #23]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d14f      	bne.n	8006c4e <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bb2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006bb6:	f023 0301 	bic.w	r3, r3, #1
 8006bba:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	655a      	str	r2, [r3, #84]	; 0x54
#if defined(ADC_SUPPORT_2_5_MSPS)
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
#else
        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bc6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d006      	beq.n	8006bdc <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bd2:	f023 0206 	bic.w	r2, r3, #6
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	659a      	str	r2, [r3, #88]	; 0x58
 8006bda:	e002      	b.n	8006be2 <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	2200      	movs	r2, #0
 8006be0:	659a      	str	r2, [r3, #88]	; 0x58
        }
#endif /* ADC_SUPPORT_2_5_MSPS */

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006be6:	4a20      	ldr	r2, [pc, #128]	; (8006c68 <HAL_ADC_Start_DMA+0xfc>)
 8006be8:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006bee:	4a1f      	ldr	r2, [pc, #124]	; (8006c6c <HAL_ADC_Start_DMA+0x100>)
 8006bf0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006bf6:	4a1e      	ldr	r2, [pc, #120]	; (8006c70 <HAL_ADC_Start_DMA+0x104>)
 8006bf8:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	221c      	movs	r2, #28
 8006c00:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	2200      	movs	r2, #0
 8006c06:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	685a      	ldr	r2, [r3, #4]
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f042 0210 	orr.w	r2, r2, #16
 8006c18:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
#if  defined(ADC_SUPPORT_2_5_MSPS)
        SET_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN);
#else
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	68da      	ldr	r2, [r3, #12]
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	f042 0201 	orr.w	r2, r2, #1
 8006c28:	60da      	str	r2, [r3, #12]
#endif /* ADC_SUPPORT_2_5_MSPS */

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	3340      	adds	r3, #64	; 0x40
 8006c34:	4619      	mov	r1, r3
 8006c36:	68ba      	ldr	r2, [r7, #8]
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	f000 fb89 	bl	8007350 <HAL_DMA_Start_IT>
 8006c3e:	4603      	mov	r3, r0
 8006c40:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	4618      	mov	r0, r3
 8006c48:	f7ff fe09 	bl	800685e <LL_ADC_REG_StartConversion>
 8006c4c:	e006      	b.n	8006c5c <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	2200      	movs	r2, #0
 8006c52:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8006c56:	e001      	b.n	8006c5c <HAL_ADC_Start_DMA+0xf0>
      }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8006c58:	2302      	movs	r3, #2
 8006c5a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8006c5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c5e:	4618      	mov	r0, r3
 8006c60:	3718      	adds	r7, #24
 8006c62:	46bd      	mov	sp, r7
 8006c64:	bd80      	pop	{r7, pc}
 8006c66:	bf00      	nop
 8006c68:	08006da5 	.word	0x08006da5
 8006c6c:	08006e7d 	.word	0x08006e7d
 8006c70:	08006e99 	.word	0x08006e99

08006c74 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006c74:	b480      	push	{r7}
 8006c76:	b083      	sub	sp, #12
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8006c7c:	bf00      	nop
 8006c7e:	370c      	adds	r7, #12
 8006c80:	46bd      	mov	sp, r7
 8006c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c86:	4770      	bx	lr

08006c88 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006c88:	b480      	push	{r7}
 8006c8a:	b083      	sub	sp, #12
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8006c90:	bf00      	nop
 8006c92:	370c      	adds	r7, #12
 8006c94:	46bd      	mov	sp, r7
 8006c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9a:	4770      	bx	lr

08006c9c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8006c9c:	b480      	push	{r7}
 8006c9e:	b083      	sub	sp, #12
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8006ca4:	bf00      	nop
 8006ca6:	370c      	adds	r7, #12
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cae:	4770      	bx	lr

08006cb0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	b084      	sub	sp, #16
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8006cb8:	2300      	movs	r3, #0
 8006cba:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	f7ff fdb9 	bl	8006838 <LL_ADC_IsEnabled>
 8006cc6:	4603      	mov	r3, r0
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d15e      	bne.n	8006d8a <ADC_Enable+0xda>
  {
    /* Check if conditions to enable the ADC are fulfilled */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
#else
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	689a      	ldr	r2, [r3, #8]
 8006cd2:	4b30      	ldr	r3, [pc, #192]	; (8006d94 <ADC_Enable+0xe4>)
 8006cd4:	4013      	ands	r3, r2
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d00d      	beq.n	8006cf6 <ADC_Enable+0x46>
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cde:	f043 0210 	orr.w	r2, r3, #16
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006cea:	f043 0201 	orr.w	r2, r3, #1
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8006cf2:	2301      	movs	r3, #1
 8006cf4:	e04a      	b.n	8006d8c <ADC_Enable+0xdc>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	f7ff fd88 	bl	8006810 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8006d00:	4825      	ldr	r0, [pc, #148]	; (8006d98 <ADC_Enable+0xe8>)
 8006d02:	f7ff fd16 	bl	8006732 <LL_ADC_GetCommonPathInternalCh>
 8006d06:	4603      	mov	r3, r0
 8006d08:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d00f      	beq.n	8006d30 <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006d10:	4b22      	ldr	r3, [pc, #136]	; (8006d9c <ADC_Enable+0xec>)
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	099b      	lsrs	r3, r3, #6
 8006d16:	4a22      	ldr	r2, [pc, #136]	; (8006da0 <ADC_Enable+0xf0>)
 8006d18:	fba2 2303 	umull	r2, r3, r2, r3
 8006d1c:	099b      	lsrs	r3, r3, #6
 8006d1e:	3301      	adds	r3, #1
 8006d20:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8006d22:	e002      	b.n	8006d2a <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8006d24:	68bb      	ldr	r3, [r7, #8]
 8006d26:	3b01      	subs	r3, #1
 8006d28:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8006d2a:	68bb      	ldr	r3, [r7, #8]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d1f9      	bne.n	8006d24 <ADC_Enable+0x74>
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
#endif /*ADC_SUPPORT_2_5_MSPS */
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8006d30:	f7ff fcbc 	bl	80066ac <HAL_GetTick>
 8006d34:	60f8      	str	r0, [r7, #12]
      
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006d36:	e021      	b.n	8006d7c <ADC_Enable+0xcc>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if(LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	f7ff fd7b 	bl	8006838 <LL_ADC_IsEnabled>
 8006d42:	4603      	mov	r3, r0
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d104      	bne.n	8006d52 <ADC_Enable+0xa2>
        {
          LL_ADC_Enable(hadc->Instance);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	4618      	mov	r0, r3
 8006d4e:	f7ff fd5f 	bl	8006810 <LL_ADC_Enable>
        }
        
        if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8006d52:	f7ff fcab 	bl	80066ac <HAL_GetTick>
 8006d56:	4602      	mov	r2, r0
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	1ad3      	subs	r3, r2, r3
 8006d5c:	2b02      	cmp	r3, #2
 8006d5e:	d90d      	bls.n	8006d7c <ADC_Enable+0xcc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d64:	f043 0210 	orr.w	r2, r3, #16
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	655a      	str	r2, [r3, #84]	; 0x54
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d70:	f043 0201 	orr.w	r2, r3, #1
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	659a      	str	r2, [r3, #88]	; 0x58
          
          return HAL_ERROR;
 8006d78:	2301      	movs	r3, #1
 8006d7a:	e007      	b.n	8006d8c <ADC_Enable+0xdc>
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	f003 0301 	and.w	r3, r3, #1
 8006d86:	2b01      	cmp	r3, #1
 8006d88:	d1d6      	bne.n	8006d38 <ADC_Enable+0x88>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8006d8a:	2300      	movs	r3, #0
}
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	3710      	adds	r7, #16
 8006d90:	46bd      	mov	sp, r7
 8006d92:	bd80      	pop	{r7, pc}
 8006d94:	8000003f 	.word	0x8000003f
 8006d98:	50040300 	.word	0x50040300
 8006d9c:	20000004 	.word	0x20000004
 8006da0:	053e2d63 	.word	0x053e2d63

08006da4 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8006da4:	b580      	push	{r7, lr}
 8006da6:	b084      	sub	sp, #16
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006db0:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006db6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d14b      	bne.n	8006e56 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dc2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	655a      	str	r2, [r3, #84]	; 0x54
        }
      }
    }
    
#else
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f003 0308 	and.w	r3, r3, #8
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d021      	beq.n	8006e1c <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	4618      	mov	r0, r3
 8006dde:	f7ff fcb6 	bl	800674e <LL_ADC_REG_IsTriggerSourceSWStart>
 8006de2:	4603      	mov	r3, r0
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d032      	beq.n	8006e4e <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	68db      	ldr	r3, [r3, #12]
 8006dee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d12b      	bne.n	8006e4e <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dfa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e06:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d11f      	bne.n	8006e4e <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e12:	f043 0201 	orr.w	r2, r3, #1
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	655a      	str	r2, [r3, #84]	; 0x54
 8006e1a:	e018      	b.n	8006e4e <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	68db      	ldr	r3, [r3, #12]
 8006e22:	f003 0302 	and.w	r3, r3, #2
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d111      	bne.n	8006e4e <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e2e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e3a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d105      	bne.n	8006e4e <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e46:	f043 0201 	orr.w	r2, r3, #1
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006e4e:	68f8      	ldr	r0, [r7, #12]
 8006e50:	f7ff ff10 	bl	8006c74 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8006e54:	e00e      	b.n	8006e74 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e5a:	f003 0310 	and.w	r3, r3, #16
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d003      	beq.n	8006e6a <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8006e62:	68f8      	ldr	r0, [r7, #12]
 8006e64:	f7ff ff1a 	bl	8006c9c <HAL_ADC_ErrorCallback>
}
 8006e68:	e004      	b.n	8006e74 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e70:	6878      	ldr	r0, [r7, #4]
 8006e72:	4798      	blx	r3
}
 8006e74:	bf00      	nop
 8006e76:	3710      	adds	r7, #16
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	bd80      	pop	{r7, pc}

08006e7c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	b084      	sub	sp, #16
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e88:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8006e8a:	68f8      	ldr	r0, [r7, #12]
 8006e8c:	f7ff fefc 	bl	8006c88 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006e90:	bf00      	nop
 8006e92:	3710      	adds	r7, #16
 8006e94:	46bd      	mov	sp, r7
 8006e96:	bd80      	pop	{r7, pc}

08006e98 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b084      	sub	sp, #16
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ea4:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006eaa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006eb6:	f043 0204 	orr.w	r2, r3, #4
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8006ebe:	68f8      	ldr	r0, [r7, #12]
 8006ec0:	f7ff feec 	bl	8006c9c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006ec4:	bf00      	nop
 8006ec6:	3710      	adds	r7, #16
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	bd80      	pop	{r7, pc}

08006ecc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006ecc:	b480      	push	{r7}
 8006ece:	b085      	sub	sp, #20
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	f003 0307 	and.w	r3, r3, #7
 8006eda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006edc:	4b0c      	ldr	r3, [pc, #48]	; (8006f10 <__NVIC_SetPriorityGrouping+0x44>)
 8006ede:	68db      	ldr	r3, [r3, #12]
 8006ee0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006ee2:	68ba      	ldr	r2, [r7, #8]
 8006ee4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006ee8:	4013      	ands	r3, r2
 8006eea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006ef0:	68bb      	ldr	r3, [r7, #8]
 8006ef2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006ef4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006ef8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006efc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006efe:	4a04      	ldr	r2, [pc, #16]	; (8006f10 <__NVIC_SetPriorityGrouping+0x44>)
 8006f00:	68bb      	ldr	r3, [r7, #8]
 8006f02:	60d3      	str	r3, [r2, #12]
}
 8006f04:	bf00      	nop
 8006f06:	3714      	adds	r7, #20
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0e:	4770      	bx	lr
 8006f10:	e000ed00 	.word	0xe000ed00

08006f14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006f14:	b480      	push	{r7}
 8006f16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006f18:	4b04      	ldr	r3, [pc, #16]	; (8006f2c <__NVIC_GetPriorityGrouping+0x18>)
 8006f1a:	68db      	ldr	r3, [r3, #12]
 8006f1c:	0a1b      	lsrs	r3, r3, #8
 8006f1e:	f003 0307 	and.w	r3, r3, #7
}
 8006f22:	4618      	mov	r0, r3
 8006f24:	46bd      	mov	sp, r7
 8006f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2a:	4770      	bx	lr
 8006f2c:	e000ed00 	.word	0xe000ed00

08006f30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006f30:	b480      	push	{r7}
 8006f32:	b083      	sub	sp, #12
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	4603      	mov	r3, r0
 8006f38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006f3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	db0b      	blt.n	8006f5a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006f42:	79fb      	ldrb	r3, [r7, #7]
 8006f44:	f003 021f 	and.w	r2, r3, #31
 8006f48:	4907      	ldr	r1, [pc, #28]	; (8006f68 <__NVIC_EnableIRQ+0x38>)
 8006f4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f4e:	095b      	lsrs	r3, r3, #5
 8006f50:	2001      	movs	r0, #1
 8006f52:	fa00 f202 	lsl.w	r2, r0, r2
 8006f56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8006f5a:	bf00      	nop
 8006f5c:	370c      	adds	r7, #12
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f64:	4770      	bx	lr
 8006f66:	bf00      	nop
 8006f68:	e000e100 	.word	0xe000e100

08006f6c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8006f6c:	b480      	push	{r7}
 8006f6e:	b083      	sub	sp, #12
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	4603      	mov	r3, r0
 8006f74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006f76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	db12      	blt.n	8006fa4 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006f7e:	79fb      	ldrb	r3, [r7, #7]
 8006f80:	f003 021f 	and.w	r2, r3, #31
 8006f84:	490a      	ldr	r1, [pc, #40]	; (8006fb0 <__NVIC_DisableIRQ+0x44>)
 8006f86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f8a:	095b      	lsrs	r3, r3, #5
 8006f8c:	2001      	movs	r0, #1
 8006f8e:	fa00 f202 	lsl.w	r2, r0, r2
 8006f92:	3320      	adds	r3, #32
 8006f94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8006f98:	f3bf 8f4f 	dsb	sy
}
 8006f9c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8006f9e:	f3bf 8f6f 	isb	sy
}
 8006fa2:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8006fa4:	bf00      	nop
 8006fa6:	370c      	adds	r7, #12
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fae:	4770      	bx	lr
 8006fb0:	e000e100 	.word	0xe000e100

08006fb4 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8006fb4:	b480      	push	{r7}
 8006fb6:	b083      	sub	sp, #12
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	4603      	mov	r3, r0
 8006fbc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006fbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	db0c      	blt.n	8006fe0 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006fc6:	79fb      	ldrb	r3, [r7, #7]
 8006fc8:	f003 021f 	and.w	r2, r3, #31
 8006fcc:	4907      	ldr	r1, [pc, #28]	; (8006fec <__NVIC_SetPendingIRQ+0x38>)
 8006fce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006fd2:	095b      	lsrs	r3, r3, #5
 8006fd4:	2001      	movs	r0, #1
 8006fd6:	fa00 f202 	lsl.w	r2, r0, r2
 8006fda:	3340      	adds	r3, #64	; 0x40
 8006fdc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006fe0:	bf00      	nop
 8006fe2:	370c      	adds	r7, #12
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fea:	4770      	bx	lr
 8006fec:	e000e100 	.word	0xe000e100

08006ff0 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8006ff0:	b480      	push	{r7}
 8006ff2:	b083      	sub	sp, #12
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	4603      	mov	r3, r0
 8006ff8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006ffa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	db0c      	blt.n	800701c <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007002:	79fb      	ldrb	r3, [r7, #7]
 8007004:	f003 021f 	and.w	r2, r3, #31
 8007008:	4907      	ldr	r1, [pc, #28]	; (8007028 <__NVIC_ClearPendingIRQ+0x38>)
 800700a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800700e:	095b      	lsrs	r3, r3, #5
 8007010:	2001      	movs	r0, #1
 8007012:	fa00 f202 	lsl.w	r2, r0, r2
 8007016:	3360      	adds	r3, #96	; 0x60
 8007018:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800701c:	bf00      	nop
 800701e:	370c      	adds	r7, #12
 8007020:	46bd      	mov	sp, r7
 8007022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007026:	4770      	bx	lr
 8007028:	e000e100 	.word	0xe000e100

0800702c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800702c:	b480      	push	{r7}
 800702e:	b083      	sub	sp, #12
 8007030:	af00      	add	r7, sp, #0
 8007032:	4603      	mov	r3, r0
 8007034:	6039      	str	r1, [r7, #0]
 8007036:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007038:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800703c:	2b00      	cmp	r3, #0
 800703e:	db0a      	blt.n	8007056 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007040:	683b      	ldr	r3, [r7, #0]
 8007042:	b2da      	uxtb	r2, r3
 8007044:	490c      	ldr	r1, [pc, #48]	; (8007078 <__NVIC_SetPriority+0x4c>)
 8007046:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800704a:	0112      	lsls	r2, r2, #4
 800704c:	b2d2      	uxtb	r2, r2
 800704e:	440b      	add	r3, r1
 8007050:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007054:	e00a      	b.n	800706c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007056:	683b      	ldr	r3, [r7, #0]
 8007058:	b2da      	uxtb	r2, r3
 800705a:	4908      	ldr	r1, [pc, #32]	; (800707c <__NVIC_SetPriority+0x50>)
 800705c:	79fb      	ldrb	r3, [r7, #7]
 800705e:	f003 030f 	and.w	r3, r3, #15
 8007062:	3b04      	subs	r3, #4
 8007064:	0112      	lsls	r2, r2, #4
 8007066:	b2d2      	uxtb	r2, r2
 8007068:	440b      	add	r3, r1
 800706a:	761a      	strb	r2, [r3, #24]
}
 800706c:	bf00      	nop
 800706e:	370c      	adds	r7, #12
 8007070:	46bd      	mov	sp, r7
 8007072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007076:	4770      	bx	lr
 8007078:	e000e100 	.word	0xe000e100
 800707c:	e000ed00 	.word	0xe000ed00

08007080 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007080:	b480      	push	{r7}
 8007082:	b089      	sub	sp, #36	; 0x24
 8007084:	af00      	add	r7, sp, #0
 8007086:	60f8      	str	r0, [r7, #12]
 8007088:	60b9      	str	r1, [r7, #8]
 800708a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	f003 0307 	and.w	r3, r3, #7
 8007092:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007094:	69fb      	ldr	r3, [r7, #28]
 8007096:	f1c3 0307 	rsb	r3, r3, #7
 800709a:	2b04      	cmp	r3, #4
 800709c:	bf28      	it	cs
 800709e:	2304      	movcs	r3, #4
 80070a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80070a2:	69fb      	ldr	r3, [r7, #28]
 80070a4:	3304      	adds	r3, #4
 80070a6:	2b06      	cmp	r3, #6
 80070a8:	d902      	bls.n	80070b0 <NVIC_EncodePriority+0x30>
 80070aa:	69fb      	ldr	r3, [r7, #28]
 80070ac:	3b03      	subs	r3, #3
 80070ae:	e000      	b.n	80070b2 <NVIC_EncodePriority+0x32>
 80070b0:	2300      	movs	r3, #0
 80070b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80070b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80070b8:	69bb      	ldr	r3, [r7, #24]
 80070ba:	fa02 f303 	lsl.w	r3, r2, r3
 80070be:	43da      	mvns	r2, r3
 80070c0:	68bb      	ldr	r3, [r7, #8]
 80070c2:	401a      	ands	r2, r3
 80070c4:	697b      	ldr	r3, [r7, #20]
 80070c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80070c8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80070cc:	697b      	ldr	r3, [r7, #20]
 80070ce:	fa01 f303 	lsl.w	r3, r1, r3
 80070d2:	43d9      	mvns	r1, r3
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80070d8:	4313      	orrs	r3, r2
         );
}
 80070da:	4618      	mov	r0, r3
 80070dc:	3724      	adds	r7, #36	; 0x24
 80070de:	46bd      	mov	sp, r7
 80070e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e4:	4770      	bx	lr
	...

080070e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b082      	sub	sp, #8
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	3b01      	subs	r3, #1
 80070f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80070f8:	d301      	bcc.n	80070fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80070fa:	2301      	movs	r3, #1
 80070fc:	e00f      	b.n	800711e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80070fe:	4a0a      	ldr	r2, [pc, #40]	; (8007128 <SysTick_Config+0x40>)
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	3b01      	subs	r3, #1
 8007104:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007106:	210f      	movs	r1, #15
 8007108:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800710c:	f7ff ff8e 	bl	800702c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007110:	4b05      	ldr	r3, [pc, #20]	; (8007128 <SysTick_Config+0x40>)
 8007112:	2200      	movs	r2, #0
 8007114:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007116:	4b04      	ldr	r3, [pc, #16]	; (8007128 <SysTick_Config+0x40>)
 8007118:	2207      	movs	r2, #7
 800711a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800711c:	2300      	movs	r3, #0
}
 800711e:	4618      	mov	r0, r3
 8007120:	3708      	adds	r7, #8
 8007122:	46bd      	mov	sp, r7
 8007124:	bd80      	pop	{r7, pc}
 8007126:	bf00      	nop
 8007128:	e000e010 	.word	0xe000e010

0800712c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800712c:	b580      	push	{r7, lr}
 800712e:	b082      	sub	sp, #8
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007134:	6878      	ldr	r0, [r7, #4]
 8007136:	f7ff fec9 	bl	8006ecc <__NVIC_SetPriorityGrouping>
}
 800713a:	bf00      	nop
 800713c:	3708      	adds	r7, #8
 800713e:	46bd      	mov	sp, r7
 8007140:	bd80      	pop	{r7, pc}

08007142 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007142:	b580      	push	{r7, lr}
 8007144:	b086      	sub	sp, #24
 8007146:	af00      	add	r7, sp, #0
 8007148:	4603      	mov	r3, r0
 800714a:	60b9      	str	r1, [r7, #8]
 800714c:	607a      	str	r2, [r7, #4]
 800714e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8007150:	f7ff fee0 	bl	8006f14 <__NVIC_GetPriorityGrouping>
 8007154:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007156:	687a      	ldr	r2, [r7, #4]
 8007158:	68b9      	ldr	r1, [r7, #8]
 800715a:	6978      	ldr	r0, [r7, #20]
 800715c:	f7ff ff90 	bl	8007080 <NVIC_EncodePriority>
 8007160:	4602      	mov	r2, r0
 8007162:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007166:	4611      	mov	r1, r2
 8007168:	4618      	mov	r0, r3
 800716a:	f7ff ff5f 	bl	800702c <__NVIC_SetPriority>
}
 800716e:	bf00      	nop
 8007170:	3718      	adds	r7, #24
 8007172:	46bd      	mov	sp, r7
 8007174:	bd80      	pop	{r7, pc}

08007176 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007176:	b580      	push	{r7, lr}
 8007178:	b082      	sub	sp, #8
 800717a:	af00      	add	r7, sp, #0
 800717c:	4603      	mov	r3, r0
 800717e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007180:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007184:	4618      	mov	r0, r3
 8007186:	f7ff fed3 	bl	8006f30 <__NVIC_EnableIRQ>
}
 800718a:	bf00      	nop
 800718c:	3708      	adds	r7, #8
 800718e:	46bd      	mov	sp, r7
 8007190:	bd80      	pop	{r7, pc}

08007192 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8007192:	b580      	push	{r7, lr}
 8007194:	b082      	sub	sp, #8
 8007196:	af00      	add	r7, sp, #0
 8007198:	4603      	mov	r3, r0
 800719a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800719c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80071a0:	4618      	mov	r0, r3
 80071a2:	f7ff fee3 	bl	8006f6c <__NVIC_DisableIRQ>
}
 80071a6:	bf00      	nop
 80071a8:	3708      	adds	r7, #8
 80071aa:	46bd      	mov	sp, r7
 80071ac:	bd80      	pop	{r7, pc}

080071ae <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80071ae:	b580      	push	{r7, lr}
 80071b0:	b082      	sub	sp, #8
 80071b2:	af00      	add	r7, sp, #0
 80071b4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80071b6:	6878      	ldr	r0, [r7, #4]
 80071b8:	f7ff ff96 	bl	80070e8 <SysTick_Config>
 80071bc:	4603      	mov	r3, r0
}
 80071be:	4618      	mov	r0, r3
 80071c0:	3708      	adds	r7, #8
 80071c2:	46bd      	mov	sp, r7
 80071c4:	bd80      	pop	{r7, pc}

080071c6 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80071c6:	b580      	push	{r7, lr}
 80071c8:	b082      	sub	sp, #8
 80071ca:	af00      	add	r7, sp, #0
 80071cc:	4603      	mov	r3, r0
 80071ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 80071d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80071d4:	4618      	mov	r0, r3
 80071d6:	f7ff feed 	bl	8006fb4 <__NVIC_SetPendingIRQ>
}
 80071da:	bf00      	nop
 80071dc:	3708      	adds	r7, #8
 80071de:	46bd      	mov	sp, r7
 80071e0:	bd80      	pop	{r7, pc}

080071e2 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80071e2:	b580      	push	{r7, lr}
 80071e4:	b082      	sub	sp, #8
 80071e6:	af00      	add	r7, sp, #0
 80071e8:	4603      	mov	r3, r0
 80071ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 80071ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80071f0:	4618      	mov	r0, r3
 80071f2:	f7ff fefd 	bl	8006ff0 <__NVIC_ClearPendingIRQ>
}
 80071f6:	bf00      	nop
 80071f8:	3708      	adds	r7, #8
 80071fa:	46bd      	mov	sp, r7
 80071fc:	bd80      	pop	{r7, pc}
	...

08007200 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007200:	b580      	push	{r7, lr}
 8007202:	b084      	sub	sp, #16
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d101      	bne.n	8007212 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800720e:	2301      	movs	r3, #1
 8007210:	e08e      	b.n	8007330 <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	461a      	mov	r2, r3
 8007218:	4b47      	ldr	r3, [pc, #284]	; (8007338 <HAL_DMA_Init+0x138>)
 800721a:	429a      	cmp	r2, r3
 800721c:	d80f      	bhi.n	800723e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	461a      	mov	r2, r3
 8007224:	4b45      	ldr	r3, [pc, #276]	; (800733c <HAL_DMA_Init+0x13c>)
 8007226:	4413      	add	r3, r2
 8007228:	4a45      	ldr	r2, [pc, #276]	; (8007340 <HAL_DMA_Init+0x140>)
 800722a:	fba2 2303 	umull	r2, r3, r2, r3
 800722e:	091b      	lsrs	r3, r3, #4
 8007230:	009a      	lsls	r2, r3, #2
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	4a42      	ldr	r2, [pc, #264]	; (8007344 <HAL_DMA_Init+0x144>)
 800723a:	641a      	str	r2, [r3, #64]	; 0x40
 800723c:	e00e      	b.n	800725c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	461a      	mov	r2, r3
 8007244:	4b40      	ldr	r3, [pc, #256]	; (8007348 <HAL_DMA_Init+0x148>)
 8007246:	4413      	add	r3, r2
 8007248:	4a3d      	ldr	r2, [pc, #244]	; (8007340 <HAL_DMA_Init+0x140>)
 800724a:	fba2 2303 	umull	r2, r3, r2, r3
 800724e:	091b      	lsrs	r3, r3, #4
 8007250:	009a      	lsls	r2, r3, #2
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	4a3c      	ldr	r2, [pc, #240]	; (800734c <HAL_DMA_Init+0x14c>)
 800725a:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	2202      	movs	r2, #2
 8007260:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8007272:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007276:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8007280:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	691b      	ldr	r3, [r3, #16]
 8007286:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800728c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	699b      	ldr	r3, [r3, #24]
 8007292:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007298:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	6a1b      	ldr	r3, [r3, #32]
 800729e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80072a0:	68fa      	ldr	r2, [r7, #12]
 80072a2:	4313      	orrs	r3, r2
 80072a4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	68fa      	ldr	r2, [r7, #12]
 80072ac:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80072ae:	6878      	ldr	r0, [r7, #4]
 80072b0:	f000 fa74 	bl	800779c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	689b      	ldr	r3, [r3, #8]
 80072b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80072bc:	d102      	bne.n	80072c4 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	2200      	movs	r2, #0
 80072c2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	685a      	ldr	r2, [r3, #4]
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80072cc:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80072d0:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80072d6:	687a      	ldr	r2, [r7, #4]
 80072d8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80072da:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	685b      	ldr	r3, [r3, #4]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d010      	beq.n	8007306 <HAL_DMA_Init+0x106>
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	685b      	ldr	r3, [r3, #4]
 80072e8:	2b04      	cmp	r3, #4
 80072ea:	d80c      	bhi.n	8007306 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80072ec:	6878      	ldr	r0, [r7, #4]
 80072ee:	f000 fa93 	bl	8007818 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072f6:	2200      	movs	r2, #0
 80072f8:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072fe:	687a      	ldr	r2, [r7, #4]
 8007300:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8007302:	605a      	str	r2, [r3, #4]
 8007304:	e008      	b.n	8007318 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2200      	movs	r2, #0
 800730a:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2200      	movs	r2, #0
 8007310:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	2200      	movs	r2, #0
 8007316:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2200      	movs	r2, #0
 800731c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	2201      	movs	r2, #1
 8007322:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	2200      	movs	r2, #0
 800732a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800732e:	2300      	movs	r3, #0
}
 8007330:	4618      	mov	r0, r3
 8007332:	3710      	adds	r7, #16
 8007334:	46bd      	mov	sp, r7
 8007336:	bd80      	pop	{r7, pc}
 8007338:	40020407 	.word	0x40020407
 800733c:	bffdfff8 	.word	0xbffdfff8
 8007340:	cccccccd 	.word	0xcccccccd
 8007344:	40020000 	.word	0x40020000
 8007348:	bffdfbf8 	.word	0xbffdfbf8
 800734c:	40020400 	.word	0x40020400

08007350 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007350:	b580      	push	{r7, lr}
 8007352:	b086      	sub	sp, #24
 8007354:	af00      	add	r7, sp, #0
 8007356:	60f8      	str	r0, [r7, #12]
 8007358:	60b9      	str	r1, [r7, #8]
 800735a:	607a      	str	r2, [r7, #4]
 800735c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800735e:	2300      	movs	r3, #0
 8007360:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007368:	2b01      	cmp	r3, #1
 800736a:	d101      	bne.n	8007370 <HAL_DMA_Start_IT+0x20>
 800736c:	2302      	movs	r3, #2
 800736e:	e066      	b.n	800743e <HAL_DMA_Start_IT+0xee>
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	2201      	movs	r2, #1
 8007374:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800737e:	b2db      	uxtb	r3, r3
 8007380:	2b01      	cmp	r3, #1
 8007382:	d155      	bne.n	8007430 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	2202      	movs	r2, #2
 8007388:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	2200      	movs	r2, #0
 8007390:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	681a      	ldr	r2, [r3, #0]
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	f022 0201 	bic.w	r2, r2, #1
 80073a0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80073a2:	683b      	ldr	r3, [r7, #0]
 80073a4:	687a      	ldr	r2, [r7, #4]
 80073a6:	68b9      	ldr	r1, [r7, #8]
 80073a8:	68f8      	ldr	r0, [r7, #12]
 80073aa:	f000 f9b9 	bl	8007720 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d008      	beq.n	80073c8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	681a      	ldr	r2, [r3, #0]
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	f042 020e 	orr.w	r2, r2, #14
 80073c4:	601a      	str	r2, [r3, #0]
 80073c6:	e00f      	b.n	80073e8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	681a      	ldr	r2, [r3, #0]
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	f022 0204 	bic.w	r2, r2, #4
 80073d6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	681a      	ldr	r2, [r3, #0]
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	f042 020a 	orr.w	r2, r2, #10
 80073e6:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d007      	beq.n	8007406 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80073fa:	681a      	ldr	r2, [r3, #0]
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007400:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007404:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800740a:	2b00      	cmp	r3, #0
 800740c:	d007      	beq.n	800741e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007412:	681a      	ldr	r2, [r3, #0]
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007418:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800741c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	681a      	ldr	r2, [r3, #0]
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	f042 0201 	orr.w	r2, r2, #1
 800742c:	601a      	str	r2, [r3, #0]
 800742e:	e005      	b.n	800743c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	2200      	movs	r2, #0
 8007434:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8007438:	2302      	movs	r3, #2
 800743a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800743c:	7dfb      	ldrb	r3, [r7, #23]
}
 800743e:	4618      	mov	r0, r3
 8007440:	3718      	adds	r7, #24
 8007442:	46bd      	mov	sp, r7
 8007444:	bd80      	pop	{r7, pc}

08007446 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007446:	b480      	push	{r7}
 8007448:	b083      	sub	sp, #12
 800744a:	af00      	add	r7, sp, #0
 800744c:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	2b00      	cmp	r3, #0
 8007452:	d101      	bne.n	8007458 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8007454:	2301      	movs	r3, #1
 8007456:	e04f      	b.n	80074f8 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800745e:	b2db      	uxtb	r3, r3
 8007460:	2b02      	cmp	r3, #2
 8007462:	d008      	beq.n	8007476 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	2204      	movs	r2, #4
 8007468:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	2200      	movs	r2, #0
 800746e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8007472:	2301      	movs	r3, #1
 8007474:	e040      	b.n	80074f8 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	681a      	ldr	r2, [r3, #0]
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	f022 020e 	bic.w	r2, r2, #14
 8007484:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800748a:	681a      	ldr	r2, [r3, #0]
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007490:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007494:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	681a      	ldr	r2, [r3, #0]
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	f022 0201 	bic.w	r2, r2, #1
 80074a4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074aa:	f003 021c 	and.w	r2, r3, #28
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074b2:	2101      	movs	r1, #1
 80074b4:	fa01 f202 	lsl.w	r2, r1, r2
 80074b8:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80074be:	687a      	ldr	r2, [r7, #4]
 80074c0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80074c2:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d00c      	beq.n	80074e6 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074d0:	681a      	ldr	r2, [r3, #0]
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074d6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80074da:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074e0:	687a      	ldr	r2, [r7, #4]
 80074e2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80074e4:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	2201      	movs	r2, #1
 80074ea:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	2200      	movs	r2, #0
 80074f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 80074f6:	2300      	movs	r3, #0
}
 80074f8:	4618      	mov	r0, r3
 80074fa:	370c      	adds	r7, #12
 80074fc:	46bd      	mov	sp, r7
 80074fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007502:	4770      	bx	lr

08007504 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007504:	b580      	push	{r7, lr}
 8007506:	b084      	sub	sp, #16
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800750c:	2300      	movs	r3, #0
 800750e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007516:	b2db      	uxtb	r3, r3
 8007518:	2b02      	cmp	r3, #2
 800751a:	d005      	beq.n	8007528 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	2204      	movs	r2, #4
 8007520:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8007522:	2301      	movs	r3, #1
 8007524:	73fb      	strb	r3, [r7, #15]
 8007526:	e047      	b.n	80075b8 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	681a      	ldr	r2, [r3, #0]
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	f022 020e 	bic.w	r2, r2, #14
 8007536:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	681a      	ldr	r2, [r3, #0]
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	f022 0201 	bic.w	r2, r2, #1
 8007546:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800754c:	681a      	ldr	r2, [r3, #0]
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007552:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007556:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800755c:	f003 021c 	and.w	r2, r3, #28
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007564:	2101      	movs	r1, #1
 8007566:	fa01 f202 	lsl.w	r2, r1, r2
 800756a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007570:	687a      	ldr	r2, [r7, #4]
 8007572:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8007574:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800757a:	2b00      	cmp	r3, #0
 800757c:	d00c      	beq.n	8007598 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007582:	681a      	ldr	r2, [r3, #0]
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007588:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800758c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007592:	687a      	ldr	r2, [r7, #4]
 8007594:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8007596:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2201      	movs	r2, #1
 800759c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	2200      	movs	r2, #0
 80075a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d003      	beq.n	80075b8 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075b4:	6878      	ldr	r0, [r7, #4]
 80075b6:	4798      	blx	r3
    }
  }
  return status;
 80075b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80075ba:	4618      	mov	r0, r3
 80075bc:	3710      	adds	r7, #16
 80075be:	46bd      	mov	sp, r7
 80075c0:	bd80      	pop	{r7, pc}

080075c2 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80075c2:	b580      	push	{r7, lr}
 80075c4:	b084      	sub	sp, #16
 80075c6:	af00      	add	r7, sp, #0
 80075c8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075de:	f003 031c 	and.w	r3, r3, #28
 80075e2:	2204      	movs	r2, #4
 80075e4:	409a      	lsls	r2, r3
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	4013      	ands	r3, r2
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d026      	beq.n	800763c <HAL_DMA_IRQHandler+0x7a>
 80075ee:	68bb      	ldr	r3, [r7, #8]
 80075f0:	f003 0304 	and.w	r3, r3, #4
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d021      	beq.n	800763c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	f003 0320 	and.w	r3, r3, #32
 8007602:	2b00      	cmp	r3, #0
 8007604:	d107      	bne.n	8007616 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	681a      	ldr	r2, [r3, #0]
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	f022 0204 	bic.w	r2, r2, #4
 8007614:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800761a:	f003 021c 	and.w	r2, r3, #28
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007622:	2104      	movs	r1, #4
 8007624:	fa01 f202 	lsl.w	r2, r1, r2
 8007628:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800762e:	2b00      	cmp	r3, #0
 8007630:	d071      	beq.n	8007716 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007636:	6878      	ldr	r0, [r7, #4]
 8007638:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800763a:	e06c      	b.n	8007716 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007640:	f003 031c 	and.w	r3, r3, #28
 8007644:	2202      	movs	r2, #2
 8007646:	409a      	lsls	r2, r3
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	4013      	ands	r3, r2
 800764c:	2b00      	cmp	r3, #0
 800764e:	d02e      	beq.n	80076ae <HAL_DMA_IRQHandler+0xec>
 8007650:	68bb      	ldr	r3, [r7, #8]
 8007652:	f003 0302 	and.w	r3, r3, #2
 8007656:	2b00      	cmp	r3, #0
 8007658:	d029      	beq.n	80076ae <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	f003 0320 	and.w	r3, r3, #32
 8007664:	2b00      	cmp	r3, #0
 8007666:	d10b      	bne.n	8007680 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	681a      	ldr	r2, [r3, #0]
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	f022 020a 	bic.w	r2, r2, #10
 8007676:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	2201      	movs	r2, #1
 800767c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007684:	f003 021c 	and.w	r2, r3, #28
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800768c:	2102      	movs	r1, #2
 800768e:	fa01 f202 	lsl.w	r2, r1, r2
 8007692:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	2200      	movs	r2, #0
 8007698:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d038      	beq.n	8007716 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076a8:	6878      	ldr	r0, [r7, #4]
 80076aa:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80076ac:	e033      	b.n	8007716 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))!= 0U) && ((source_it & DMA_IT_TE) != 0U))
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076b2:	f003 031c 	and.w	r3, r3, #28
 80076b6:	2208      	movs	r2, #8
 80076b8:	409a      	lsls	r2, r3
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	4013      	ands	r3, r2
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d02a      	beq.n	8007718 <HAL_DMA_IRQHandler+0x156>
 80076c2:	68bb      	ldr	r3, [r7, #8]
 80076c4:	f003 0308 	and.w	r3, r3, #8
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d025      	beq.n	8007718 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	681a      	ldr	r2, [r3, #0]
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	f022 020e 	bic.w	r2, r2, #14
 80076da:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076e0:	f003 021c 	and.w	r2, r3, #28
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076e8:	2101      	movs	r1, #1
 80076ea:	fa01 f202 	lsl.w	r2, r1, r2
 80076ee:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2201      	movs	r2, #1
 80076f4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	2201      	movs	r2, #1
 80076fa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	2200      	movs	r2, #0
 8007702:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800770a:	2b00      	cmp	r3, #0
 800770c:	d004      	beq.n	8007718 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007712:	6878      	ldr	r0, [r7, #4]
 8007714:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8007716:	bf00      	nop
 8007718:	bf00      	nop
}
 800771a:	3710      	adds	r7, #16
 800771c:	46bd      	mov	sp, r7
 800771e:	bd80      	pop	{r7, pc}

08007720 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007720:	b480      	push	{r7}
 8007722:	b085      	sub	sp, #20
 8007724:	af00      	add	r7, sp, #0
 8007726:	60f8      	str	r0, [r7, #12]
 8007728:	60b9      	str	r1, [r7, #8]
 800772a:	607a      	str	r2, [r7, #4]
 800772c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007732:	68fa      	ldr	r2, [r7, #12]
 8007734:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8007736:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800773c:	2b00      	cmp	r3, #0
 800773e:	d004      	beq.n	800774a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007744:	68fa      	ldr	r2, [r7, #12]
 8007746:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8007748:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800774e:	f003 021c 	and.w	r2, r3, #28
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007756:	2101      	movs	r1, #1
 8007758:	fa01 f202 	lsl.w	r2, r1, r2
 800775c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	683a      	ldr	r2, [r7, #0]
 8007764:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	689b      	ldr	r3, [r3, #8]
 800776a:	2b10      	cmp	r3, #16
 800776c:	d108      	bne.n	8007780 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	687a      	ldr	r2, [r7, #4]
 8007774:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	68ba      	ldr	r2, [r7, #8]
 800777c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800777e:	e007      	b.n	8007790 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	68ba      	ldr	r2, [r7, #8]
 8007786:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	687a      	ldr	r2, [r7, #4]
 800778e:	60da      	str	r2, [r3, #12]
}
 8007790:	bf00      	nop
 8007792:	3714      	adds	r7, #20
 8007794:	46bd      	mov	sp, r7
 8007796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779a:	4770      	bx	lr

0800779c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800779c:	b480      	push	{r7}
 800779e:	b085      	sub	sp, #20
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	461a      	mov	r2, r3
 80077aa:	4b17      	ldr	r3, [pc, #92]	; (8007808 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80077ac:	429a      	cmp	r2, r3
 80077ae:	d80a      	bhi.n	80077c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077b4:	089b      	lsrs	r3, r3, #2
 80077b6:	009b      	lsls	r3, r3, #2
 80077b8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80077bc:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 80077c0:	687a      	ldr	r2, [r7, #4]
 80077c2:	6493      	str	r3, [r2, #72]	; 0x48
 80077c4:	e007      	b.n	80077d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077ca:	089b      	lsrs	r3, r3, #2
 80077cc:	009a      	lsls	r2, r3, #2
 80077ce:	4b0f      	ldr	r3, [pc, #60]	; (800780c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80077d0:	4413      	add	r3, r2
 80077d2:	687a      	ldr	r2, [r7, #4]
 80077d4:	6493      	str	r3, [r2, #72]	; 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	b2db      	uxtb	r3, r3
 80077dc:	3b08      	subs	r3, #8
 80077de:	4a0c      	ldr	r2, [pc, #48]	; (8007810 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80077e0:	fba2 2303 	umull	r2, r3, r2, r3
 80077e4:	091b      	lsrs	r3, r3, #4
 80077e6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	4a0a      	ldr	r2, [pc, #40]	; (8007814 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80077ec:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	f003 031f 	and.w	r3, r3, #31
 80077f4:	2201      	movs	r2, #1
 80077f6:	409a      	lsls	r2, r3
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	651a      	str	r2, [r3, #80]	; 0x50
}
 80077fc:	bf00      	nop
 80077fe:	3714      	adds	r7, #20
 8007800:	46bd      	mov	sp, r7
 8007802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007806:	4770      	bx	lr
 8007808:	40020407 	.word	0x40020407
 800780c:	4002081c 	.word	0x4002081c
 8007810:	cccccccd 	.word	0xcccccccd
 8007814:	40020880 	.word	0x40020880

08007818 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007818:	b480      	push	{r7}
 800781a:	b085      	sub	sp, #20
 800781c:	af00      	add	r7, sp, #0
 800781e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	685b      	ldr	r3, [r3, #4]
 8007824:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007828:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800782a:	68fa      	ldr	r2, [r7, #12]
 800782c:	4b0b      	ldr	r3, [pc, #44]	; (800785c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800782e:	4413      	add	r3, r2
 8007830:	009b      	lsls	r3, r3, #2
 8007832:	461a      	mov	r2, r3
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	4a09      	ldr	r2, [pc, #36]	; (8007860 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 800783c:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	3b01      	subs	r3, #1
 8007842:	f003 0303 	and.w	r3, r3, #3
 8007846:	2201      	movs	r2, #1
 8007848:	409a      	lsls	r2, r3
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800784e:	bf00      	nop
 8007850:	3714      	adds	r7, #20
 8007852:	46bd      	mov	sp, r7
 8007854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007858:	4770      	bx	lr
 800785a:	bf00      	nop
 800785c:	1000823f 	.word	0x1000823f
 8007860:	40020940 	.word	0x40020940

08007864 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007864:	b480      	push	{r7}
 8007866:	b087      	sub	sp, #28
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]
 800786c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800786e:	2300      	movs	r3, #0
 8007870:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007872:	e14c      	b.n	8007b0e <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8007874:	683b      	ldr	r3, [r7, #0]
 8007876:	681a      	ldr	r2, [r3, #0]
 8007878:	2101      	movs	r1, #1
 800787a:	697b      	ldr	r3, [r7, #20]
 800787c:	fa01 f303 	lsl.w	r3, r1, r3
 8007880:	4013      	ands	r3, r2
 8007882:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	2b00      	cmp	r3, #0
 8007888:	f000 813e 	beq.w	8007b08 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800788c:	683b      	ldr	r3, [r7, #0]
 800788e:	685b      	ldr	r3, [r3, #4]
 8007890:	f003 0303 	and.w	r3, r3, #3
 8007894:	2b01      	cmp	r3, #1
 8007896:	d005      	beq.n	80078a4 <HAL_GPIO_Init+0x40>
 8007898:	683b      	ldr	r3, [r7, #0]
 800789a:	685b      	ldr	r3, [r3, #4]
 800789c:	f003 0303 	and.w	r3, r3, #3
 80078a0:	2b02      	cmp	r3, #2
 80078a2:	d130      	bne.n	8007906 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	689b      	ldr	r3, [r3, #8]
 80078a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80078aa:	697b      	ldr	r3, [r7, #20]
 80078ac:	005b      	lsls	r3, r3, #1
 80078ae:	2203      	movs	r2, #3
 80078b0:	fa02 f303 	lsl.w	r3, r2, r3
 80078b4:	43db      	mvns	r3, r3
 80078b6:	693a      	ldr	r2, [r7, #16]
 80078b8:	4013      	ands	r3, r2
 80078ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80078bc:	683b      	ldr	r3, [r7, #0]
 80078be:	68da      	ldr	r2, [r3, #12]
 80078c0:	697b      	ldr	r3, [r7, #20]
 80078c2:	005b      	lsls	r3, r3, #1
 80078c4:	fa02 f303 	lsl.w	r3, r2, r3
 80078c8:	693a      	ldr	r2, [r7, #16]
 80078ca:	4313      	orrs	r3, r2
 80078cc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	693a      	ldr	r2, [r7, #16]
 80078d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	685b      	ldr	r3, [r3, #4]
 80078d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80078da:	2201      	movs	r2, #1
 80078dc:	697b      	ldr	r3, [r7, #20]
 80078de:	fa02 f303 	lsl.w	r3, r2, r3
 80078e2:	43db      	mvns	r3, r3
 80078e4:	693a      	ldr	r2, [r7, #16]
 80078e6:	4013      	ands	r3, r2
 80078e8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80078ea:	683b      	ldr	r3, [r7, #0]
 80078ec:	685b      	ldr	r3, [r3, #4]
 80078ee:	091b      	lsrs	r3, r3, #4
 80078f0:	f003 0201 	and.w	r2, r3, #1
 80078f4:	697b      	ldr	r3, [r7, #20]
 80078f6:	fa02 f303 	lsl.w	r3, r2, r3
 80078fa:	693a      	ldr	r2, [r7, #16]
 80078fc:	4313      	orrs	r3, r2
 80078fe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	693a      	ldr	r2, [r7, #16]
 8007904:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007906:	683b      	ldr	r3, [r7, #0]
 8007908:	685b      	ldr	r3, [r3, #4]
 800790a:	f003 0303 	and.w	r3, r3, #3
 800790e:	2b03      	cmp	r3, #3
 8007910:	d017      	beq.n	8007942 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	68db      	ldr	r3, [r3, #12]
 8007916:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007918:	697b      	ldr	r3, [r7, #20]
 800791a:	005b      	lsls	r3, r3, #1
 800791c:	2203      	movs	r2, #3
 800791e:	fa02 f303 	lsl.w	r3, r2, r3
 8007922:	43db      	mvns	r3, r3
 8007924:	693a      	ldr	r2, [r7, #16]
 8007926:	4013      	ands	r3, r2
 8007928:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800792a:	683b      	ldr	r3, [r7, #0]
 800792c:	689a      	ldr	r2, [r3, #8]
 800792e:	697b      	ldr	r3, [r7, #20]
 8007930:	005b      	lsls	r3, r3, #1
 8007932:	fa02 f303 	lsl.w	r3, r2, r3
 8007936:	693a      	ldr	r2, [r7, #16]
 8007938:	4313      	orrs	r3, r2
 800793a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	693a      	ldr	r2, [r7, #16]
 8007940:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007942:	683b      	ldr	r3, [r7, #0]
 8007944:	685b      	ldr	r3, [r3, #4]
 8007946:	f003 0303 	and.w	r3, r3, #3
 800794a:	2b02      	cmp	r3, #2
 800794c:	d123      	bne.n	8007996 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800794e:	697b      	ldr	r3, [r7, #20]
 8007950:	08da      	lsrs	r2, r3, #3
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	3208      	adds	r2, #8
 8007956:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800795a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800795c:	697b      	ldr	r3, [r7, #20]
 800795e:	f003 0307 	and.w	r3, r3, #7
 8007962:	009b      	lsls	r3, r3, #2
 8007964:	220f      	movs	r2, #15
 8007966:	fa02 f303 	lsl.w	r3, r2, r3
 800796a:	43db      	mvns	r3, r3
 800796c:	693a      	ldr	r2, [r7, #16]
 800796e:	4013      	ands	r3, r2
 8007970:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8007972:	683b      	ldr	r3, [r7, #0]
 8007974:	691a      	ldr	r2, [r3, #16]
 8007976:	697b      	ldr	r3, [r7, #20]
 8007978:	f003 0307 	and.w	r3, r3, #7
 800797c:	009b      	lsls	r3, r3, #2
 800797e:	fa02 f303 	lsl.w	r3, r2, r3
 8007982:	693a      	ldr	r2, [r7, #16]
 8007984:	4313      	orrs	r3, r2
 8007986:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8007988:	697b      	ldr	r3, [r7, #20]
 800798a:	08da      	lsrs	r2, r3, #3
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	3208      	adds	r2, #8
 8007990:	6939      	ldr	r1, [r7, #16]
 8007992:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800799c:	697b      	ldr	r3, [r7, #20]
 800799e:	005b      	lsls	r3, r3, #1
 80079a0:	2203      	movs	r2, #3
 80079a2:	fa02 f303 	lsl.w	r3, r2, r3
 80079a6:	43db      	mvns	r3, r3
 80079a8:	693a      	ldr	r2, [r7, #16]
 80079aa:	4013      	ands	r3, r2
 80079ac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80079ae:	683b      	ldr	r3, [r7, #0]
 80079b0:	685b      	ldr	r3, [r3, #4]
 80079b2:	f003 0203 	and.w	r2, r3, #3
 80079b6:	697b      	ldr	r3, [r7, #20]
 80079b8:	005b      	lsls	r3, r3, #1
 80079ba:	fa02 f303 	lsl.w	r3, r2, r3
 80079be:	693a      	ldr	r2, [r7, #16]
 80079c0:	4313      	orrs	r3, r2
 80079c2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	693a      	ldr	r2, [r7, #16]
 80079c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80079ca:	683b      	ldr	r3, [r7, #0]
 80079cc:	685b      	ldr	r3, [r3, #4]
 80079ce:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	f000 8098 	beq.w	8007b08 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80079d8:	4a54      	ldr	r2, [pc, #336]	; (8007b2c <HAL_GPIO_Init+0x2c8>)
 80079da:	697b      	ldr	r3, [r7, #20]
 80079dc:	089b      	lsrs	r3, r3, #2
 80079de:	3302      	adds	r3, #2
 80079e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80079e4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80079e6:	697b      	ldr	r3, [r7, #20]
 80079e8:	f003 0303 	and.w	r3, r3, #3
 80079ec:	009b      	lsls	r3, r3, #2
 80079ee:	220f      	movs	r2, #15
 80079f0:	fa02 f303 	lsl.w	r3, r2, r3
 80079f4:	43db      	mvns	r3, r3
 80079f6:	693a      	ldr	r2, [r7, #16]
 80079f8:	4013      	ands	r3, r2
 80079fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8007a02:	d019      	beq.n	8007a38 <HAL_GPIO_Init+0x1d4>
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	4a4a      	ldr	r2, [pc, #296]	; (8007b30 <HAL_GPIO_Init+0x2cc>)
 8007a08:	4293      	cmp	r3, r2
 8007a0a:	d013      	beq.n	8007a34 <HAL_GPIO_Init+0x1d0>
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	4a49      	ldr	r2, [pc, #292]	; (8007b34 <HAL_GPIO_Init+0x2d0>)
 8007a10:	4293      	cmp	r3, r2
 8007a12:	d00d      	beq.n	8007a30 <HAL_GPIO_Init+0x1cc>
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	4a48      	ldr	r2, [pc, #288]	; (8007b38 <HAL_GPIO_Init+0x2d4>)
 8007a18:	4293      	cmp	r3, r2
 8007a1a:	d007      	beq.n	8007a2c <HAL_GPIO_Init+0x1c8>
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	4a47      	ldr	r2, [pc, #284]	; (8007b3c <HAL_GPIO_Init+0x2d8>)
 8007a20:	4293      	cmp	r3, r2
 8007a22:	d101      	bne.n	8007a28 <HAL_GPIO_Init+0x1c4>
 8007a24:	2304      	movs	r3, #4
 8007a26:	e008      	b.n	8007a3a <HAL_GPIO_Init+0x1d6>
 8007a28:	2307      	movs	r3, #7
 8007a2a:	e006      	b.n	8007a3a <HAL_GPIO_Init+0x1d6>
 8007a2c:	2303      	movs	r3, #3
 8007a2e:	e004      	b.n	8007a3a <HAL_GPIO_Init+0x1d6>
 8007a30:	2302      	movs	r3, #2
 8007a32:	e002      	b.n	8007a3a <HAL_GPIO_Init+0x1d6>
 8007a34:	2301      	movs	r3, #1
 8007a36:	e000      	b.n	8007a3a <HAL_GPIO_Init+0x1d6>
 8007a38:	2300      	movs	r3, #0
 8007a3a:	697a      	ldr	r2, [r7, #20]
 8007a3c:	f002 0203 	and.w	r2, r2, #3
 8007a40:	0092      	lsls	r2, r2, #2
 8007a42:	4093      	lsls	r3, r2
 8007a44:	693a      	ldr	r2, [r7, #16]
 8007a46:	4313      	orrs	r3, r2
 8007a48:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8007a4a:	4938      	ldr	r1, [pc, #224]	; (8007b2c <HAL_GPIO_Init+0x2c8>)
 8007a4c:	697b      	ldr	r3, [r7, #20]
 8007a4e:	089b      	lsrs	r3, r3, #2
 8007a50:	3302      	adds	r3, #2
 8007a52:	693a      	ldr	r2, [r7, #16]
 8007a54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007a58:	4b39      	ldr	r3, [pc, #228]	; (8007b40 <HAL_GPIO_Init+0x2dc>)
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	43db      	mvns	r3, r3
 8007a62:	693a      	ldr	r2, [r7, #16]
 8007a64:	4013      	ands	r3, r2
 8007a66:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8007a68:	683b      	ldr	r3, [r7, #0]
 8007a6a:	685b      	ldr	r3, [r3, #4]
 8007a6c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d003      	beq.n	8007a7c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8007a74:	693a      	ldr	r2, [r7, #16]
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	4313      	orrs	r3, r2
 8007a7a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8007a7c:	4a30      	ldr	r2, [pc, #192]	; (8007b40 <HAL_GPIO_Init+0x2dc>)
 8007a7e:	693b      	ldr	r3, [r7, #16]
 8007a80:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8007a82:	4b2f      	ldr	r3, [pc, #188]	; (8007b40 <HAL_GPIO_Init+0x2dc>)
 8007a84:	685b      	ldr	r3, [r3, #4]
 8007a86:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	43db      	mvns	r3, r3
 8007a8c:	693a      	ldr	r2, [r7, #16]
 8007a8e:	4013      	ands	r3, r2
 8007a90:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8007a92:	683b      	ldr	r3, [r7, #0]
 8007a94:	685b      	ldr	r3, [r3, #4]
 8007a96:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d003      	beq.n	8007aa6 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8007a9e:	693a      	ldr	r2, [r7, #16]
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	4313      	orrs	r3, r2
 8007aa4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8007aa6:	4a26      	ldr	r2, [pc, #152]	; (8007b40 <HAL_GPIO_Init+0x2dc>)
 8007aa8:	693b      	ldr	r3, [r7, #16]
 8007aaa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8007aac:	4b24      	ldr	r3, [pc, #144]	; (8007b40 <HAL_GPIO_Init+0x2dc>)
 8007aae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007ab2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	43db      	mvns	r3, r3
 8007ab8:	693a      	ldr	r2, [r7, #16]
 8007aba:	4013      	ands	r3, r2
 8007abc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8007abe:	683b      	ldr	r3, [r7, #0]
 8007ac0:	685b      	ldr	r3, [r3, #4]
 8007ac2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d003      	beq.n	8007ad2 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8007aca:	693a      	ldr	r2, [r7, #16]
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	4313      	orrs	r3, r2
 8007ad0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8007ad2:	4a1b      	ldr	r2, [pc, #108]	; (8007b40 <HAL_GPIO_Init+0x2dc>)
 8007ad4:	693b      	ldr	r3, [r7, #16]
 8007ad6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8007ada:	4b19      	ldr	r3, [pc, #100]	; (8007b40 <HAL_GPIO_Init+0x2dc>)
 8007adc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007ae0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	43db      	mvns	r3, r3
 8007ae6:	693a      	ldr	r2, [r7, #16]
 8007ae8:	4013      	ands	r3, r2
 8007aea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8007aec:	683b      	ldr	r3, [r7, #0]
 8007aee:	685b      	ldr	r3, [r3, #4]
 8007af0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d003      	beq.n	8007b00 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8007af8:	693a      	ldr	r2, [r7, #16]
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	4313      	orrs	r3, r2
 8007afe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8007b00:	4a0f      	ldr	r2, [pc, #60]	; (8007b40 <HAL_GPIO_Init+0x2dc>)
 8007b02:	693b      	ldr	r3, [r7, #16]
 8007b04:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8007b08:	697b      	ldr	r3, [r7, #20]
 8007b0a:	3301      	adds	r3, #1
 8007b0c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007b0e:	683b      	ldr	r3, [r7, #0]
 8007b10:	681a      	ldr	r2, [r3, #0]
 8007b12:	697b      	ldr	r3, [r7, #20]
 8007b14:	fa22 f303 	lsr.w	r3, r2, r3
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	f47f aeab 	bne.w	8007874 <HAL_GPIO_Init+0x10>
  }
}
 8007b1e:	bf00      	nop
 8007b20:	bf00      	nop
 8007b22:	371c      	adds	r7, #28
 8007b24:	46bd      	mov	sp, r7
 8007b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2a:	4770      	bx	lr
 8007b2c:	40010000 	.word	0x40010000
 8007b30:	48000400 	.word	0x48000400
 8007b34:	48000800 	.word	0x48000800
 8007b38:	48000c00 	.word	0x48000c00
 8007b3c:	48001000 	.word	0x48001000
 8007b40:	58000800 	.word	0x58000800

08007b44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007b44:	b480      	push	{r7}
 8007b46:	b083      	sub	sp, #12
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
 8007b4c:	460b      	mov	r3, r1
 8007b4e:	807b      	strh	r3, [r7, #2]
 8007b50:	4613      	mov	r3, r2
 8007b52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007b54:	787b      	ldrb	r3, [r7, #1]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d003      	beq.n	8007b62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8007b5a:	887a      	ldrh	r2, [r7, #2]
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8007b60:	e002      	b.n	8007b68 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8007b62:	887a      	ldrh	r2, [r7, #2]
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	629a      	str	r2, [r3, #40]	; 0x28
}
 8007b68:	bf00      	nop
 8007b6a:	370c      	adds	r7, #12
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b72:	4770      	bx	lr

08007b74 <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007b74:	b480      	push	{r7}
 8007b76:	b085      	sub	sp, #20
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
 8007b7c:	460b      	mov	r3, r1
 8007b7e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	695b      	ldr	r3, [r3, #20]
 8007b84:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007b86:	887a      	ldrh	r2, [r7, #2]
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	4013      	ands	r3, r2
 8007b8c:	041a      	lsls	r2, r3, #16
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	43d9      	mvns	r1, r3
 8007b92:	887b      	ldrh	r3, [r7, #2]
 8007b94:	400b      	ands	r3, r1
 8007b96:	431a      	orrs	r2, r3
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	619a      	str	r2, [r3, #24]
}
 8007b9c:	bf00      	nop
 8007b9e:	3714      	adds	r7, #20
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba6:	4770      	bx	lr

08007ba8 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8007ba8:	b580      	push	{r7, lr}
 8007baa:	b082      	sub	sp, #8
 8007bac:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8007bae:	4b0a      	ldr	r3, [pc, #40]	; (8007bd8 <HAL_HSEM_IRQHandler+0x30>)
 8007bb0:	68db      	ldr	r3, [r3, #12]
 8007bb2:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8007bb4:	4b08      	ldr	r3, [pc, #32]	; (8007bd8 <HAL_HSEM_IRQHandler+0x30>)
 8007bb6:	681a      	ldr	r2, [r3, #0]
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	43db      	mvns	r3, r3
 8007bbc:	4906      	ldr	r1, [pc, #24]	; (8007bd8 <HAL_HSEM_IRQHandler+0x30>)
 8007bbe:	4013      	ands	r3, r2
 8007bc0:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8007bc2:	4a05      	ldr	r2, [pc, #20]	; (8007bd8 <HAL_HSEM_IRQHandler+0x30>)
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8007bc8:	6878      	ldr	r0, [r7, #4]
 8007bca:	f000 f807 	bl	8007bdc <HAL_HSEM_FreeCallback>
}
 8007bce:	bf00      	nop
 8007bd0:	3708      	adds	r7, #8
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	bd80      	pop	{r7, pc}
 8007bd6:	bf00      	nop
 8007bd8:	58001500 	.word	0x58001500

08007bdc <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8007bdc:	b480      	push	{r7}
 8007bde:	b083      	sub	sp, #12
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8007be4:	bf00      	nop
 8007be6:	370c      	adds	r7, #12
 8007be8:	46bd      	mov	sp, r7
 8007bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bee:	4770      	bx	lr

08007bf0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	b082      	sub	sp, #8
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d101      	bne.n	8007c02 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007bfe:	2301      	movs	r3, #1
 8007c00:	e081      	b.n	8007d06 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007c08:	b2db      	uxtb	r3, r3
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d106      	bne.n	8007c1c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	2200      	movs	r2, #0
 8007c12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007c16:	6878      	ldr	r0, [r7, #4]
 8007c18:	f7fe f91a 	bl	8005e50 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	2224      	movs	r2, #36	; 0x24
 8007c20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	681a      	ldr	r2, [r3, #0]
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	f022 0201 	bic.w	r2, r2, #1
 8007c32:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	685a      	ldr	r2, [r3, #4]
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007c40:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	689a      	ldr	r2, [r3, #8]
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007c50:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	68db      	ldr	r3, [r3, #12]
 8007c56:	2b01      	cmp	r3, #1
 8007c58:	d107      	bne.n	8007c6a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	689a      	ldr	r2, [r3, #8]
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007c66:	609a      	str	r2, [r3, #8]
 8007c68:	e006      	b.n	8007c78 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	689a      	ldr	r2, [r3, #8]
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8007c76:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	68db      	ldr	r3, [r3, #12]
 8007c7c:	2b02      	cmp	r3, #2
 8007c7e:	d104      	bne.n	8007c8a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007c88:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	685b      	ldr	r3, [r3, #4]
 8007c90:	687a      	ldr	r2, [r7, #4]
 8007c92:	6812      	ldr	r2, [r2, #0]
 8007c94:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007c98:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c9c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	68da      	ldr	r2, [r3, #12]
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007cac:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	691a      	ldr	r2, [r3, #16]
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	695b      	ldr	r3, [r3, #20]
 8007cb6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	699b      	ldr	r3, [r3, #24]
 8007cbe:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	430a      	orrs	r2, r1
 8007cc6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	69d9      	ldr	r1, [r3, #28]
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	6a1a      	ldr	r2, [r3, #32]
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	430a      	orrs	r2, r1
 8007cd6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	681a      	ldr	r2, [r3, #0]
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	f042 0201 	orr.w	r2, r2, #1
 8007ce6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	2200      	movs	r2, #0
 8007cec:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	2220      	movs	r2, #32
 8007cf2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	2200      	movs	r2, #0
 8007cfa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	2200      	movs	r2, #0
 8007d00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8007d04:	2300      	movs	r3, #0
}
 8007d06:	4618      	mov	r0, r3
 8007d08:	3708      	adds	r7, #8
 8007d0a:	46bd      	mov	sp, r7
 8007d0c:	bd80      	pop	{r7, pc}
	...

08007d10 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8007d10:	b580      	push	{r7, lr}
 8007d12:	b088      	sub	sp, #32
 8007d14:	af02      	add	r7, sp, #8
 8007d16:	60f8      	str	r0, [r7, #12]
 8007d18:	607a      	str	r2, [r7, #4]
 8007d1a:	461a      	mov	r2, r3
 8007d1c:	460b      	mov	r3, r1
 8007d1e:	817b      	strh	r3, [r7, #10]
 8007d20:	4613      	mov	r3, r2
 8007d22:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007d2a:	b2db      	uxtb	r3, r3
 8007d2c:	2b20      	cmp	r3, #32
 8007d2e:	f040 80da 	bne.w	8007ee6 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007d38:	2b01      	cmp	r3, #1
 8007d3a:	d101      	bne.n	8007d40 <HAL_I2C_Master_Transmit+0x30>
 8007d3c:	2302      	movs	r3, #2
 8007d3e:	e0d3      	b.n	8007ee8 <HAL_I2C_Master_Transmit+0x1d8>
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	2201      	movs	r2, #1
 8007d44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007d48:	f7fe fcb0 	bl	80066ac <HAL_GetTick>
 8007d4c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007d4e:	697b      	ldr	r3, [r7, #20]
 8007d50:	9300      	str	r3, [sp, #0]
 8007d52:	2319      	movs	r3, #25
 8007d54:	2201      	movs	r2, #1
 8007d56:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007d5a:	68f8      	ldr	r0, [r7, #12]
 8007d5c:	f000 fcbc 	bl	80086d8 <I2C_WaitOnFlagUntilTimeout>
 8007d60:	4603      	mov	r3, r0
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d001      	beq.n	8007d6a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8007d66:	2301      	movs	r3, #1
 8007d68:	e0be      	b.n	8007ee8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	2221      	movs	r2, #33	; 0x21
 8007d6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	2210      	movs	r2, #16
 8007d76:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	2200      	movs	r2, #0
 8007d7e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	687a      	ldr	r2, [r7, #4]
 8007d84:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	893a      	ldrh	r2, [r7, #8]
 8007d8a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	2200      	movs	r2, #0
 8007d90:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d96:	b29b      	uxth	r3, r3
 8007d98:	2bff      	cmp	r3, #255	; 0xff
 8007d9a:	d90e      	bls.n	8007dba <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	22ff      	movs	r2, #255	; 0xff
 8007da0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007da6:	b2da      	uxtb	r2, r3
 8007da8:	8979      	ldrh	r1, [r7, #10]
 8007daa:	4b51      	ldr	r3, [pc, #324]	; (8007ef0 <HAL_I2C_Master_Transmit+0x1e0>)
 8007dac:	9300      	str	r3, [sp, #0]
 8007dae:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007db2:	68f8      	ldr	r0, [r7, #12]
 8007db4:	f000 feb2 	bl	8008b1c <I2C_TransferConfig>
 8007db8:	e06c      	b.n	8007e94 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007dbe:	b29a      	uxth	r2, r3
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007dc8:	b2da      	uxtb	r2, r3
 8007dca:	8979      	ldrh	r1, [r7, #10]
 8007dcc:	4b48      	ldr	r3, [pc, #288]	; (8007ef0 <HAL_I2C_Master_Transmit+0x1e0>)
 8007dce:	9300      	str	r3, [sp, #0]
 8007dd0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007dd4:	68f8      	ldr	r0, [r7, #12]
 8007dd6:	f000 fea1 	bl	8008b1c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8007dda:	e05b      	b.n	8007e94 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007ddc:	697a      	ldr	r2, [r7, #20]
 8007dde:	6a39      	ldr	r1, [r7, #32]
 8007de0:	68f8      	ldr	r0, [r7, #12]
 8007de2:	f000 fcb9 	bl	8008758 <I2C_WaitOnTXISFlagUntilTimeout>
 8007de6:	4603      	mov	r3, r0
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d001      	beq.n	8007df0 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8007dec:	2301      	movs	r3, #1
 8007dee:	e07b      	b.n	8007ee8 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007df4:	781a      	ldrb	r2, [r3, #0]
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e00:	1c5a      	adds	r2, r3, #1
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e0a:	b29b      	uxth	r3, r3
 8007e0c:	3b01      	subs	r3, #1
 8007e0e:	b29a      	uxth	r2, r3
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e18:	3b01      	subs	r3, #1
 8007e1a:	b29a      	uxth	r2, r3
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e24:	b29b      	uxth	r3, r3
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d034      	beq.n	8007e94 <HAL_I2C_Master_Transmit+0x184>
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d130      	bne.n	8007e94 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007e32:	697b      	ldr	r3, [r7, #20]
 8007e34:	9300      	str	r3, [sp, #0]
 8007e36:	6a3b      	ldr	r3, [r7, #32]
 8007e38:	2200      	movs	r2, #0
 8007e3a:	2180      	movs	r1, #128	; 0x80
 8007e3c:	68f8      	ldr	r0, [r7, #12]
 8007e3e:	f000 fc4b 	bl	80086d8 <I2C_WaitOnFlagUntilTimeout>
 8007e42:	4603      	mov	r3, r0
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d001      	beq.n	8007e4c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8007e48:	2301      	movs	r3, #1
 8007e4a:	e04d      	b.n	8007ee8 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e50:	b29b      	uxth	r3, r3
 8007e52:	2bff      	cmp	r3, #255	; 0xff
 8007e54:	d90e      	bls.n	8007e74 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	22ff      	movs	r2, #255	; 0xff
 8007e5a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e60:	b2da      	uxtb	r2, r3
 8007e62:	8979      	ldrh	r1, [r7, #10]
 8007e64:	2300      	movs	r3, #0
 8007e66:	9300      	str	r3, [sp, #0]
 8007e68:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007e6c:	68f8      	ldr	r0, [r7, #12]
 8007e6e:	f000 fe55 	bl	8008b1c <I2C_TransferConfig>
 8007e72:	e00f      	b.n	8007e94 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e78:	b29a      	uxth	r2, r3
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e82:	b2da      	uxtb	r2, r3
 8007e84:	8979      	ldrh	r1, [r7, #10]
 8007e86:	2300      	movs	r3, #0
 8007e88:	9300      	str	r3, [sp, #0]
 8007e8a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007e8e:	68f8      	ldr	r0, [r7, #12]
 8007e90:	f000 fe44 	bl	8008b1c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e98:	b29b      	uxth	r3, r3
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d19e      	bne.n	8007ddc <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007e9e:	697a      	ldr	r2, [r7, #20]
 8007ea0:	6a39      	ldr	r1, [r7, #32]
 8007ea2:	68f8      	ldr	r0, [r7, #12]
 8007ea4:	f000 fc98 	bl	80087d8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007ea8:	4603      	mov	r3, r0
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d001      	beq.n	8007eb2 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8007eae:	2301      	movs	r3, #1
 8007eb0:	e01a      	b.n	8007ee8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	2220      	movs	r2, #32
 8007eb8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	6859      	ldr	r1, [r3, #4]
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	681a      	ldr	r2, [r3, #0]
 8007ec4:	4b0b      	ldr	r3, [pc, #44]	; (8007ef4 <HAL_I2C_Master_Transmit+0x1e4>)
 8007ec6:	400b      	ands	r3, r1
 8007ec8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	2220      	movs	r2, #32
 8007ece:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	2200      	movs	r2, #0
 8007ede:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007ee2:	2300      	movs	r3, #0
 8007ee4:	e000      	b.n	8007ee8 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8007ee6:	2302      	movs	r3, #2
  }
}
 8007ee8:	4618      	mov	r0, r3
 8007eea:	3718      	adds	r7, #24
 8007eec:	46bd      	mov	sp, r7
 8007eee:	bd80      	pop	{r7, pc}
 8007ef0:	80002000 	.word	0x80002000
 8007ef4:	fe00e800 	.word	0xfe00e800

08007ef8 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b088      	sub	sp, #32
 8007efc:	af02      	add	r7, sp, #8
 8007efe:	60f8      	str	r0, [r7, #12]
 8007f00:	607a      	str	r2, [r7, #4]
 8007f02:	461a      	mov	r2, r3
 8007f04:	460b      	mov	r3, r1
 8007f06:	817b      	strh	r3, [r7, #10]
 8007f08:	4613      	mov	r3, r2
 8007f0a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007f12:	b2db      	uxtb	r3, r3
 8007f14:	2b20      	cmp	r3, #32
 8007f16:	f040 80db 	bne.w	80080d0 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007f20:	2b01      	cmp	r3, #1
 8007f22:	d101      	bne.n	8007f28 <HAL_I2C_Master_Receive+0x30>
 8007f24:	2302      	movs	r3, #2
 8007f26:	e0d4      	b.n	80080d2 <HAL_I2C_Master_Receive+0x1da>
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	2201      	movs	r2, #1
 8007f2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007f30:	f7fe fbbc 	bl	80066ac <HAL_GetTick>
 8007f34:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007f36:	697b      	ldr	r3, [r7, #20]
 8007f38:	9300      	str	r3, [sp, #0]
 8007f3a:	2319      	movs	r3, #25
 8007f3c:	2201      	movs	r2, #1
 8007f3e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007f42:	68f8      	ldr	r0, [r7, #12]
 8007f44:	f000 fbc8 	bl	80086d8 <I2C_WaitOnFlagUntilTimeout>
 8007f48:	4603      	mov	r3, r0
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d001      	beq.n	8007f52 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8007f4e:	2301      	movs	r3, #1
 8007f50:	e0bf      	b.n	80080d2 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	2222      	movs	r2, #34	; 0x22
 8007f56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	2210      	movs	r2, #16
 8007f5e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	2200      	movs	r2, #0
 8007f66:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	687a      	ldr	r2, [r7, #4]
 8007f6c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	893a      	ldrh	r2, [r7, #8]
 8007f72:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	2200      	movs	r2, #0
 8007f78:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f7e:	b29b      	uxth	r3, r3
 8007f80:	2bff      	cmp	r3, #255	; 0xff
 8007f82:	d90e      	bls.n	8007fa2 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	22ff      	movs	r2, #255	; 0xff
 8007f88:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f8e:	b2da      	uxtb	r2, r3
 8007f90:	8979      	ldrh	r1, [r7, #10]
 8007f92:	4b52      	ldr	r3, [pc, #328]	; (80080dc <HAL_I2C_Master_Receive+0x1e4>)
 8007f94:	9300      	str	r3, [sp, #0]
 8007f96:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007f9a:	68f8      	ldr	r0, [r7, #12]
 8007f9c:	f000 fdbe 	bl	8008b1c <I2C_TransferConfig>
 8007fa0:	e06d      	b.n	800807e <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007fa6:	b29a      	uxth	r2, r3
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007fb0:	b2da      	uxtb	r2, r3
 8007fb2:	8979      	ldrh	r1, [r7, #10]
 8007fb4:	4b49      	ldr	r3, [pc, #292]	; (80080dc <HAL_I2C_Master_Receive+0x1e4>)
 8007fb6:	9300      	str	r3, [sp, #0]
 8007fb8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007fbc:	68f8      	ldr	r0, [r7, #12]
 8007fbe:	f000 fdad 	bl	8008b1c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8007fc2:	e05c      	b.n	800807e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007fc4:	697a      	ldr	r2, [r7, #20]
 8007fc6:	6a39      	ldr	r1, [r7, #32]
 8007fc8:	68f8      	ldr	r0, [r7, #12]
 8007fca:	f000 fc41 	bl	8008850 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007fce:	4603      	mov	r3, r0
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d001      	beq.n	8007fd8 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8007fd4:	2301      	movs	r3, #1
 8007fd6:	e07c      	b.n	80080d2 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fe2:	b2d2      	uxtb	r2, r2
 8007fe4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fea:	1c5a      	adds	r2, r3, #1
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ff4:	3b01      	subs	r3, #1
 8007ff6:	b29a      	uxth	r2, r3
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008000:	b29b      	uxth	r3, r3
 8008002:	3b01      	subs	r3, #1
 8008004:	b29a      	uxth	r2, r3
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800800e:	b29b      	uxth	r3, r3
 8008010:	2b00      	cmp	r3, #0
 8008012:	d034      	beq.n	800807e <HAL_I2C_Master_Receive+0x186>
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008018:	2b00      	cmp	r3, #0
 800801a:	d130      	bne.n	800807e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800801c:	697b      	ldr	r3, [r7, #20]
 800801e:	9300      	str	r3, [sp, #0]
 8008020:	6a3b      	ldr	r3, [r7, #32]
 8008022:	2200      	movs	r2, #0
 8008024:	2180      	movs	r1, #128	; 0x80
 8008026:	68f8      	ldr	r0, [r7, #12]
 8008028:	f000 fb56 	bl	80086d8 <I2C_WaitOnFlagUntilTimeout>
 800802c:	4603      	mov	r3, r0
 800802e:	2b00      	cmp	r3, #0
 8008030:	d001      	beq.n	8008036 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8008032:	2301      	movs	r3, #1
 8008034:	e04d      	b.n	80080d2 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800803a:	b29b      	uxth	r3, r3
 800803c:	2bff      	cmp	r3, #255	; 0xff
 800803e:	d90e      	bls.n	800805e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	22ff      	movs	r2, #255	; 0xff
 8008044:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800804a:	b2da      	uxtb	r2, r3
 800804c:	8979      	ldrh	r1, [r7, #10]
 800804e:	2300      	movs	r3, #0
 8008050:	9300      	str	r3, [sp, #0]
 8008052:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008056:	68f8      	ldr	r0, [r7, #12]
 8008058:	f000 fd60 	bl	8008b1c <I2C_TransferConfig>
 800805c:	e00f      	b.n	800807e <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008062:	b29a      	uxth	r2, r3
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800806c:	b2da      	uxtb	r2, r3
 800806e:	8979      	ldrh	r1, [r7, #10]
 8008070:	2300      	movs	r3, #0
 8008072:	9300      	str	r3, [sp, #0]
 8008074:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008078:	68f8      	ldr	r0, [r7, #12]
 800807a:	f000 fd4f 	bl	8008b1c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008082:	b29b      	uxth	r3, r3
 8008084:	2b00      	cmp	r3, #0
 8008086:	d19d      	bne.n	8007fc4 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008088:	697a      	ldr	r2, [r7, #20]
 800808a:	6a39      	ldr	r1, [r7, #32]
 800808c:	68f8      	ldr	r0, [r7, #12]
 800808e:	f000 fba3 	bl	80087d8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008092:	4603      	mov	r3, r0
 8008094:	2b00      	cmp	r3, #0
 8008096:	d001      	beq.n	800809c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8008098:	2301      	movs	r3, #1
 800809a:	e01a      	b.n	80080d2 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	2220      	movs	r2, #32
 80080a2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	6859      	ldr	r1, [r3, #4]
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	681a      	ldr	r2, [r3, #0]
 80080ae:	4b0c      	ldr	r3, [pc, #48]	; (80080e0 <HAL_I2C_Master_Receive+0x1e8>)
 80080b0:	400b      	ands	r3, r1
 80080b2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	2220      	movs	r2, #32
 80080b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	2200      	movs	r2, #0
 80080c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	2200      	movs	r2, #0
 80080c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80080cc:	2300      	movs	r3, #0
 80080ce:	e000      	b.n	80080d2 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80080d0:	2302      	movs	r3, #2
  }
}
 80080d2:	4618      	mov	r0, r3
 80080d4:	3718      	adds	r7, #24
 80080d6:	46bd      	mov	sp, r7
 80080d8:	bd80      	pop	{r7, pc}
 80080da:	bf00      	nop
 80080dc:	80002400 	.word	0x80002400
 80080e0:	fe00e800 	.word	0xfe00e800

080080e4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80080e4:	b580      	push	{r7, lr}
 80080e6:	b088      	sub	sp, #32
 80080e8:	af02      	add	r7, sp, #8
 80080ea:	60f8      	str	r0, [r7, #12]
 80080ec:	4608      	mov	r0, r1
 80080ee:	4611      	mov	r1, r2
 80080f0:	461a      	mov	r2, r3
 80080f2:	4603      	mov	r3, r0
 80080f4:	817b      	strh	r3, [r7, #10]
 80080f6:	460b      	mov	r3, r1
 80080f8:	813b      	strh	r3, [r7, #8]
 80080fa:	4613      	mov	r3, r2
 80080fc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008104:	b2db      	uxtb	r3, r3
 8008106:	2b20      	cmp	r3, #32
 8008108:	f040 80f9 	bne.w	80082fe <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800810c:	6a3b      	ldr	r3, [r7, #32]
 800810e:	2b00      	cmp	r3, #0
 8008110:	d002      	beq.n	8008118 <HAL_I2C_Mem_Write+0x34>
 8008112:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008114:	2b00      	cmp	r3, #0
 8008116:	d105      	bne.n	8008124 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800811e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8008120:	2301      	movs	r3, #1
 8008122:	e0ed      	b.n	8008300 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800812a:	2b01      	cmp	r3, #1
 800812c:	d101      	bne.n	8008132 <HAL_I2C_Mem_Write+0x4e>
 800812e:	2302      	movs	r3, #2
 8008130:	e0e6      	b.n	8008300 <HAL_I2C_Mem_Write+0x21c>
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	2201      	movs	r2, #1
 8008136:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800813a:	f7fe fab7 	bl	80066ac <HAL_GetTick>
 800813e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008140:	697b      	ldr	r3, [r7, #20]
 8008142:	9300      	str	r3, [sp, #0]
 8008144:	2319      	movs	r3, #25
 8008146:	2201      	movs	r2, #1
 8008148:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800814c:	68f8      	ldr	r0, [r7, #12]
 800814e:	f000 fac3 	bl	80086d8 <I2C_WaitOnFlagUntilTimeout>
 8008152:	4603      	mov	r3, r0
 8008154:	2b00      	cmp	r3, #0
 8008156:	d001      	beq.n	800815c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8008158:	2301      	movs	r3, #1
 800815a:	e0d1      	b.n	8008300 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	2221      	movs	r2, #33	; 0x21
 8008160:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	2240      	movs	r2, #64	; 0x40
 8008168:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	2200      	movs	r2, #0
 8008170:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	6a3a      	ldr	r2, [r7, #32]
 8008176:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800817c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	2200      	movs	r2, #0
 8008182:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008184:	88f8      	ldrh	r0, [r7, #6]
 8008186:	893a      	ldrh	r2, [r7, #8]
 8008188:	8979      	ldrh	r1, [r7, #10]
 800818a:	697b      	ldr	r3, [r7, #20]
 800818c:	9301      	str	r3, [sp, #4]
 800818e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008190:	9300      	str	r3, [sp, #0]
 8008192:	4603      	mov	r3, r0
 8008194:	68f8      	ldr	r0, [r7, #12]
 8008196:	f000 f9d3 	bl	8008540 <I2C_RequestMemoryWrite>
 800819a:	4603      	mov	r3, r0
 800819c:	2b00      	cmp	r3, #0
 800819e:	d005      	beq.n	80081ac <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	2200      	movs	r2, #0
 80081a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80081a8:	2301      	movs	r3, #1
 80081aa:	e0a9      	b.n	8008300 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80081b0:	b29b      	uxth	r3, r3
 80081b2:	2bff      	cmp	r3, #255	; 0xff
 80081b4:	d90e      	bls.n	80081d4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	22ff      	movs	r2, #255	; 0xff
 80081ba:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80081c0:	b2da      	uxtb	r2, r3
 80081c2:	8979      	ldrh	r1, [r7, #10]
 80081c4:	2300      	movs	r3, #0
 80081c6:	9300      	str	r3, [sp, #0]
 80081c8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80081cc:	68f8      	ldr	r0, [r7, #12]
 80081ce:	f000 fca5 	bl	8008b1c <I2C_TransferConfig>
 80081d2:	e00f      	b.n	80081f4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80081d8:	b29a      	uxth	r2, r3
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80081e2:	b2da      	uxtb	r2, r3
 80081e4:	8979      	ldrh	r1, [r7, #10]
 80081e6:	2300      	movs	r3, #0
 80081e8:	9300      	str	r3, [sp, #0]
 80081ea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80081ee:	68f8      	ldr	r0, [r7, #12]
 80081f0:	f000 fc94 	bl	8008b1c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80081f4:	697a      	ldr	r2, [r7, #20]
 80081f6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80081f8:	68f8      	ldr	r0, [r7, #12]
 80081fa:	f000 faad 	bl	8008758 <I2C_WaitOnTXISFlagUntilTimeout>
 80081fe:	4603      	mov	r3, r0
 8008200:	2b00      	cmp	r3, #0
 8008202:	d001      	beq.n	8008208 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8008204:	2301      	movs	r3, #1
 8008206:	e07b      	b.n	8008300 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800820c:	781a      	ldrb	r2, [r3, #0]
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008218:	1c5a      	adds	r2, r3, #1
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008222:	b29b      	uxth	r3, r3
 8008224:	3b01      	subs	r3, #1
 8008226:	b29a      	uxth	r2, r3
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008230:	3b01      	subs	r3, #1
 8008232:	b29a      	uxth	r2, r3
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800823c:	b29b      	uxth	r3, r3
 800823e:	2b00      	cmp	r3, #0
 8008240:	d034      	beq.n	80082ac <HAL_I2C_Mem_Write+0x1c8>
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008246:	2b00      	cmp	r3, #0
 8008248:	d130      	bne.n	80082ac <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800824a:	697b      	ldr	r3, [r7, #20]
 800824c:	9300      	str	r3, [sp, #0]
 800824e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008250:	2200      	movs	r2, #0
 8008252:	2180      	movs	r1, #128	; 0x80
 8008254:	68f8      	ldr	r0, [r7, #12]
 8008256:	f000 fa3f 	bl	80086d8 <I2C_WaitOnFlagUntilTimeout>
 800825a:	4603      	mov	r3, r0
 800825c:	2b00      	cmp	r3, #0
 800825e:	d001      	beq.n	8008264 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8008260:	2301      	movs	r3, #1
 8008262:	e04d      	b.n	8008300 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008268:	b29b      	uxth	r3, r3
 800826a:	2bff      	cmp	r3, #255	; 0xff
 800826c:	d90e      	bls.n	800828c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	22ff      	movs	r2, #255	; 0xff
 8008272:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008278:	b2da      	uxtb	r2, r3
 800827a:	8979      	ldrh	r1, [r7, #10]
 800827c:	2300      	movs	r3, #0
 800827e:	9300      	str	r3, [sp, #0]
 8008280:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008284:	68f8      	ldr	r0, [r7, #12]
 8008286:	f000 fc49 	bl	8008b1c <I2C_TransferConfig>
 800828a:	e00f      	b.n	80082ac <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008290:	b29a      	uxth	r2, r3
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800829a:	b2da      	uxtb	r2, r3
 800829c:	8979      	ldrh	r1, [r7, #10]
 800829e:	2300      	movs	r3, #0
 80082a0:	9300      	str	r3, [sp, #0]
 80082a2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80082a6:	68f8      	ldr	r0, [r7, #12]
 80082a8:	f000 fc38 	bl	8008b1c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80082b0:	b29b      	uxth	r3, r3
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d19e      	bne.n	80081f4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80082b6:	697a      	ldr	r2, [r7, #20]
 80082b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80082ba:	68f8      	ldr	r0, [r7, #12]
 80082bc:	f000 fa8c 	bl	80087d8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80082c0:	4603      	mov	r3, r0
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d001      	beq.n	80082ca <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80082c6:	2301      	movs	r3, #1
 80082c8:	e01a      	b.n	8008300 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	2220      	movs	r2, #32
 80082d0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	6859      	ldr	r1, [r3, #4]
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	681a      	ldr	r2, [r3, #0]
 80082dc:	4b0a      	ldr	r3, [pc, #40]	; (8008308 <HAL_I2C_Mem_Write+0x224>)
 80082de:	400b      	ands	r3, r1
 80082e0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	2220      	movs	r2, #32
 80082e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	2200      	movs	r2, #0
 80082ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	2200      	movs	r2, #0
 80082f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80082fa:	2300      	movs	r3, #0
 80082fc:	e000      	b.n	8008300 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80082fe:	2302      	movs	r3, #2
  }
}
 8008300:	4618      	mov	r0, r3
 8008302:	3718      	adds	r7, #24
 8008304:	46bd      	mov	sp, r7
 8008306:	bd80      	pop	{r7, pc}
 8008308:	fe00e800 	.word	0xfe00e800

0800830c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800830c:	b580      	push	{r7, lr}
 800830e:	b088      	sub	sp, #32
 8008310:	af02      	add	r7, sp, #8
 8008312:	60f8      	str	r0, [r7, #12]
 8008314:	4608      	mov	r0, r1
 8008316:	4611      	mov	r1, r2
 8008318:	461a      	mov	r2, r3
 800831a:	4603      	mov	r3, r0
 800831c:	817b      	strh	r3, [r7, #10]
 800831e:	460b      	mov	r3, r1
 8008320:	813b      	strh	r3, [r7, #8]
 8008322:	4613      	mov	r3, r2
 8008324:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800832c:	b2db      	uxtb	r3, r3
 800832e:	2b20      	cmp	r3, #32
 8008330:	f040 80fd 	bne.w	800852e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8008334:	6a3b      	ldr	r3, [r7, #32]
 8008336:	2b00      	cmp	r3, #0
 8008338:	d002      	beq.n	8008340 <HAL_I2C_Mem_Read+0x34>
 800833a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800833c:	2b00      	cmp	r3, #0
 800833e:	d105      	bne.n	800834c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008346:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8008348:	2301      	movs	r3, #1
 800834a:	e0f1      	b.n	8008530 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008352:	2b01      	cmp	r3, #1
 8008354:	d101      	bne.n	800835a <HAL_I2C_Mem_Read+0x4e>
 8008356:	2302      	movs	r3, #2
 8008358:	e0ea      	b.n	8008530 <HAL_I2C_Mem_Read+0x224>
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	2201      	movs	r2, #1
 800835e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008362:	f7fe f9a3 	bl	80066ac <HAL_GetTick>
 8008366:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008368:	697b      	ldr	r3, [r7, #20]
 800836a:	9300      	str	r3, [sp, #0]
 800836c:	2319      	movs	r3, #25
 800836e:	2201      	movs	r2, #1
 8008370:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008374:	68f8      	ldr	r0, [r7, #12]
 8008376:	f000 f9af 	bl	80086d8 <I2C_WaitOnFlagUntilTimeout>
 800837a:	4603      	mov	r3, r0
 800837c:	2b00      	cmp	r3, #0
 800837e:	d001      	beq.n	8008384 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8008380:	2301      	movs	r3, #1
 8008382:	e0d5      	b.n	8008530 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	2222      	movs	r2, #34	; 0x22
 8008388:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	2240      	movs	r2, #64	; 0x40
 8008390:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	2200      	movs	r2, #0
 8008398:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	6a3a      	ldr	r2, [r7, #32]
 800839e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80083a4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	2200      	movs	r2, #0
 80083aa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80083ac:	88f8      	ldrh	r0, [r7, #6]
 80083ae:	893a      	ldrh	r2, [r7, #8]
 80083b0:	8979      	ldrh	r1, [r7, #10]
 80083b2:	697b      	ldr	r3, [r7, #20]
 80083b4:	9301      	str	r3, [sp, #4]
 80083b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083b8:	9300      	str	r3, [sp, #0]
 80083ba:	4603      	mov	r3, r0
 80083bc:	68f8      	ldr	r0, [r7, #12]
 80083be:	f000 f913 	bl	80085e8 <I2C_RequestMemoryRead>
 80083c2:	4603      	mov	r3, r0
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d005      	beq.n	80083d4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	2200      	movs	r2, #0
 80083cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80083d0:	2301      	movs	r3, #1
 80083d2:	e0ad      	b.n	8008530 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80083d8:	b29b      	uxth	r3, r3
 80083da:	2bff      	cmp	r3, #255	; 0xff
 80083dc:	d90e      	bls.n	80083fc <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	22ff      	movs	r2, #255	; 0xff
 80083e2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80083e8:	b2da      	uxtb	r2, r3
 80083ea:	8979      	ldrh	r1, [r7, #10]
 80083ec:	4b52      	ldr	r3, [pc, #328]	; (8008538 <HAL_I2C_Mem_Read+0x22c>)
 80083ee:	9300      	str	r3, [sp, #0]
 80083f0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80083f4:	68f8      	ldr	r0, [r7, #12]
 80083f6:	f000 fb91 	bl	8008b1c <I2C_TransferConfig>
 80083fa:	e00f      	b.n	800841c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008400:	b29a      	uxth	r2, r3
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800840a:	b2da      	uxtb	r2, r3
 800840c:	8979      	ldrh	r1, [r7, #10]
 800840e:	4b4a      	ldr	r3, [pc, #296]	; (8008538 <HAL_I2C_Mem_Read+0x22c>)
 8008410:	9300      	str	r3, [sp, #0]
 8008412:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008416:	68f8      	ldr	r0, [r7, #12]
 8008418:	f000 fb80 	bl	8008b1c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800841c:	697b      	ldr	r3, [r7, #20]
 800841e:	9300      	str	r3, [sp, #0]
 8008420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008422:	2200      	movs	r2, #0
 8008424:	2104      	movs	r1, #4
 8008426:	68f8      	ldr	r0, [r7, #12]
 8008428:	f000 f956 	bl	80086d8 <I2C_WaitOnFlagUntilTimeout>
 800842c:	4603      	mov	r3, r0
 800842e:	2b00      	cmp	r3, #0
 8008430:	d001      	beq.n	8008436 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8008432:	2301      	movs	r3, #1
 8008434:	e07c      	b.n	8008530 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008440:	b2d2      	uxtb	r2, r2
 8008442:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008448:	1c5a      	adds	r2, r3, #1
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008452:	3b01      	subs	r3, #1
 8008454:	b29a      	uxth	r2, r3
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800845e:	b29b      	uxth	r3, r3
 8008460:	3b01      	subs	r3, #1
 8008462:	b29a      	uxth	r2, r3
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800846c:	b29b      	uxth	r3, r3
 800846e:	2b00      	cmp	r3, #0
 8008470:	d034      	beq.n	80084dc <HAL_I2C_Mem_Read+0x1d0>
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008476:	2b00      	cmp	r3, #0
 8008478:	d130      	bne.n	80084dc <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800847a:	697b      	ldr	r3, [r7, #20]
 800847c:	9300      	str	r3, [sp, #0]
 800847e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008480:	2200      	movs	r2, #0
 8008482:	2180      	movs	r1, #128	; 0x80
 8008484:	68f8      	ldr	r0, [r7, #12]
 8008486:	f000 f927 	bl	80086d8 <I2C_WaitOnFlagUntilTimeout>
 800848a:	4603      	mov	r3, r0
 800848c:	2b00      	cmp	r3, #0
 800848e:	d001      	beq.n	8008494 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8008490:	2301      	movs	r3, #1
 8008492:	e04d      	b.n	8008530 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008498:	b29b      	uxth	r3, r3
 800849a:	2bff      	cmp	r3, #255	; 0xff
 800849c:	d90e      	bls.n	80084bc <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	22ff      	movs	r2, #255	; 0xff
 80084a2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80084a8:	b2da      	uxtb	r2, r3
 80084aa:	8979      	ldrh	r1, [r7, #10]
 80084ac:	2300      	movs	r3, #0
 80084ae:	9300      	str	r3, [sp, #0]
 80084b0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80084b4:	68f8      	ldr	r0, [r7, #12]
 80084b6:	f000 fb31 	bl	8008b1c <I2C_TransferConfig>
 80084ba:	e00f      	b.n	80084dc <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80084c0:	b29a      	uxth	r2, r3
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80084ca:	b2da      	uxtb	r2, r3
 80084cc:	8979      	ldrh	r1, [r7, #10]
 80084ce:	2300      	movs	r3, #0
 80084d0:	9300      	str	r3, [sp, #0]
 80084d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80084d6:	68f8      	ldr	r0, [r7, #12]
 80084d8:	f000 fb20 	bl	8008b1c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80084e0:	b29b      	uxth	r3, r3
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d19a      	bne.n	800841c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80084e6:	697a      	ldr	r2, [r7, #20]
 80084e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80084ea:	68f8      	ldr	r0, [r7, #12]
 80084ec:	f000 f974 	bl	80087d8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80084f0:	4603      	mov	r3, r0
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d001      	beq.n	80084fa <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80084f6:	2301      	movs	r3, #1
 80084f8:	e01a      	b.n	8008530 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	2220      	movs	r2, #32
 8008500:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	6859      	ldr	r1, [r3, #4]
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	681a      	ldr	r2, [r3, #0]
 800850c:	4b0b      	ldr	r3, [pc, #44]	; (800853c <HAL_I2C_Mem_Read+0x230>)
 800850e:	400b      	ands	r3, r1
 8008510:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	2220      	movs	r2, #32
 8008516:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	2200      	movs	r2, #0
 800851e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	2200      	movs	r2, #0
 8008526:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800852a:	2300      	movs	r3, #0
 800852c:	e000      	b.n	8008530 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800852e:	2302      	movs	r3, #2
  }
}
 8008530:	4618      	mov	r0, r3
 8008532:	3718      	adds	r7, #24
 8008534:	46bd      	mov	sp, r7
 8008536:	bd80      	pop	{r7, pc}
 8008538:	80002400 	.word	0x80002400
 800853c:	fe00e800 	.word	0xfe00e800

08008540 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8008540:	b580      	push	{r7, lr}
 8008542:	b086      	sub	sp, #24
 8008544:	af02      	add	r7, sp, #8
 8008546:	60f8      	str	r0, [r7, #12]
 8008548:	4608      	mov	r0, r1
 800854a:	4611      	mov	r1, r2
 800854c:	461a      	mov	r2, r3
 800854e:	4603      	mov	r3, r0
 8008550:	817b      	strh	r3, [r7, #10]
 8008552:	460b      	mov	r3, r1
 8008554:	813b      	strh	r3, [r7, #8]
 8008556:	4613      	mov	r3, r2
 8008558:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800855a:	88fb      	ldrh	r3, [r7, #6]
 800855c:	b2da      	uxtb	r2, r3
 800855e:	8979      	ldrh	r1, [r7, #10]
 8008560:	4b20      	ldr	r3, [pc, #128]	; (80085e4 <I2C_RequestMemoryWrite+0xa4>)
 8008562:	9300      	str	r3, [sp, #0]
 8008564:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008568:	68f8      	ldr	r0, [r7, #12]
 800856a:	f000 fad7 	bl	8008b1c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800856e:	69fa      	ldr	r2, [r7, #28]
 8008570:	69b9      	ldr	r1, [r7, #24]
 8008572:	68f8      	ldr	r0, [r7, #12]
 8008574:	f000 f8f0 	bl	8008758 <I2C_WaitOnTXISFlagUntilTimeout>
 8008578:	4603      	mov	r3, r0
 800857a:	2b00      	cmp	r3, #0
 800857c:	d001      	beq.n	8008582 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800857e:	2301      	movs	r3, #1
 8008580:	e02c      	b.n	80085dc <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008582:	88fb      	ldrh	r3, [r7, #6]
 8008584:	2b01      	cmp	r3, #1
 8008586:	d105      	bne.n	8008594 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008588:	893b      	ldrh	r3, [r7, #8]
 800858a:	b2da      	uxtb	r2, r3
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	629a      	str	r2, [r3, #40]	; 0x28
 8008592:	e015      	b.n	80085c0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8008594:	893b      	ldrh	r3, [r7, #8]
 8008596:	0a1b      	lsrs	r3, r3, #8
 8008598:	b29b      	uxth	r3, r3
 800859a:	b2da      	uxtb	r2, r3
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80085a2:	69fa      	ldr	r2, [r7, #28]
 80085a4:	69b9      	ldr	r1, [r7, #24]
 80085a6:	68f8      	ldr	r0, [r7, #12]
 80085a8:	f000 f8d6 	bl	8008758 <I2C_WaitOnTXISFlagUntilTimeout>
 80085ac:	4603      	mov	r3, r0
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d001      	beq.n	80085b6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80085b2:	2301      	movs	r3, #1
 80085b4:	e012      	b.n	80085dc <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80085b6:	893b      	ldrh	r3, [r7, #8]
 80085b8:	b2da      	uxtb	r2, r3
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80085c0:	69fb      	ldr	r3, [r7, #28]
 80085c2:	9300      	str	r3, [sp, #0]
 80085c4:	69bb      	ldr	r3, [r7, #24]
 80085c6:	2200      	movs	r2, #0
 80085c8:	2180      	movs	r1, #128	; 0x80
 80085ca:	68f8      	ldr	r0, [r7, #12]
 80085cc:	f000 f884 	bl	80086d8 <I2C_WaitOnFlagUntilTimeout>
 80085d0:	4603      	mov	r3, r0
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d001      	beq.n	80085da <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80085d6:	2301      	movs	r3, #1
 80085d8:	e000      	b.n	80085dc <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80085da:	2300      	movs	r3, #0
}
 80085dc:	4618      	mov	r0, r3
 80085de:	3710      	adds	r7, #16
 80085e0:	46bd      	mov	sp, r7
 80085e2:	bd80      	pop	{r7, pc}
 80085e4:	80002000 	.word	0x80002000

080085e8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80085e8:	b580      	push	{r7, lr}
 80085ea:	b086      	sub	sp, #24
 80085ec:	af02      	add	r7, sp, #8
 80085ee:	60f8      	str	r0, [r7, #12]
 80085f0:	4608      	mov	r0, r1
 80085f2:	4611      	mov	r1, r2
 80085f4:	461a      	mov	r2, r3
 80085f6:	4603      	mov	r3, r0
 80085f8:	817b      	strh	r3, [r7, #10]
 80085fa:	460b      	mov	r3, r1
 80085fc:	813b      	strh	r3, [r7, #8]
 80085fe:	4613      	mov	r3, r2
 8008600:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8008602:	88fb      	ldrh	r3, [r7, #6]
 8008604:	b2da      	uxtb	r2, r3
 8008606:	8979      	ldrh	r1, [r7, #10]
 8008608:	4b20      	ldr	r3, [pc, #128]	; (800868c <I2C_RequestMemoryRead+0xa4>)
 800860a:	9300      	str	r3, [sp, #0]
 800860c:	2300      	movs	r3, #0
 800860e:	68f8      	ldr	r0, [r7, #12]
 8008610:	f000 fa84 	bl	8008b1c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008614:	69fa      	ldr	r2, [r7, #28]
 8008616:	69b9      	ldr	r1, [r7, #24]
 8008618:	68f8      	ldr	r0, [r7, #12]
 800861a:	f000 f89d 	bl	8008758 <I2C_WaitOnTXISFlagUntilTimeout>
 800861e:	4603      	mov	r3, r0
 8008620:	2b00      	cmp	r3, #0
 8008622:	d001      	beq.n	8008628 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8008624:	2301      	movs	r3, #1
 8008626:	e02c      	b.n	8008682 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008628:	88fb      	ldrh	r3, [r7, #6]
 800862a:	2b01      	cmp	r3, #1
 800862c:	d105      	bne.n	800863a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800862e:	893b      	ldrh	r3, [r7, #8]
 8008630:	b2da      	uxtb	r2, r3
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	629a      	str	r2, [r3, #40]	; 0x28
 8008638:	e015      	b.n	8008666 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800863a:	893b      	ldrh	r3, [r7, #8]
 800863c:	0a1b      	lsrs	r3, r3, #8
 800863e:	b29b      	uxth	r3, r3
 8008640:	b2da      	uxtb	r2, r3
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008648:	69fa      	ldr	r2, [r7, #28]
 800864a:	69b9      	ldr	r1, [r7, #24]
 800864c:	68f8      	ldr	r0, [r7, #12]
 800864e:	f000 f883 	bl	8008758 <I2C_WaitOnTXISFlagUntilTimeout>
 8008652:	4603      	mov	r3, r0
 8008654:	2b00      	cmp	r3, #0
 8008656:	d001      	beq.n	800865c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8008658:	2301      	movs	r3, #1
 800865a:	e012      	b.n	8008682 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800865c:	893b      	ldrh	r3, [r7, #8]
 800865e:	b2da      	uxtb	r2, r3
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8008666:	69fb      	ldr	r3, [r7, #28]
 8008668:	9300      	str	r3, [sp, #0]
 800866a:	69bb      	ldr	r3, [r7, #24]
 800866c:	2200      	movs	r2, #0
 800866e:	2140      	movs	r1, #64	; 0x40
 8008670:	68f8      	ldr	r0, [r7, #12]
 8008672:	f000 f831 	bl	80086d8 <I2C_WaitOnFlagUntilTimeout>
 8008676:	4603      	mov	r3, r0
 8008678:	2b00      	cmp	r3, #0
 800867a:	d001      	beq.n	8008680 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800867c:	2301      	movs	r3, #1
 800867e:	e000      	b.n	8008682 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8008680:	2300      	movs	r3, #0
}
 8008682:	4618      	mov	r0, r3
 8008684:	3710      	adds	r7, #16
 8008686:	46bd      	mov	sp, r7
 8008688:	bd80      	pop	{r7, pc}
 800868a:	bf00      	nop
 800868c:	80002000 	.word	0x80002000

08008690 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8008690:	b480      	push	{r7}
 8008692:	b083      	sub	sp, #12
 8008694:	af00      	add	r7, sp, #0
 8008696:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	699b      	ldr	r3, [r3, #24]
 800869e:	f003 0302 	and.w	r3, r3, #2
 80086a2:	2b02      	cmp	r3, #2
 80086a4:	d103      	bne.n	80086ae <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	2200      	movs	r2, #0
 80086ac:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	699b      	ldr	r3, [r3, #24]
 80086b4:	f003 0301 	and.w	r3, r3, #1
 80086b8:	2b01      	cmp	r3, #1
 80086ba:	d007      	beq.n	80086cc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	699a      	ldr	r2, [r3, #24]
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	f042 0201 	orr.w	r2, r2, #1
 80086ca:	619a      	str	r2, [r3, #24]
  }
}
 80086cc:	bf00      	nop
 80086ce:	370c      	adds	r7, #12
 80086d0:	46bd      	mov	sp, r7
 80086d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d6:	4770      	bx	lr

080086d8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80086d8:	b580      	push	{r7, lr}
 80086da:	b084      	sub	sp, #16
 80086dc:	af00      	add	r7, sp, #0
 80086de:	60f8      	str	r0, [r7, #12]
 80086e0:	60b9      	str	r1, [r7, #8]
 80086e2:	603b      	str	r3, [r7, #0]
 80086e4:	4613      	mov	r3, r2
 80086e6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80086e8:	e022      	b.n	8008730 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80086ea:	683b      	ldr	r3, [r7, #0]
 80086ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80086f0:	d01e      	beq.n	8008730 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80086f2:	f7fd ffdb 	bl	80066ac <HAL_GetTick>
 80086f6:	4602      	mov	r2, r0
 80086f8:	69bb      	ldr	r3, [r7, #24]
 80086fa:	1ad3      	subs	r3, r2, r3
 80086fc:	683a      	ldr	r2, [r7, #0]
 80086fe:	429a      	cmp	r2, r3
 8008700:	d302      	bcc.n	8008708 <I2C_WaitOnFlagUntilTimeout+0x30>
 8008702:	683b      	ldr	r3, [r7, #0]
 8008704:	2b00      	cmp	r3, #0
 8008706:	d113      	bne.n	8008730 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800870c:	f043 0220 	orr.w	r2, r3, #32
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	2220      	movs	r2, #32
 8008718:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	2200      	movs	r2, #0
 8008720:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	2200      	movs	r2, #0
 8008728:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800872c:	2301      	movs	r3, #1
 800872e:	e00f      	b.n	8008750 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	699a      	ldr	r2, [r3, #24]
 8008736:	68bb      	ldr	r3, [r7, #8]
 8008738:	4013      	ands	r3, r2
 800873a:	68ba      	ldr	r2, [r7, #8]
 800873c:	429a      	cmp	r2, r3
 800873e:	bf0c      	ite	eq
 8008740:	2301      	moveq	r3, #1
 8008742:	2300      	movne	r3, #0
 8008744:	b2db      	uxtb	r3, r3
 8008746:	461a      	mov	r2, r3
 8008748:	79fb      	ldrb	r3, [r7, #7]
 800874a:	429a      	cmp	r2, r3
 800874c:	d0cd      	beq.n	80086ea <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800874e:	2300      	movs	r3, #0
}
 8008750:	4618      	mov	r0, r3
 8008752:	3710      	adds	r7, #16
 8008754:	46bd      	mov	sp, r7
 8008756:	bd80      	pop	{r7, pc}

08008758 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008758:	b580      	push	{r7, lr}
 800875a:	b084      	sub	sp, #16
 800875c:	af00      	add	r7, sp, #0
 800875e:	60f8      	str	r0, [r7, #12]
 8008760:	60b9      	str	r1, [r7, #8]
 8008762:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008764:	e02c      	b.n	80087c0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008766:	687a      	ldr	r2, [r7, #4]
 8008768:	68b9      	ldr	r1, [r7, #8]
 800876a:	68f8      	ldr	r0, [r7, #12]
 800876c:	f000 f8ea 	bl	8008944 <I2C_IsErrorOccurred>
 8008770:	4603      	mov	r3, r0
 8008772:	2b00      	cmp	r3, #0
 8008774:	d001      	beq.n	800877a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008776:	2301      	movs	r3, #1
 8008778:	e02a      	b.n	80087d0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800877a:	68bb      	ldr	r3, [r7, #8]
 800877c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008780:	d01e      	beq.n	80087c0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008782:	f7fd ff93 	bl	80066ac <HAL_GetTick>
 8008786:	4602      	mov	r2, r0
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	1ad3      	subs	r3, r2, r3
 800878c:	68ba      	ldr	r2, [r7, #8]
 800878e:	429a      	cmp	r2, r3
 8008790:	d302      	bcc.n	8008798 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8008792:	68bb      	ldr	r3, [r7, #8]
 8008794:	2b00      	cmp	r3, #0
 8008796:	d113      	bne.n	80087c0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800879c:	f043 0220 	orr.w	r2, r3, #32
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	2220      	movs	r2, #32
 80087a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	2200      	movs	r2, #0
 80087b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	2200      	movs	r2, #0
 80087b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80087bc:	2301      	movs	r3, #1
 80087be:	e007      	b.n	80087d0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	699b      	ldr	r3, [r3, #24]
 80087c6:	f003 0302 	and.w	r3, r3, #2
 80087ca:	2b02      	cmp	r3, #2
 80087cc:	d1cb      	bne.n	8008766 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80087ce:	2300      	movs	r3, #0
}
 80087d0:	4618      	mov	r0, r3
 80087d2:	3710      	adds	r7, #16
 80087d4:	46bd      	mov	sp, r7
 80087d6:	bd80      	pop	{r7, pc}

080087d8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80087d8:	b580      	push	{r7, lr}
 80087da:	b084      	sub	sp, #16
 80087dc:	af00      	add	r7, sp, #0
 80087de:	60f8      	str	r0, [r7, #12]
 80087e0:	60b9      	str	r1, [r7, #8]
 80087e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80087e4:	e028      	b.n	8008838 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80087e6:	687a      	ldr	r2, [r7, #4]
 80087e8:	68b9      	ldr	r1, [r7, #8]
 80087ea:	68f8      	ldr	r0, [r7, #12]
 80087ec:	f000 f8aa 	bl	8008944 <I2C_IsErrorOccurred>
 80087f0:	4603      	mov	r3, r0
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d001      	beq.n	80087fa <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80087f6:	2301      	movs	r3, #1
 80087f8:	e026      	b.n	8008848 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80087fa:	f7fd ff57 	bl	80066ac <HAL_GetTick>
 80087fe:	4602      	mov	r2, r0
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	1ad3      	subs	r3, r2, r3
 8008804:	68ba      	ldr	r2, [r7, #8]
 8008806:	429a      	cmp	r2, r3
 8008808:	d302      	bcc.n	8008810 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800880a:	68bb      	ldr	r3, [r7, #8]
 800880c:	2b00      	cmp	r3, #0
 800880e:	d113      	bne.n	8008838 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008814:	f043 0220 	orr.w	r2, r3, #32
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	2220      	movs	r2, #32
 8008820:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	2200      	movs	r2, #0
 8008828:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	2200      	movs	r2, #0
 8008830:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8008834:	2301      	movs	r3, #1
 8008836:	e007      	b.n	8008848 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	699b      	ldr	r3, [r3, #24]
 800883e:	f003 0320 	and.w	r3, r3, #32
 8008842:	2b20      	cmp	r3, #32
 8008844:	d1cf      	bne.n	80087e6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8008846:	2300      	movs	r3, #0
}
 8008848:	4618      	mov	r0, r3
 800884a:	3710      	adds	r7, #16
 800884c:	46bd      	mov	sp, r7
 800884e:	bd80      	pop	{r7, pc}

08008850 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008850:	b580      	push	{r7, lr}
 8008852:	b084      	sub	sp, #16
 8008854:	af00      	add	r7, sp, #0
 8008856:	60f8      	str	r0, [r7, #12]
 8008858:	60b9      	str	r1, [r7, #8]
 800885a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800885c:	e064      	b.n	8008928 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800885e:	687a      	ldr	r2, [r7, #4]
 8008860:	68b9      	ldr	r1, [r7, #8]
 8008862:	68f8      	ldr	r0, [r7, #12]
 8008864:	f000 f86e 	bl	8008944 <I2C_IsErrorOccurred>
 8008868:	4603      	mov	r3, r0
 800886a:	2b00      	cmp	r3, #0
 800886c:	d001      	beq.n	8008872 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800886e:	2301      	movs	r3, #1
 8008870:	e062      	b.n	8008938 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	699b      	ldr	r3, [r3, #24]
 8008878:	f003 0320 	and.w	r3, r3, #32
 800887c:	2b20      	cmp	r3, #32
 800887e:	d138      	bne.n	80088f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	699b      	ldr	r3, [r3, #24]
 8008886:	f003 0304 	and.w	r3, r3, #4
 800888a:	2b04      	cmp	r3, #4
 800888c:	d105      	bne.n	800889a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008892:	2b00      	cmp	r3, #0
 8008894:	d001      	beq.n	800889a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8008896:	2300      	movs	r3, #0
 8008898:	e04e      	b.n	8008938 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	699b      	ldr	r3, [r3, #24]
 80088a0:	f003 0310 	and.w	r3, r3, #16
 80088a4:	2b10      	cmp	r3, #16
 80088a6:	d107      	bne.n	80088b8 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	2210      	movs	r2, #16
 80088ae:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	2204      	movs	r2, #4
 80088b4:	645a      	str	r2, [r3, #68]	; 0x44
 80088b6:	e002      	b.n	80088be <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	2200      	movs	r2, #0
 80088bc:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	2220      	movs	r2, #32
 80088c4:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	6859      	ldr	r1, [r3, #4]
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	681a      	ldr	r2, [r3, #0]
 80088d0:	4b1b      	ldr	r3, [pc, #108]	; (8008940 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 80088d2:	400b      	ands	r3, r1
 80088d4:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	2220      	movs	r2, #32
 80088da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	2200      	movs	r2, #0
 80088e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	2200      	movs	r2, #0
 80088ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80088ee:	2301      	movs	r3, #1
 80088f0:	e022      	b.n	8008938 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80088f2:	f7fd fedb 	bl	80066ac <HAL_GetTick>
 80088f6:	4602      	mov	r2, r0
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	1ad3      	subs	r3, r2, r3
 80088fc:	68ba      	ldr	r2, [r7, #8]
 80088fe:	429a      	cmp	r2, r3
 8008900:	d302      	bcc.n	8008908 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8008902:	68bb      	ldr	r3, [r7, #8]
 8008904:	2b00      	cmp	r3, #0
 8008906:	d10f      	bne.n	8008928 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800890c:	f043 0220 	orr.w	r2, r3, #32
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	2220      	movs	r2, #32
 8008918:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	2200      	movs	r2, #0
 8008920:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8008924:	2301      	movs	r3, #1
 8008926:	e007      	b.n	8008938 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	699b      	ldr	r3, [r3, #24]
 800892e:	f003 0304 	and.w	r3, r3, #4
 8008932:	2b04      	cmp	r3, #4
 8008934:	d193      	bne.n	800885e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8008936:	2300      	movs	r3, #0
}
 8008938:	4618      	mov	r0, r3
 800893a:	3710      	adds	r7, #16
 800893c:	46bd      	mov	sp, r7
 800893e:	bd80      	pop	{r7, pc}
 8008940:	fe00e800 	.word	0xfe00e800

08008944 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008944:	b580      	push	{r7, lr}
 8008946:	b08a      	sub	sp, #40	; 0x28
 8008948:	af00      	add	r7, sp, #0
 800894a:	60f8      	str	r0, [r7, #12]
 800894c:	60b9      	str	r1, [r7, #8]
 800894e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008950:	2300      	movs	r3, #0
 8008952:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	699b      	ldr	r3, [r3, #24]
 800895c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800895e:	2300      	movs	r3, #0
 8008960:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8008966:	69bb      	ldr	r3, [r7, #24]
 8008968:	f003 0310 	and.w	r3, r3, #16
 800896c:	2b00      	cmp	r3, #0
 800896e:	d075      	beq.n	8008a5c <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	2210      	movs	r2, #16
 8008976:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008978:	e056      	b.n	8008a28 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800897a:	68bb      	ldr	r3, [r7, #8]
 800897c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008980:	d052      	beq.n	8008a28 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8008982:	f7fd fe93 	bl	80066ac <HAL_GetTick>
 8008986:	4602      	mov	r2, r0
 8008988:	69fb      	ldr	r3, [r7, #28]
 800898a:	1ad3      	subs	r3, r2, r3
 800898c:	68ba      	ldr	r2, [r7, #8]
 800898e:	429a      	cmp	r2, r3
 8008990:	d302      	bcc.n	8008998 <I2C_IsErrorOccurred+0x54>
 8008992:	68bb      	ldr	r3, [r7, #8]
 8008994:	2b00      	cmp	r3, #0
 8008996:	d147      	bne.n	8008a28 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	685b      	ldr	r3, [r3, #4]
 800899e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80089a2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80089aa:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	699b      	ldr	r3, [r3, #24]
 80089b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80089b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80089ba:	d12e      	bne.n	8008a1a <I2C_IsErrorOccurred+0xd6>
 80089bc:	697b      	ldr	r3, [r7, #20]
 80089be:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80089c2:	d02a      	beq.n	8008a1a <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80089c4:	7cfb      	ldrb	r3, [r7, #19]
 80089c6:	2b20      	cmp	r3, #32
 80089c8:	d027      	beq.n	8008a1a <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	685a      	ldr	r2, [r3, #4]
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80089d8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80089da:	f7fd fe67 	bl	80066ac <HAL_GetTick>
 80089de:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80089e0:	e01b      	b.n	8008a1a <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80089e2:	f7fd fe63 	bl	80066ac <HAL_GetTick>
 80089e6:	4602      	mov	r2, r0
 80089e8:	69fb      	ldr	r3, [r7, #28]
 80089ea:	1ad3      	subs	r3, r2, r3
 80089ec:	2b19      	cmp	r3, #25
 80089ee:	d914      	bls.n	8008a1a <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089f4:	f043 0220 	orr.w	r2, r3, #32
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	2220      	movs	r2, #32
 8008a00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	2200      	movs	r2, #0
 8008a08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	2200      	movs	r2, #0
 8008a10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8008a14:	2301      	movs	r3, #1
 8008a16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	699b      	ldr	r3, [r3, #24]
 8008a20:	f003 0320 	and.w	r3, r3, #32
 8008a24:	2b20      	cmp	r3, #32
 8008a26:	d1dc      	bne.n	80089e2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	699b      	ldr	r3, [r3, #24]
 8008a2e:	f003 0320 	and.w	r3, r3, #32
 8008a32:	2b20      	cmp	r3, #32
 8008a34:	d003      	beq.n	8008a3e <I2C_IsErrorOccurred+0xfa>
 8008a36:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d09d      	beq.n	800897a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8008a3e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d103      	bne.n	8008a4e <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	2220      	movs	r2, #32
 8008a4c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8008a4e:	6a3b      	ldr	r3, [r7, #32]
 8008a50:	f043 0304 	orr.w	r3, r3, #4
 8008a54:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8008a56:	2301      	movs	r3, #1
 8008a58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	699b      	ldr	r3, [r3, #24]
 8008a62:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8008a64:	69bb      	ldr	r3, [r7, #24]
 8008a66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d00b      	beq.n	8008a86 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8008a6e:	6a3b      	ldr	r3, [r7, #32]
 8008a70:	f043 0301 	orr.w	r3, r3, #1
 8008a74:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008a7e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008a80:	2301      	movs	r3, #1
 8008a82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8008a86:	69bb      	ldr	r3, [r7, #24]
 8008a88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d00b      	beq.n	8008aa8 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8008a90:	6a3b      	ldr	r3, [r7, #32]
 8008a92:	f043 0308 	orr.w	r3, r3, #8
 8008a96:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008aa0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008aa2:	2301      	movs	r3, #1
 8008aa4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8008aa8:	69bb      	ldr	r3, [r7, #24]
 8008aaa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d00b      	beq.n	8008aca <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8008ab2:	6a3b      	ldr	r3, [r7, #32]
 8008ab4:	f043 0302 	orr.w	r3, r3, #2
 8008ab8:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008ac2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008ac4:	2301      	movs	r3, #1
 8008ac6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8008aca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d01c      	beq.n	8008b0c <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008ad2:	68f8      	ldr	r0, [r7, #12]
 8008ad4:	f7ff fddc 	bl	8008690 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	6859      	ldr	r1, [r3, #4]
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	681a      	ldr	r2, [r3, #0]
 8008ae2:	4b0d      	ldr	r3, [pc, #52]	; (8008b18 <I2C_IsErrorOccurred+0x1d4>)
 8008ae4:	400b      	ands	r3, r1
 8008ae6:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008aec:	6a3b      	ldr	r3, [r7, #32]
 8008aee:	431a      	orrs	r2, r3
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	2220      	movs	r2, #32
 8008af8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	2200      	movs	r2, #0
 8008b00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	2200      	movs	r2, #0
 8008b08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8008b0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8008b10:	4618      	mov	r0, r3
 8008b12:	3728      	adds	r7, #40	; 0x28
 8008b14:	46bd      	mov	sp, r7
 8008b16:	bd80      	pop	{r7, pc}
 8008b18:	fe00e800 	.word	0xfe00e800

08008b1c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8008b1c:	b480      	push	{r7}
 8008b1e:	b087      	sub	sp, #28
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	60f8      	str	r0, [r7, #12]
 8008b24:	607b      	str	r3, [r7, #4]
 8008b26:	460b      	mov	r3, r1
 8008b28:	817b      	strh	r3, [r7, #10]
 8008b2a:	4613      	mov	r3, r2
 8008b2c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008b2e:	897b      	ldrh	r3, [r7, #10]
 8008b30:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008b34:	7a7b      	ldrb	r3, [r7, #9]
 8008b36:	041b      	lsls	r3, r3, #16
 8008b38:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008b3c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008b42:	6a3b      	ldr	r3, [r7, #32]
 8008b44:	4313      	orrs	r3, r2
 8008b46:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008b4a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	685a      	ldr	r2, [r3, #4]
 8008b52:	6a3b      	ldr	r3, [r7, #32]
 8008b54:	0d5b      	lsrs	r3, r3, #21
 8008b56:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8008b5a:	4b08      	ldr	r3, [pc, #32]	; (8008b7c <I2C_TransferConfig+0x60>)
 8008b5c:	430b      	orrs	r3, r1
 8008b5e:	43db      	mvns	r3, r3
 8008b60:	ea02 0103 	and.w	r1, r2, r3
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	697a      	ldr	r2, [r7, #20]
 8008b6a:	430a      	orrs	r2, r1
 8008b6c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8008b6e:	bf00      	nop
 8008b70:	371c      	adds	r7, #28
 8008b72:	46bd      	mov	sp, r7
 8008b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b78:	4770      	bx	lr
 8008b7a:	bf00      	nop
 8008b7c:	03ff63ff 	.word	0x03ff63ff

08008b80 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008b80:	b480      	push	{r7}
 8008b82:	b083      	sub	sp, #12
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	6078      	str	r0, [r7, #4]
 8008b88:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008b90:	b2db      	uxtb	r3, r3
 8008b92:	2b20      	cmp	r3, #32
 8008b94:	d138      	bne.n	8008c08 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008b9c:	2b01      	cmp	r3, #1
 8008b9e:	d101      	bne.n	8008ba4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8008ba0:	2302      	movs	r3, #2
 8008ba2:	e032      	b.n	8008c0a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	2201      	movs	r2, #1
 8008ba8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	2224      	movs	r2, #36	; 0x24
 8008bb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	681a      	ldr	r2, [r3, #0]
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	f022 0201 	bic.w	r2, r2, #1
 8008bc2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	681a      	ldr	r2, [r3, #0]
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008bd2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	6819      	ldr	r1, [r3, #0]
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	683a      	ldr	r2, [r7, #0]
 8008be0:	430a      	orrs	r2, r1
 8008be2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	681a      	ldr	r2, [r3, #0]
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	f042 0201 	orr.w	r2, r2, #1
 8008bf2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	2220      	movs	r2, #32
 8008bf8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	2200      	movs	r2, #0
 8008c00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008c04:	2300      	movs	r3, #0
 8008c06:	e000      	b.n	8008c0a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008c08:	2302      	movs	r3, #2
  }
}
 8008c0a:	4618      	mov	r0, r3
 8008c0c:	370c      	adds	r7, #12
 8008c0e:	46bd      	mov	sp, r7
 8008c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c14:	4770      	bx	lr

08008c16 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8008c16:	b480      	push	{r7}
 8008c18:	b085      	sub	sp, #20
 8008c1a:	af00      	add	r7, sp, #0
 8008c1c:	6078      	str	r0, [r7, #4]
 8008c1e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008c26:	b2db      	uxtb	r3, r3
 8008c28:	2b20      	cmp	r3, #32
 8008c2a:	d139      	bne.n	8008ca0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008c32:	2b01      	cmp	r3, #1
 8008c34:	d101      	bne.n	8008c3a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8008c36:	2302      	movs	r3, #2
 8008c38:	e033      	b.n	8008ca2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	2201      	movs	r2, #1
 8008c3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	2224      	movs	r2, #36	; 0x24
 8008c46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	681a      	ldr	r2, [r3, #0]
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	f022 0201 	bic.w	r2, r2, #1
 8008c58:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8008c68:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8008c6a:	683b      	ldr	r3, [r7, #0]
 8008c6c:	021b      	lsls	r3, r3, #8
 8008c6e:	68fa      	ldr	r2, [r7, #12]
 8008c70:	4313      	orrs	r3, r2
 8008c72:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	68fa      	ldr	r2, [r7, #12]
 8008c7a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	681a      	ldr	r2, [r3, #0]
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	f042 0201 	orr.w	r2, r2, #1
 8008c8a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	2220      	movs	r2, #32
 8008c90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	2200      	movs	r2, #0
 8008c98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008c9c:	2300      	movs	r3, #0
 8008c9e:	e000      	b.n	8008ca2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8008ca0:	2302      	movs	r3, #2
  }
}
 8008ca2:	4618      	mov	r0, r3
 8008ca4:	3714      	adds	r7, #20
 8008ca6:	46bd      	mov	sp, r7
 8008ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cac:	4770      	bx	lr
	...

08008cb0 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 8008cb0:	b580      	push	{r7, lr}
 8008cb2:	b084      	sub	sp, #16
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 8008cb8:	2300      	movs	r3, #0
 8008cba:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d01e      	beq.n	8008d00 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 8008cc2:	4b13      	ldr	r3, [pc, #76]	; (8008d10 <HAL_IPCC_Init+0x60>)
 8008cc4:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008ccc:	b2db      	uxtb	r3, r3
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d102      	bne.n	8008cd8 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 8008cd2:	6878      	ldr	r0, [r7, #4]
 8008cd4:	f7fd f934 	bl	8005f40 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 8008cd8:	68b8      	ldr	r0, [r7, #8]
 8008cda:	f000 f85b 	bl	8008d94 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 8008cde:	68bb      	ldr	r3, [r7, #8]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	f043 1201 	orr.w	r2, r3, #65537	; 0x10001
 8008ce6:	68bb      	ldr	r3, [r7, #8]
 8008ce8:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 8008cea:	6878      	ldr	r0, [r7, #4]
 8008cec:	f000 f82c 	bl	8008d48 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	2200      	movs	r2, #0
 8008cf4:	635a      	str	r2, [r3, #52]	; 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	2201      	movs	r2, #1
 8008cfa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8008cfe:	e001      	b.n	8008d04 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 8008d00:	2301      	movs	r3, #1
 8008d02:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 8008d04:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d06:	4618      	mov	r0, r3
 8008d08:	3710      	adds	r7, #16
 8008d0a:	46bd      	mov	sp, r7
 8008d0c:	bd80      	pop	{r7, pc}
 8008d0e:	bf00      	nop
 8008d10:	58000c00 	.word	0x58000c00

08008d14 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8008d14:	b480      	push	{r7}
 8008d16:	b085      	sub	sp, #20
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	60f8      	str	r0, [r7, #12]
 8008d1c:	60b9      	str	r1, [r7, #8]
 8008d1e:	4613      	mov	r3, r2
 8008d20:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 8008d22:	bf00      	nop
 8008d24:	3714      	adds	r7, #20
 8008d26:	46bd      	mov	sp, r7
 8008d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d2c:	4770      	bx	lr

08008d2e <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8008d2e:	b480      	push	{r7}
 8008d30:	b085      	sub	sp, #20
 8008d32:	af00      	add	r7, sp, #0
 8008d34:	60f8      	str	r0, [r7, #12]
 8008d36:	60b9      	str	r1, [r7, #8]
 8008d38:	4613      	mov	r3, r2
 8008d3a:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 8008d3c:	bf00      	nop
 8008d3e:	3714      	adds	r7, #20
 8008d40:	46bd      	mov	sp, r7
 8008d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d46:	4770      	bx	lr

08008d48 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 8008d48:	b480      	push	{r7}
 8008d4a:	b085      	sub	sp, #20
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8008d50:	2300      	movs	r3, #0
 8008d52:	60fb      	str	r3, [r7, #12]
 8008d54:	e00f      	b.n	8008d76 <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 8008d56:	687a      	ldr	r2, [r7, #4]
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	009b      	lsls	r3, r3, #2
 8008d5c:	4413      	add	r3, r2
 8008d5e:	4a0b      	ldr	r2, [pc, #44]	; (8008d8c <IPCC_SetDefaultCallbacks+0x44>)
 8008d60:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 8008d62:	687a      	ldr	r2, [r7, #4]
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	3306      	adds	r3, #6
 8008d68:	009b      	lsls	r3, r3, #2
 8008d6a:	4413      	add	r3, r2
 8008d6c:	4a08      	ldr	r2, [pc, #32]	; (8008d90 <IPCC_SetDefaultCallbacks+0x48>)
 8008d6e:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	3301      	adds	r3, #1
 8008d74:	60fb      	str	r3, [r7, #12]
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	2b05      	cmp	r3, #5
 8008d7a:	d9ec      	bls.n	8008d56 <IPCC_SetDefaultCallbacks+0xe>
  }
}
 8008d7c:	bf00      	nop
 8008d7e:	bf00      	nop
 8008d80:	3714      	adds	r7, #20
 8008d82:	46bd      	mov	sp, r7
 8008d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d88:	4770      	bx	lr
 8008d8a:	bf00      	nop
 8008d8c:	08008d15 	.word	0x08008d15
 8008d90:	08008d2f 	.word	0x08008d2f

08008d94 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 8008d94:	b480      	push	{r7}
 8008d96:	b083      	sub	sp, #12
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	2200      	movs	r2, #0
 8008da0:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	f04f 123f 	mov.w	r2, #4128831	; 0x3f003f
 8008da8:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	223f      	movs	r2, #63	; 0x3f
 8008dae:	609a      	str	r2, [r3, #8]
}
 8008db0:	bf00      	nop
 8008db2:	370c      	adds	r7, #12
 8008db4:	46bd      	mov	sp, r7
 8008db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dba:	4770      	bx	lr

08008dbc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8008dbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008dbe:	b08b      	sub	sp, #44	; 0x2c
 8008dc0:	af06      	add	r7, sp, #24
 8008dc2:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d101      	bne.n	8008dce <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8008dca:	2301      	movs	r3, #1
 8008dcc:	e0cb      	b.n	8008f66 <HAL_PCD_Init+0x1aa>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8008dd4:	b2db      	uxtb	r3, r3
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d106      	bne.n	8008de8 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	2200      	movs	r2, #0
 8008dde:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8008de2:	6878      	ldr	r0, [r7, #4]
 8008de4:	f7fd f9fc 	bl	80061e0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	2203      	movs	r2, #3
 8008dec:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	4618      	mov	r0, r3
 8008df6:	f004 fc79 	bl	800d6ec <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008dfa:	2300      	movs	r3, #0
 8008dfc:	73fb      	strb	r3, [r7, #15]
 8008dfe:	e040      	b.n	8008e82 <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8008e00:	7bfb      	ldrb	r3, [r7, #15]
 8008e02:	6879      	ldr	r1, [r7, #4]
 8008e04:	1c5a      	adds	r2, r3, #1
 8008e06:	4613      	mov	r3, r2
 8008e08:	009b      	lsls	r3, r3, #2
 8008e0a:	4413      	add	r3, r2
 8008e0c:	00db      	lsls	r3, r3, #3
 8008e0e:	440b      	add	r3, r1
 8008e10:	3301      	adds	r3, #1
 8008e12:	2201      	movs	r2, #1
 8008e14:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8008e16:	7bfb      	ldrb	r3, [r7, #15]
 8008e18:	6879      	ldr	r1, [r7, #4]
 8008e1a:	1c5a      	adds	r2, r3, #1
 8008e1c:	4613      	mov	r3, r2
 8008e1e:	009b      	lsls	r3, r3, #2
 8008e20:	4413      	add	r3, r2
 8008e22:	00db      	lsls	r3, r3, #3
 8008e24:	440b      	add	r3, r1
 8008e26:	7bfa      	ldrb	r2, [r7, #15]
 8008e28:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8008e2a:	7bfb      	ldrb	r3, [r7, #15]
 8008e2c:	6879      	ldr	r1, [r7, #4]
 8008e2e:	1c5a      	adds	r2, r3, #1
 8008e30:	4613      	mov	r3, r2
 8008e32:	009b      	lsls	r3, r3, #2
 8008e34:	4413      	add	r3, r2
 8008e36:	00db      	lsls	r3, r3, #3
 8008e38:	440b      	add	r3, r1
 8008e3a:	3303      	adds	r3, #3
 8008e3c:	2200      	movs	r2, #0
 8008e3e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8008e40:	7bfa      	ldrb	r2, [r7, #15]
 8008e42:	6879      	ldr	r1, [r7, #4]
 8008e44:	4613      	mov	r3, r2
 8008e46:	009b      	lsls	r3, r3, #2
 8008e48:	4413      	add	r3, r2
 8008e4a:	00db      	lsls	r3, r3, #3
 8008e4c:	440b      	add	r3, r1
 8008e4e:	3338      	adds	r3, #56	; 0x38
 8008e50:	2200      	movs	r2, #0
 8008e52:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8008e54:	7bfa      	ldrb	r2, [r7, #15]
 8008e56:	6879      	ldr	r1, [r7, #4]
 8008e58:	4613      	mov	r3, r2
 8008e5a:	009b      	lsls	r3, r3, #2
 8008e5c:	4413      	add	r3, r2
 8008e5e:	00db      	lsls	r3, r3, #3
 8008e60:	440b      	add	r3, r1
 8008e62:	333c      	adds	r3, #60	; 0x3c
 8008e64:	2200      	movs	r2, #0
 8008e66:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8008e68:	7bfa      	ldrb	r2, [r7, #15]
 8008e6a:	6879      	ldr	r1, [r7, #4]
 8008e6c:	4613      	mov	r3, r2
 8008e6e:	009b      	lsls	r3, r3, #2
 8008e70:	4413      	add	r3, r2
 8008e72:	00db      	lsls	r3, r3, #3
 8008e74:	440b      	add	r3, r1
 8008e76:	3340      	adds	r3, #64	; 0x40
 8008e78:	2200      	movs	r2, #0
 8008e7a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008e7c:	7bfb      	ldrb	r3, [r7, #15]
 8008e7e:	3301      	adds	r3, #1
 8008e80:	73fb      	strb	r3, [r7, #15]
 8008e82:	7bfa      	ldrb	r2, [r7, #15]
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	685b      	ldr	r3, [r3, #4]
 8008e88:	429a      	cmp	r2, r3
 8008e8a:	d3b9      	bcc.n	8008e00 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008e8c:	2300      	movs	r3, #0
 8008e8e:	73fb      	strb	r3, [r7, #15]
 8008e90:	e044      	b.n	8008f1c <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8008e92:	7bfa      	ldrb	r2, [r7, #15]
 8008e94:	6879      	ldr	r1, [r7, #4]
 8008e96:	4613      	mov	r3, r2
 8008e98:	009b      	lsls	r3, r3, #2
 8008e9a:	4413      	add	r3, r2
 8008e9c:	00db      	lsls	r3, r3, #3
 8008e9e:	440b      	add	r3, r1
 8008ea0:	f203 1369 	addw	r3, r3, #361	; 0x169
 8008ea4:	2200      	movs	r2, #0
 8008ea6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8008ea8:	7bfa      	ldrb	r2, [r7, #15]
 8008eaa:	6879      	ldr	r1, [r7, #4]
 8008eac:	4613      	mov	r3, r2
 8008eae:	009b      	lsls	r3, r3, #2
 8008eb0:	4413      	add	r3, r2
 8008eb2:	00db      	lsls	r3, r3, #3
 8008eb4:	440b      	add	r3, r1
 8008eb6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8008eba:	7bfa      	ldrb	r2, [r7, #15]
 8008ebc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8008ebe:	7bfa      	ldrb	r2, [r7, #15]
 8008ec0:	6879      	ldr	r1, [r7, #4]
 8008ec2:	4613      	mov	r3, r2
 8008ec4:	009b      	lsls	r3, r3, #2
 8008ec6:	4413      	add	r3, r2
 8008ec8:	00db      	lsls	r3, r3, #3
 8008eca:	440b      	add	r3, r1
 8008ecc:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8008ed0:	2200      	movs	r2, #0
 8008ed2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8008ed4:	7bfa      	ldrb	r2, [r7, #15]
 8008ed6:	6879      	ldr	r1, [r7, #4]
 8008ed8:	4613      	mov	r3, r2
 8008eda:	009b      	lsls	r3, r3, #2
 8008edc:	4413      	add	r3, r2
 8008ede:	00db      	lsls	r3, r3, #3
 8008ee0:	440b      	add	r3, r1
 8008ee2:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8008ee6:	2200      	movs	r2, #0
 8008ee8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8008eea:	7bfa      	ldrb	r2, [r7, #15]
 8008eec:	6879      	ldr	r1, [r7, #4]
 8008eee:	4613      	mov	r3, r2
 8008ef0:	009b      	lsls	r3, r3, #2
 8008ef2:	4413      	add	r3, r2
 8008ef4:	00db      	lsls	r3, r3, #3
 8008ef6:	440b      	add	r3, r1
 8008ef8:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8008efc:	2200      	movs	r2, #0
 8008efe:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8008f00:	7bfa      	ldrb	r2, [r7, #15]
 8008f02:	6879      	ldr	r1, [r7, #4]
 8008f04:	4613      	mov	r3, r2
 8008f06:	009b      	lsls	r3, r3, #2
 8008f08:	4413      	add	r3, r2
 8008f0a:	00db      	lsls	r3, r3, #3
 8008f0c:	440b      	add	r3, r1
 8008f0e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8008f12:	2200      	movs	r2, #0
 8008f14:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008f16:	7bfb      	ldrb	r3, [r7, #15]
 8008f18:	3301      	adds	r3, #1
 8008f1a:	73fb      	strb	r3, [r7, #15]
 8008f1c:	7bfa      	ldrb	r2, [r7, #15]
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	685b      	ldr	r3, [r3, #4]
 8008f22:	429a      	cmp	r2, r3
 8008f24:	d3b5      	bcc.n	8008e92 <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	603b      	str	r3, [r7, #0]
 8008f2c:	687e      	ldr	r6, [r7, #4]
 8008f2e:	466d      	mov	r5, sp
 8008f30:	f106 0410 	add.w	r4, r6, #16
 8008f34:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008f36:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008f38:	6823      	ldr	r3, [r4, #0]
 8008f3a:	602b      	str	r3, [r5, #0]
 8008f3c:	1d33      	adds	r3, r6, #4
 8008f3e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008f40:	6838      	ldr	r0, [r7, #0]
 8008f42:	f004 fbee 	bl	800d722 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	2200      	movs	r2, #0
 8008f4a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	2201      	movs	r2, #1
 8008f52:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	69db      	ldr	r3, [r3, #28]
 8008f5a:	2b01      	cmp	r3, #1
 8008f5c:	d102      	bne.n	8008f64 <HAL_PCD_Init+0x1a8>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8008f5e:	6878      	ldr	r0, [r7, #4]
 8008f60:	f000 f805 	bl	8008f6e <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8008f64:	2300      	movs	r3, #0
}
 8008f66:	4618      	mov	r0, r3
 8008f68:	3714      	adds	r7, #20
 8008f6a:	46bd      	mov	sp, r7
 8008f6c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008f6e <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8008f6e:	b480      	push	{r7}
 8008f70:	b085      	sub	sp, #20
 8008f72:	af00      	add	r7, sp, #0
 8008f74:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	2201      	movs	r2, #1
 8008f80:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	2200      	movs	r2, #0
 8008f88:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8008f92:	b29b      	uxth	r3, r3
 8008f94:	f043 0301 	orr.w	r3, r3, #1
 8008f98:	b29a      	uxth	r2, r3
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8008fa6:	b29b      	uxth	r3, r3
 8008fa8:	f043 0302 	orr.w	r3, r3, #2
 8008fac:	b29a      	uxth	r2, r3
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8008fb4:	2300      	movs	r3, #0
}
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	3714      	adds	r7, #20
 8008fba:	46bd      	mov	sp, r7
 8008fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc0:	4770      	bx	lr
	...

08008fc4 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8008fc4:	b480      	push	{r7}
 8008fc6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008fc8:	4b05      	ldr	r3, [pc, #20]	; (8008fe0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	4a04      	ldr	r2, [pc, #16]	; (8008fe0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8008fce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008fd2:	6013      	str	r3, [r2, #0]
}
 8008fd4:	bf00      	nop
 8008fd6:	46bd      	mov	sp, r7
 8008fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fdc:	4770      	bx	lr
 8008fde:	bf00      	nop
 8008fe0:	58000400 	.word	0x58000400

08008fe4 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8008fe4:	b480      	push	{r7}
 8008fe6:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8008fe8:	4b04      	ldr	r3, [pc, #16]	; (8008ffc <HAL_PWREx_GetVoltageRange+0x18>)
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8008ff0:	4618      	mov	r0, r3
 8008ff2:	46bd      	mov	sp, r7
 8008ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff8:	4770      	bx	lr
 8008ffa:	bf00      	nop
 8008ffc:	58000400 	.word	0x58000400

08009000 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8009000:	b480      	push	{r7}
 8009002:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8009004:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800900e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009012:	d101      	bne.n	8009018 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8009014:	2301      	movs	r3, #1
 8009016:	e000      	b.n	800901a <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8009018:	2300      	movs	r3, #0
}
 800901a:	4618      	mov	r0, r3
 800901c:	46bd      	mov	sp, r7
 800901e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009022:	4770      	bx	lr

08009024 <LL_RCC_HSE_Enable>:
{
 8009024:	b480      	push	{r7}
 8009026:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8009028:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009032:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009036:	6013      	str	r3, [r2, #0]
}
 8009038:	bf00      	nop
 800903a:	46bd      	mov	sp, r7
 800903c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009040:	4770      	bx	lr

08009042 <LL_RCC_HSE_Disable>:
{
 8009042:	b480      	push	{r7}
 8009044:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8009046:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009050:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009054:	6013      	str	r3, [r2, #0]
}
 8009056:	bf00      	nop
 8009058:	46bd      	mov	sp, r7
 800905a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800905e:	4770      	bx	lr

08009060 <LL_RCC_HSE_IsReady>:
{
 8009060:	b480      	push	{r7}
 8009062:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8009064:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800906e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009072:	d101      	bne.n	8009078 <LL_RCC_HSE_IsReady+0x18>
 8009074:	2301      	movs	r3, #1
 8009076:	e000      	b.n	800907a <LL_RCC_HSE_IsReady+0x1a>
 8009078:	2300      	movs	r3, #0
}
 800907a:	4618      	mov	r0, r3
 800907c:	46bd      	mov	sp, r7
 800907e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009082:	4770      	bx	lr

08009084 <LL_RCC_HSI_Enable>:
{
 8009084:	b480      	push	{r7}
 8009086:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8009088:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009092:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009096:	6013      	str	r3, [r2, #0]
}
 8009098:	bf00      	nop
 800909a:	46bd      	mov	sp, r7
 800909c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a0:	4770      	bx	lr

080090a2 <LL_RCC_HSI_Disable>:
{
 80090a2:	b480      	push	{r7}
 80090a4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80090a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80090b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80090b4:	6013      	str	r3, [r2, #0]
}
 80090b6:	bf00      	nop
 80090b8:	46bd      	mov	sp, r7
 80090ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090be:	4770      	bx	lr

080090c0 <LL_RCC_HSI_IsReady>:
{
 80090c0:	b480      	push	{r7}
 80090c2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80090c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80090ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80090d2:	d101      	bne.n	80090d8 <LL_RCC_HSI_IsReady+0x18>
 80090d4:	2301      	movs	r3, #1
 80090d6:	e000      	b.n	80090da <LL_RCC_HSI_IsReady+0x1a>
 80090d8:	2300      	movs	r3, #0
}
 80090da:	4618      	mov	r0, r3
 80090dc:	46bd      	mov	sp, r7
 80090de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e2:	4770      	bx	lr

080090e4 <LL_RCC_HSI_SetCalibTrimming>:
{
 80090e4:	b480      	push	{r7}
 80090e6:	b083      	sub	sp, #12
 80090e8:	af00      	add	r7, sp, #0
 80090ea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80090ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80090f0:	685b      	ldr	r3, [r3, #4]
 80090f2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	061b      	lsls	r3, r3, #24
 80090fa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80090fe:	4313      	orrs	r3, r2
 8009100:	604b      	str	r3, [r1, #4]
}
 8009102:	bf00      	nop
 8009104:	370c      	adds	r7, #12
 8009106:	46bd      	mov	sp, r7
 8009108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800910c:	4770      	bx	lr

0800910e <LL_RCC_HSI48_Enable>:
{
 800910e:	b480      	push	{r7}
 8009110:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8009112:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009116:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800911a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800911e:	f043 0301 	orr.w	r3, r3, #1
 8009122:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8009126:	bf00      	nop
 8009128:	46bd      	mov	sp, r7
 800912a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800912e:	4770      	bx	lr

08009130 <LL_RCC_HSI48_Disable>:
{
 8009130:	b480      	push	{r7}
 8009132:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8009134:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009138:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800913c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009140:	f023 0301 	bic.w	r3, r3, #1
 8009144:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8009148:	bf00      	nop
 800914a:	46bd      	mov	sp, r7
 800914c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009150:	4770      	bx	lr

08009152 <LL_RCC_HSI48_IsReady>:
{
 8009152:	b480      	push	{r7}
 8009154:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8009156:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800915a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800915e:	f003 0302 	and.w	r3, r3, #2
 8009162:	2b02      	cmp	r3, #2
 8009164:	d101      	bne.n	800916a <LL_RCC_HSI48_IsReady+0x18>
 8009166:	2301      	movs	r3, #1
 8009168:	e000      	b.n	800916c <LL_RCC_HSI48_IsReady+0x1a>
 800916a:	2300      	movs	r3, #0
}
 800916c:	4618      	mov	r0, r3
 800916e:	46bd      	mov	sp, r7
 8009170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009174:	4770      	bx	lr

08009176 <LL_RCC_LSE_Enable>:
{
 8009176:	b480      	push	{r7}
 8009178:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800917a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800917e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009182:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009186:	f043 0301 	orr.w	r3, r3, #1
 800918a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800918e:	bf00      	nop
 8009190:	46bd      	mov	sp, r7
 8009192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009196:	4770      	bx	lr

08009198 <LL_RCC_LSE_Disable>:
{
 8009198:	b480      	push	{r7}
 800919a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800919c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80091a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80091a4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80091a8:	f023 0301 	bic.w	r3, r3, #1
 80091ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80091b0:	bf00      	nop
 80091b2:	46bd      	mov	sp, r7
 80091b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b8:	4770      	bx	lr

080091ba <LL_RCC_LSE_EnableBypass>:
{
 80091ba:	b480      	push	{r7}
 80091bc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80091be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80091c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80091c6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80091ca:	f043 0304 	orr.w	r3, r3, #4
 80091ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80091d2:	bf00      	nop
 80091d4:	46bd      	mov	sp, r7
 80091d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091da:	4770      	bx	lr

080091dc <LL_RCC_LSE_DisableBypass>:
{
 80091dc:	b480      	push	{r7}
 80091de:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80091e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80091e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80091e8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80091ec:	f023 0304 	bic.w	r3, r3, #4
 80091f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80091f4:	bf00      	nop
 80091f6:	46bd      	mov	sp, r7
 80091f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091fc:	4770      	bx	lr

080091fe <LL_RCC_LSE_IsReady>:
{
 80091fe:	b480      	push	{r7}
 8009200:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8009202:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009206:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800920a:	f003 0302 	and.w	r3, r3, #2
 800920e:	2b02      	cmp	r3, #2
 8009210:	d101      	bne.n	8009216 <LL_RCC_LSE_IsReady+0x18>
 8009212:	2301      	movs	r3, #1
 8009214:	e000      	b.n	8009218 <LL_RCC_LSE_IsReady+0x1a>
 8009216:	2300      	movs	r3, #0
}
 8009218:	4618      	mov	r0, r3
 800921a:	46bd      	mov	sp, r7
 800921c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009220:	4770      	bx	lr

08009222 <LL_RCC_LSI1_Enable>:
{
 8009222:	b480      	push	{r7}
 8009224:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8009226:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800922a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800922e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009232:	f043 0301 	orr.w	r3, r3, #1
 8009236:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800923a:	bf00      	nop
 800923c:	46bd      	mov	sp, r7
 800923e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009242:	4770      	bx	lr

08009244 <LL_RCC_LSI1_Disable>:
{
 8009244:	b480      	push	{r7}
 8009246:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8009248:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800924c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009250:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009254:	f023 0301 	bic.w	r3, r3, #1
 8009258:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800925c:	bf00      	nop
 800925e:	46bd      	mov	sp, r7
 8009260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009264:	4770      	bx	lr

08009266 <LL_RCC_LSI1_IsReady>:
{
 8009266:	b480      	push	{r7}
 8009268:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800926a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800926e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009272:	f003 0302 	and.w	r3, r3, #2
 8009276:	2b02      	cmp	r3, #2
 8009278:	d101      	bne.n	800927e <LL_RCC_LSI1_IsReady+0x18>
 800927a:	2301      	movs	r3, #1
 800927c:	e000      	b.n	8009280 <LL_RCC_LSI1_IsReady+0x1a>
 800927e:	2300      	movs	r3, #0
}
 8009280:	4618      	mov	r0, r3
 8009282:	46bd      	mov	sp, r7
 8009284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009288:	4770      	bx	lr

0800928a <LL_RCC_LSI2_Enable>:
{
 800928a:	b480      	push	{r7}
 800928c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800928e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009292:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009296:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800929a:	f043 0304 	orr.w	r3, r3, #4
 800929e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80092a2:	bf00      	nop
 80092a4:	46bd      	mov	sp, r7
 80092a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092aa:	4770      	bx	lr

080092ac <LL_RCC_LSI2_Disable>:
{
 80092ac:	b480      	push	{r7}
 80092ae:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80092b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80092b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80092b8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80092bc:	f023 0304 	bic.w	r3, r3, #4
 80092c0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80092c4:	bf00      	nop
 80092c6:	46bd      	mov	sp, r7
 80092c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092cc:	4770      	bx	lr

080092ce <LL_RCC_LSI2_IsReady>:
{
 80092ce:	b480      	push	{r7}
 80092d0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 80092d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80092d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80092da:	f003 0308 	and.w	r3, r3, #8
 80092de:	2b08      	cmp	r3, #8
 80092e0:	d101      	bne.n	80092e6 <LL_RCC_LSI2_IsReady+0x18>
 80092e2:	2301      	movs	r3, #1
 80092e4:	e000      	b.n	80092e8 <LL_RCC_LSI2_IsReady+0x1a>
 80092e6:	2300      	movs	r3, #0
}
 80092e8:	4618      	mov	r0, r3
 80092ea:	46bd      	mov	sp, r7
 80092ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f0:	4770      	bx	lr

080092f2 <LL_RCC_LSI2_SetTrimming>:
{
 80092f2:	b480      	push	{r7}
 80092f4:	b083      	sub	sp, #12
 80092f6:	af00      	add	r7, sp, #0
 80092f8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 80092fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80092fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009302:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	021b      	lsls	r3, r3, #8
 800930a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800930e:	4313      	orrs	r3, r2
 8009310:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8009314:	bf00      	nop
 8009316:	370c      	adds	r7, #12
 8009318:	46bd      	mov	sp, r7
 800931a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800931e:	4770      	bx	lr

08009320 <LL_RCC_MSI_Enable>:
{
 8009320:	b480      	push	{r7}
 8009322:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8009324:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800932e:	f043 0301 	orr.w	r3, r3, #1
 8009332:	6013      	str	r3, [r2, #0]
}
 8009334:	bf00      	nop
 8009336:	46bd      	mov	sp, r7
 8009338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800933c:	4770      	bx	lr

0800933e <LL_RCC_MSI_Disable>:
{
 800933e:	b480      	push	{r7}
 8009340:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8009342:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800934c:	f023 0301 	bic.w	r3, r3, #1
 8009350:	6013      	str	r3, [r2, #0]
}
 8009352:	bf00      	nop
 8009354:	46bd      	mov	sp, r7
 8009356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800935a:	4770      	bx	lr

0800935c <LL_RCC_MSI_IsReady>:
{
 800935c:	b480      	push	{r7}
 800935e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8009360:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	f003 0302 	and.w	r3, r3, #2
 800936a:	2b02      	cmp	r3, #2
 800936c:	d101      	bne.n	8009372 <LL_RCC_MSI_IsReady+0x16>
 800936e:	2301      	movs	r3, #1
 8009370:	e000      	b.n	8009374 <LL_RCC_MSI_IsReady+0x18>
 8009372:	2300      	movs	r3, #0
}
 8009374:	4618      	mov	r0, r3
 8009376:	46bd      	mov	sp, r7
 8009378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800937c:	4770      	bx	lr

0800937e <LL_RCC_MSI_SetRange>:
{
 800937e:	b480      	push	{r7}
 8009380:	b083      	sub	sp, #12
 8009382:	af00      	add	r7, sp, #0
 8009384:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8009386:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009390:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	4313      	orrs	r3, r2
 8009398:	600b      	str	r3, [r1, #0]
}
 800939a:	bf00      	nop
 800939c:	370c      	adds	r7, #12
 800939e:	46bd      	mov	sp, r7
 80093a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a4:	4770      	bx	lr

080093a6 <LL_RCC_MSI_GetRange>:
{
 80093a6:	b480      	push	{r7}
 80093a8:	b083      	sub	sp, #12
 80093aa:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 80093ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80093b6:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	2bb0      	cmp	r3, #176	; 0xb0
 80093bc:	d901      	bls.n	80093c2 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 80093be:	23b0      	movs	r3, #176	; 0xb0
 80093c0:	607b      	str	r3, [r7, #4]
  return msiRange;
 80093c2:	687b      	ldr	r3, [r7, #4]
}
 80093c4:	4618      	mov	r0, r3
 80093c6:	370c      	adds	r7, #12
 80093c8:	46bd      	mov	sp, r7
 80093ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ce:	4770      	bx	lr

080093d0 <LL_RCC_MSI_SetCalibTrimming>:
{
 80093d0:	b480      	push	{r7}
 80093d2:	b083      	sub	sp, #12
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80093d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80093dc:	685b      	ldr	r3, [r3, #4]
 80093de:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	021b      	lsls	r3, r3, #8
 80093e6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80093ea:	4313      	orrs	r3, r2
 80093ec:	604b      	str	r3, [r1, #4]
}
 80093ee:	bf00      	nop
 80093f0:	370c      	adds	r7, #12
 80093f2:	46bd      	mov	sp, r7
 80093f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f8:	4770      	bx	lr

080093fa <LL_RCC_SetSysClkSource>:
{
 80093fa:	b480      	push	{r7}
 80093fc:	b083      	sub	sp, #12
 80093fe:	af00      	add	r7, sp, #0
 8009400:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8009402:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009406:	689b      	ldr	r3, [r3, #8]
 8009408:	f023 0203 	bic.w	r2, r3, #3
 800940c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	4313      	orrs	r3, r2
 8009414:	608b      	str	r3, [r1, #8]
}
 8009416:	bf00      	nop
 8009418:	370c      	adds	r7, #12
 800941a:	46bd      	mov	sp, r7
 800941c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009420:	4770      	bx	lr

08009422 <LL_RCC_GetSysClkSource>:
{
 8009422:	b480      	push	{r7}
 8009424:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8009426:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800942a:	689b      	ldr	r3, [r3, #8]
 800942c:	f003 030c 	and.w	r3, r3, #12
}
 8009430:	4618      	mov	r0, r3
 8009432:	46bd      	mov	sp, r7
 8009434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009438:	4770      	bx	lr

0800943a <LL_RCC_SetAHBPrescaler>:
{
 800943a:	b480      	push	{r7}
 800943c:	b083      	sub	sp, #12
 800943e:	af00      	add	r7, sp, #0
 8009440:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8009442:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009446:	689b      	ldr	r3, [r3, #8]
 8009448:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800944c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	4313      	orrs	r3, r2
 8009454:	608b      	str	r3, [r1, #8]
}
 8009456:	bf00      	nop
 8009458:	370c      	adds	r7, #12
 800945a:	46bd      	mov	sp, r7
 800945c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009460:	4770      	bx	lr

08009462 <LL_C2_RCC_SetAHBPrescaler>:
{
 8009462:	b480      	push	{r7}
 8009464:	b083      	sub	sp, #12
 8009466:	af00      	add	r7, sp, #0
 8009468:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800946a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800946e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8009472:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009476:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	4313      	orrs	r3, r2
 800947e:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8009482:	bf00      	nop
 8009484:	370c      	adds	r7, #12
 8009486:	46bd      	mov	sp, r7
 8009488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800948c:	4770      	bx	lr

0800948e <LL_RCC_SetAHB4Prescaler>:
{
 800948e:	b480      	push	{r7}
 8009490:	b083      	sub	sp, #12
 8009492:	af00      	add	r7, sp, #0
 8009494:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8009496:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800949a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800949e:	f023 020f 	bic.w	r2, r3, #15
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	091b      	lsrs	r3, r3, #4
 80094a6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80094aa:	4313      	orrs	r3, r2
 80094ac:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80094b0:	bf00      	nop
 80094b2:	370c      	adds	r7, #12
 80094b4:	46bd      	mov	sp, r7
 80094b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ba:	4770      	bx	lr

080094bc <LL_RCC_SetAPB1Prescaler>:
{
 80094bc:	b480      	push	{r7}
 80094be:	b083      	sub	sp, #12
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80094c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80094c8:	689b      	ldr	r3, [r3, #8]
 80094ca:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80094ce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	4313      	orrs	r3, r2
 80094d6:	608b      	str	r3, [r1, #8]
}
 80094d8:	bf00      	nop
 80094da:	370c      	adds	r7, #12
 80094dc:	46bd      	mov	sp, r7
 80094de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e2:	4770      	bx	lr

080094e4 <LL_RCC_SetAPB2Prescaler>:
{
 80094e4:	b480      	push	{r7}
 80094e6:	b083      	sub	sp, #12
 80094e8:	af00      	add	r7, sp, #0
 80094ea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80094ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80094f0:	689b      	ldr	r3, [r3, #8]
 80094f2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80094f6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	4313      	orrs	r3, r2
 80094fe:	608b      	str	r3, [r1, #8]
}
 8009500:	bf00      	nop
 8009502:	370c      	adds	r7, #12
 8009504:	46bd      	mov	sp, r7
 8009506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800950a:	4770      	bx	lr

0800950c <LL_RCC_GetAHBPrescaler>:
{
 800950c:	b480      	push	{r7}
 800950e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8009510:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009514:	689b      	ldr	r3, [r3, #8]
 8009516:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800951a:	4618      	mov	r0, r3
 800951c:	46bd      	mov	sp, r7
 800951e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009522:	4770      	bx	lr

08009524 <LL_RCC_GetAHB4Prescaler>:
{
 8009524:	b480      	push	{r7}
 8009526:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8009528:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800952c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8009530:	011b      	lsls	r3, r3, #4
 8009532:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8009536:	4618      	mov	r0, r3
 8009538:	46bd      	mov	sp, r7
 800953a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800953e:	4770      	bx	lr

08009540 <LL_RCC_GetAPB1Prescaler>:
{
 8009540:	b480      	push	{r7}
 8009542:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8009544:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009548:	689b      	ldr	r3, [r3, #8]
 800954a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 800954e:	4618      	mov	r0, r3
 8009550:	46bd      	mov	sp, r7
 8009552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009556:	4770      	bx	lr

08009558 <LL_RCC_GetAPB2Prescaler>:
{
 8009558:	b480      	push	{r7}
 800955a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800955c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009560:	689b      	ldr	r3, [r3, #8]
 8009562:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8009566:	4618      	mov	r0, r3
 8009568:	46bd      	mov	sp, r7
 800956a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800956e:	4770      	bx	lr

08009570 <LL_RCC_PLL_Enable>:
{
 8009570:	b480      	push	{r7}
 8009572:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8009574:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800957e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009582:	6013      	str	r3, [r2, #0]
}
 8009584:	bf00      	nop
 8009586:	46bd      	mov	sp, r7
 8009588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800958c:	4770      	bx	lr

0800958e <LL_RCC_PLL_Disable>:
{
 800958e:	b480      	push	{r7}
 8009590:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8009592:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800959c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80095a0:	6013      	str	r3, [r2, #0]
}
 80095a2:	bf00      	nop
 80095a4:	46bd      	mov	sp, r7
 80095a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095aa:	4770      	bx	lr

080095ac <LL_RCC_PLL_IsReady>:
{
 80095ac:	b480      	push	{r7}
 80095ae:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80095b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80095ba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80095be:	d101      	bne.n	80095c4 <LL_RCC_PLL_IsReady+0x18>
 80095c0:	2301      	movs	r3, #1
 80095c2:	e000      	b.n	80095c6 <LL_RCC_PLL_IsReady+0x1a>
 80095c4:	2300      	movs	r3, #0
}
 80095c6:	4618      	mov	r0, r3
 80095c8:	46bd      	mov	sp, r7
 80095ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ce:	4770      	bx	lr

080095d0 <LL_RCC_PLL_GetN>:
{
 80095d0:	b480      	push	{r7}
 80095d2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80095d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80095d8:	68db      	ldr	r3, [r3, #12]
 80095da:	0a1b      	lsrs	r3, r3, #8
 80095dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80095e0:	4618      	mov	r0, r3
 80095e2:	46bd      	mov	sp, r7
 80095e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e8:	4770      	bx	lr

080095ea <LL_RCC_PLL_GetR>:
{
 80095ea:	b480      	push	{r7}
 80095ec:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80095ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80095f2:	68db      	ldr	r3, [r3, #12]
 80095f4:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 80095f8:	4618      	mov	r0, r3
 80095fa:	46bd      	mov	sp, r7
 80095fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009600:	4770      	bx	lr

08009602 <LL_RCC_PLL_GetDivider>:
{
 8009602:	b480      	push	{r7}
 8009604:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8009606:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800960a:	68db      	ldr	r3, [r3, #12]
 800960c:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8009610:	4618      	mov	r0, r3
 8009612:	46bd      	mov	sp, r7
 8009614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009618:	4770      	bx	lr

0800961a <LL_RCC_PLL_GetMainSource>:
{
 800961a:	b480      	push	{r7}
 800961c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800961e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009622:	68db      	ldr	r3, [r3, #12]
 8009624:	f003 0303 	and.w	r3, r3, #3
}
 8009628:	4618      	mov	r0, r3
 800962a:	46bd      	mov	sp, r7
 800962c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009630:	4770      	bx	lr

08009632 <LL_RCC_IsActiveFlag_HPRE>:
{
 8009632:	b480      	push	{r7}
 8009634:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8009636:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800963a:	689b      	ldr	r3, [r3, #8]
 800963c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009640:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009644:	d101      	bne.n	800964a <LL_RCC_IsActiveFlag_HPRE+0x18>
 8009646:	2301      	movs	r3, #1
 8009648:	e000      	b.n	800964c <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800964a:	2300      	movs	r3, #0
}
 800964c:	4618      	mov	r0, r3
 800964e:	46bd      	mov	sp, r7
 8009650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009654:	4770      	bx	lr

08009656 <LL_RCC_IsActiveFlag_C2HPRE>:
{
 8009656:	b480      	push	{r7}
 8009658:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800965a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800965e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8009662:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009666:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800966a:	d101      	bne.n	8009670 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 800966c:	2301      	movs	r3, #1
 800966e:	e000      	b.n	8009672 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8009670:	2300      	movs	r3, #0
}
 8009672:	4618      	mov	r0, r3
 8009674:	46bd      	mov	sp, r7
 8009676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800967a:	4770      	bx	lr

0800967c <LL_RCC_IsActiveFlag_SHDHPRE>:
{
 800967c:	b480      	push	{r7}
 800967e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8009680:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009684:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8009688:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800968c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009690:	d101      	bne.n	8009696 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8009692:	2301      	movs	r3, #1
 8009694:	e000      	b.n	8009698 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8009696:	2300      	movs	r3, #0
}
 8009698:	4618      	mov	r0, r3
 800969a:	46bd      	mov	sp, r7
 800969c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a0:	4770      	bx	lr

080096a2 <LL_RCC_IsActiveFlag_PPRE1>:
{
 80096a2:	b480      	push	{r7}
 80096a4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80096a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80096aa:	689b      	ldr	r3, [r3, #8]
 80096ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80096b0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80096b4:	d101      	bne.n	80096ba <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80096b6:	2301      	movs	r3, #1
 80096b8:	e000      	b.n	80096bc <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80096ba:	2300      	movs	r3, #0
}
 80096bc:	4618      	mov	r0, r3
 80096be:	46bd      	mov	sp, r7
 80096c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c4:	4770      	bx	lr

080096c6 <LL_RCC_IsActiveFlag_PPRE2>:
{
 80096c6:	b480      	push	{r7}
 80096c8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80096ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80096ce:	689b      	ldr	r3, [r3, #8]
 80096d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80096d4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80096d8:	d101      	bne.n	80096de <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80096da:	2301      	movs	r3, #1
 80096dc:	e000      	b.n	80096e0 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80096de:	2300      	movs	r3, #0
}
 80096e0:	4618      	mov	r0, r3
 80096e2:	46bd      	mov	sp, r7
 80096e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e8:	4770      	bx	lr
	...

080096ec <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80096ec:	b590      	push	{r4, r7, lr}
 80096ee:	b08d      	sub	sp, #52	; 0x34
 80096f0:	af00      	add	r7, sp, #0
 80096f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d101      	bne.n	80096fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80096fa:	2301      	movs	r3, #1
 80096fc:	e363      	b.n	8009dc6 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	f003 0320 	and.w	r3, r3, #32
 8009706:	2b00      	cmp	r3, #0
 8009708:	f000 808d 	beq.w	8009826 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800970c:	f7ff fe89 	bl	8009422 <LL_RCC_GetSysClkSource>
 8009710:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009712:	f7ff ff82 	bl	800961a <LL_RCC_PLL_GetMainSource>
 8009716:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8009718:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800971a:	2b00      	cmp	r3, #0
 800971c:	d005      	beq.n	800972a <HAL_RCC_OscConfig+0x3e>
 800971e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009720:	2b0c      	cmp	r3, #12
 8009722:	d147      	bne.n	80097b4 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8009724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009726:	2b01      	cmp	r3, #1
 8009728:	d144      	bne.n	80097b4 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	69db      	ldr	r3, [r3, #28]
 800972e:	2b00      	cmp	r3, #0
 8009730:	d101      	bne.n	8009736 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8009732:	2301      	movs	r3, #1
 8009734:	e347      	b.n	8009dc6 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800973a:	f7ff fe34 	bl	80093a6 <LL_RCC_MSI_GetRange>
 800973e:	4603      	mov	r3, r0
 8009740:	429c      	cmp	r4, r3
 8009742:	d914      	bls.n	800976e <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009748:	4618      	mov	r0, r3
 800974a:	f000 fd2f 	bl	800a1ac <RCC_SetFlashLatencyFromMSIRange>
 800974e:	4603      	mov	r3, r0
 8009750:	2b00      	cmp	r3, #0
 8009752:	d001      	beq.n	8009758 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8009754:	2301      	movs	r3, #1
 8009756:	e336      	b.n	8009dc6 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800975c:	4618      	mov	r0, r3
 800975e:	f7ff fe0e 	bl	800937e <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	6a1b      	ldr	r3, [r3, #32]
 8009766:	4618      	mov	r0, r3
 8009768:	f7ff fe32 	bl	80093d0 <LL_RCC_MSI_SetCalibTrimming>
 800976c:	e013      	b.n	8009796 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009772:	4618      	mov	r0, r3
 8009774:	f7ff fe03 	bl	800937e <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	6a1b      	ldr	r3, [r3, #32]
 800977c:	4618      	mov	r0, r3
 800977e:	f7ff fe27 	bl	80093d0 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009786:	4618      	mov	r0, r3
 8009788:	f000 fd10 	bl	800a1ac <RCC_SetFlashLatencyFromMSIRange>
 800978c:	4603      	mov	r3, r0
 800978e:	2b00      	cmp	r3, #0
 8009790:	d001      	beq.n	8009796 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8009792:	2301      	movs	r3, #1
 8009794:	e317      	b.n	8009dc6 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8009796:	f000 fcc9 	bl	800a12c <HAL_RCC_GetHCLKFreq>
 800979a:	4603      	mov	r3, r0
 800979c:	4aa4      	ldr	r2, [pc, #656]	; (8009a30 <HAL_RCC_OscConfig+0x344>)
 800979e:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80097a0:	4ba4      	ldr	r3, [pc, #656]	; (8009a34 <HAL_RCC_OscConfig+0x348>)
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	4618      	mov	r0, r3
 80097a6:	f7fc ff33 	bl	8006610 <HAL_InitTick>
 80097aa:	4603      	mov	r3, r0
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d039      	beq.n	8009824 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 80097b0:	2301      	movs	r3, #1
 80097b2:	e308      	b.n	8009dc6 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	69db      	ldr	r3, [r3, #28]
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d01e      	beq.n	80097fa <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80097bc:	f7ff fdb0 	bl	8009320 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80097c0:	f7fc ff74 	bl	80066ac <HAL_GetTick>
 80097c4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80097c6:	e008      	b.n	80097da <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80097c8:	f7fc ff70 	bl	80066ac <HAL_GetTick>
 80097cc:	4602      	mov	r2, r0
 80097ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097d0:	1ad3      	subs	r3, r2, r3
 80097d2:	2b02      	cmp	r3, #2
 80097d4:	d901      	bls.n	80097da <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80097d6:	2303      	movs	r3, #3
 80097d8:	e2f5      	b.n	8009dc6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 80097da:	f7ff fdbf 	bl	800935c <LL_RCC_MSI_IsReady>
 80097de:	4603      	mov	r3, r0
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d0f1      	beq.n	80097c8 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097e8:	4618      	mov	r0, r3
 80097ea:	f7ff fdc8 	bl	800937e <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	6a1b      	ldr	r3, [r3, #32]
 80097f2:	4618      	mov	r0, r3
 80097f4:	f7ff fdec 	bl	80093d0 <LL_RCC_MSI_SetCalibTrimming>
 80097f8:	e015      	b.n	8009826 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80097fa:	f7ff fda0 	bl	800933e <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80097fe:	f7fc ff55 	bl	80066ac <HAL_GetTick>
 8009802:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8009804:	e008      	b.n	8009818 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8009806:	f7fc ff51 	bl	80066ac <HAL_GetTick>
 800980a:	4602      	mov	r2, r0
 800980c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800980e:	1ad3      	subs	r3, r2, r3
 8009810:	2b02      	cmp	r3, #2
 8009812:	d901      	bls.n	8009818 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8009814:	2303      	movs	r3, #3
 8009816:	e2d6      	b.n	8009dc6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8009818:	f7ff fda0 	bl	800935c <LL_RCC_MSI_IsReady>
 800981c:	4603      	mov	r3, r0
 800981e:	2b00      	cmp	r3, #0
 8009820:	d1f1      	bne.n	8009806 <HAL_RCC_OscConfig+0x11a>
 8009822:	e000      	b.n	8009826 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8009824:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	f003 0301 	and.w	r3, r3, #1
 800982e:	2b00      	cmp	r3, #0
 8009830:	d047      	beq.n	80098c2 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009832:	f7ff fdf6 	bl	8009422 <LL_RCC_GetSysClkSource>
 8009836:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009838:	f7ff feef 	bl	800961a <LL_RCC_PLL_GetMainSource>
 800983c:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800983e:	6a3b      	ldr	r3, [r7, #32]
 8009840:	2b08      	cmp	r3, #8
 8009842:	d005      	beq.n	8009850 <HAL_RCC_OscConfig+0x164>
 8009844:	6a3b      	ldr	r3, [r7, #32]
 8009846:	2b0c      	cmp	r3, #12
 8009848:	d108      	bne.n	800985c <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 800984a:	69fb      	ldr	r3, [r7, #28]
 800984c:	2b03      	cmp	r3, #3
 800984e:	d105      	bne.n	800985c <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	685b      	ldr	r3, [r3, #4]
 8009854:	2b00      	cmp	r3, #0
 8009856:	d134      	bne.n	80098c2 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8009858:	2301      	movs	r3, #1
 800985a:	e2b4      	b.n	8009dc6 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	685b      	ldr	r3, [r3, #4]
 8009860:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009864:	d102      	bne.n	800986c <HAL_RCC_OscConfig+0x180>
 8009866:	f7ff fbdd 	bl	8009024 <LL_RCC_HSE_Enable>
 800986a:	e001      	b.n	8009870 <HAL_RCC_OscConfig+0x184>
 800986c:	f7ff fbe9 	bl	8009042 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	685b      	ldr	r3, [r3, #4]
 8009874:	2b00      	cmp	r3, #0
 8009876:	d012      	beq.n	800989e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009878:	f7fc ff18 	bl	80066ac <HAL_GetTick>
 800987c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800987e:	e008      	b.n	8009892 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009880:	f7fc ff14 	bl	80066ac <HAL_GetTick>
 8009884:	4602      	mov	r2, r0
 8009886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009888:	1ad3      	subs	r3, r2, r3
 800988a:	2b64      	cmp	r3, #100	; 0x64
 800988c:	d901      	bls.n	8009892 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800988e:	2303      	movs	r3, #3
 8009890:	e299      	b.n	8009dc6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8009892:	f7ff fbe5 	bl	8009060 <LL_RCC_HSE_IsReady>
 8009896:	4603      	mov	r3, r0
 8009898:	2b00      	cmp	r3, #0
 800989a:	d0f1      	beq.n	8009880 <HAL_RCC_OscConfig+0x194>
 800989c:	e011      	b.n	80098c2 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800989e:	f7fc ff05 	bl	80066ac <HAL_GetTick>
 80098a2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80098a4:	e008      	b.n	80098b8 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80098a6:	f7fc ff01 	bl	80066ac <HAL_GetTick>
 80098aa:	4602      	mov	r2, r0
 80098ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098ae:	1ad3      	subs	r3, r2, r3
 80098b0:	2b64      	cmp	r3, #100	; 0x64
 80098b2:	d901      	bls.n	80098b8 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80098b4:	2303      	movs	r3, #3
 80098b6:	e286      	b.n	8009dc6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 80098b8:	f7ff fbd2 	bl	8009060 <LL_RCC_HSE_IsReady>
 80098bc:	4603      	mov	r3, r0
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d1f1      	bne.n	80098a6 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	f003 0302 	and.w	r3, r3, #2
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d04c      	beq.n	8009968 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80098ce:	f7ff fda8 	bl	8009422 <LL_RCC_GetSysClkSource>
 80098d2:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80098d4:	f7ff fea1 	bl	800961a <LL_RCC_PLL_GetMainSource>
 80098d8:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80098da:	69bb      	ldr	r3, [r7, #24]
 80098dc:	2b04      	cmp	r3, #4
 80098de:	d005      	beq.n	80098ec <HAL_RCC_OscConfig+0x200>
 80098e0:	69bb      	ldr	r3, [r7, #24]
 80098e2:	2b0c      	cmp	r3, #12
 80098e4:	d10e      	bne.n	8009904 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 80098e6:	697b      	ldr	r3, [r7, #20]
 80098e8:	2b02      	cmp	r3, #2
 80098ea:	d10b      	bne.n	8009904 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	68db      	ldr	r3, [r3, #12]
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d101      	bne.n	80098f8 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 80098f4:	2301      	movs	r3, #1
 80098f6:	e266      	b.n	8009dc6 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	691b      	ldr	r3, [r3, #16]
 80098fc:	4618      	mov	r0, r3
 80098fe:	f7ff fbf1 	bl	80090e4 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8009902:	e031      	b.n	8009968 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	68db      	ldr	r3, [r3, #12]
 8009908:	2b00      	cmp	r3, #0
 800990a:	d019      	beq.n	8009940 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800990c:	f7ff fbba 	bl	8009084 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009910:	f7fc fecc 	bl	80066ac <HAL_GetTick>
 8009914:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8009916:	e008      	b.n	800992a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009918:	f7fc fec8 	bl	80066ac <HAL_GetTick>
 800991c:	4602      	mov	r2, r0
 800991e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009920:	1ad3      	subs	r3, r2, r3
 8009922:	2b02      	cmp	r3, #2
 8009924:	d901      	bls.n	800992a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8009926:	2303      	movs	r3, #3
 8009928:	e24d      	b.n	8009dc6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 800992a:	f7ff fbc9 	bl	80090c0 <LL_RCC_HSI_IsReady>
 800992e:	4603      	mov	r3, r0
 8009930:	2b00      	cmp	r3, #0
 8009932:	d0f1      	beq.n	8009918 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	691b      	ldr	r3, [r3, #16]
 8009938:	4618      	mov	r0, r3
 800993a:	f7ff fbd3 	bl	80090e4 <LL_RCC_HSI_SetCalibTrimming>
 800993e:	e013      	b.n	8009968 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009940:	f7ff fbaf 	bl	80090a2 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009944:	f7fc feb2 	bl	80066ac <HAL_GetTick>
 8009948:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800994a:	e008      	b.n	800995e <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800994c:	f7fc feae 	bl	80066ac <HAL_GetTick>
 8009950:	4602      	mov	r2, r0
 8009952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009954:	1ad3      	subs	r3, r2, r3
 8009956:	2b02      	cmp	r3, #2
 8009958:	d901      	bls.n	800995e <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 800995a:	2303      	movs	r3, #3
 800995c:	e233      	b.n	8009dc6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 800995e:	f7ff fbaf 	bl	80090c0 <LL_RCC_HSI_IsReady>
 8009962:	4603      	mov	r3, r0
 8009964:	2b00      	cmp	r3, #0
 8009966:	d1f1      	bne.n	800994c <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	f003 0308 	and.w	r3, r3, #8
 8009970:	2b00      	cmp	r3, #0
 8009972:	d106      	bne.n	8009982 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800997c:	2b00      	cmp	r3, #0
 800997e:	f000 80a3 	beq.w	8009ac8 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	695b      	ldr	r3, [r3, #20]
 8009986:	2b00      	cmp	r3, #0
 8009988:	d076      	beq.n	8009a78 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	f003 0310 	and.w	r3, r3, #16
 8009992:	2b00      	cmp	r3, #0
 8009994:	d046      	beq.n	8009a24 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8009996:	f7ff fc66 	bl	8009266 <LL_RCC_LSI1_IsReady>
 800999a:	4603      	mov	r3, r0
 800999c:	2b00      	cmp	r3, #0
 800999e:	d113      	bne.n	80099c8 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 80099a0:	f7ff fc3f 	bl	8009222 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80099a4:	f7fc fe82 	bl	80066ac <HAL_GetTick>
 80099a8:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 80099aa:	e008      	b.n	80099be <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80099ac:	f7fc fe7e 	bl	80066ac <HAL_GetTick>
 80099b0:	4602      	mov	r2, r0
 80099b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099b4:	1ad3      	subs	r3, r2, r3
 80099b6:	2b02      	cmp	r3, #2
 80099b8:	d901      	bls.n	80099be <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 80099ba:	2303      	movs	r3, #3
 80099bc:	e203      	b.n	8009dc6 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 80099be:	f7ff fc52 	bl	8009266 <LL_RCC_LSI1_IsReady>
 80099c2:	4603      	mov	r3, r0
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d0f1      	beq.n	80099ac <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 80099c8:	f7ff fc5f 	bl	800928a <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80099cc:	f7fc fe6e 	bl	80066ac <HAL_GetTick>
 80099d0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 80099d2:	e008      	b.n	80099e6 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80099d4:	f7fc fe6a 	bl	80066ac <HAL_GetTick>
 80099d8:	4602      	mov	r2, r0
 80099da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099dc:	1ad3      	subs	r3, r2, r3
 80099de:	2b03      	cmp	r3, #3
 80099e0:	d901      	bls.n	80099e6 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 80099e2:	2303      	movs	r3, #3
 80099e4:	e1ef      	b.n	8009dc6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 80099e6:	f7ff fc72 	bl	80092ce <LL_RCC_LSI2_IsReady>
 80099ea:	4603      	mov	r3, r0
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d0f1      	beq.n	80099d4 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	699b      	ldr	r3, [r3, #24]
 80099f4:	4618      	mov	r0, r3
 80099f6:	f7ff fc7c 	bl	80092f2 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 80099fa:	f7ff fc23 	bl	8009244 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80099fe:	f7fc fe55 	bl	80066ac <HAL_GetTick>
 8009a02:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8009a04:	e008      	b.n	8009a18 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8009a06:	f7fc fe51 	bl	80066ac <HAL_GetTick>
 8009a0a:	4602      	mov	r2, r0
 8009a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a0e:	1ad3      	subs	r3, r2, r3
 8009a10:	2b02      	cmp	r3, #2
 8009a12:	d901      	bls.n	8009a18 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8009a14:	2303      	movs	r3, #3
 8009a16:	e1d6      	b.n	8009dc6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8009a18:	f7ff fc25 	bl	8009266 <LL_RCC_LSI1_IsReady>
 8009a1c:	4603      	mov	r3, r0
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d1f1      	bne.n	8009a06 <HAL_RCC_OscConfig+0x31a>
 8009a22:	e051      	b.n	8009ac8 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8009a24:	f7ff fbfd 	bl	8009222 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009a28:	f7fc fe40 	bl	80066ac <HAL_GetTick>
 8009a2c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8009a2e:	e00c      	b.n	8009a4a <HAL_RCC_OscConfig+0x35e>
 8009a30:	20000004 	.word	0x20000004
 8009a34:	20000008 	.word	0x20000008
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8009a38:	f7fc fe38 	bl	80066ac <HAL_GetTick>
 8009a3c:	4602      	mov	r2, r0
 8009a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a40:	1ad3      	subs	r3, r2, r3
 8009a42:	2b02      	cmp	r3, #2
 8009a44:	d901      	bls.n	8009a4a <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8009a46:	2303      	movs	r3, #3
 8009a48:	e1bd      	b.n	8009dc6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8009a4a:	f7ff fc0c 	bl	8009266 <LL_RCC_LSI1_IsReady>
 8009a4e:	4603      	mov	r3, r0
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d0f1      	beq.n	8009a38 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8009a54:	f7ff fc2a 	bl	80092ac <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8009a58:	e008      	b.n	8009a6c <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8009a5a:	f7fc fe27 	bl	80066ac <HAL_GetTick>
 8009a5e:	4602      	mov	r2, r0
 8009a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a62:	1ad3      	subs	r3, r2, r3
 8009a64:	2b03      	cmp	r3, #3
 8009a66:	d901      	bls.n	8009a6c <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8009a68:	2303      	movs	r3, #3
 8009a6a:	e1ac      	b.n	8009dc6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8009a6c:	f7ff fc2f 	bl	80092ce <LL_RCC_LSI2_IsReady>
 8009a70:	4603      	mov	r3, r0
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d1f1      	bne.n	8009a5a <HAL_RCC_OscConfig+0x36e>
 8009a76:	e027      	b.n	8009ac8 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8009a78:	f7ff fc18 	bl	80092ac <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009a7c:	f7fc fe16 	bl	80066ac <HAL_GetTick>
 8009a80:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8009a82:	e008      	b.n	8009a96 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8009a84:	f7fc fe12 	bl	80066ac <HAL_GetTick>
 8009a88:	4602      	mov	r2, r0
 8009a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a8c:	1ad3      	subs	r3, r2, r3
 8009a8e:	2b03      	cmp	r3, #3
 8009a90:	d901      	bls.n	8009a96 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8009a92:	2303      	movs	r3, #3
 8009a94:	e197      	b.n	8009dc6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8009a96:	f7ff fc1a 	bl	80092ce <LL_RCC_LSI2_IsReady>
 8009a9a:	4603      	mov	r3, r0
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d1f1      	bne.n	8009a84 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8009aa0:	f7ff fbd0 	bl	8009244 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009aa4:	f7fc fe02 	bl	80066ac <HAL_GetTick>
 8009aa8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8009aaa:	e008      	b.n	8009abe <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8009aac:	f7fc fdfe 	bl	80066ac <HAL_GetTick>
 8009ab0:	4602      	mov	r2, r0
 8009ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ab4:	1ad3      	subs	r3, r2, r3
 8009ab6:	2b02      	cmp	r3, #2
 8009ab8:	d901      	bls.n	8009abe <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8009aba:	2303      	movs	r3, #3
 8009abc:	e183      	b.n	8009dc6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8009abe:	f7ff fbd2 	bl	8009266 <LL_RCC_LSI1_IsReady>
 8009ac2:	4603      	mov	r3, r0
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d1f1      	bne.n	8009aac <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	f003 0304 	and.w	r3, r3, #4
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d05b      	beq.n	8009b8c <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009ad4:	4ba7      	ldr	r3, [pc, #668]	; (8009d74 <HAL_RCC_OscConfig+0x688>)
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d114      	bne.n	8009b0a <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8009ae0:	f7ff fa70 	bl	8008fc4 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009ae4:	f7fc fde2 	bl	80066ac <HAL_GetTick>
 8009ae8:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009aea:	e008      	b.n	8009afe <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009aec:	f7fc fdde 	bl	80066ac <HAL_GetTick>
 8009af0:	4602      	mov	r2, r0
 8009af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009af4:	1ad3      	subs	r3, r2, r3
 8009af6:	2b02      	cmp	r3, #2
 8009af8:	d901      	bls.n	8009afe <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8009afa:	2303      	movs	r3, #3
 8009afc:	e163      	b.n	8009dc6 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009afe:	4b9d      	ldr	r3, [pc, #628]	; (8009d74 <HAL_RCC_OscConfig+0x688>)
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d0f0      	beq.n	8009aec <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	689b      	ldr	r3, [r3, #8]
 8009b0e:	2b01      	cmp	r3, #1
 8009b10:	d102      	bne.n	8009b18 <HAL_RCC_OscConfig+0x42c>
 8009b12:	f7ff fb30 	bl	8009176 <LL_RCC_LSE_Enable>
 8009b16:	e00c      	b.n	8009b32 <HAL_RCC_OscConfig+0x446>
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	689b      	ldr	r3, [r3, #8]
 8009b1c:	2b05      	cmp	r3, #5
 8009b1e:	d104      	bne.n	8009b2a <HAL_RCC_OscConfig+0x43e>
 8009b20:	f7ff fb4b 	bl	80091ba <LL_RCC_LSE_EnableBypass>
 8009b24:	f7ff fb27 	bl	8009176 <LL_RCC_LSE_Enable>
 8009b28:	e003      	b.n	8009b32 <HAL_RCC_OscConfig+0x446>
 8009b2a:	f7ff fb35 	bl	8009198 <LL_RCC_LSE_Disable>
 8009b2e:	f7ff fb55 	bl	80091dc <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	689b      	ldr	r3, [r3, #8]
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d014      	beq.n	8009b64 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009b3a:	f7fc fdb7 	bl	80066ac <HAL_GetTick>
 8009b3e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8009b40:	e00a      	b.n	8009b58 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009b42:	f7fc fdb3 	bl	80066ac <HAL_GetTick>
 8009b46:	4602      	mov	r2, r0
 8009b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b4a:	1ad3      	subs	r3, r2, r3
 8009b4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009b50:	4293      	cmp	r3, r2
 8009b52:	d901      	bls.n	8009b58 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8009b54:	2303      	movs	r3, #3
 8009b56:	e136      	b.n	8009dc6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8009b58:	f7ff fb51 	bl	80091fe <LL_RCC_LSE_IsReady>
 8009b5c:	4603      	mov	r3, r0
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d0ef      	beq.n	8009b42 <HAL_RCC_OscConfig+0x456>
 8009b62:	e013      	b.n	8009b8c <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009b64:	f7fc fda2 	bl	80066ac <HAL_GetTick>
 8009b68:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8009b6a:	e00a      	b.n	8009b82 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009b6c:	f7fc fd9e 	bl	80066ac <HAL_GetTick>
 8009b70:	4602      	mov	r2, r0
 8009b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b74:	1ad3      	subs	r3, r2, r3
 8009b76:	f241 3288 	movw	r2, #5000	; 0x1388
 8009b7a:	4293      	cmp	r3, r2
 8009b7c:	d901      	bls.n	8009b82 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8009b7e:	2303      	movs	r3, #3
 8009b80:	e121      	b.n	8009dc6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 8009b82:	f7ff fb3c 	bl	80091fe <LL_RCC_LSE_IsReady>
 8009b86:	4603      	mov	r3, r0
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d1ef      	bne.n	8009b6c <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d02c      	beq.n	8009bf2 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d014      	beq.n	8009bca <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009ba0:	f7ff fab5 	bl	800910e <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009ba4:	f7fc fd82 	bl	80066ac <HAL_GetTick>
 8009ba8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8009baa:	e008      	b.n	8009bbe <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009bac:	f7fc fd7e 	bl	80066ac <HAL_GetTick>
 8009bb0:	4602      	mov	r2, r0
 8009bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bb4:	1ad3      	subs	r3, r2, r3
 8009bb6:	2b02      	cmp	r3, #2
 8009bb8:	d901      	bls.n	8009bbe <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8009bba:	2303      	movs	r3, #3
 8009bbc:	e103      	b.n	8009dc6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8009bbe:	f7ff fac8 	bl	8009152 <LL_RCC_HSI48_IsReady>
 8009bc2:	4603      	mov	r3, r0
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d0f1      	beq.n	8009bac <HAL_RCC_OscConfig+0x4c0>
 8009bc8:	e013      	b.n	8009bf2 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8009bca:	f7ff fab1 	bl	8009130 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009bce:	f7fc fd6d 	bl	80066ac <HAL_GetTick>
 8009bd2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8009bd4:	e008      	b.n	8009be8 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009bd6:	f7fc fd69 	bl	80066ac <HAL_GetTick>
 8009bda:	4602      	mov	r2, r0
 8009bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bde:	1ad3      	subs	r3, r2, r3
 8009be0:	2b02      	cmp	r3, #2
 8009be2:	d901      	bls.n	8009be8 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8009be4:	2303      	movs	r3, #3
 8009be6:	e0ee      	b.n	8009dc6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8009be8:	f7ff fab3 	bl	8009152 <LL_RCC_HSI48_IsReady>
 8009bec:	4603      	mov	r3, r0
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d1f1      	bne.n	8009bd6 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	f000 80e4 	beq.w	8009dc4 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009bfc:	f7ff fc11 	bl	8009422 <LL_RCC_GetSysClkSource>
 8009c00:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8009c02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009c06:	68db      	ldr	r3, [r3, #12]
 8009c08:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c0e:	2b02      	cmp	r3, #2
 8009c10:	f040 80b4 	bne.w	8009d7c <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	f003 0203 	and.w	r2, r3, #3
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c1e:	429a      	cmp	r2, r3
 8009c20:	d123      	bne.n	8009c6a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009c2c:	429a      	cmp	r2, r3
 8009c2e:	d11c      	bne.n	8009c6a <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	0a1b      	lsrs	r3, r3, #8
 8009c34:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8009c3c:	429a      	cmp	r2, r3
 8009c3e:	d114      	bne.n	8009c6a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8009c4a:	429a      	cmp	r2, r3
 8009c4c:	d10d      	bne.n	8009c6a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8009c58:	429a      	cmp	r2, r3
 8009c5a:	d106      	bne.n	8009c6a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8009c66:	429a      	cmp	r2, r3
 8009c68:	d05d      	beq.n	8009d26 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009c6a:	693b      	ldr	r3, [r7, #16]
 8009c6c:	2b0c      	cmp	r3, #12
 8009c6e:	d058      	beq.n	8009d22 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8009c70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d001      	beq.n	8009c82 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 8009c7e:	2301      	movs	r3, #1
 8009c80:	e0a1      	b.n	8009dc6 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8009c82:	f7ff fc84 	bl	800958e <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8009c86:	f7fc fd11 	bl	80066ac <HAL_GetTick>
 8009c8a:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009c8c:	e008      	b.n	8009ca0 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009c8e:	f7fc fd0d 	bl	80066ac <HAL_GetTick>
 8009c92:	4602      	mov	r2, r0
 8009c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c96:	1ad3      	subs	r3, r2, r3
 8009c98:	2b02      	cmp	r3, #2
 8009c9a:	d901      	bls.n	8009ca0 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8009c9c:	2303      	movs	r3, #3
 8009c9e:	e092      	b.n	8009dc6 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009ca0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d1ef      	bne.n	8009c8e <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009cae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009cb2:	68da      	ldr	r2, [r3, #12]
 8009cb4:	4b30      	ldr	r3, [pc, #192]	; (8009d78 <HAL_RCC_OscConfig+0x68c>)
 8009cb6:	4013      	ands	r3, r2
 8009cb8:	687a      	ldr	r2, [r7, #4]
 8009cba:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8009cbc:	687a      	ldr	r2, [r7, #4]
 8009cbe:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8009cc0:	4311      	orrs	r1, r2
 8009cc2:	687a      	ldr	r2, [r7, #4]
 8009cc4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009cc6:	0212      	lsls	r2, r2, #8
 8009cc8:	4311      	orrs	r1, r2
 8009cca:	687a      	ldr	r2, [r7, #4]
 8009ccc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8009cce:	4311      	orrs	r1, r2
 8009cd0:	687a      	ldr	r2, [r7, #4]
 8009cd2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8009cd4:	4311      	orrs	r1, r2
 8009cd6:	687a      	ldr	r2, [r7, #4]
 8009cd8:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8009cda:	430a      	orrs	r2, r1
 8009cdc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009ce0:	4313      	orrs	r3, r2
 8009ce2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8009ce4:	f7ff fc44 	bl	8009570 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8009ce8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009cec:	68db      	ldr	r3, [r3, #12]
 8009cee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009cf2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009cf6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8009cf8:	f7fc fcd8 	bl	80066ac <HAL_GetTick>
 8009cfc:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009cfe:	e008      	b.n	8009d12 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009d00:	f7fc fcd4 	bl	80066ac <HAL_GetTick>
 8009d04:	4602      	mov	r2, r0
 8009d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d08:	1ad3      	subs	r3, r2, r3
 8009d0a:	2b02      	cmp	r3, #2
 8009d0c:	d901      	bls.n	8009d12 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8009d0e:	2303      	movs	r3, #3
 8009d10:	e059      	b.n	8009dc6 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009d12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d0ef      	beq.n	8009d00 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009d20:	e050      	b.n	8009dc4 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8009d22:	2301      	movs	r3, #1
 8009d24:	e04f      	b.n	8009dc6 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009d26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d147      	bne.n	8009dc4 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8009d34:	f7ff fc1c 	bl	8009570 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8009d38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009d3c:	68db      	ldr	r3, [r3, #12]
 8009d3e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009d42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009d46:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8009d48:	f7fc fcb0 	bl	80066ac <HAL_GetTick>
 8009d4c:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009d4e:	e008      	b.n	8009d62 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009d50:	f7fc fcac 	bl	80066ac <HAL_GetTick>
 8009d54:	4602      	mov	r2, r0
 8009d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d58:	1ad3      	subs	r3, r2, r3
 8009d5a:	2b02      	cmp	r3, #2
 8009d5c:	d901      	bls.n	8009d62 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 8009d5e:	2303      	movs	r3, #3
 8009d60:	e031      	b.n	8009dc6 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009d62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d0ef      	beq.n	8009d50 <HAL_RCC_OscConfig+0x664>
 8009d70:	e028      	b.n	8009dc4 <HAL_RCC_OscConfig+0x6d8>
 8009d72:	bf00      	nop
 8009d74:	58000400 	.word	0x58000400
 8009d78:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009d7c:	693b      	ldr	r3, [r7, #16]
 8009d7e:	2b0c      	cmp	r3, #12
 8009d80:	d01e      	beq.n	8009dc0 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009d82:	f7ff fc04 	bl	800958e <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009d86:	f7fc fc91 	bl	80066ac <HAL_GetTick>
 8009d8a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009d8c:	e008      	b.n	8009da0 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009d8e:	f7fc fc8d 	bl	80066ac <HAL_GetTick>
 8009d92:	4602      	mov	r2, r0
 8009d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d96:	1ad3      	subs	r3, r2, r3
 8009d98:	2b02      	cmp	r3, #2
 8009d9a:	d901      	bls.n	8009da0 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8009d9c:	2303      	movs	r3, #3
 8009d9e:	e012      	b.n	8009dc6 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009da0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d1ef      	bne.n	8009d8e <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8009dae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009db2:	68da      	ldr	r2, [r3, #12]
 8009db4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009db8:	4b05      	ldr	r3, [pc, #20]	; (8009dd0 <HAL_RCC_OscConfig+0x6e4>)
 8009dba:	4013      	ands	r3, r2
 8009dbc:	60cb      	str	r3, [r1, #12]
 8009dbe:	e001      	b.n	8009dc4 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8009dc0:	2301      	movs	r3, #1
 8009dc2:	e000      	b.n	8009dc6 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8009dc4:	2300      	movs	r3, #0
}
 8009dc6:	4618      	mov	r0, r3
 8009dc8:	3734      	adds	r7, #52	; 0x34
 8009dca:	46bd      	mov	sp, r7
 8009dcc:	bd90      	pop	{r4, r7, pc}
 8009dce:	bf00      	nop
 8009dd0:	eefefffc 	.word	0xeefefffc

08009dd4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009dd4:	b580      	push	{r7, lr}
 8009dd6:	b084      	sub	sp, #16
 8009dd8:	af00      	add	r7, sp, #0
 8009dda:	6078      	str	r0, [r7, #4]
 8009ddc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d101      	bne.n	8009de8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009de4:	2301      	movs	r3, #1
 8009de6:	e12d      	b.n	800a044 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009de8:	4b98      	ldr	r3, [pc, #608]	; (800a04c <HAL_RCC_ClockConfig+0x278>)
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	f003 0307 	and.w	r3, r3, #7
 8009df0:	683a      	ldr	r2, [r7, #0]
 8009df2:	429a      	cmp	r2, r3
 8009df4:	d91b      	bls.n	8009e2e <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009df6:	4b95      	ldr	r3, [pc, #596]	; (800a04c <HAL_RCC_ClockConfig+0x278>)
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	f023 0207 	bic.w	r2, r3, #7
 8009dfe:	4993      	ldr	r1, [pc, #588]	; (800a04c <HAL_RCC_ClockConfig+0x278>)
 8009e00:	683b      	ldr	r3, [r7, #0]
 8009e02:	4313      	orrs	r3, r2
 8009e04:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009e06:	f7fc fc51 	bl	80066ac <HAL_GetTick>
 8009e0a:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009e0c:	e008      	b.n	8009e20 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8009e0e:	f7fc fc4d 	bl	80066ac <HAL_GetTick>
 8009e12:	4602      	mov	r2, r0
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	1ad3      	subs	r3, r2, r3
 8009e18:	2b02      	cmp	r3, #2
 8009e1a:	d901      	bls.n	8009e20 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8009e1c:	2303      	movs	r3, #3
 8009e1e:	e111      	b.n	800a044 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009e20:	4b8a      	ldr	r3, [pc, #552]	; (800a04c <HAL_RCC_ClockConfig+0x278>)
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	f003 0307 	and.w	r3, r3, #7
 8009e28:	683a      	ldr	r2, [r7, #0]
 8009e2a:	429a      	cmp	r2, r3
 8009e2c:	d1ef      	bne.n	8009e0e <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	f003 0302 	and.w	r3, r3, #2
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d016      	beq.n	8009e68 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	689b      	ldr	r3, [r3, #8]
 8009e3e:	4618      	mov	r0, r3
 8009e40:	f7ff fafb 	bl	800943a <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8009e44:	f7fc fc32 	bl	80066ac <HAL_GetTick>
 8009e48:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8009e4a:	e008      	b.n	8009e5e <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8009e4c:	f7fc fc2e 	bl	80066ac <HAL_GetTick>
 8009e50:	4602      	mov	r2, r0
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	1ad3      	subs	r3, r2, r3
 8009e56:	2b02      	cmp	r3, #2
 8009e58:	d901      	bls.n	8009e5e <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8009e5a:	2303      	movs	r3, #3
 8009e5c:	e0f2      	b.n	800a044 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8009e5e:	f7ff fbe8 	bl	8009632 <LL_RCC_IsActiveFlag_HPRE>
 8009e62:	4603      	mov	r3, r0
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d0f1      	beq.n	8009e4c <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	f003 0320 	and.w	r3, r3, #32
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d016      	beq.n	8009ea2 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	695b      	ldr	r3, [r3, #20]
 8009e78:	4618      	mov	r0, r3
 8009e7a:	f7ff faf2 	bl	8009462 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8009e7e:	f7fc fc15 	bl	80066ac <HAL_GetTick>
 8009e82:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8009e84:	e008      	b.n	8009e98 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8009e86:	f7fc fc11 	bl	80066ac <HAL_GetTick>
 8009e8a:	4602      	mov	r2, r0
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	1ad3      	subs	r3, r2, r3
 8009e90:	2b02      	cmp	r3, #2
 8009e92:	d901      	bls.n	8009e98 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8009e94:	2303      	movs	r3, #3
 8009e96:	e0d5      	b.n	800a044 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8009e98:	f7ff fbdd 	bl	8009656 <LL_RCC_IsActiveFlag_C2HPRE>
 8009e9c:	4603      	mov	r3, r0
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d0f1      	beq.n	8009e86 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d016      	beq.n	8009edc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	699b      	ldr	r3, [r3, #24]
 8009eb2:	4618      	mov	r0, r3
 8009eb4:	f7ff faeb 	bl	800948e <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8009eb8:	f7fc fbf8 	bl	80066ac <HAL_GetTick>
 8009ebc:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8009ebe:	e008      	b.n	8009ed2 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8009ec0:	f7fc fbf4 	bl	80066ac <HAL_GetTick>
 8009ec4:	4602      	mov	r2, r0
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	1ad3      	subs	r3, r2, r3
 8009eca:	2b02      	cmp	r3, #2
 8009ecc:	d901      	bls.n	8009ed2 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8009ece:	2303      	movs	r3, #3
 8009ed0:	e0b8      	b.n	800a044 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8009ed2:	f7ff fbd3 	bl	800967c <LL_RCC_IsActiveFlag_SHDHPRE>
 8009ed6:	4603      	mov	r3, r0
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d0f1      	beq.n	8009ec0 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	f003 0304 	and.w	r3, r3, #4
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d016      	beq.n	8009f16 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	68db      	ldr	r3, [r3, #12]
 8009eec:	4618      	mov	r0, r3
 8009eee:	f7ff fae5 	bl	80094bc <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8009ef2:	f7fc fbdb 	bl	80066ac <HAL_GetTick>
 8009ef6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8009ef8:	e008      	b.n	8009f0c <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8009efa:	f7fc fbd7 	bl	80066ac <HAL_GetTick>
 8009efe:	4602      	mov	r2, r0
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	1ad3      	subs	r3, r2, r3
 8009f04:	2b02      	cmp	r3, #2
 8009f06:	d901      	bls.n	8009f0c <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8009f08:	2303      	movs	r3, #3
 8009f0a:	e09b      	b.n	800a044 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8009f0c:	f7ff fbc9 	bl	80096a2 <LL_RCC_IsActiveFlag_PPRE1>
 8009f10:	4603      	mov	r3, r0
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d0f1      	beq.n	8009efa <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	f003 0308 	and.w	r3, r3, #8
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d017      	beq.n	8009f52 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	691b      	ldr	r3, [r3, #16]
 8009f26:	00db      	lsls	r3, r3, #3
 8009f28:	4618      	mov	r0, r3
 8009f2a:	f7ff fadb 	bl	80094e4 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8009f2e:	f7fc fbbd 	bl	80066ac <HAL_GetTick>
 8009f32:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8009f34:	e008      	b.n	8009f48 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8009f36:	f7fc fbb9 	bl	80066ac <HAL_GetTick>
 8009f3a:	4602      	mov	r2, r0
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	1ad3      	subs	r3, r2, r3
 8009f40:	2b02      	cmp	r3, #2
 8009f42:	d901      	bls.n	8009f48 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8009f44:	2303      	movs	r3, #3
 8009f46:	e07d      	b.n	800a044 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8009f48:	f7ff fbbd 	bl	80096c6 <LL_RCC_IsActiveFlag_PPRE2>
 8009f4c:	4603      	mov	r3, r0
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d0f1      	beq.n	8009f36 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	f003 0301 	and.w	r3, r3, #1
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d043      	beq.n	8009fe6 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	685b      	ldr	r3, [r3, #4]
 8009f62:	2b02      	cmp	r3, #2
 8009f64:	d106      	bne.n	8009f74 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8009f66:	f7ff f87b 	bl	8009060 <LL_RCC_HSE_IsReady>
 8009f6a:	4603      	mov	r3, r0
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d11e      	bne.n	8009fae <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8009f70:	2301      	movs	r3, #1
 8009f72:	e067      	b.n	800a044 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	685b      	ldr	r3, [r3, #4]
 8009f78:	2b03      	cmp	r3, #3
 8009f7a:	d106      	bne.n	8009f8a <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8009f7c:	f7ff fb16 	bl	80095ac <LL_RCC_PLL_IsReady>
 8009f80:	4603      	mov	r3, r0
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d113      	bne.n	8009fae <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8009f86:	2301      	movs	r3, #1
 8009f88:	e05c      	b.n	800a044 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	685b      	ldr	r3, [r3, #4]
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d106      	bne.n	8009fa0 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8009f92:	f7ff f9e3 	bl	800935c <LL_RCC_MSI_IsReady>
 8009f96:	4603      	mov	r3, r0
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d108      	bne.n	8009fae <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8009f9c:	2301      	movs	r3, #1
 8009f9e:	e051      	b.n	800a044 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8009fa0:	f7ff f88e 	bl	80090c0 <LL_RCC_HSI_IsReady>
 8009fa4:	4603      	mov	r3, r0
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d101      	bne.n	8009fae <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8009faa:	2301      	movs	r3, #1
 8009fac:	e04a      	b.n	800a044 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	685b      	ldr	r3, [r3, #4]
 8009fb2:	4618      	mov	r0, r3
 8009fb4:	f7ff fa21 	bl	80093fa <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009fb8:	f7fc fb78 	bl	80066ac <HAL_GetTick>
 8009fbc:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009fbe:	e00a      	b.n	8009fd6 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009fc0:	f7fc fb74 	bl	80066ac <HAL_GetTick>
 8009fc4:	4602      	mov	r2, r0
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	1ad3      	subs	r3, r2, r3
 8009fca:	f241 3288 	movw	r2, #5000	; 0x1388
 8009fce:	4293      	cmp	r3, r2
 8009fd0:	d901      	bls.n	8009fd6 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8009fd2:	2303      	movs	r3, #3
 8009fd4:	e036      	b.n	800a044 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009fd6:	f7ff fa24 	bl	8009422 <LL_RCC_GetSysClkSource>
 8009fda:	4602      	mov	r2, r0
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	685b      	ldr	r3, [r3, #4]
 8009fe0:	009b      	lsls	r3, r3, #2
 8009fe2:	429a      	cmp	r2, r3
 8009fe4:	d1ec      	bne.n	8009fc0 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009fe6:	4b19      	ldr	r3, [pc, #100]	; (800a04c <HAL_RCC_ClockConfig+0x278>)
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	f003 0307 	and.w	r3, r3, #7
 8009fee:	683a      	ldr	r2, [r7, #0]
 8009ff0:	429a      	cmp	r2, r3
 8009ff2:	d21b      	bcs.n	800a02c <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009ff4:	4b15      	ldr	r3, [pc, #84]	; (800a04c <HAL_RCC_ClockConfig+0x278>)
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	f023 0207 	bic.w	r2, r3, #7
 8009ffc:	4913      	ldr	r1, [pc, #76]	; (800a04c <HAL_RCC_ClockConfig+0x278>)
 8009ffe:	683b      	ldr	r3, [r7, #0]
 800a000:	4313      	orrs	r3, r2
 800a002:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a004:	f7fc fb52 	bl	80066ac <HAL_GetTick>
 800a008:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a00a:	e008      	b.n	800a01e <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800a00c:	f7fc fb4e 	bl	80066ac <HAL_GetTick>
 800a010:	4602      	mov	r2, r0
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	1ad3      	subs	r3, r2, r3
 800a016:	2b02      	cmp	r3, #2
 800a018:	d901      	bls.n	800a01e <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800a01a:	2303      	movs	r3, #3
 800a01c:	e012      	b.n	800a044 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a01e:	4b0b      	ldr	r3, [pc, #44]	; (800a04c <HAL_RCC_ClockConfig+0x278>)
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	f003 0307 	and.w	r3, r3, #7
 800a026:	683a      	ldr	r2, [r7, #0]
 800a028:	429a      	cmp	r2, r3
 800a02a:	d1ef      	bne.n	800a00c <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800a02c:	f000 f87e 	bl	800a12c <HAL_RCC_GetHCLKFreq>
 800a030:	4603      	mov	r3, r0
 800a032:	4a07      	ldr	r2, [pc, #28]	; (800a050 <HAL_RCC_ClockConfig+0x27c>)
 800a034:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 800a036:	f7fc fb45 	bl	80066c4 <HAL_GetTickPrio>
 800a03a:	4603      	mov	r3, r0
 800a03c:	4618      	mov	r0, r3
 800a03e:	f7fc fae7 	bl	8006610 <HAL_InitTick>
 800a042:	4603      	mov	r3, r0
}
 800a044:	4618      	mov	r0, r3
 800a046:	3710      	adds	r7, #16
 800a048:	46bd      	mov	sp, r7
 800a04a:	bd80      	pop	{r7, pc}
 800a04c:	58004000 	.word	0x58004000
 800a050:	20000004 	.word	0x20000004

0800a054 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a054:	b590      	push	{r4, r7, lr}
 800a056:	b085      	sub	sp, #20
 800a058:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a05a:	f7ff f9e2 	bl	8009422 <LL_RCC_GetSysClkSource>
 800a05e:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	2b00      	cmp	r3, #0
 800a064:	d10a      	bne.n	800a07c <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800a066:	f7ff f99e 	bl	80093a6 <LL_RCC_MSI_GetRange>
 800a06a:	4603      	mov	r3, r0
 800a06c:	091b      	lsrs	r3, r3, #4
 800a06e:	f003 030f 	and.w	r3, r3, #15
 800a072:	4a2b      	ldr	r2, [pc, #172]	; (800a120 <HAL_RCC_GetSysClockFreq+0xcc>)
 800a074:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a078:	60fb      	str	r3, [r7, #12]
 800a07a:	e04b      	b.n	800a114 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	2b04      	cmp	r3, #4
 800a080:	d102      	bne.n	800a088 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800a082:	4b28      	ldr	r3, [pc, #160]	; (800a124 <HAL_RCC_GetSysClockFreq+0xd0>)
 800a084:	60fb      	str	r3, [r7, #12]
 800a086:	e045      	b.n	800a114 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	2b08      	cmp	r3, #8
 800a08c:	d10a      	bne.n	800a0a4 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800a08e:	f7fe ffb7 	bl	8009000 <LL_RCC_HSE_IsEnabledDiv2>
 800a092:	4603      	mov	r3, r0
 800a094:	2b01      	cmp	r3, #1
 800a096:	d102      	bne.n	800a09e <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800a098:	4b22      	ldr	r3, [pc, #136]	; (800a124 <HAL_RCC_GetSysClockFreq+0xd0>)
 800a09a:	60fb      	str	r3, [r7, #12]
 800a09c:	e03a      	b.n	800a114 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800a09e:	4b22      	ldr	r3, [pc, #136]	; (800a128 <HAL_RCC_GetSysClockFreq+0xd4>)
 800a0a0:	60fb      	str	r3, [r7, #12]
 800a0a2:	e037      	b.n	800a114 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800a0a4:	f7ff fab9 	bl	800961a <LL_RCC_PLL_GetMainSource>
 800a0a8:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800a0aa:	683b      	ldr	r3, [r7, #0]
 800a0ac:	2b02      	cmp	r3, #2
 800a0ae:	d003      	beq.n	800a0b8 <HAL_RCC_GetSysClockFreq+0x64>
 800a0b0:	683b      	ldr	r3, [r7, #0]
 800a0b2:	2b03      	cmp	r3, #3
 800a0b4:	d003      	beq.n	800a0be <HAL_RCC_GetSysClockFreq+0x6a>
 800a0b6:	e00d      	b.n	800a0d4 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800a0b8:	4b1a      	ldr	r3, [pc, #104]	; (800a124 <HAL_RCC_GetSysClockFreq+0xd0>)
 800a0ba:	60bb      	str	r3, [r7, #8]
        break;
 800a0bc:	e015      	b.n	800a0ea <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800a0be:	f7fe ff9f 	bl	8009000 <LL_RCC_HSE_IsEnabledDiv2>
 800a0c2:	4603      	mov	r3, r0
 800a0c4:	2b01      	cmp	r3, #1
 800a0c6:	d102      	bne.n	800a0ce <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800a0c8:	4b16      	ldr	r3, [pc, #88]	; (800a124 <HAL_RCC_GetSysClockFreq+0xd0>)
 800a0ca:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800a0cc:	e00d      	b.n	800a0ea <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 800a0ce:	4b16      	ldr	r3, [pc, #88]	; (800a128 <HAL_RCC_GetSysClockFreq+0xd4>)
 800a0d0:	60bb      	str	r3, [r7, #8]
        break;
 800a0d2:	e00a      	b.n	800a0ea <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800a0d4:	f7ff f967 	bl	80093a6 <LL_RCC_MSI_GetRange>
 800a0d8:	4603      	mov	r3, r0
 800a0da:	091b      	lsrs	r3, r3, #4
 800a0dc:	f003 030f 	and.w	r3, r3, #15
 800a0e0:	4a0f      	ldr	r2, [pc, #60]	; (800a120 <HAL_RCC_GetSysClockFreq+0xcc>)
 800a0e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a0e6:	60bb      	str	r3, [r7, #8]
        break;
 800a0e8:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 800a0ea:	f7ff fa71 	bl	80095d0 <LL_RCC_PLL_GetN>
 800a0ee:	4602      	mov	r2, r0
 800a0f0:	68bb      	ldr	r3, [r7, #8]
 800a0f2:	fb03 f402 	mul.w	r4, r3, r2
 800a0f6:	f7ff fa84 	bl	8009602 <LL_RCC_PLL_GetDivider>
 800a0fa:	4603      	mov	r3, r0
 800a0fc:	091b      	lsrs	r3, r3, #4
 800a0fe:	3301      	adds	r3, #1
 800a100:	fbb4 f4f3 	udiv	r4, r4, r3
 800a104:	f7ff fa71 	bl	80095ea <LL_RCC_PLL_GetR>
 800a108:	4603      	mov	r3, r0
 800a10a:	0f5b      	lsrs	r3, r3, #29
 800a10c:	3301      	adds	r3, #1
 800a10e:	fbb4 f3f3 	udiv	r3, r4, r3
 800a112:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 800a114:	68fb      	ldr	r3, [r7, #12]
}
 800a116:	4618      	mov	r0, r3
 800a118:	3714      	adds	r7, #20
 800a11a:	46bd      	mov	sp, r7
 800a11c:	bd90      	pop	{r4, r7, pc}
 800a11e:	bf00      	nop
 800a120:	08017ed4 	.word	0x08017ed4
 800a124:	00f42400 	.word	0x00f42400
 800a128:	01e84800 	.word	0x01e84800

0800a12c <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a12c:	b598      	push	{r3, r4, r7, lr}
 800a12e:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800a130:	f7ff ff90 	bl	800a054 <HAL_RCC_GetSysClockFreq>
 800a134:	4604      	mov	r4, r0
 800a136:	f7ff f9e9 	bl	800950c <LL_RCC_GetAHBPrescaler>
 800a13a:	4603      	mov	r3, r0
 800a13c:	091b      	lsrs	r3, r3, #4
 800a13e:	f003 030f 	and.w	r3, r3, #15
 800a142:	4a03      	ldr	r2, [pc, #12]	; (800a150 <HAL_RCC_GetHCLKFreq+0x24>)
 800a144:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a148:	fbb4 f3f3 	udiv	r3, r4, r3
}
 800a14c:	4618      	mov	r0, r3
 800a14e:	bd98      	pop	{r3, r4, r7, pc}
 800a150:	08017e74 	.word	0x08017e74

0800a154 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a154:	b598      	push	{r3, r4, r7, lr}
 800a156:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800a158:	f7ff ffe8 	bl	800a12c <HAL_RCC_GetHCLKFreq>
 800a15c:	4604      	mov	r4, r0
 800a15e:	f7ff f9ef 	bl	8009540 <LL_RCC_GetAPB1Prescaler>
 800a162:	4603      	mov	r3, r0
 800a164:	0a1b      	lsrs	r3, r3, #8
 800a166:	f003 0307 	and.w	r3, r3, #7
 800a16a:	4a04      	ldr	r2, [pc, #16]	; (800a17c <HAL_RCC_GetPCLK1Freq+0x28>)
 800a16c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a170:	f003 031f 	and.w	r3, r3, #31
 800a174:	fa24 f303 	lsr.w	r3, r4, r3
}
 800a178:	4618      	mov	r0, r3
 800a17a:	bd98      	pop	{r3, r4, r7, pc}
 800a17c:	08017eb4 	.word	0x08017eb4

0800a180 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a180:	b598      	push	{r3, r4, r7, lr}
 800a182:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 800a184:	f7ff ffd2 	bl	800a12c <HAL_RCC_GetHCLKFreq>
 800a188:	4604      	mov	r4, r0
 800a18a:	f7ff f9e5 	bl	8009558 <LL_RCC_GetAPB2Prescaler>
 800a18e:	4603      	mov	r3, r0
 800a190:	0adb      	lsrs	r3, r3, #11
 800a192:	f003 0307 	and.w	r3, r3, #7
 800a196:	4a04      	ldr	r2, [pc, #16]	; (800a1a8 <HAL_RCC_GetPCLK2Freq+0x28>)
 800a198:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a19c:	f003 031f 	and.w	r3, r3, #31
 800a1a0:	fa24 f303 	lsr.w	r3, r4, r3
}
 800a1a4:	4618      	mov	r0, r3
 800a1a6:	bd98      	pop	{r3, r4, r7, pc}
 800a1a8:	08017eb4 	.word	0x08017eb4

0800a1ac <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 800a1ac:	b590      	push	{r4, r7, lr}
 800a1ae:	b085      	sub	sp, #20
 800a1b0:	af00      	add	r7, sp, #0
 800a1b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	2bb0      	cmp	r3, #176	; 0xb0
 800a1b8:	d903      	bls.n	800a1c2 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 800a1ba:	4b15      	ldr	r3, [pc, #84]	; (800a210 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800a1bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1be:	60fb      	str	r3, [r7, #12]
 800a1c0:	e007      	b.n	800a1d2 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	091b      	lsrs	r3, r3, #4
 800a1c6:	f003 030f 	and.w	r3, r3, #15
 800a1ca:	4a11      	ldr	r2, [pc, #68]	; (800a210 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800a1cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a1d0:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 800a1d2:	f7ff f9a7 	bl	8009524 <LL_RCC_GetAHB4Prescaler>
 800a1d6:	4603      	mov	r3, r0
 800a1d8:	091b      	lsrs	r3, r3, #4
 800a1da:	f003 030f 	and.w	r3, r3, #15
 800a1de:	4a0d      	ldr	r2, [pc, #52]	; (800a214 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 800a1e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a1e4:	68fa      	ldr	r2, [r7, #12]
 800a1e6:	fbb2 f3f3 	udiv	r3, r2, r3
 800a1ea:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800a1ec:	68bb      	ldr	r3, [r7, #8]
 800a1ee:	4a0a      	ldr	r2, [pc, #40]	; (800a218 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 800a1f0:	fba2 2303 	umull	r2, r3, r2, r3
 800a1f4:	0c9c      	lsrs	r4, r3, #18
 800a1f6:	f7fe fef5 	bl	8008fe4 <HAL_PWREx_GetVoltageRange>
 800a1fa:	4603      	mov	r3, r0
 800a1fc:	4619      	mov	r1, r3
 800a1fe:	4620      	mov	r0, r4
 800a200:	f000 f80c 	bl	800a21c <RCC_SetFlashLatency>
 800a204:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 800a206:	4618      	mov	r0, r3
 800a208:	3714      	adds	r7, #20
 800a20a:	46bd      	mov	sp, r7
 800a20c:	bd90      	pop	{r4, r7, pc}
 800a20e:	bf00      	nop
 800a210:	08017ed4 	.word	0x08017ed4
 800a214:	08017e74 	.word	0x08017e74
 800a218:	431bde83 	.word	0x431bde83

0800a21c <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 800a21c:	b590      	push	{r4, r7, lr}
 800a21e:	b093      	sub	sp, #76	; 0x4c
 800a220:	af00      	add	r7, sp, #0
 800a222:	6078      	str	r0, [r7, #4]
 800a224:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800a226:	4b37      	ldr	r3, [pc, #220]	; (800a304 <RCC_SetFlashLatency+0xe8>)
 800a228:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800a22c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800a22e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 800a232:	4a35      	ldr	r2, [pc, #212]	; (800a308 <RCC_SetFlashLatency+0xec>)
 800a234:	f107 031c 	add.w	r3, r7, #28
 800a238:	ca07      	ldmia	r2, {r0, r1, r2}
 800a23a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800a23e:	4b33      	ldr	r3, [pc, #204]	; (800a30c <RCC_SetFlashLatency+0xf0>)
 800a240:	f107 040c 	add.w	r4, r7, #12
 800a244:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800a246:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800a24a:	2300      	movs	r3, #0
 800a24c:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800a24e:	683b      	ldr	r3, [r7, #0]
 800a250:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a254:	d11a      	bne.n	800a28c <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800a256:	2300      	movs	r3, #0
 800a258:	643b      	str	r3, [r7, #64]	; 0x40
 800a25a:	e013      	b.n	800a284 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800a25c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a25e:	009b      	lsls	r3, r3, #2
 800a260:	3348      	adds	r3, #72	; 0x48
 800a262:	443b      	add	r3, r7
 800a264:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800a268:	687a      	ldr	r2, [r7, #4]
 800a26a:	429a      	cmp	r2, r3
 800a26c:	d807      	bhi.n	800a27e <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800a26e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a270:	009b      	lsls	r3, r3, #2
 800a272:	3348      	adds	r3, #72	; 0x48
 800a274:	443b      	add	r3, r7
 800a276:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800a27a:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 800a27c:	e020      	b.n	800a2c0 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800a27e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a280:	3301      	adds	r3, #1
 800a282:	643b      	str	r3, [r7, #64]	; 0x40
 800a284:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a286:	2b03      	cmp	r3, #3
 800a288:	d9e8      	bls.n	800a25c <RCC_SetFlashLatency+0x40>
 800a28a:	e019      	b.n	800a2c0 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800a28c:	2300      	movs	r3, #0
 800a28e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a290:	e013      	b.n	800a2ba <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800a292:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a294:	009b      	lsls	r3, r3, #2
 800a296:	3348      	adds	r3, #72	; 0x48
 800a298:	443b      	add	r3, r7
 800a29a:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800a29e:	687a      	ldr	r2, [r7, #4]
 800a2a0:	429a      	cmp	r2, r3
 800a2a2:	d807      	bhi.n	800a2b4 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800a2a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a2a6:	009b      	lsls	r3, r3, #2
 800a2a8:	3348      	adds	r3, #72	; 0x48
 800a2aa:	443b      	add	r3, r7
 800a2ac:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800a2b0:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 800a2b2:	e005      	b.n	800a2c0 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800a2b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a2b6:	3301      	adds	r3, #1
 800a2b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a2ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a2bc:	2b02      	cmp	r3, #2
 800a2be:	d9e8      	bls.n	800a292 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 800a2c0:	4b13      	ldr	r3, [pc, #76]	; (800a310 <RCC_SetFlashLatency+0xf4>)
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	f023 0207 	bic.w	r2, r3, #7
 800a2c8:	4911      	ldr	r1, [pc, #68]	; (800a310 <RCC_SetFlashLatency+0xf4>)
 800a2ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a2cc:	4313      	orrs	r3, r2
 800a2ce:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800a2d0:	f7fc f9ec 	bl	80066ac <HAL_GetTick>
 800a2d4:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800a2d6:	e008      	b.n	800a2ea <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800a2d8:	f7fc f9e8 	bl	80066ac <HAL_GetTick>
 800a2dc:	4602      	mov	r2, r0
 800a2de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2e0:	1ad3      	subs	r3, r2, r3
 800a2e2:	2b02      	cmp	r3, #2
 800a2e4:	d901      	bls.n	800a2ea <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 800a2e6:	2303      	movs	r3, #3
 800a2e8:	e007      	b.n	800a2fa <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800a2ea:	4b09      	ldr	r3, [pc, #36]	; (800a310 <RCC_SetFlashLatency+0xf4>)
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	f003 0307 	and.w	r3, r3, #7
 800a2f2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a2f4:	429a      	cmp	r2, r3
 800a2f6:	d1ef      	bne.n	800a2d8 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 800a2f8:	2300      	movs	r3, #0
}
 800a2fa:	4618      	mov	r0, r3
 800a2fc:	374c      	adds	r7, #76	; 0x4c
 800a2fe:	46bd      	mov	sp, r7
 800a300:	bd90      	pop	{r4, r7, pc}
 800a302:	bf00      	nop
 800a304:	080165ec 	.word	0x080165ec
 800a308:	080165fc 	.word	0x080165fc
 800a30c:	08016608 	.word	0x08016608
 800a310:	58004000 	.word	0x58004000

0800a314 <LL_RCC_LSE_IsEnabled>:
{
 800a314:	b480      	push	{r7}
 800a316:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 800a318:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a31c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a320:	f003 0301 	and.w	r3, r3, #1
 800a324:	2b01      	cmp	r3, #1
 800a326:	d101      	bne.n	800a32c <LL_RCC_LSE_IsEnabled+0x18>
 800a328:	2301      	movs	r3, #1
 800a32a:	e000      	b.n	800a32e <LL_RCC_LSE_IsEnabled+0x1a>
 800a32c:	2300      	movs	r3, #0
}
 800a32e:	4618      	mov	r0, r3
 800a330:	46bd      	mov	sp, r7
 800a332:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a336:	4770      	bx	lr

0800a338 <LL_RCC_LSE_IsReady>:
{
 800a338:	b480      	push	{r7}
 800a33a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800a33c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a340:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a344:	f003 0302 	and.w	r3, r3, #2
 800a348:	2b02      	cmp	r3, #2
 800a34a:	d101      	bne.n	800a350 <LL_RCC_LSE_IsReady+0x18>
 800a34c:	2301      	movs	r3, #1
 800a34e:	e000      	b.n	800a352 <LL_RCC_LSE_IsReady+0x1a>
 800a350:	2300      	movs	r3, #0
}
 800a352:	4618      	mov	r0, r3
 800a354:	46bd      	mov	sp, r7
 800a356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a35a:	4770      	bx	lr

0800a35c <LL_RCC_MSI_EnablePLLMode>:
{
 800a35c:	b480      	push	{r7}
 800a35e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 800a360:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a36a:	f043 0304 	orr.w	r3, r3, #4
 800a36e:	6013      	str	r3, [r2, #0]
}
 800a370:	bf00      	nop
 800a372:	46bd      	mov	sp, r7
 800a374:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a378:	4770      	bx	lr

0800a37a <LL_RCC_SetRFWKPClockSource>:
{
 800a37a:	b480      	push	{r7}
 800a37c:	b083      	sub	sp, #12
 800a37e:	af00      	add	r7, sp, #0
 800a380:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 800a382:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a386:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a38a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800a38e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	4313      	orrs	r3, r2
 800a396:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 800a39a:	bf00      	nop
 800a39c:	370c      	adds	r7, #12
 800a39e:	46bd      	mov	sp, r7
 800a3a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a4:	4770      	bx	lr

0800a3a6 <LL_RCC_SetSMPSClockSource>:
{
 800a3a6:	b480      	push	{r7}
 800a3a8:	b083      	sub	sp, #12
 800a3aa:	af00      	add	r7, sp, #0
 800a3ac:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 800a3ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a3b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3b4:	f023 0203 	bic.w	r2, r3, #3
 800a3b8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	4313      	orrs	r3, r2
 800a3c0:	624b      	str	r3, [r1, #36]	; 0x24
}
 800a3c2:	bf00      	nop
 800a3c4:	370c      	adds	r7, #12
 800a3c6:	46bd      	mov	sp, r7
 800a3c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3cc:	4770      	bx	lr

0800a3ce <LL_RCC_SetSMPSPrescaler>:
{
 800a3ce:	b480      	push	{r7}
 800a3d0:	b083      	sub	sp, #12
 800a3d2:	af00      	add	r7, sp, #0
 800a3d4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 800a3d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a3da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3dc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800a3e0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	4313      	orrs	r3, r2
 800a3e8:	624b      	str	r3, [r1, #36]	; 0x24
}
 800a3ea:	bf00      	nop
 800a3ec:	370c      	adds	r7, #12
 800a3ee:	46bd      	mov	sp, r7
 800a3f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f4:	4770      	bx	lr

0800a3f6 <LL_RCC_SetUSARTClockSource>:
{
 800a3f6:	b480      	push	{r7}
 800a3f8:	b083      	sub	sp, #12
 800a3fa:	af00      	add	r7, sp, #0
 800a3fc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 800a3fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a402:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a406:	f023 0203 	bic.w	r2, r3, #3
 800a40a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	4313      	orrs	r3, r2
 800a412:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800a416:	bf00      	nop
 800a418:	370c      	adds	r7, #12
 800a41a:	46bd      	mov	sp, r7
 800a41c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a420:	4770      	bx	lr

0800a422 <LL_RCC_SetLPUARTClockSource>:
{
 800a422:	b480      	push	{r7}
 800a424:	b083      	sub	sp, #12
 800a426:	af00      	add	r7, sp, #0
 800a428:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800a42a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a42e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a432:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800a436:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	4313      	orrs	r3, r2
 800a43e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800a442:	bf00      	nop
 800a444:	370c      	adds	r7, #12
 800a446:	46bd      	mov	sp, r7
 800a448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a44c:	4770      	bx	lr

0800a44e <LL_RCC_SetI2CClockSource>:
{
 800a44e:	b480      	push	{r7}
 800a450:	b083      	sub	sp, #12
 800a452:	af00      	add	r7, sp, #0
 800a454:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800a456:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a45a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	091b      	lsrs	r3, r3, #4
 800a462:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800a466:	43db      	mvns	r3, r3
 800a468:	401a      	ands	r2, r3
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	011b      	lsls	r3, r3, #4
 800a46e:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800a472:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a476:	4313      	orrs	r3, r2
 800a478:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800a47c:	bf00      	nop
 800a47e:	370c      	adds	r7, #12
 800a480:	46bd      	mov	sp, r7
 800a482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a486:	4770      	bx	lr

0800a488 <LL_RCC_SetLPTIMClockSource>:
{
 800a488:	b480      	push	{r7}
 800a48a:	b083      	sub	sp, #12
 800a48c:	af00      	add	r7, sp, #0
 800a48e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800a490:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a494:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	0c1b      	lsrs	r3, r3, #16
 800a49c:	041b      	lsls	r3, r3, #16
 800a49e:	43db      	mvns	r3, r3
 800a4a0:	401a      	ands	r2, r3
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	041b      	lsls	r3, r3, #16
 800a4a6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a4aa:	4313      	orrs	r3, r2
 800a4ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800a4b0:	bf00      	nop
 800a4b2:	370c      	adds	r7, #12
 800a4b4:	46bd      	mov	sp, r7
 800a4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ba:	4770      	bx	lr

0800a4bc <LL_RCC_SetSAIClockSource>:
{
 800a4bc:	b480      	push	{r7}
 800a4be:	b083      	sub	sp, #12
 800a4c0:	af00      	add	r7, sp, #0
 800a4c2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 800a4c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a4c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a4cc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800a4d0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	4313      	orrs	r3, r2
 800a4d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800a4dc:	bf00      	nop
 800a4de:	370c      	adds	r7, #12
 800a4e0:	46bd      	mov	sp, r7
 800a4e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e6:	4770      	bx	lr

0800a4e8 <LL_RCC_SetRNGClockSource>:
{
 800a4e8:	b480      	push	{r7}
 800a4ea:	b083      	sub	sp, #12
 800a4ec:	af00      	add	r7, sp, #0
 800a4ee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800a4f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a4f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a4f8:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800a4fc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	4313      	orrs	r3, r2
 800a504:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800a508:	bf00      	nop
 800a50a:	370c      	adds	r7, #12
 800a50c:	46bd      	mov	sp, r7
 800a50e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a512:	4770      	bx	lr

0800a514 <LL_RCC_SetCLK48ClockSource>:
{
 800a514:	b480      	push	{r7}
 800a516:	b083      	sub	sp, #12
 800a518:	af00      	add	r7, sp, #0
 800a51a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 800a51c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a520:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a524:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800a528:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	4313      	orrs	r3, r2
 800a530:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800a534:	bf00      	nop
 800a536:	370c      	adds	r7, #12
 800a538:	46bd      	mov	sp, r7
 800a53a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a53e:	4770      	bx	lr

0800a540 <LL_RCC_SetUSBClockSource>:
{
 800a540:	b580      	push	{r7, lr}
 800a542:	b082      	sub	sp, #8
 800a544:	af00      	add	r7, sp, #0
 800a546:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 800a548:	6878      	ldr	r0, [r7, #4]
 800a54a:	f7ff ffe3 	bl	800a514 <LL_RCC_SetCLK48ClockSource>
}
 800a54e:	bf00      	nop
 800a550:	3708      	adds	r7, #8
 800a552:	46bd      	mov	sp, r7
 800a554:	bd80      	pop	{r7, pc}

0800a556 <LL_RCC_SetADCClockSource>:
{
 800a556:	b480      	push	{r7}
 800a558:	b083      	sub	sp, #12
 800a55a:	af00      	add	r7, sp, #0
 800a55c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800a55e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a562:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a566:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800a56a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	4313      	orrs	r3, r2
 800a572:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800a576:	bf00      	nop
 800a578:	370c      	adds	r7, #12
 800a57a:	46bd      	mov	sp, r7
 800a57c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a580:	4770      	bx	lr

0800a582 <LL_RCC_SetRTCClockSource>:
{
 800a582:	b480      	push	{r7}
 800a584:	b083      	sub	sp, #12
 800a586:	af00      	add	r7, sp, #0
 800a588:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800a58a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a58e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a592:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a596:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	4313      	orrs	r3, r2
 800a59e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800a5a2:	bf00      	nop
 800a5a4:	370c      	adds	r7, #12
 800a5a6:	46bd      	mov	sp, r7
 800a5a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ac:	4770      	bx	lr

0800a5ae <LL_RCC_GetRTCClockSource>:
{
 800a5ae:	b480      	push	{r7}
 800a5b0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800a5b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a5b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a5ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 800a5be:	4618      	mov	r0, r3
 800a5c0:	46bd      	mov	sp, r7
 800a5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c6:	4770      	bx	lr

0800a5c8 <LL_RCC_ForceBackupDomainReset>:
{
 800a5c8:	b480      	push	{r7}
 800a5ca:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800a5cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a5d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a5d4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a5d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a5dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800a5e0:	bf00      	nop
 800a5e2:	46bd      	mov	sp, r7
 800a5e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e8:	4770      	bx	lr

0800a5ea <LL_RCC_ReleaseBackupDomainReset>:
{
 800a5ea:	b480      	push	{r7}
 800a5ec:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800a5ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a5f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a5f6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a5fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a5fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800a602:	bf00      	nop
 800a604:	46bd      	mov	sp, r7
 800a606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a60a:	4770      	bx	lr

0800a60c <LL_RCC_PLLSAI1_Enable>:
{
 800a60c:	b480      	push	{r7}
 800a60e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800a610:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a61a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a61e:	6013      	str	r3, [r2, #0]
}
 800a620:	bf00      	nop
 800a622:	46bd      	mov	sp, r7
 800a624:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a628:	4770      	bx	lr

0800a62a <LL_RCC_PLLSAI1_Disable>:
{
 800a62a:	b480      	push	{r7}
 800a62c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800a62e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a638:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a63c:	6013      	str	r3, [r2, #0]
}
 800a63e:	bf00      	nop
 800a640:	46bd      	mov	sp, r7
 800a642:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a646:	4770      	bx	lr

0800a648 <LL_RCC_PLLSAI1_IsReady>:
{
 800a648:	b480      	push	{r7}
 800a64a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 800a64c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a656:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a65a:	d101      	bne.n	800a660 <LL_RCC_PLLSAI1_IsReady+0x18>
 800a65c:	2301      	movs	r3, #1
 800a65e:	e000      	b.n	800a662 <LL_RCC_PLLSAI1_IsReady+0x1a>
 800a660:	2300      	movs	r3, #0
}
 800a662:	4618      	mov	r0, r3
 800a664:	46bd      	mov	sp, r7
 800a666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a66a:	4770      	bx	lr

0800a66c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a66c:	b580      	push	{r7, lr}
 800a66e:	b088      	sub	sp, #32
 800a670:	af00      	add	r7, sp, #0
 800a672:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 800a674:	2300      	movs	r3, #0
 800a676:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800a678:	2300      	movs	r3, #0
 800a67a:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a684:	2b00      	cmp	r3, #0
 800a686:	d034      	beq.n	800a6f2 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a68c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800a690:	d021      	beq.n	800a6d6 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 800a692:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800a696:	d81b      	bhi.n	800a6d0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800a698:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a69c:	d01d      	beq.n	800a6da <HAL_RCCEx_PeriphCLKConfig+0x6e>
 800a69e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a6a2:	d815      	bhi.n	800a6d0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d00b      	beq.n	800a6c0 <HAL_RCCEx_PeriphCLKConfig+0x54>
 800a6a8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a6ac:	d110      	bne.n	800a6d0 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 800a6ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a6b2:	68db      	ldr	r3, [r3, #12]
 800a6b4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a6b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a6bc:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 800a6be:	e00d      	b.n	800a6dc <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	3304      	adds	r3, #4
 800a6c4:	4618      	mov	r0, r3
 800a6c6:	f000 f94d 	bl	800a964 <RCCEx_PLLSAI1_ConfigNP>
 800a6ca:	4603      	mov	r3, r0
 800a6cc:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800a6ce:	e005      	b.n	800a6dc <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 800a6d0:	2301      	movs	r3, #1
 800a6d2:	77fb      	strb	r3, [r7, #31]
        break;
 800a6d4:	e002      	b.n	800a6dc <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800a6d6:	bf00      	nop
 800a6d8:	e000      	b.n	800a6dc <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800a6da:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a6dc:	7ffb      	ldrb	r3, [r7, #31]
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d105      	bne.n	800a6ee <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6e6:	4618      	mov	r0, r3
 800a6e8:	f7ff fee8 	bl	800a4bc <LL_RCC_SetSAIClockSource>
 800a6ec:	e001      	b.n	800a6f2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a6ee:	7ffb      	ldrb	r3, [r7, #31]
 800a6f0:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d046      	beq.n	800a78c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 800a6fe:	f7ff ff56 	bl	800a5ae <LL_RCC_GetRTCClockSource>
 800a702:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a708:	69ba      	ldr	r2, [r7, #24]
 800a70a:	429a      	cmp	r2, r3
 800a70c:	d03c      	beq.n	800a788 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800a70e:	f7fe fc59 	bl	8008fc4 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 800a712:	69bb      	ldr	r3, [r7, #24]
 800a714:	2b00      	cmp	r3, #0
 800a716:	d105      	bne.n	800a724 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a71c:	4618      	mov	r0, r3
 800a71e:	f7ff ff30 	bl	800a582 <LL_RCC_SetRTCClockSource>
 800a722:	e02e      	b.n	800a782 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 800a724:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a728:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a72c:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 800a72e:	f7ff ff4b 	bl	800a5c8 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 800a732:	f7ff ff5a 	bl	800a5ea <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 800a736:	697b      	ldr	r3, [r7, #20]
 800a738:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a740:	4313      	orrs	r3, r2
 800a742:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 800a744:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a748:	697b      	ldr	r3, [r7, #20]
 800a74a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 800a74e:	f7ff fde1 	bl	800a314 <LL_RCC_LSE_IsEnabled>
 800a752:	4603      	mov	r3, r0
 800a754:	2b01      	cmp	r3, #1
 800a756:	d114      	bne.n	800a782 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800a758:	f7fb ffa8 	bl	80066ac <HAL_GetTick>
 800a75c:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 800a75e:	e00b      	b.n	800a778 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a760:	f7fb ffa4 	bl	80066ac <HAL_GetTick>
 800a764:	4602      	mov	r2, r0
 800a766:	693b      	ldr	r3, [r7, #16]
 800a768:	1ad3      	subs	r3, r2, r3
 800a76a:	f241 3288 	movw	r2, #5000	; 0x1388
 800a76e:	4293      	cmp	r3, r2
 800a770:	d902      	bls.n	800a778 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 800a772:	2303      	movs	r3, #3
 800a774:	77fb      	strb	r3, [r7, #31]
              break;
 800a776:	e004      	b.n	800a782 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 800a778:	f7ff fdde 	bl	800a338 <LL_RCC_LSE_IsReady>
 800a77c:	4603      	mov	r3, r0
 800a77e:	2b01      	cmp	r3, #1
 800a780:	d1ee      	bne.n	800a760 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 800a782:	7ffb      	ldrb	r3, [r7, #31]
 800a784:	77bb      	strb	r3, [r7, #30]
 800a786:	e001      	b.n	800a78c <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a788:	7ffb      	ldrb	r3, [r7, #31]
 800a78a:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	f003 0301 	and.w	r3, r3, #1
 800a794:	2b00      	cmp	r3, #0
 800a796:	d004      	beq.n	800a7a2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	699b      	ldr	r3, [r3, #24]
 800a79c:	4618      	mov	r0, r3
 800a79e:	f7ff fe2a 	bl	800a3f6 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	f003 0302 	and.w	r3, r3, #2
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d004      	beq.n	800a7b8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	69db      	ldr	r3, [r3, #28]
 800a7b2:	4618      	mov	r0, r3
 800a7b4:	f7ff fe35 	bl	800a422 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	f003 0310 	and.w	r3, r3, #16
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d004      	beq.n	800a7ce <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a7c8:	4618      	mov	r0, r3
 800a7ca:	f7ff fe5d 	bl	800a488 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	f003 0320 	and.w	r3, r3, #32
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d004      	beq.n	800a7e4 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7de:	4618      	mov	r0, r3
 800a7e0:	f7ff fe52 	bl	800a488 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	f003 0304 	and.w	r3, r3, #4
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d004      	beq.n	800a7fa <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	6a1b      	ldr	r3, [r3, #32]
 800a7f4:	4618      	mov	r0, r3
 800a7f6:	f7ff fe2a 	bl	800a44e <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	f003 0308 	and.w	r3, r3, #8
 800a802:	2b00      	cmp	r3, #0
 800a804:	d004      	beq.n	800a810 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a80a:	4618      	mov	r0, r3
 800a80c:	f7ff fe1f 	bl	800a44e <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d022      	beq.n	800a862 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a820:	4618      	mov	r0, r3
 800a822:	f7ff fe8d 	bl	800a540 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a82a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a82e:	d107      	bne.n	800a840 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 800a830:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a834:	68db      	ldr	r3, [r3, #12]
 800a836:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a83a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a83e:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a844:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a848:	d10b      	bne.n	800a862 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	3304      	adds	r3, #4
 800a84e:	4618      	mov	r0, r3
 800a850:	f000 f8e3 	bl	800aa1a <RCCEx_PLLSAI1_ConfigNQ>
 800a854:	4603      	mov	r3, r0
 800a856:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800a858:	7ffb      	ldrb	r3, [r7, #31]
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d001      	beq.n	800a862 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 800a85e:	7ffb      	ldrb	r3, [r7, #31]
 800a860:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d02b      	beq.n	800a8c6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a872:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a876:	d008      	beq.n	800a88a <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a87c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a880:	d003      	beq.n	800a88a <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a886:	2b00      	cmp	r3, #0
 800a888:	d105      	bne.n	800a896 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a88e:	4618      	mov	r0, r3
 800a890:	f7ff fe2a 	bl	800a4e8 <LL_RCC_SetRNGClockSource>
 800a894:	e00a      	b.n	800a8ac <HAL_RCCEx_PeriphCLKConfig+0x240>
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a89a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a89e:	60fb      	str	r3, [r7, #12]
 800a8a0:	2000      	movs	r0, #0
 800a8a2:	f7ff fe21 	bl	800a4e8 <LL_RCC_SetRNGClockSource>
 800a8a6:	68f8      	ldr	r0, [r7, #12]
 800a8a8:	f7ff fe34 	bl	800a514 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8b0:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 800a8b4:	d107      	bne.n	800a8c6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800a8b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a8ba:	68db      	ldr	r3, [r3, #12]
 800a8bc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a8c0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a8c4:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d022      	beq.n	800a918 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a8d6:	4618      	mov	r0, r3
 800a8d8:	f7ff fe3d 	bl	800a556 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a8e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a8e4:	d107      	bne.n	800a8f6 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800a8e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a8ea:	68db      	ldr	r3, [r3, #12]
 800a8ec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a8f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a8f4:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a8fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a8fe:	d10b      	bne.n	800a918 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	3304      	adds	r3, #4
 800a904:	4618      	mov	r0, r3
 800a906:	f000 f8e3 	bl	800aad0 <RCCEx_PLLSAI1_ConfigNR>
 800a90a:	4603      	mov	r3, r0
 800a90c:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800a90e:	7ffb      	ldrb	r3, [r7, #31]
 800a910:	2b00      	cmp	r3, #0
 800a912:	d001      	beq.n	800a918 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 800a914:	7ffb      	ldrb	r3, [r7, #31]
 800a916:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a920:	2b00      	cmp	r3, #0
 800a922:	d004      	beq.n	800a92e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a928:	4618      	mov	r0, r3
 800a92a:	f7ff fd26 	bl	800a37a <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a936:	2b00      	cmp	r3, #0
 800a938:	d009      	beq.n	800a94e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a93e:	4618      	mov	r0, r3
 800a940:	f7ff fd45 	bl	800a3ce <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a948:	4618      	mov	r0, r3
 800a94a:	f7ff fd2c 	bl	800a3a6 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 800a94e:	7fbb      	ldrb	r3, [r7, #30]
}
 800a950:	4618      	mov	r0, r3
 800a952:	3720      	adds	r7, #32
 800a954:	46bd      	mov	sp, r7
 800a956:	bd80      	pop	{r7, pc}

0800a958 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800a958:	b580      	push	{r7, lr}
 800a95a:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 800a95c:	f7ff fcfe 	bl	800a35c <LL_RCC_MSI_EnablePLLMode>
}
 800a960:	bf00      	nop
 800a962:	bd80      	pop	{r7, pc}

0800a964 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800a964:	b580      	push	{r7, lr}
 800a966:	b084      	sub	sp, #16
 800a968:	af00      	add	r7, sp, #0
 800a96a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a96c:	2300      	movs	r3, #0
 800a96e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800a970:	f7ff fe5b 	bl	800a62a <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800a974:	f7fb fe9a 	bl	80066ac <HAL_GetTick>
 800a978:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800a97a:	e009      	b.n	800a990 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800a97c:	f7fb fe96 	bl	80066ac <HAL_GetTick>
 800a980:	4602      	mov	r2, r0
 800a982:	68bb      	ldr	r3, [r7, #8]
 800a984:	1ad3      	subs	r3, r2, r3
 800a986:	2b02      	cmp	r3, #2
 800a988:	d902      	bls.n	800a990 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 800a98a:	2303      	movs	r3, #3
 800a98c:	73fb      	strb	r3, [r7, #15]
      break;
 800a98e:	e004      	b.n	800a99a <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800a990:	f7ff fe5a 	bl	800a648 <LL_RCC_PLLSAI1_IsReady>
 800a994:	4603      	mov	r3, r0
 800a996:	2b00      	cmp	r3, #0
 800a998:	d1f0      	bne.n	800a97c <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 800a99a:	7bfb      	ldrb	r3, [r7, #15]
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d137      	bne.n	800aa10 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800a9a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a9a4:	691b      	ldr	r3, [r3, #16]
 800a9a6:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	021b      	lsls	r3, r3, #8
 800a9b0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a9b4:	4313      	orrs	r3, r2
 800a9b6:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 800a9b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a9bc:	691b      	ldr	r3, [r3, #16]
 800a9be:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	685b      	ldr	r3, [r3, #4]
 800a9c6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a9ca:	4313      	orrs	r3, r2
 800a9cc:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800a9ce:	f7ff fe1d 	bl	800a60c <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a9d2:	f7fb fe6b 	bl	80066ac <HAL_GetTick>
 800a9d6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800a9d8:	e009      	b.n	800a9ee <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800a9da:	f7fb fe67 	bl	80066ac <HAL_GetTick>
 800a9de:	4602      	mov	r2, r0
 800a9e0:	68bb      	ldr	r3, [r7, #8]
 800a9e2:	1ad3      	subs	r3, r2, r3
 800a9e4:	2b02      	cmp	r3, #2
 800a9e6:	d902      	bls.n	800a9ee <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 800a9e8:	2303      	movs	r3, #3
 800a9ea:	73fb      	strb	r3, [r7, #15]
        break;
 800a9ec:	e004      	b.n	800a9f8 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800a9ee:	f7ff fe2b 	bl	800a648 <LL_RCC_PLLSAI1_IsReady>
 800a9f2:	4603      	mov	r3, r0
 800a9f4:	2b01      	cmp	r3, #1
 800a9f6:	d1f0      	bne.n	800a9da <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 800a9f8:	7bfb      	ldrb	r3, [r7, #15]
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d108      	bne.n	800aa10 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800a9fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800aa02:	691a      	ldr	r2, [r3, #16]
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	691b      	ldr	r3, [r3, #16]
 800aa08:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800aa0c:	4313      	orrs	r3, r2
 800aa0e:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800aa10:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa12:	4618      	mov	r0, r3
 800aa14:	3710      	adds	r7, #16
 800aa16:	46bd      	mov	sp, r7
 800aa18:	bd80      	pop	{r7, pc}

0800aa1a <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800aa1a:	b580      	push	{r7, lr}
 800aa1c:	b084      	sub	sp, #16
 800aa1e:	af00      	add	r7, sp, #0
 800aa20:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800aa22:	2300      	movs	r3, #0
 800aa24:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800aa26:	f7ff fe00 	bl	800a62a <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800aa2a:	f7fb fe3f 	bl	80066ac <HAL_GetTick>
 800aa2e:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800aa30:	e009      	b.n	800aa46 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800aa32:	f7fb fe3b 	bl	80066ac <HAL_GetTick>
 800aa36:	4602      	mov	r2, r0
 800aa38:	68bb      	ldr	r3, [r7, #8]
 800aa3a:	1ad3      	subs	r3, r2, r3
 800aa3c:	2b02      	cmp	r3, #2
 800aa3e:	d902      	bls.n	800aa46 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 800aa40:	2303      	movs	r3, #3
 800aa42:	73fb      	strb	r3, [r7, #15]
      break;
 800aa44:	e004      	b.n	800aa50 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800aa46:	f7ff fdff 	bl	800a648 <LL_RCC_PLLSAI1_IsReady>
 800aa4a:	4603      	mov	r3, r0
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d1f0      	bne.n	800aa32 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 800aa50:	7bfb      	ldrb	r3, [r7, #15]
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d137      	bne.n	800aac6 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800aa56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800aa5a:	691b      	ldr	r3, [r3, #16]
 800aa5c:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	021b      	lsls	r3, r3, #8
 800aa66:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800aa6a:	4313      	orrs	r3, r2
 800aa6c:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 800aa6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800aa72:	691b      	ldr	r3, [r3, #16]
 800aa74:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	689b      	ldr	r3, [r3, #8]
 800aa7c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800aa80:	4313      	orrs	r3, r2
 800aa82:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800aa84:	f7ff fdc2 	bl	800a60c <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800aa88:	f7fb fe10 	bl	80066ac <HAL_GetTick>
 800aa8c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800aa8e:	e009      	b.n	800aaa4 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800aa90:	f7fb fe0c 	bl	80066ac <HAL_GetTick>
 800aa94:	4602      	mov	r2, r0
 800aa96:	68bb      	ldr	r3, [r7, #8]
 800aa98:	1ad3      	subs	r3, r2, r3
 800aa9a:	2b02      	cmp	r3, #2
 800aa9c:	d902      	bls.n	800aaa4 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 800aa9e:	2303      	movs	r3, #3
 800aaa0:	73fb      	strb	r3, [r7, #15]
        break;
 800aaa2:	e004      	b.n	800aaae <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800aaa4:	f7ff fdd0 	bl	800a648 <LL_RCC_PLLSAI1_IsReady>
 800aaa8:	4603      	mov	r3, r0
 800aaaa:	2b01      	cmp	r3, #1
 800aaac:	d1f0      	bne.n	800aa90 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 800aaae:	7bfb      	ldrb	r3, [r7, #15]
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d108      	bne.n	800aac6 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800aab4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800aab8:	691a      	ldr	r2, [r3, #16]
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	691b      	ldr	r3, [r3, #16]
 800aabe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800aac2:	4313      	orrs	r3, r2
 800aac4:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800aac6:	7bfb      	ldrb	r3, [r7, #15]
}
 800aac8:	4618      	mov	r0, r3
 800aaca:	3710      	adds	r7, #16
 800aacc:	46bd      	mov	sp, r7
 800aace:	bd80      	pop	{r7, pc}

0800aad0 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800aad0:	b580      	push	{r7, lr}
 800aad2:	b084      	sub	sp, #16
 800aad4:	af00      	add	r7, sp, #0
 800aad6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800aad8:	2300      	movs	r3, #0
 800aada:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800aadc:	f7ff fda5 	bl	800a62a <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800aae0:	f7fb fde4 	bl	80066ac <HAL_GetTick>
 800aae4:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800aae6:	e009      	b.n	800aafc <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800aae8:	f7fb fde0 	bl	80066ac <HAL_GetTick>
 800aaec:	4602      	mov	r2, r0
 800aaee:	68bb      	ldr	r3, [r7, #8]
 800aaf0:	1ad3      	subs	r3, r2, r3
 800aaf2:	2b02      	cmp	r3, #2
 800aaf4:	d902      	bls.n	800aafc <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 800aaf6:	2303      	movs	r3, #3
 800aaf8:	73fb      	strb	r3, [r7, #15]
      break;
 800aafa:	e004      	b.n	800ab06 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800aafc:	f7ff fda4 	bl	800a648 <LL_RCC_PLLSAI1_IsReady>
 800ab00:	4603      	mov	r3, r0
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d1f0      	bne.n	800aae8 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 800ab06:	7bfb      	ldrb	r3, [r7, #15]
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d137      	bne.n	800ab7c <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800ab0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ab10:	691b      	ldr	r3, [r3, #16]
 800ab12:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	021b      	lsls	r3, r3, #8
 800ab1c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800ab20:	4313      	orrs	r3, r2
 800ab22:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 800ab24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ab28:	691b      	ldr	r3, [r3, #16]
 800ab2a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	68db      	ldr	r3, [r3, #12]
 800ab32:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800ab36:	4313      	orrs	r3, r2
 800ab38:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800ab3a:	f7ff fd67 	bl	800a60c <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ab3e:	f7fb fdb5 	bl	80066ac <HAL_GetTick>
 800ab42:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800ab44:	e009      	b.n	800ab5a <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800ab46:	f7fb fdb1 	bl	80066ac <HAL_GetTick>
 800ab4a:	4602      	mov	r2, r0
 800ab4c:	68bb      	ldr	r3, [r7, #8]
 800ab4e:	1ad3      	subs	r3, r2, r3
 800ab50:	2b02      	cmp	r3, #2
 800ab52:	d902      	bls.n	800ab5a <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 800ab54:	2303      	movs	r3, #3
 800ab56:	73fb      	strb	r3, [r7, #15]
        break;
 800ab58:	e004      	b.n	800ab64 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800ab5a:	f7ff fd75 	bl	800a648 <LL_RCC_PLLSAI1_IsReady>
 800ab5e:	4603      	mov	r3, r0
 800ab60:	2b01      	cmp	r3, #1
 800ab62:	d1f0      	bne.n	800ab46 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 800ab64:	7bfb      	ldrb	r3, [r7, #15]
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d108      	bne.n	800ab7c <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800ab6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ab6e:	691a      	ldr	r2, [r3, #16]
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	691b      	ldr	r3, [r3, #16]
 800ab74:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800ab78:	4313      	orrs	r3, r2
 800ab7a:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800ab7c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab7e:	4618      	mov	r0, r3
 800ab80:	3710      	adds	r7, #16
 800ab82:	46bd      	mov	sp, r7
 800ab84:	bd80      	pop	{r7, pc}
	...

0800ab88 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800ab88:	b580      	push	{r7, lr}
 800ab8a:	b084      	sub	sp, #16
 800ab8c:	af00      	add	r7, sp, #0
 800ab8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d101      	bne.n	800ab9a <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 800ab96:	2301      	movs	r3, #1
 800ab98:	e09f      	b.n	800acda <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800aba0:	b2db      	uxtb	r3, r3
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d106      	bne.n	800abb4 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	2200      	movs	r2, #0
 800abaa:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800abae:	6878      	ldr	r0, [r7, #4]
 800abb0:	f7fb f9ea 	bl	8005f88 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	2202      	movs	r2, #2
 800abb8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800abbc:	4b49      	ldr	r3, [pc, #292]	; (800ace4 <HAL_RTC_Init+0x15c>)
 800abbe:	68db      	ldr	r3, [r3, #12]
 800abc0:	f003 0310 	and.w	r3, r3, #16
 800abc4:	2b10      	cmp	r3, #16
 800abc6:	d07e      	beq.n	800acc6 <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	22ca      	movs	r2, #202	; 0xca
 800abce:	625a      	str	r2, [r3, #36]	; 0x24
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	2253      	movs	r2, #83	; 0x53
 800abd6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800abd8:	6878      	ldr	r0, [r7, #4]
 800abda:	f000 f8ab 	bl	800ad34 <RTC_EnterInitMode>
 800abde:	4603      	mov	r3, r0
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d00a      	beq.n	800abfa <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	22ff      	movs	r2, #255	; 0xff
 800abea:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	2204      	movs	r2, #4
 800abf0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      status = HAL_ERROR;
 800abf4:	2301      	movs	r3, #1
 800abf6:	73fb      	strb	r3, [r7, #15]
 800abf8:	e067      	b.n	800acca <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	689b      	ldr	r3, [r3, #8]
 800ac00:	687a      	ldr	r2, [r7, #4]
 800ac02:	6812      	ldr	r2, [r2, #0]
 800ac04:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ac08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ac0c:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	6899      	ldr	r1, [r3, #8]
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	685a      	ldr	r2, [r3, #4]
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	691b      	ldr	r3, [r3, #16]
 800ac1c:	431a      	orrs	r2, r3
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	699b      	ldr	r3, [r3, #24]
 800ac22:	431a      	orrs	r2, r3
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	430a      	orrs	r2, r1
 800ac2a:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	687a      	ldr	r2, [r7, #4]
 800ac32:	68d2      	ldr	r2, [r2, #12]
 800ac34:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	6919      	ldr	r1, [r3, #16]
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	689b      	ldr	r3, [r3, #8]
 800ac40:	041a      	lsls	r2, r3, #16
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	430a      	orrs	r2, r1
 800ac48:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	68da      	ldr	r2, [r3, #12]
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ac58:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	f022 0203 	bic.w	r2, r2, #3
 800ac68:	64da      	str	r2, [r3, #76]	; 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	69da      	ldr	r2, [r3, #28]
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	695b      	ldr	r3, [r3, #20]
 800ac78:	431a      	orrs	r2, r3
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	430a      	orrs	r2, r1
 800ac80:	64da      	str	r2, [r3, #76]	; 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	689b      	ldr	r3, [r3, #8]
 800ac88:	f003 0320 	and.w	r3, r3, #32
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d113      	bne.n	800acb8 <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800ac90:	6878      	ldr	r0, [r7, #4]
 800ac92:	f000 f829 	bl	800ace8 <HAL_RTC_WaitForSynchro>
 800ac96:	4603      	mov	r3, r0
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d00d      	beq.n	800acb8 <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	22ff      	movs	r2, #255	; 0xff
 800aca2:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	2204      	movs	r2, #4
 800aca8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	2200      	movs	r2, #0
 800acb0:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 800acb4:	2301      	movs	r3, #1
 800acb6:	e010      	b.n	800acda <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	22ff      	movs	r2, #255	; 0xff
 800acbe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      status = HAL_OK;
 800acc0:	2300      	movs	r3, #0
 800acc2:	73fb      	strb	r3, [r7, #15]
 800acc4:	e001      	b.n	800acca <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 800acc6:	2300      	movs	r3, #0
 800acc8:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800acca:	7bfb      	ldrb	r3, [r7, #15]
 800accc:	2b00      	cmp	r3, #0
 800acce:	d103      	bne.n	800acd8 <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	2201      	movs	r2, #1
 800acd4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  return status;
 800acd8:	7bfb      	ldrb	r3, [r7, #15]
}
 800acda:	4618      	mov	r0, r3
 800acdc:	3710      	adds	r7, #16
 800acde:	46bd      	mov	sp, r7
 800ace0:	bd80      	pop	{r7, pc}
 800ace2:	bf00      	nop
 800ace4:	40002800 	.word	0x40002800

0800ace8 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800ace8:	b580      	push	{r7, lr}
 800acea:	b084      	sub	sp, #16
 800acec:	af00      	add	r7, sp, #0
 800acee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	68da      	ldr	r2, [r3, #12]
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800acfe:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800ad00:	f7fb fcd4 	bl	80066ac <HAL_GetTick>
 800ad04:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800ad06:	e009      	b.n	800ad1c <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800ad08:	f7fb fcd0 	bl	80066ac <HAL_GetTick>
 800ad0c:	4602      	mov	r2, r0
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	1ad3      	subs	r3, r2, r3
 800ad12:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ad16:	d901      	bls.n	800ad1c <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800ad18:	2303      	movs	r3, #3
 800ad1a:	e007      	b.n	800ad2c <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	68db      	ldr	r3, [r3, #12]
 800ad22:	f003 0320 	and.w	r3, r3, #32
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d0ee      	beq.n	800ad08 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800ad2a:	2300      	movs	r3, #0
}
 800ad2c:	4618      	mov	r0, r3
 800ad2e:	3710      	adds	r7, #16
 800ad30:	46bd      	mov	sp, r7
 800ad32:	bd80      	pop	{r7, pc}

0800ad34 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800ad34:	b580      	push	{r7, lr}
 800ad36:	b084      	sub	sp, #16
 800ad38:	af00      	add	r7, sp, #0
 800ad3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	68db      	ldr	r3, [r3, #12]
 800ad42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d119      	bne.n	800ad7e <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ad52:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800ad54:	f7fb fcaa 	bl	80066ac <HAL_GetTick>
 800ad58:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800ad5a:	e009      	b.n	800ad70 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800ad5c:	f7fb fca6 	bl	80066ac <HAL_GetTick>
 800ad60:	4602      	mov	r2, r0
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	1ad3      	subs	r3, r2, r3
 800ad66:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ad6a:	d901      	bls.n	800ad70 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 800ad6c:	2303      	movs	r3, #3
 800ad6e:	e007      	b.n	800ad80 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	68db      	ldr	r3, [r3, #12]
 800ad76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d0ee      	beq.n	800ad5c <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 800ad7e:	2300      	movs	r3, #0
}
 800ad80:	4618      	mov	r0, r3
 800ad82:	3710      	adds	r7, #16
 800ad84:	46bd      	mov	sp, r7
 800ad86:	bd80      	pop	{r7, pc}

0800ad88 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 800ad88:	b580      	push	{r7, lr}
 800ad8a:	b086      	sub	sp, #24
 800ad8c:	af00      	add	r7, sp, #0
 800ad8e:	60f8      	str	r0, [r7, #12]
 800ad90:	60b9      	str	r1, [r7, #8]
 800ad92:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	f893 3020 	ldrb.w	r3, [r3, #32]
 800ad9a:	2b01      	cmp	r3, #1
 800ad9c:	d101      	bne.n	800ada2 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 800ad9e:	2302      	movs	r3, #2
 800ada0:	e0a8      	b.n	800aef4 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	2201      	movs	r2, #1
 800ada6:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	2202      	movs	r2, #2
 800adae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	22ca      	movs	r2, #202	; 0xca
 800adb8:	625a      	str	r2, [r3, #36]	; 0x24
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	2253      	movs	r2, #83	; 0x53
 800adc0:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	689b      	ldr	r3, [r3, #8]
 800adc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d020      	beq.n	800ae12 <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    tickstart = HAL_GetTick();
 800add0:	f7fb fc6c 	bl	80066ac <HAL_GetTick>
 800add4:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 800add6:	e015      	b.n	800ae04 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800add8:	f7fb fc68 	bl	80066ac <HAL_GetTick>
 800addc:	4602      	mov	r2, r0
 800adde:	697b      	ldr	r3, [r7, #20]
 800ade0:	1ad3      	subs	r3, r2, r3
 800ade2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ade6:	d90d      	bls.n	800ae04 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	22ff      	movs	r2, #255	; 0xff
 800adee:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	2203      	movs	r2, #3
 800adf4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	2200      	movs	r2, #0
 800adfc:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 800ae00:	2303      	movs	r3, #3
 800ae02:	e077      	b.n	800aef4 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	68db      	ldr	r3, [r3, #12]
 800ae0a:	f003 0304 	and.w	r3, r3, #4
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d1e2      	bne.n	800add8 <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	689a      	ldr	r2, [r3, #8]
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ae20:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	68db      	ldr	r3, [r3, #12]
 800ae28:	b2da      	uxtb	r2, r3
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800ae32:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800ae34:	f7fb fc3a 	bl	80066ac <HAL_GetTick>
 800ae38:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800ae3a:	e015      	b.n	800ae68 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800ae3c:	f7fb fc36 	bl	80066ac <HAL_GetTick>
 800ae40:	4602      	mov	r2, r0
 800ae42:	697b      	ldr	r3, [r7, #20]
 800ae44:	1ad3      	subs	r3, r2, r3
 800ae46:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ae4a:	d90d      	bls.n	800ae68 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	22ff      	movs	r2, #255	; 0xff
 800ae52:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	2203      	movs	r2, #3
 800ae58:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	2200      	movs	r2, #0
 800ae60:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 800ae64:	2303      	movs	r3, #3
 800ae66:	e045      	b.n	800aef4 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	68db      	ldr	r3, [r3, #12]
 800ae6e:	f003 0304 	and.w	r3, r3, #4
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d0e2      	beq.n	800ae3c <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	68ba      	ldr	r2, [r7, #8]
 800ae7c:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	689a      	ldr	r2, [r3, #8]
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	f022 0207 	bic.w	r2, r2, #7
 800ae8c:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	6899      	ldr	r1, [r3, #8]
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	687a      	ldr	r2, [r7, #4]
 800ae9a:	430a      	orrs	r2, r1
 800ae9c:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 800ae9e:	4b17      	ldr	r3, [pc, #92]	; (800aefc <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800aea0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800aea4:	4a15      	ldr	r2, [pc, #84]	; (800aefc <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800aea6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800aeaa:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 800aeae:	4b13      	ldr	r3, [pc, #76]	; (800aefc <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	4a12      	ldr	r2, [pc, #72]	; (800aefc <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800aeb4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800aeb8:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	689a      	ldr	r2, [r3, #8]
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800aec8:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	689a      	ldr	r2, [r3, #8]
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800aed8:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	22ff      	movs	r2, #255	; 0xff
 800aee0:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	2201      	movs	r2, #1
 800aee6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	2200      	movs	r2, #0
 800aeee:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800aef2:	2300      	movs	r3, #0
}
 800aef4:	4618      	mov	r0, r3
 800aef6:	3718      	adds	r7, #24
 800aef8:	46bd      	mov	sp, r7
 800aefa:	bd80      	pop	{r7, pc}
 800aefc:	58000800 	.word	0x58000800

0800af00 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800af00:	b580      	push	{r7, lr}
 800af02:	b082      	sub	sp, #8
 800af04:	af00      	add	r7, sp, #0
 800af06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d101      	bne.n	800af12 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800af0e:	2301      	movs	r3, #1
 800af10:	e049      	b.n	800afa6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800af18:	b2db      	uxtb	r3, r3
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d106      	bne.n	800af2c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	2200      	movs	r2, #0
 800af22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800af26:	6878      	ldr	r0, [r7, #4]
 800af28:	f7fb f862 	bl	8005ff0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	2202      	movs	r2, #2
 800af30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	681a      	ldr	r2, [r3, #0]
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	3304      	adds	r3, #4
 800af3c:	4619      	mov	r1, r3
 800af3e:	4610      	mov	r0, r2
 800af40:	f000 fc0a 	bl	800b758 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	2201      	movs	r2, #1
 800af48:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	2201      	movs	r2, #1
 800af50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	2201      	movs	r2, #1
 800af58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	2201      	movs	r2, #1
 800af60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	2201      	movs	r2, #1
 800af68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	2201      	movs	r2, #1
 800af70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	2201      	movs	r2, #1
 800af78:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	2201      	movs	r2, #1
 800af80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	2201      	movs	r2, #1
 800af88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	2201      	movs	r2, #1
 800af90:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	2201      	movs	r2, #1
 800af98:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	2201      	movs	r2, #1
 800afa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800afa4:	2300      	movs	r3, #0
}
 800afa6:	4618      	mov	r0, r3
 800afa8:	3708      	adds	r7, #8
 800afaa:	46bd      	mov	sp, r7
 800afac:	bd80      	pop	{r7, pc}
	...

0800afb0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800afb0:	b480      	push	{r7}
 800afb2:	b085      	sub	sp, #20
 800afb4:	af00      	add	r7, sp, #0
 800afb6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800afbe:	b2db      	uxtb	r3, r3
 800afc0:	2b01      	cmp	r3, #1
 800afc2:	d001      	beq.n	800afc8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800afc4:	2301      	movs	r3, #1
 800afc6:	e036      	b.n	800b036 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	2202      	movs	r2, #2
 800afcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	68da      	ldr	r2, [r3, #12]
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	f042 0201 	orr.w	r2, r2, #1
 800afde:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	4a17      	ldr	r2, [pc, #92]	; (800b044 <HAL_TIM_Base_Start_IT+0x94>)
 800afe6:	4293      	cmp	r3, r2
 800afe8:	d004      	beq.n	800aff4 <HAL_TIM_Base_Start_IT+0x44>
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aff2:	d115      	bne.n	800b020 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	689a      	ldr	r2, [r3, #8]
 800affa:	4b13      	ldr	r3, [pc, #76]	; (800b048 <HAL_TIM_Base_Start_IT+0x98>)
 800affc:	4013      	ands	r3, r2
 800affe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	2b06      	cmp	r3, #6
 800b004:	d015      	beq.n	800b032 <HAL_TIM_Base_Start_IT+0x82>
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b00c:	d011      	beq.n	800b032 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	681a      	ldr	r2, [r3, #0]
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	f042 0201 	orr.w	r2, r2, #1
 800b01c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b01e:	e008      	b.n	800b032 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	681a      	ldr	r2, [r3, #0]
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	f042 0201 	orr.w	r2, r2, #1
 800b02e:	601a      	str	r2, [r3, #0]
 800b030:	e000      	b.n	800b034 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b032:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b034:	2300      	movs	r3, #0
}
 800b036:	4618      	mov	r0, r3
 800b038:	3714      	adds	r7, #20
 800b03a:	46bd      	mov	sp, r7
 800b03c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b040:	4770      	bx	lr
 800b042:	bf00      	nop
 800b044:	40012c00 	.word	0x40012c00
 800b048:	00010007 	.word	0x00010007

0800b04c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b04c:	b580      	push	{r7, lr}
 800b04e:	b082      	sub	sp, #8
 800b050:	af00      	add	r7, sp, #0
 800b052:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	2b00      	cmp	r3, #0
 800b058:	d101      	bne.n	800b05e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b05a:	2301      	movs	r3, #1
 800b05c:	e049      	b.n	800b0f2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b064:	b2db      	uxtb	r3, r3
 800b066:	2b00      	cmp	r3, #0
 800b068:	d106      	bne.n	800b078 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	2200      	movs	r2, #0
 800b06e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b072:	6878      	ldr	r0, [r7, #4]
 800b074:	f000 f841 	bl	800b0fa <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	2202      	movs	r2, #2
 800b07c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	681a      	ldr	r2, [r3, #0]
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	3304      	adds	r3, #4
 800b088:	4619      	mov	r1, r3
 800b08a:	4610      	mov	r0, r2
 800b08c:	f000 fb64 	bl	800b758 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	2201      	movs	r2, #1
 800b094:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	2201      	movs	r2, #1
 800b09c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	2201      	movs	r2, #1
 800b0a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	2201      	movs	r2, #1
 800b0ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	2201      	movs	r2, #1
 800b0b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	2201      	movs	r2, #1
 800b0bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	2201      	movs	r2, #1
 800b0c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	2201      	movs	r2, #1
 800b0cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	2201      	movs	r2, #1
 800b0d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	2201      	movs	r2, #1
 800b0dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	2201      	movs	r2, #1
 800b0e4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	2201      	movs	r2, #1
 800b0ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b0f0:	2300      	movs	r3, #0
}
 800b0f2:	4618      	mov	r0, r3
 800b0f4:	3708      	adds	r7, #8
 800b0f6:	46bd      	mov	sp, r7
 800b0f8:	bd80      	pop	{r7, pc}

0800b0fa <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800b0fa:	b480      	push	{r7}
 800b0fc:	b083      	sub	sp, #12
 800b0fe:	af00      	add	r7, sp, #0
 800b100:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800b102:	bf00      	nop
 800b104:	370c      	adds	r7, #12
 800b106:	46bd      	mov	sp, r7
 800b108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b10c:	4770      	bx	lr

0800b10e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b10e:	b580      	push	{r7, lr}
 800b110:	b082      	sub	sp, #8
 800b112:	af00      	add	r7, sp, #0
 800b114:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	691b      	ldr	r3, [r3, #16]
 800b11c:	f003 0302 	and.w	r3, r3, #2
 800b120:	2b02      	cmp	r3, #2
 800b122:	d122      	bne.n	800b16a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	68db      	ldr	r3, [r3, #12]
 800b12a:	f003 0302 	and.w	r3, r3, #2
 800b12e:	2b02      	cmp	r3, #2
 800b130:	d11b      	bne.n	800b16a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	f06f 0202 	mvn.w	r2, #2
 800b13a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	2201      	movs	r2, #1
 800b140:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	699b      	ldr	r3, [r3, #24]
 800b148:	f003 0303 	and.w	r3, r3, #3
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d003      	beq.n	800b158 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b150:	6878      	ldr	r0, [r7, #4]
 800b152:	f000 fae2 	bl	800b71a <HAL_TIM_IC_CaptureCallback>
 800b156:	e005      	b.n	800b164 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b158:	6878      	ldr	r0, [r7, #4]
 800b15a:	f000 fad4 	bl	800b706 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b15e:	6878      	ldr	r0, [r7, #4]
 800b160:	f000 fae5 	bl	800b72e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	2200      	movs	r2, #0
 800b168:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	691b      	ldr	r3, [r3, #16]
 800b170:	f003 0304 	and.w	r3, r3, #4
 800b174:	2b04      	cmp	r3, #4
 800b176:	d122      	bne.n	800b1be <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	68db      	ldr	r3, [r3, #12]
 800b17e:	f003 0304 	and.w	r3, r3, #4
 800b182:	2b04      	cmp	r3, #4
 800b184:	d11b      	bne.n	800b1be <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	f06f 0204 	mvn.w	r2, #4
 800b18e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	2202      	movs	r2, #2
 800b194:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	699b      	ldr	r3, [r3, #24]
 800b19c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d003      	beq.n	800b1ac <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b1a4:	6878      	ldr	r0, [r7, #4]
 800b1a6:	f000 fab8 	bl	800b71a <HAL_TIM_IC_CaptureCallback>
 800b1aa:	e005      	b.n	800b1b8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b1ac:	6878      	ldr	r0, [r7, #4]
 800b1ae:	f000 faaa 	bl	800b706 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b1b2:	6878      	ldr	r0, [r7, #4]
 800b1b4:	f000 fabb 	bl	800b72e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	2200      	movs	r2, #0
 800b1bc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	691b      	ldr	r3, [r3, #16]
 800b1c4:	f003 0308 	and.w	r3, r3, #8
 800b1c8:	2b08      	cmp	r3, #8
 800b1ca:	d122      	bne.n	800b212 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	68db      	ldr	r3, [r3, #12]
 800b1d2:	f003 0308 	and.w	r3, r3, #8
 800b1d6:	2b08      	cmp	r3, #8
 800b1d8:	d11b      	bne.n	800b212 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	f06f 0208 	mvn.w	r2, #8
 800b1e2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	2204      	movs	r2, #4
 800b1e8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	69db      	ldr	r3, [r3, #28]
 800b1f0:	f003 0303 	and.w	r3, r3, #3
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d003      	beq.n	800b200 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b1f8:	6878      	ldr	r0, [r7, #4]
 800b1fa:	f000 fa8e 	bl	800b71a <HAL_TIM_IC_CaptureCallback>
 800b1fe:	e005      	b.n	800b20c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b200:	6878      	ldr	r0, [r7, #4]
 800b202:	f000 fa80 	bl	800b706 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b206:	6878      	ldr	r0, [r7, #4]
 800b208:	f000 fa91 	bl	800b72e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	2200      	movs	r2, #0
 800b210:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	691b      	ldr	r3, [r3, #16]
 800b218:	f003 0310 	and.w	r3, r3, #16
 800b21c:	2b10      	cmp	r3, #16
 800b21e:	d122      	bne.n	800b266 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	68db      	ldr	r3, [r3, #12]
 800b226:	f003 0310 	and.w	r3, r3, #16
 800b22a:	2b10      	cmp	r3, #16
 800b22c:	d11b      	bne.n	800b266 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	f06f 0210 	mvn.w	r2, #16
 800b236:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	2208      	movs	r2, #8
 800b23c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	69db      	ldr	r3, [r3, #28]
 800b244:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d003      	beq.n	800b254 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b24c:	6878      	ldr	r0, [r7, #4]
 800b24e:	f000 fa64 	bl	800b71a <HAL_TIM_IC_CaptureCallback>
 800b252:	e005      	b.n	800b260 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b254:	6878      	ldr	r0, [r7, #4]
 800b256:	f000 fa56 	bl	800b706 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b25a:	6878      	ldr	r0, [r7, #4]
 800b25c:	f000 fa67 	bl	800b72e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	2200      	movs	r2, #0
 800b264:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	691b      	ldr	r3, [r3, #16]
 800b26c:	f003 0301 	and.w	r3, r3, #1
 800b270:	2b01      	cmp	r3, #1
 800b272:	d10e      	bne.n	800b292 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	68db      	ldr	r3, [r3, #12]
 800b27a:	f003 0301 	and.w	r3, r3, #1
 800b27e:	2b01      	cmp	r3, #1
 800b280:	d107      	bne.n	800b292 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	f06f 0201 	mvn.w	r2, #1
 800b28a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b28c:	6878      	ldr	r0, [r7, #4]
 800b28e:	f7fa fc0f 	bl	8005ab0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	691b      	ldr	r3, [r3, #16]
 800b298:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b29c:	2b80      	cmp	r3, #128	; 0x80
 800b29e:	d10e      	bne.n	800b2be <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	68db      	ldr	r3, [r3, #12]
 800b2a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b2aa:	2b80      	cmp	r3, #128	; 0x80
 800b2ac:	d107      	bne.n	800b2be <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b2b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b2b8:	6878      	ldr	r0, [r7, #4]
 800b2ba:	f000 fec5 	bl	800c048 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	691b      	ldr	r3, [r3, #16]
 800b2c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b2c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b2cc:	d10e      	bne.n	800b2ec <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	68db      	ldr	r3, [r3, #12]
 800b2d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b2d8:	2b80      	cmp	r3, #128	; 0x80
 800b2da:	d107      	bne.n	800b2ec <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800b2e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800b2e6:	6878      	ldr	r0, [r7, #4]
 800b2e8:	f000 feb8 	bl	800c05c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	691b      	ldr	r3, [r3, #16]
 800b2f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b2f6:	2b40      	cmp	r3, #64	; 0x40
 800b2f8:	d10e      	bne.n	800b318 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	68db      	ldr	r3, [r3, #12]
 800b300:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b304:	2b40      	cmp	r3, #64	; 0x40
 800b306:	d107      	bne.n	800b318 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b310:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b312:	6878      	ldr	r0, [r7, #4]
 800b314:	f000 fa15 	bl	800b742 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	691b      	ldr	r3, [r3, #16]
 800b31e:	f003 0320 	and.w	r3, r3, #32
 800b322:	2b20      	cmp	r3, #32
 800b324:	d10e      	bne.n	800b344 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	68db      	ldr	r3, [r3, #12]
 800b32c:	f003 0320 	and.w	r3, r3, #32
 800b330:	2b20      	cmp	r3, #32
 800b332:	d107      	bne.n	800b344 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	f06f 0220 	mvn.w	r2, #32
 800b33c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b33e:	6878      	ldr	r0, [r7, #4]
 800b340:	f000 fe78 	bl	800c034 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b344:	bf00      	nop
 800b346:	3708      	adds	r7, #8
 800b348:	46bd      	mov	sp, r7
 800b34a:	bd80      	pop	{r7, pc}

0800b34c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b34c:	b580      	push	{r7, lr}
 800b34e:	b086      	sub	sp, #24
 800b350:	af00      	add	r7, sp, #0
 800b352:	60f8      	str	r0, [r7, #12]
 800b354:	60b9      	str	r1, [r7, #8]
 800b356:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b358:	2300      	movs	r3, #0
 800b35a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b362:	2b01      	cmp	r3, #1
 800b364:	d101      	bne.n	800b36a <HAL_TIM_PWM_ConfigChannel+0x1e>
 800b366:	2302      	movs	r3, #2
 800b368:	e0ff      	b.n	800b56a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	2201      	movs	r2, #1
 800b36e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	2b14      	cmp	r3, #20
 800b376:	f200 80f0 	bhi.w	800b55a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800b37a:	a201      	add	r2, pc, #4	; (adr r2, 800b380 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800b37c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b380:	0800b3d5 	.word	0x0800b3d5
 800b384:	0800b55b 	.word	0x0800b55b
 800b388:	0800b55b 	.word	0x0800b55b
 800b38c:	0800b55b 	.word	0x0800b55b
 800b390:	0800b415 	.word	0x0800b415
 800b394:	0800b55b 	.word	0x0800b55b
 800b398:	0800b55b 	.word	0x0800b55b
 800b39c:	0800b55b 	.word	0x0800b55b
 800b3a0:	0800b457 	.word	0x0800b457
 800b3a4:	0800b55b 	.word	0x0800b55b
 800b3a8:	0800b55b 	.word	0x0800b55b
 800b3ac:	0800b55b 	.word	0x0800b55b
 800b3b0:	0800b497 	.word	0x0800b497
 800b3b4:	0800b55b 	.word	0x0800b55b
 800b3b8:	0800b55b 	.word	0x0800b55b
 800b3bc:	0800b55b 	.word	0x0800b55b
 800b3c0:	0800b4d9 	.word	0x0800b4d9
 800b3c4:	0800b55b 	.word	0x0800b55b
 800b3c8:	0800b55b 	.word	0x0800b55b
 800b3cc:	0800b55b 	.word	0x0800b55b
 800b3d0:	0800b519 	.word	0x0800b519
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	68b9      	ldr	r1, [r7, #8]
 800b3da:	4618      	mov	r0, r3
 800b3dc:	f000 fa20 	bl	800b820 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	699a      	ldr	r2, [r3, #24]
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	f042 0208 	orr.w	r2, r2, #8
 800b3ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	699a      	ldr	r2, [r3, #24]
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	f022 0204 	bic.w	r2, r2, #4
 800b3fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	6999      	ldr	r1, [r3, #24]
 800b406:	68bb      	ldr	r3, [r7, #8]
 800b408:	691a      	ldr	r2, [r3, #16]
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	430a      	orrs	r2, r1
 800b410:	619a      	str	r2, [r3, #24]
      break;
 800b412:	e0a5      	b.n	800b560 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	68b9      	ldr	r1, [r7, #8]
 800b41a:	4618      	mov	r0, r3
 800b41c:	f000 fa7c 	bl	800b918 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	699a      	ldr	r2, [r3, #24]
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b42e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	699a      	ldr	r2, [r3, #24]
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b43e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	6999      	ldr	r1, [r3, #24]
 800b446:	68bb      	ldr	r3, [r7, #8]
 800b448:	691b      	ldr	r3, [r3, #16]
 800b44a:	021a      	lsls	r2, r3, #8
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	430a      	orrs	r2, r1
 800b452:	619a      	str	r2, [r3, #24]
      break;
 800b454:	e084      	b.n	800b560 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	68b9      	ldr	r1, [r7, #8]
 800b45c:	4618      	mov	r0, r3
 800b45e:	f000 fad5 	bl	800ba0c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	69da      	ldr	r2, [r3, #28]
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	f042 0208 	orr.w	r2, r2, #8
 800b470:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	69da      	ldr	r2, [r3, #28]
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	f022 0204 	bic.w	r2, r2, #4
 800b480:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	69d9      	ldr	r1, [r3, #28]
 800b488:	68bb      	ldr	r3, [r7, #8]
 800b48a:	691a      	ldr	r2, [r3, #16]
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	430a      	orrs	r2, r1
 800b492:	61da      	str	r2, [r3, #28]
      break;
 800b494:	e064      	b.n	800b560 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	68b9      	ldr	r1, [r7, #8]
 800b49c:	4618      	mov	r0, r3
 800b49e:	f000 fb2d 	bl	800bafc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	69da      	ldr	r2, [r3, #28]
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b4b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	69da      	ldr	r2, [r3, #28]
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b4c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	69d9      	ldr	r1, [r3, #28]
 800b4c8:	68bb      	ldr	r3, [r7, #8]
 800b4ca:	691b      	ldr	r3, [r3, #16]
 800b4cc:	021a      	lsls	r2, r3, #8
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	430a      	orrs	r2, r1
 800b4d4:	61da      	str	r2, [r3, #28]
      break;
 800b4d6:	e043      	b.n	800b560 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	68b9      	ldr	r1, [r7, #8]
 800b4de:	4618      	mov	r0, r3
 800b4e0:	f000 fb6a 	bl	800bbb8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b4ea:	68fb      	ldr	r3, [r7, #12]
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	f042 0208 	orr.w	r2, r2, #8
 800b4f2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b4fa:	68fb      	ldr	r3, [r7, #12]
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	f022 0204 	bic.w	r2, r2, #4
 800b502:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800b50a:	68bb      	ldr	r3, [r7, #8]
 800b50c:	691a      	ldr	r2, [r3, #16]
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	430a      	orrs	r2, r1
 800b514:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800b516:	e023      	b.n	800b560 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	68b9      	ldr	r1, [r7, #8]
 800b51e:	4618      	mov	r0, r3
 800b520:	f000 fba2 	bl	800bc68 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b52a:	68fb      	ldr	r3, [r7, #12]
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b532:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b542:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800b54a:	68bb      	ldr	r3, [r7, #8]
 800b54c:	691b      	ldr	r3, [r3, #16]
 800b54e:	021a      	lsls	r2, r3, #8
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	430a      	orrs	r2, r1
 800b556:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800b558:	e002      	b.n	800b560 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800b55a:	2301      	movs	r3, #1
 800b55c:	75fb      	strb	r3, [r7, #23]
      break;
 800b55e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	2200      	movs	r2, #0
 800b564:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b568:	7dfb      	ldrb	r3, [r7, #23]
}
 800b56a:	4618      	mov	r0, r3
 800b56c:	3718      	adds	r7, #24
 800b56e:	46bd      	mov	sp, r7
 800b570:	bd80      	pop	{r7, pc}
 800b572:	bf00      	nop

0800b574 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b574:	b580      	push	{r7, lr}
 800b576:	b084      	sub	sp, #16
 800b578:	af00      	add	r7, sp, #0
 800b57a:	6078      	str	r0, [r7, #4]
 800b57c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b57e:	2300      	movs	r3, #0
 800b580:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b588:	2b01      	cmp	r3, #1
 800b58a:	d101      	bne.n	800b590 <HAL_TIM_ConfigClockSource+0x1c>
 800b58c:	2302      	movs	r3, #2
 800b58e:	e0b6      	b.n	800b6fe <HAL_TIM_ConfigClockSource+0x18a>
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	2201      	movs	r2, #1
 800b594:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	2202      	movs	r2, #2
 800b59c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	689b      	ldr	r3, [r3, #8]
 800b5a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b5a8:	68bb      	ldr	r3, [r7, #8]
 800b5aa:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800b5ae:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800b5b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b5b4:	68bb      	ldr	r3, [r7, #8]
 800b5b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b5ba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	68ba      	ldr	r2, [r7, #8]
 800b5c2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b5c4:	683b      	ldr	r3, [r7, #0]
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b5cc:	d03e      	beq.n	800b64c <HAL_TIM_ConfigClockSource+0xd8>
 800b5ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b5d2:	f200 8087 	bhi.w	800b6e4 <HAL_TIM_ConfigClockSource+0x170>
 800b5d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b5da:	f000 8086 	beq.w	800b6ea <HAL_TIM_ConfigClockSource+0x176>
 800b5de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b5e2:	d87f      	bhi.n	800b6e4 <HAL_TIM_ConfigClockSource+0x170>
 800b5e4:	2b70      	cmp	r3, #112	; 0x70
 800b5e6:	d01a      	beq.n	800b61e <HAL_TIM_ConfigClockSource+0xaa>
 800b5e8:	2b70      	cmp	r3, #112	; 0x70
 800b5ea:	d87b      	bhi.n	800b6e4 <HAL_TIM_ConfigClockSource+0x170>
 800b5ec:	2b60      	cmp	r3, #96	; 0x60
 800b5ee:	d050      	beq.n	800b692 <HAL_TIM_ConfigClockSource+0x11e>
 800b5f0:	2b60      	cmp	r3, #96	; 0x60
 800b5f2:	d877      	bhi.n	800b6e4 <HAL_TIM_ConfigClockSource+0x170>
 800b5f4:	2b50      	cmp	r3, #80	; 0x50
 800b5f6:	d03c      	beq.n	800b672 <HAL_TIM_ConfigClockSource+0xfe>
 800b5f8:	2b50      	cmp	r3, #80	; 0x50
 800b5fa:	d873      	bhi.n	800b6e4 <HAL_TIM_ConfigClockSource+0x170>
 800b5fc:	2b40      	cmp	r3, #64	; 0x40
 800b5fe:	d058      	beq.n	800b6b2 <HAL_TIM_ConfigClockSource+0x13e>
 800b600:	2b40      	cmp	r3, #64	; 0x40
 800b602:	d86f      	bhi.n	800b6e4 <HAL_TIM_ConfigClockSource+0x170>
 800b604:	2b30      	cmp	r3, #48	; 0x30
 800b606:	d064      	beq.n	800b6d2 <HAL_TIM_ConfigClockSource+0x15e>
 800b608:	2b30      	cmp	r3, #48	; 0x30
 800b60a:	d86b      	bhi.n	800b6e4 <HAL_TIM_ConfigClockSource+0x170>
 800b60c:	2b20      	cmp	r3, #32
 800b60e:	d060      	beq.n	800b6d2 <HAL_TIM_ConfigClockSource+0x15e>
 800b610:	2b20      	cmp	r3, #32
 800b612:	d867      	bhi.n	800b6e4 <HAL_TIM_ConfigClockSource+0x170>
 800b614:	2b00      	cmp	r3, #0
 800b616:	d05c      	beq.n	800b6d2 <HAL_TIM_ConfigClockSource+0x15e>
 800b618:	2b10      	cmp	r3, #16
 800b61a:	d05a      	beq.n	800b6d2 <HAL_TIM_ConfigClockSource+0x15e>
 800b61c:	e062      	b.n	800b6e4 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	6818      	ldr	r0, [r3, #0]
 800b622:	683b      	ldr	r3, [r7, #0]
 800b624:	6899      	ldr	r1, [r3, #8]
 800b626:	683b      	ldr	r3, [r7, #0]
 800b628:	685a      	ldr	r2, [r3, #4]
 800b62a:	683b      	ldr	r3, [r7, #0]
 800b62c:	68db      	ldr	r3, [r3, #12]
 800b62e:	f000 fbf1 	bl	800be14 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	689b      	ldr	r3, [r3, #8]
 800b638:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b63a:	68bb      	ldr	r3, [r7, #8]
 800b63c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b640:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	68ba      	ldr	r2, [r7, #8]
 800b648:	609a      	str	r2, [r3, #8]
      break;
 800b64a:	e04f      	b.n	800b6ec <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	6818      	ldr	r0, [r3, #0]
 800b650:	683b      	ldr	r3, [r7, #0]
 800b652:	6899      	ldr	r1, [r3, #8]
 800b654:	683b      	ldr	r3, [r7, #0]
 800b656:	685a      	ldr	r2, [r3, #4]
 800b658:	683b      	ldr	r3, [r7, #0]
 800b65a:	68db      	ldr	r3, [r3, #12]
 800b65c:	f000 fbda 	bl	800be14 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	689a      	ldr	r2, [r3, #8]
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b66e:	609a      	str	r2, [r3, #8]
      break;
 800b670:	e03c      	b.n	800b6ec <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	6818      	ldr	r0, [r3, #0]
 800b676:	683b      	ldr	r3, [r7, #0]
 800b678:	6859      	ldr	r1, [r3, #4]
 800b67a:	683b      	ldr	r3, [r7, #0]
 800b67c:	68db      	ldr	r3, [r3, #12]
 800b67e:	461a      	mov	r2, r3
 800b680:	f000 fb4c 	bl	800bd1c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	2150      	movs	r1, #80	; 0x50
 800b68a:	4618      	mov	r0, r3
 800b68c:	f000 fba5 	bl	800bdda <TIM_ITRx_SetConfig>
      break;
 800b690:	e02c      	b.n	800b6ec <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	6818      	ldr	r0, [r3, #0]
 800b696:	683b      	ldr	r3, [r7, #0]
 800b698:	6859      	ldr	r1, [r3, #4]
 800b69a:	683b      	ldr	r3, [r7, #0]
 800b69c:	68db      	ldr	r3, [r3, #12]
 800b69e:	461a      	mov	r2, r3
 800b6a0:	f000 fb6b 	bl	800bd7a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	2160      	movs	r1, #96	; 0x60
 800b6aa:	4618      	mov	r0, r3
 800b6ac:	f000 fb95 	bl	800bdda <TIM_ITRx_SetConfig>
      break;
 800b6b0:	e01c      	b.n	800b6ec <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	6818      	ldr	r0, [r3, #0]
 800b6b6:	683b      	ldr	r3, [r7, #0]
 800b6b8:	6859      	ldr	r1, [r3, #4]
 800b6ba:	683b      	ldr	r3, [r7, #0]
 800b6bc:	68db      	ldr	r3, [r3, #12]
 800b6be:	461a      	mov	r2, r3
 800b6c0:	f000 fb2c 	bl	800bd1c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	2140      	movs	r1, #64	; 0x40
 800b6ca:	4618      	mov	r0, r3
 800b6cc:	f000 fb85 	bl	800bdda <TIM_ITRx_SetConfig>
      break;
 800b6d0:	e00c      	b.n	800b6ec <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	681a      	ldr	r2, [r3, #0]
 800b6d6:	683b      	ldr	r3, [r7, #0]
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	4619      	mov	r1, r3
 800b6dc:	4610      	mov	r0, r2
 800b6de:	f000 fb7c 	bl	800bdda <TIM_ITRx_SetConfig>
      break;
 800b6e2:	e003      	b.n	800b6ec <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800b6e4:	2301      	movs	r3, #1
 800b6e6:	73fb      	strb	r3, [r7, #15]
      break;
 800b6e8:	e000      	b.n	800b6ec <HAL_TIM_ConfigClockSource+0x178>
      break;
 800b6ea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	2201      	movs	r2, #1
 800b6f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	2200      	movs	r2, #0
 800b6f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b6fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6fe:	4618      	mov	r0, r3
 800b700:	3710      	adds	r7, #16
 800b702:	46bd      	mov	sp, r7
 800b704:	bd80      	pop	{r7, pc}

0800b706 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b706:	b480      	push	{r7}
 800b708:	b083      	sub	sp, #12
 800b70a:	af00      	add	r7, sp, #0
 800b70c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b70e:	bf00      	nop
 800b710:	370c      	adds	r7, #12
 800b712:	46bd      	mov	sp, r7
 800b714:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b718:	4770      	bx	lr

0800b71a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b71a:	b480      	push	{r7}
 800b71c:	b083      	sub	sp, #12
 800b71e:	af00      	add	r7, sp, #0
 800b720:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b722:	bf00      	nop
 800b724:	370c      	adds	r7, #12
 800b726:	46bd      	mov	sp, r7
 800b728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b72c:	4770      	bx	lr

0800b72e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b72e:	b480      	push	{r7}
 800b730:	b083      	sub	sp, #12
 800b732:	af00      	add	r7, sp, #0
 800b734:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b736:	bf00      	nop
 800b738:	370c      	adds	r7, #12
 800b73a:	46bd      	mov	sp, r7
 800b73c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b740:	4770      	bx	lr

0800b742 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b742:	b480      	push	{r7}
 800b744:	b083      	sub	sp, #12
 800b746:	af00      	add	r7, sp, #0
 800b748:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b74a:	bf00      	nop
 800b74c:	370c      	adds	r7, #12
 800b74e:	46bd      	mov	sp, r7
 800b750:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b754:	4770      	bx	lr
	...

0800b758 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b758:	b480      	push	{r7}
 800b75a:	b085      	sub	sp, #20
 800b75c:	af00      	add	r7, sp, #0
 800b75e:	6078      	str	r0, [r7, #4]
 800b760:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	4a2a      	ldr	r2, [pc, #168]	; (800b814 <TIM_Base_SetConfig+0xbc>)
 800b76c:	4293      	cmp	r3, r2
 800b76e:	d003      	beq.n	800b778 <TIM_Base_SetConfig+0x20>
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b776:	d108      	bne.n	800b78a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b77e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b780:	683b      	ldr	r3, [r7, #0]
 800b782:	685b      	ldr	r3, [r3, #4]
 800b784:	68fa      	ldr	r2, [r7, #12]
 800b786:	4313      	orrs	r3, r2
 800b788:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	4a21      	ldr	r2, [pc, #132]	; (800b814 <TIM_Base_SetConfig+0xbc>)
 800b78e:	4293      	cmp	r3, r2
 800b790:	d00b      	beq.n	800b7aa <TIM_Base_SetConfig+0x52>
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b798:	d007      	beq.n	800b7aa <TIM_Base_SetConfig+0x52>
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	4a1e      	ldr	r2, [pc, #120]	; (800b818 <TIM_Base_SetConfig+0xc0>)
 800b79e:	4293      	cmp	r3, r2
 800b7a0:	d003      	beq.n	800b7aa <TIM_Base_SetConfig+0x52>
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	4a1d      	ldr	r2, [pc, #116]	; (800b81c <TIM_Base_SetConfig+0xc4>)
 800b7a6:	4293      	cmp	r3, r2
 800b7a8:	d108      	bne.n	800b7bc <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b7b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b7b2:	683b      	ldr	r3, [r7, #0]
 800b7b4:	68db      	ldr	r3, [r3, #12]
 800b7b6:	68fa      	ldr	r2, [r7, #12]
 800b7b8:	4313      	orrs	r3, r2
 800b7ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b7c2:	683b      	ldr	r3, [r7, #0]
 800b7c4:	695b      	ldr	r3, [r3, #20]
 800b7c6:	4313      	orrs	r3, r2
 800b7c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	68fa      	ldr	r2, [r7, #12]
 800b7ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b7d0:	683b      	ldr	r3, [r7, #0]
 800b7d2:	689a      	ldr	r2, [r3, #8]
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b7d8:	683b      	ldr	r3, [r7, #0]
 800b7da:	681a      	ldr	r2, [r3, #0]
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	4a0c      	ldr	r2, [pc, #48]	; (800b814 <TIM_Base_SetConfig+0xbc>)
 800b7e4:	4293      	cmp	r3, r2
 800b7e6:	d007      	beq.n	800b7f8 <TIM_Base_SetConfig+0xa0>
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	4a0b      	ldr	r2, [pc, #44]	; (800b818 <TIM_Base_SetConfig+0xc0>)
 800b7ec:	4293      	cmp	r3, r2
 800b7ee:	d003      	beq.n	800b7f8 <TIM_Base_SetConfig+0xa0>
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	4a0a      	ldr	r2, [pc, #40]	; (800b81c <TIM_Base_SetConfig+0xc4>)
 800b7f4:	4293      	cmp	r3, r2
 800b7f6:	d103      	bne.n	800b800 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b7f8:	683b      	ldr	r3, [r7, #0]
 800b7fa:	691a      	ldr	r2, [r3, #16]
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	2201      	movs	r2, #1
 800b804:	615a      	str	r2, [r3, #20]
}
 800b806:	bf00      	nop
 800b808:	3714      	adds	r7, #20
 800b80a:	46bd      	mov	sp, r7
 800b80c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b810:	4770      	bx	lr
 800b812:	bf00      	nop
 800b814:	40012c00 	.word	0x40012c00
 800b818:	40014400 	.word	0x40014400
 800b81c:	40014800 	.word	0x40014800

0800b820 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b820:	b480      	push	{r7}
 800b822:	b087      	sub	sp, #28
 800b824:	af00      	add	r7, sp, #0
 800b826:	6078      	str	r0, [r7, #4]
 800b828:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	6a1b      	ldr	r3, [r3, #32]
 800b82e:	f023 0201 	bic.w	r2, r3, #1
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	6a1b      	ldr	r3, [r3, #32]
 800b83a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	685b      	ldr	r3, [r3, #4]
 800b840:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	699b      	ldr	r3, [r3, #24]
 800b846:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b84e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b852:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	f023 0303 	bic.w	r3, r3, #3
 800b85a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b85c:	683b      	ldr	r3, [r7, #0]
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	68fa      	ldr	r2, [r7, #12]
 800b862:	4313      	orrs	r3, r2
 800b864:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b866:	697b      	ldr	r3, [r7, #20]
 800b868:	f023 0302 	bic.w	r3, r3, #2
 800b86c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b86e:	683b      	ldr	r3, [r7, #0]
 800b870:	689b      	ldr	r3, [r3, #8]
 800b872:	697a      	ldr	r2, [r7, #20]
 800b874:	4313      	orrs	r3, r2
 800b876:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	4a24      	ldr	r2, [pc, #144]	; (800b90c <TIM_OC1_SetConfig+0xec>)
 800b87c:	4293      	cmp	r3, r2
 800b87e:	d007      	beq.n	800b890 <TIM_OC1_SetConfig+0x70>
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	4a23      	ldr	r2, [pc, #140]	; (800b910 <TIM_OC1_SetConfig+0xf0>)
 800b884:	4293      	cmp	r3, r2
 800b886:	d003      	beq.n	800b890 <TIM_OC1_SetConfig+0x70>
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	4a22      	ldr	r2, [pc, #136]	; (800b914 <TIM_OC1_SetConfig+0xf4>)
 800b88c:	4293      	cmp	r3, r2
 800b88e:	d10c      	bne.n	800b8aa <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b890:	697b      	ldr	r3, [r7, #20]
 800b892:	f023 0308 	bic.w	r3, r3, #8
 800b896:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b898:	683b      	ldr	r3, [r7, #0]
 800b89a:	68db      	ldr	r3, [r3, #12]
 800b89c:	697a      	ldr	r2, [r7, #20]
 800b89e:	4313      	orrs	r3, r2
 800b8a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b8a2:	697b      	ldr	r3, [r7, #20]
 800b8a4:	f023 0304 	bic.w	r3, r3, #4
 800b8a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	4a17      	ldr	r2, [pc, #92]	; (800b90c <TIM_OC1_SetConfig+0xec>)
 800b8ae:	4293      	cmp	r3, r2
 800b8b0:	d007      	beq.n	800b8c2 <TIM_OC1_SetConfig+0xa2>
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	4a17      	ldr	r2, [pc, #92]	; (800b914 <TIM_OC1_SetConfig+0xf4>)
 800b8b6:	4293      	cmp	r3, r2
 800b8b8:	d003      	beq.n	800b8c2 <TIM_OC1_SetConfig+0xa2>
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	4a14      	ldr	r2, [pc, #80]	; (800b910 <TIM_OC1_SetConfig+0xf0>)
 800b8be:	4293      	cmp	r3, r2
 800b8c0:	d111      	bne.n	800b8e6 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b8c2:	693b      	ldr	r3, [r7, #16]
 800b8c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b8c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b8ca:	693b      	ldr	r3, [r7, #16]
 800b8cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b8d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b8d2:	683b      	ldr	r3, [r7, #0]
 800b8d4:	695b      	ldr	r3, [r3, #20]
 800b8d6:	693a      	ldr	r2, [r7, #16]
 800b8d8:	4313      	orrs	r3, r2
 800b8da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b8dc:	683b      	ldr	r3, [r7, #0]
 800b8de:	699b      	ldr	r3, [r3, #24]
 800b8e0:	693a      	ldr	r2, [r7, #16]
 800b8e2:	4313      	orrs	r3, r2
 800b8e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	693a      	ldr	r2, [r7, #16]
 800b8ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	68fa      	ldr	r2, [r7, #12]
 800b8f0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b8f2:	683b      	ldr	r3, [r7, #0]
 800b8f4:	685a      	ldr	r2, [r3, #4]
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	697a      	ldr	r2, [r7, #20]
 800b8fe:	621a      	str	r2, [r3, #32]
}
 800b900:	bf00      	nop
 800b902:	371c      	adds	r7, #28
 800b904:	46bd      	mov	sp, r7
 800b906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b90a:	4770      	bx	lr
 800b90c:	40012c00 	.word	0x40012c00
 800b910:	40014800 	.word	0x40014800
 800b914:	40014400 	.word	0x40014400

0800b918 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b918:	b480      	push	{r7}
 800b91a:	b087      	sub	sp, #28
 800b91c:	af00      	add	r7, sp, #0
 800b91e:	6078      	str	r0, [r7, #4]
 800b920:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	6a1b      	ldr	r3, [r3, #32]
 800b926:	f023 0210 	bic.w	r2, r3, #16
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	6a1b      	ldr	r3, [r3, #32]
 800b932:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	685b      	ldr	r3, [r3, #4]
 800b938:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	699b      	ldr	r3, [r3, #24]
 800b93e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b946:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b94a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b952:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b954:	683b      	ldr	r3, [r7, #0]
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	021b      	lsls	r3, r3, #8
 800b95a:	68fa      	ldr	r2, [r7, #12]
 800b95c:	4313      	orrs	r3, r2
 800b95e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b960:	697b      	ldr	r3, [r7, #20]
 800b962:	f023 0320 	bic.w	r3, r3, #32
 800b966:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b968:	683b      	ldr	r3, [r7, #0]
 800b96a:	689b      	ldr	r3, [r3, #8]
 800b96c:	011b      	lsls	r3, r3, #4
 800b96e:	697a      	ldr	r2, [r7, #20]
 800b970:	4313      	orrs	r3, r2
 800b972:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	4a22      	ldr	r2, [pc, #136]	; (800ba00 <TIM_OC2_SetConfig+0xe8>)
 800b978:	4293      	cmp	r3, r2
 800b97a:	d10d      	bne.n	800b998 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b97c:	697b      	ldr	r3, [r7, #20]
 800b97e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b982:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b984:	683b      	ldr	r3, [r7, #0]
 800b986:	68db      	ldr	r3, [r3, #12]
 800b988:	011b      	lsls	r3, r3, #4
 800b98a:	697a      	ldr	r2, [r7, #20]
 800b98c:	4313      	orrs	r3, r2
 800b98e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b990:	697b      	ldr	r3, [r7, #20]
 800b992:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b996:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	4a19      	ldr	r2, [pc, #100]	; (800ba00 <TIM_OC2_SetConfig+0xe8>)
 800b99c:	4293      	cmp	r3, r2
 800b99e:	d007      	beq.n	800b9b0 <TIM_OC2_SetConfig+0x98>
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	4a18      	ldr	r2, [pc, #96]	; (800ba04 <TIM_OC2_SetConfig+0xec>)
 800b9a4:	4293      	cmp	r3, r2
 800b9a6:	d003      	beq.n	800b9b0 <TIM_OC2_SetConfig+0x98>
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	4a17      	ldr	r2, [pc, #92]	; (800ba08 <TIM_OC2_SetConfig+0xf0>)
 800b9ac:	4293      	cmp	r3, r2
 800b9ae:	d113      	bne.n	800b9d8 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b9b0:	693b      	ldr	r3, [r7, #16]
 800b9b2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b9b6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b9b8:	693b      	ldr	r3, [r7, #16]
 800b9ba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b9be:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b9c0:	683b      	ldr	r3, [r7, #0]
 800b9c2:	695b      	ldr	r3, [r3, #20]
 800b9c4:	009b      	lsls	r3, r3, #2
 800b9c6:	693a      	ldr	r2, [r7, #16]
 800b9c8:	4313      	orrs	r3, r2
 800b9ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b9cc:	683b      	ldr	r3, [r7, #0]
 800b9ce:	699b      	ldr	r3, [r3, #24]
 800b9d0:	009b      	lsls	r3, r3, #2
 800b9d2:	693a      	ldr	r2, [r7, #16]
 800b9d4:	4313      	orrs	r3, r2
 800b9d6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	693a      	ldr	r2, [r7, #16]
 800b9dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	68fa      	ldr	r2, [r7, #12]
 800b9e2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b9e4:	683b      	ldr	r3, [r7, #0]
 800b9e6:	685a      	ldr	r2, [r3, #4]
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	697a      	ldr	r2, [r7, #20]
 800b9f0:	621a      	str	r2, [r3, #32]
}
 800b9f2:	bf00      	nop
 800b9f4:	371c      	adds	r7, #28
 800b9f6:	46bd      	mov	sp, r7
 800b9f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9fc:	4770      	bx	lr
 800b9fe:	bf00      	nop
 800ba00:	40012c00 	.word	0x40012c00
 800ba04:	40014400 	.word	0x40014400
 800ba08:	40014800 	.word	0x40014800

0800ba0c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ba0c:	b480      	push	{r7}
 800ba0e:	b087      	sub	sp, #28
 800ba10:	af00      	add	r7, sp, #0
 800ba12:	6078      	str	r0, [r7, #4]
 800ba14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	6a1b      	ldr	r3, [r3, #32]
 800ba1a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	6a1b      	ldr	r3, [r3, #32]
 800ba26:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	685b      	ldr	r3, [r3, #4]
 800ba2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	69db      	ldr	r3, [r3, #28]
 800ba32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800ba34:	68fb      	ldr	r3, [r7, #12]
 800ba36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ba3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ba3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	f023 0303 	bic.w	r3, r3, #3
 800ba46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ba48:	683b      	ldr	r3, [r7, #0]
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	68fa      	ldr	r2, [r7, #12]
 800ba4e:	4313      	orrs	r3, r2
 800ba50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800ba52:	697b      	ldr	r3, [r7, #20]
 800ba54:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ba58:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ba5a:	683b      	ldr	r3, [r7, #0]
 800ba5c:	689b      	ldr	r3, [r3, #8]
 800ba5e:	021b      	lsls	r3, r3, #8
 800ba60:	697a      	ldr	r2, [r7, #20]
 800ba62:	4313      	orrs	r3, r2
 800ba64:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	4a21      	ldr	r2, [pc, #132]	; (800baf0 <TIM_OC3_SetConfig+0xe4>)
 800ba6a:	4293      	cmp	r3, r2
 800ba6c:	d10d      	bne.n	800ba8a <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800ba6e:	697b      	ldr	r3, [r7, #20]
 800ba70:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ba74:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ba76:	683b      	ldr	r3, [r7, #0]
 800ba78:	68db      	ldr	r3, [r3, #12]
 800ba7a:	021b      	lsls	r3, r3, #8
 800ba7c:	697a      	ldr	r2, [r7, #20]
 800ba7e:	4313      	orrs	r3, r2
 800ba80:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ba82:	697b      	ldr	r3, [r7, #20]
 800ba84:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ba88:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	4a18      	ldr	r2, [pc, #96]	; (800baf0 <TIM_OC3_SetConfig+0xe4>)
 800ba8e:	4293      	cmp	r3, r2
 800ba90:	d007      	beq.n	800baa2 <TIM_OC3_SetConfig+0x96>
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	4a17      	ldr	r2, [pc, #92]	; (800baf4 <TIM_OC3_SetConfig+0xe8>)
 800ba96:	4293      	cmp	r3, r2
 800ba98:	d003      	beq.n	800baa2 <TIM_OC3_SetConfig+0x96>
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	4a16      	ldr	r2, [pc, #88]	; (800baf8 <TIM_OC3_SetConfig+0xec>)
 800ba9e:	4293      	cmp	r3, r2
 800baa0:	d113      	bne.n	800baca <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800baa2:	693b      	ldr	r3, [r7, #16]
 800baa4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800baa8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800baaa:	693b      	ldr	r3, [r7, #16]
 800baac:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800bab0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800bab2:	683b      	ldr	r3, [r7, #0]
 800bab4:	695b      	ldr	r3, [r3, #20]
 800bab6:	011b      	lsls	r3, r3, #4
 800bab8:	693a      	ldr	r2, [r7, #16]
 800baba:	4313      	orrs	r3, r2
 800babc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800babe:	683b      	ldr	r3, [r7, #0]
 800bac0:	699b      	ldr	r3, [r3, #24]
 800bac2:	011b      	lsls	r3, r3, #4
 800bac4:	693a      	ldr	r2, [r7, #16]
 800bac6:	4313      	orrs	r3, r2
 800bac8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	693a      	ldr	r2, [r7, #16]
 800bace:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	68fa      	ldr	r2, [r7, #12]
 800bad4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800bad6:	683b      	ldr	r3, [r7, #0]
 800bad8:	685a      	ldr	r2, [r3, #4]
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	697a      	ldr	r2, [r7, #20]
 800bae2:	621a      	str	r2, [r3, #32]
}
 800bae4:	bf00      	nop
 800bae6:	371c      	adds	r7, #28
 800bae8:	46bd      	mov	sp, r7
 800baea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baee:	4770      	bx	lr
 800baf0:	40012c00 	.word	0x40012c00
 800baf4:	40014400 	.word	0x40014400
 800baf8:	40014800 	.word	0x40014800

0800bafc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800bafc:	b480      	push	{r7}
 800bafe:	b087      	sub	sp, #28
 800bb00:	af00      	add	r7, sp, #0
 800bb02:	6078      	str	r0, [r7, #4]
 800bb04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	6a1b      	ldr	r3, [r3, #32]
 800bb0a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	6a1b      	ldr	r3, [r3, #32]
 800bb16:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	685b      	ldr	r3, [r3, #4]
 800bb1c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	69db      	ldr	r3, [r3, #28]
 800bb22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800bb2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bb2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bb36:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bb38:	683b      	ldr	r3, [r7, #0]
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	021b      	lsls	r3, r3, #8
 800bb3e:	68fa      	ldr	r2, [r7, #12]
 800bb40:	4313      	orrs	r3, r2
 800bb42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800bb44:	693b      	ldr	r3, [r7, #16]
 800bb46:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800bb4a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800bb4c:	683b      	ldr	r3, [r7, #0]
 800bb4e:	689b      	ldr	r3, [r3, #8]
 800bb50:	031b      	lsls	r3, r3, #12
 800bb52:	693a      	ldr	r2, [r7, #16]
 800bb54:	4313      	orrs	r3, r2
 800bb56:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	4a14      	ldr	r2, [pc, #80]	; (800bbac <TIM_OC4_SetConfig+0xb0>)
 800bb5c:	4293      	cmp	r3, r2
 800bb5e:	d007      	beq.n	800bb70 <TIM_OC4_SetConfig+0x74>
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	4a13      	ldr	r2, [pc, #76]	; (800bbb0 <TIM_OC4_SetConfig+0xb4>)
 800bb64:	4293      	cmp	r3, r2
 800bb66:	d003      	beq.n	800bb70 <TIM_OC4_SetConfig+0x74>
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	4a12      	ldr	r2, [pc, #72]	; (800bbb4 <TIM_OC4_SetConfig+0xb8>)
 800bb6c:	4293      	cmp	r3, r2
 800bb6e:	d109      	bne.n	800bb84 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800bb70:	697b      	ldr	r3, [r7, #20]
 800bb72:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800bb76:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800bb78:	683b      	ldr	r3, [r7, #0]
 800bb7a:	695b      	ldr	r3, [r3, #20]
 800bb7c:	019b      	lsls	r3, r3, #6
 800bb7e:	697a      	ldr	r2, [r7, #20]
 800bb80:	4313      	orrs	r3, r2
 800bb82:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	697a      	ldr	r2, [r7, #20]
 800bb88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	68fa      	ldr	r2, [r7, #12]
 800bb8e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800bb90:	683b      	ldr	r3, [r7, #0]
 800bb92:	685a      	ldr	r2, [r3, #4]
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	693a      	ldr	r2, [r7, #16]
 800bb9c:	621a      	str	r2, [r3, #32]
}
 800bb9e:	bf00      	nop
 800bba0:	371c      	adds	r7, #28
 800bba2:	46bd      	mov	sp, r7
 800bba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bba8:	4770      	bx	lr
 800bbaa:	bf00      	nop
 800bbac:	40012c00 	.word	0x40012c00
 800bbb0:	40014400 	.word	0x40014400
 800bbb4:	40014800 	.word	0x40014800

0800bbb8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800bbb8:	b480      	push	{r7}
 800bbba:	b087      	sub	sp, #28
 800bbbc:	af00      	add	r7, sp, #0
 800bbbe:	6078      	str	r0, [r7, #4]
 800bbc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	6a1b      	ldr	r3, [r3, #32]
 800bbc6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	6a1b      	ldr	r3, [r3, #32]
 800bbd2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	685b      	ldr	r3, [r3, #4]
 800bbd8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bbde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bbe6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bbea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bbec:	683b      	ldr	r3, [r7, #0]
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	68fa      	ldr	r2, [r7, #12]
 800bbf2:	4313      	orrs	r3, r2
 800bbf4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800bbf6:	693b      	ldr	r3, [r7, #16]
 800bbf8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800bbfc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800bbfe:	683b      	ldr	r3, [r7, #0]
 800bc00:	689b      	ldr	r3, [r3, #8]
 800bc02:	041b      	lsls	r3, r3, #16
 800bc04:	693a      	ldr	r2, [r7, #16]
 800bc06:	4313      	orrs	r3, r2
 800bc08:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	4a13      	ldr	r2, [pc, #76]	; (800bc5c <TIM_OC5_SetConfig+0xa4>)
 800bc0e:	4293      	cmp	r3, r2
 800bc10:	d007      	beq.n	800bc22 <TIM_OC5_SetConfig+0x6a>
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	4a12      	ldr	r2, [pc, #72]	; (800bc60 <TIM_OC5_SetConfig+0xa8>)
 800bc16:	4293      	cmp	r3, r2
 800bc18:	d003      	beq.n	800bc22 <TIM_OC5_SetConfig+0x6a>
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	4a11      	ldr	r2, [pc, #68]	; (800bc64 <TIM_OC5_SetConfig+0xac>)
 800bc1e:	4293      	cmp	r3, r2
 800bc20:	d109      	bne.n	800bc36 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800bc22:	697b      	ldr	r3, [r7, #20]
 800bc24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bc28:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800bc2a:	683b      	ldr	r3, [r7, #0]
 800bc2c:	695b      	ldr	r3, [r3, #20]
 800bc2e:	021b      	lsls	r3, r3, #8
 800bc30:	697a      	ldr	r2, [r7, #20]
 800bc32:	4313      	orrs	r3, r2
 800bc34:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	697a      	ldr	r2, [r7, #20]
 800bc3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	68fa      	ldr	r2, [r7, #12]
 800bc40:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800bc42:	683b      	ldr	r3, [r7, #0]
 800bc44:	685a      	ldr	r2, [r3, #4]
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	693a      	ldr	r2, [r7, #16]
 800bc4e:	621a      	str	r2, [r3, #32]
}
 800bc50:	bf00      	nop
 800bc52:	371c      	adds	r7, #28
 800bc54:	46bd      	mov	sp, r7
 800bc56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc5a:	4770      	bx	lr
 800bc5c:	40012c00 	.word	0x40012c00
 800bc60:	40014400 	.word	0x40014400
 800bc64:	40014800 	.word	0x40014800

0800bc68 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800bc68:	b480      	push	{r7}
 800bc6a:	b087      	sub	sp, #28
 800bc6c:	af00      	add	r7, sp, #0
 800bc6e:	6078      	str	r0, [r7, #4]
 800bc70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	6a1b      	ldr	r3, [r3, #32]
 800bc76:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	6a1b      	ldr	r3, [r3, #32]
 800bc82:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	685b      	ldr	r3, [r3, #4]
 800bc88:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800bc90:	68fb      	ldr	r3, [r7, #12]
 800bc92:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800bc96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bc9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bc9c:	683b      	ldr	r3, [r7, #0]
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	021b      	lsls	r3, r3, #8
 800bca2:	68fa      	ldr	r2, [r7, #12]
 800bca4:	4313      	orrs	r3, r2
 800bca6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800bca8:	693b      	ldr	r3, [r7, #16]
 800bcaa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800bcae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800bcb0:	683b      	ldr	r3, [r7, #0]
 800bcb2:	689b      	ldr	r3, [r3, #8]
 800bcb4:	051b      	lsls	r3, r3, #20
 800bcb6:	693a      	ldr	r2, [r7, #16]
 800bcb8:	4313      	orrs	r3, r2
 800bcba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	4a14      	ldr	r2, [pc, #80]	; (800bd10 <TIM_OC6_SetConfig+0xa8>)
 800bcc0:	4293      	cmp	r3, r2
 800bcc2:	d007      	beq.n	800bcd4 <TIM_OC6_SetConfig+0x6c>
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	4a13      	ldr	r2, [pc, #76]	; (800bd14 <TIM_OC6_SetConfig+0xac>)
 800bcc8:	4293      	cmp	r3, r2
 800bcca:	d003      	beq.n	800bcd4 <TIM_OC6_SetConfig+0x6c>
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	4a12      	ldr	r2, [pc, #72]	; (800bd18 <TIM_OC6_SetConfig+0xb0>)
 800bcd0:	4293      	cmp	r3, r2
 800bcd2:	d109      	bne.n	800bce8 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800bcd4:	697b      	ldr	r3, [r7, #20]
 800bcd6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800bcda:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800bcdc:	683b      	ldr	r3, [r7, #0]
 800bcde:	695b      	ldr	r3, [r3, #20]
 800bce0:	029b      	lsls	r3, r3, #10
 800bce2:	697a      	ldr	r2, [r7, #20]
 800bce4:	4313      	orrs	r3, r2
 800bce6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	697a      	ldr	r2, [r7, #20]
 800bcec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	68fa      	ldr	r2, [r7, #12]
 800bcf2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800bcf4:	683b      	ldr	r3, [r7, #0]
 800bcf6:	685a      	ldr	r2, [r3, #4]
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	693a      	ldr	r2, [r7, #16]
 800bd00:	621a      	str	r2, [r3, #32]
}
 800bd02:	bf00      	nop
 800bd04:	371c      	adds	r7, #28
 800bd06:	46bd      	mov	sp, r7
 800bd08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd0c:	4770      	bx	lr
 800bd0e:	bf00      	nop
 800bd10:	40012c00 	.word	0x40012c00
 800bd14:	40014400 	.word	0x40014400
 800bd18:	40014800 	.word	0x40014800

0800bd1c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bd1c:	b480      	push	{r7}
 800bd1e:	b087      	sub	sp, #28
 800bd20:	af00      	add	r7, sp, #0
 800bd22:	60f8      	str	r0, [r7, #12]
 800bd24:	60b9      	str	r1, [r7, #8]
 800bd26:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800bd28:	68fb      	ldr	r3, [r7, #12]
 800bd2a:	6a1b      	ldr	r3, [r3, #32]
 800bd2c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bd2e:	68fb      	ldr	r3, [r7, #12]
 800bd30:	6a1b      	ldr	r3, [r3, #32]
 800bd32:	f023 0201 	bic.w	r2, r3, #1
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bd3a:	68fb      	ldr	r3, [r7, #12]
 800bd3c:	699b      	ldr	r3, [r3, #24]
 800bd3e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800bd40:	693b      	ldr	r3, [r7, #16]
 800bd42:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800bd46:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	011b      	lsls	r3, r3, #4
 800bd4c:	693a      	ldr	r2, [r7, #16]
 800bd4e:	4313      	orrs	r3, r2
 800bd50:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800bd52:	697b      	ldr	r3, [r7, #20]
 800bd54:	f023 030a 	bic.w	r3, r3, #10
 800bd58:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800bd5a:	697a      	ldr	r2, [r7, #20]
 800bd5c:	68bb      	ldr	r3, [r7, #8]
 800bd5e:	4313      	orrs	r3, r2
 800bd60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	693a      	ldr	r2, [r7, #16]
 800bd66:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	697a      	ldr	r2, [r7, #20]
 800bd6c:	621a      	str	r2, [r3, #32]
}
 800bd6e:	bf00      	nop
 800bd70:	371c      	adds	r7, #28
 800bd72:	46bd      	mov	sp, r7
 800bd74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd78:	4770      	bx	lr

0800bd7a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bd7a:	b480      	push	{r7}
 800bd7c:	b087      	sub	sp, #28
 800bd7e:	af00      	add	r7, sp, #0
 800bd80:	60f8      	str	r0, [r7, #12]
 800bd82:	60b9      	str	r1, [r7, #8]
 800bd84:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	6a1b      	ldr	r3, [r3, #32]
 800bd8a:	f023 0210 	bic.w	r2, r3, #16
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	699b      	ldr	r3, [r3, #24]
 800bd96:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	6a1b      	ldr	r3, [r3, #32]
 800bd9c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800bd9e:	697b      	ldr	r3, [r7, #20]
 800bda0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800bda4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	031b      	lsls	r3, r3, #12
 800bdaa:	697a      	ldr	r2, [r7, #20]
 800bdac:	4313      	orrs	r3, r2
 800bdae:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800bdb0:	693b      	ldr	r3, [r7, #16]
 800bdb2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800bdb6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800bdb8:	68bb      	ldr	r3, [r7, #8]
 800bdba:	011b      	lsls	r3, r3, #4
 800bdbc:	693a      	ldr	r2, [r7, #16]
 800bdbe:	4313      	orrs	r3, r2
 800bdc0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	697a      	ldr	r2, [r7, #20]
 800bdc6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	693a      	ldr	r2, [r7, #16]
 800bdcc:	621a      	str	r2, [r3, #32]
}
 800bdce:	bf00      	nop
 800bdd0:	371c      	adds	r7, #28
 800bdd2:	46bd      	mov	sp, r7
 800bdd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdd8:	4770      	bx	lr

0800bdda <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800bdda:	b480      	push	{r7}
 800bddc:	b085      	sub	sp, #20
 800bdde:	af00      	add	r7, sp, #0
 800bde0:	6078      	str	r0, [r7, #4]
 800bde2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	689b      	ldr	r3, [r3, #8]
 800bde8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800bdea:	68fb      	ldr	r3, [r7, #12]
 800bdec:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800bdf0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bdf4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800bdf6:	683a      	ldr	r2, [r7, #0]
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	4313      	orrs	r3, r2
 800bdfc:	f043 0307 	orr.w	r3, r3, #7
 800be00:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	68fa      	ldr	r2, [r7, #12]
 800be06:	609a      	str	r2, [r3, #8]
}
 800be08:	bf00      	nop
 800be0a:	3714      	adds	r7, #20
 800be0c:	46bd      	mov	sp, r7
 800be0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be12:	4770      	bx	lr

0800be14 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800be14:	b480      	push	{r7}
 800be16:	b087      	sub	sp, #28
 800be18:	af00      	add	r7, sp, #0
 800be1a:	60f8      	str	r0, [r7, #12]
 800be1c:	60b9      	str	r1, [r7, #8]
 800be1e:	607a      	str	r2, [r7, #4]
 800be20:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800be22:	68fb      	ldr	r3, [r7, #12]
 800be24:	689b      	ldr	r3, [r3, #8]
 800be26:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800be28:	697b      	ldr	r3, [r7, #20]
 800be2a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800be2e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800be30:	683b      	ldr	r3, [r7, #0]
 800be32:	021a      	lsls	r2, r3, #8
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	431a      	orrs	r2, r3
 800be38:	68bb      	ldr	r3, [r7, #8]
 800be3a:	4313      	orrs	r3, r2
 800be3c:	697a      	ldr	r2, [r7, #20]
 800be3e:	4313      	orrs	r3, r2
 800be40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800be42:	68fb      	ldr	r3, [r7, #12]
 800be44:	697a      	ldr	r2, [r7, #20]
 800be46:	609a      	str	r2, [r3, #8]
}
 800be48:	bf00      	nop
 800be4a:	371c      	adds	r7, #28
 800be4c:	46bd      	mov	sp, r7
 800be4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be52:	4770      	bx	lr

0800be54 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800be54:	b480      	push	{r7}
 800be56:	b085      	sub	sp, #20
 800be58:	af00      	add	r7, sp, #0
 800be5a:	6078      	str	r0, [r7, #4]
 800be5c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800be64:	2b01      	cmp	r3, #1
 800be66:	d101      	bne.n	800be6c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800be68:	2302      	movs	r3, #2
 800be6a:	e04a      	b.n	800bf02 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	2201      	movs	r2, #1
 800be70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	2202      	movs	r2, #2
 800be78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	685b      	ldr	r3, [r3, #4]
 800be82:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	681b      	ldr	r3, [r3, #0]
 800be88:	689b      	ldr	r3, [r3, #8]
 800be8a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	4a1f      	ldr	r2, [pc, #124]	; (800bf10 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800be92:	4293      	cmp	r3, r2
 800be94:	d108      	bne.n	800bea8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800be96:	68fb      	ldr	r3, [r7, #12]
 800be98:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800be9c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800be9e:	683b      	ldr	r3, [r7, #0]
 800bea0:	685b      	ldr	r3, [r3, #4]
 800bea2:	68fa      	ldr	r2, [r7, #12]
 800bea4:	4313      	orrs	r3, r2
 800bea6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800bea8:	68fb      	ldr	r3, [r7, #12]
 800beaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800beae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800beb0:	683b      	ldr	r3, [r7, #0]
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	68fa      	ldr	r2, [r7, #12]
 800beb6:	4313      	orrs	r3, r2
 800beb8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	68fa      	ldr	r2, [r7, #12]
 800bec0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	4a12      	ldr	r2, [pc, #72]	; (800bf10 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800bec8:	4293      	cmp	r3, r2
 800beca:	d004      	beq.n	800bed6 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bed4:	d10c      	bne.n	800bef0 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800bed6:	68bb      	ldr	r3, [r7, #8]
 800bed8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bedc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800bede:	683b      	ldr	r3, [r7, #0]
 800bee0:	689b      	ldr	r3, [r3, #8]
 800bee2:	68ba      	ldr	r2, [r7, #8]
 800bee4:	4313      	orrs	r3, r2
 800bee6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	68ba      	ldr	r2, [r7, #8]
 800beee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	2201      	movs	r2, #1
 800bef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	2200      	movs	r2, #0
 800befc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bf00:	2300      	movs	r3, #0
}
 800bf02:	4618      	mov	r0, r3
 800bf04:	3714      	adds	r7, #20
 800bf06:	46bd      	mov	sp, r7
 800bf08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf0c:	4770      	bx	lr
 800bf0e:	bf00      	nop
 800bf10:	40012c00 	.word	0x40012c00

0800bf14 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800bf14:	b480      	push	{r7}
 800bf16:	b085      	sub	sp, #20
 800bf18:	af00      	add	r7, sp, #0
 800bf1a:	6078      	str	r0, [r7, #4]
 800bf1c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800bf1e:	2300      	movs	r3, #0
 800bf20:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bf28:	2b01      	cmp	r3, #1
 800bf2a:	d101      	bne.n	800bf30 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800bf2c:	2302      	movs	r3, #2
 800bf2e:	e078      	b.n	800c022 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	2201      	movs	r2, #1
 800bf34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800bf38:	68fb      	ldr	r3, [r7, #12]
 800bf3a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800bf3e:	683b      	ldr	r3, [r7, #0]
 800bf40:	68db      	ldr	r3, [r3, #12]
 800bf42:	4313      	orrs	r3, r2
 800bf44:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800bf4c:	683b      	ldr	r3, [r7, #0]
 800bf4e:	689b      	ldr	r3, [r3, #8]
 800bf50:	4313      	orrs	r3, r2
 800bf52:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800bf5a:	683b      	ldr	r3, [r7, #0]
 800bf5c:	685b      	ldr	r3, [r3, #4]
 800bf5e:	4313      	orrs	r3, r2
 800bf60:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800bf62:	68fb      	ldr	r3, [r7, #12]
 800bf64:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800bf68:	683b      	ldr	r3, [r7, #0]
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	4313      	orrs	r3, r2
 800bf6e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800bf76:	683b      	ldr	r3, [r7, #0]
 800bf78:	691b      	ldr	r3, [r3, #16]
 800bf7a:	4313      	orrs	r3, r2
 800bf7c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800bf84:	683b      	ldr	r3, [r7, #0]
 800bf86:	695b      	ldr	r3, [r3, #20]
 800bf88:	4313      	orrs	r3, r2
 800bf8a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800bf8c:	68fb      	ldr	r3, [r7, #12]
 800bf8e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800bf92:	683b      	ldr	r3, [r7, #0]
 800bf94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf96:	4313      	orrs	r3, r2
 800bf98:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800bfa0:	683b      	ldr	r3, [r7, #0]
 800bfa2:	699b      	ldr	r3, [r3, #24]
 800bfa4:	041b      	lsls	r3, r3, #16
 800bfa6:	4313      	orrs	r3, r2
 800bfa8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	4a20      	ldr	r2, [pc, #128]	; (800c030 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800bfb0:	4293      	cmp	r3, r2
 800bfb2:	d106      	bne.n	800bfc2 <HAL_TIMEx_ConfigBreakDeadTime+0xae>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800bfb4:	68fb      	ldr	r3, [r7, #12]
 800bfb6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800bfba:	683b      	ldr	r3, [r7, #0]
 800bfbc:	69db      	ldr	r3, [r3, #28]
 800bfbe:	4313      	orrs	r3, r2
 800bfc0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	4a1a      	ldr	r2, [pc, #104]	; (800c030 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800bfc8:	4293      	cmp	r3, r2
 800bfca:	d121      	bne.n	800c010 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800bfd2:	683b      	ldr	r3, [r7, #0]
 800bfd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bfd6:	051b      	lsls	r3, r3, #20
 800bfd8:	4313      	orrs	r3, r2
 800bfda:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800bfe2:	683b      	ldr	r3, [r7, #0]
 800bfe4:	6a1b      	ldr	r3, [r3, #32]
 800bfe6:	4313      	orrs	r3, r2
 800bfe8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800bff0:	683b      	ldr	r3, [r7, #0]
 800bff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bff4:	4313      	orrs	r3, r2
 800bff6:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	4a0c      	ldr	r2, [pc, #48]	; (800c030 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800bffe:	4293      	cmp	r3, r2
 800c000:	d106      	bne.n	800c010 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800c002:	68fb      	ldr	r3, [r7, #12]
 800c004:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800c008:	683b      	ldr	r3, [r7, #0]
 800c00a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c00c:	4313      	orrs	r3, r2
 800c00e:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	68fa      	ldr	r2, [r7, #12]
 800c016:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	2200      	movs	r2, #0
 800c01c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c020:	2300      	movs	r3, #0
}
 800c022:	4618      	mov	r0, r3
 800c024:	3714      	adds	r7, #20
 800c026:	46bd      	mov	sp, r7
 800c028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c02c:	4770      	bx	lr
 800c02e:	bf00      	nop
 800c030:	40012c00 	.word	0x40012c00

0800c034 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c034:	b480      	push	{r7}
 800c036:	b083      	sub	sp, #12
 800c038:	af00      	add	r7, sp, #0
 800c03a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c03c:	bf00      	nop
 800c03e:	370c      	adds	r7, #12
 800c040:	46bd      	mov	sp, r7
 800c042:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c046:	4770      	bx	lr

0800c048 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c048:	b480      	push	{r7}
 800c04a:	b083      	sub	sp, #12
 800c04c:	af00      	add	r7, sp, #0
 800c04e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c050:	bf00      	nop
 800c052:	370c      	adds	r7, #12
 800c054:	46bd      	mov	sp, r7
 800c056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c05a:	4770      	bx	lr

0800c05c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800c05c:	b480      	push	{r7}
 800c05e:	b083      	sub	sp, #12
 800c060:	af00      	add	r7, sp, #0
 800c062:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800c064:	bf00      	nop
 800c066:	370c      	adds	r7, #12
 800c068:	46bd      	mov	sp, r7
 800c06a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c06e:	4770      	bx	lr

0800c070 <LL_RCC_GetUSARTClockSource>:
{
 800c070:	b480      	push	{r7}
 800c072:	b083      	sub	sp, #12
 800c074:	af00      	add	r7, sp, #0
 800c076:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 800c078:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c07c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	4013      	ands	r3, r2
}
 800c084:	4618      	mov	r0, r3
 800c086:	370c      	adds	r7, #12
 800c088:	46bd      	mov	sp, r7
 800c08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c08e:	4770      	bx	lr

0800c090 <LL_RCC_GetLPUARTClockSource>:
{
 800c090:	b480      	push	{r7}
 800c092:	b083      	sub	sp, #12
 800c094:	af00      	add	r7, sp, #0
 800c096:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 800c098:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c09c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	4013      	ands	r3, r2
}
 800c0a4:	4618      	mov	r0, r3
 800c0a6:	370c      	adds	r7, #12
 800c0a8:	46bd      	mov	sp, r7
 800c0aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ae:	4770      	bx	lr

0800c0b0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c0b0:	b580      	push	{r7, lr}
 800c0b2:	b082      	sub	sp, #8
 800c0b4:	af00      	add	r7, sp, #0
 800c0b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d101      	bne.n	800c0c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c0be:	2301      	movs	r3, #1
 800c0c0:	e042      	b.n	800c148 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d106      	bne.n	800c0da <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	2200      	movs	r2, #0
 800c0d0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c0d4:	6878      	ldr	r0, [r7, #4]
 800c0d6:	f7f9 ffdb 	bl	8006090 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	2224      	movs	r2, #36	; 0x24
 800c0de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	681a      	ldr	r2, [r3, #0]
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	f022 0201 	bic.w	r2, r2, #1
 800c0f0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c0f2:	6878      	ldr	r0, [r7, #4]
 800c0f4:	f000 fc76 	bl	800c9e4 <UART_SetConfig>
 800c0f8:	4603      	mov	r3, r0
 800c0fa:	2b01      	cmp	r3, #1
 800c0fc:	d101      	bne.n	800c102 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800c0fe:	2301      	movs	r3, #1
 800c100:	e022      	b.n	800c148 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c106:	2b00      	cmp	r3, #0
 800c108:	d002      	beq.n	800c110 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800c10a:	6878      	ldr	r0, [r7, #4]
 800c10c:	f000 fe92 	bl	800ce34 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	685a      	ldr	r2, [r3, #4]
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c11e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	689a      	ldr	r2, [r3, #8]
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c12e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	681a      	ldr	r2, [r3, #0]
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	f042 0201 	orr.w	r2, r2, #1
 800c13e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c140:	6878      	ldr	r0, [r7, #4]
 800c142:	f000 ff19 	bl	800cf78 <UART_CheckIdleState>
 800c146:	4603      	mov	r3, r0
}
 800c148:	4618      	mov	r0, r3
 800c14a:	3708      	adds	r7, #8
 800c14c:	46bd      	mov	sp, r7
 800c14e:	bd80      	pop	{r7, pc}

0800c150 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c150:	b580      	push	{r7, lr}
 800c152:	b08a      	sub	sp, #40	; 0x28
 800c154:	af02      	add	r7, sp, #8
 800c156:	60f8      	str	r0, [r7, #12]
 800c158:	60b9      	str	r1, [r7, #8]
 800c15a:	603b      	str	r3, [r7, #0]
 800c15c:	4613      	mov	r3, r2
 800c15e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c160:	68fb      	ldr	r3, [r7, #12]
 800c162:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c166:	2b20      	cmp	r3, #32
 800c168:	d173      	bne.n	800c252 <HAL_UART_Transmit+0x102>
  {
    if ((pData == NULL) || (Size == 0U))
 800c16a:	68bb      	ldr	r3, [r7, #8]
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	d002      	beq.n	800c176 <HAL_UART_Transmit+0x26>
 800c170:	88fb      	ldrh	r3, [r7, #6]
 800c172:	2b00      	cmp	r3, #0
 800c174:	d101      	bne.n	800c17a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800c176:	2301      	movs	r3, #1
 800c178:	e06c      	b.n	800c254 <HAL_UART_Transmit+0x104>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c17a:	68fb      	ldr	r3, [r7, #12]
 800c17c:	2200      	movs	r2, #0
 800c17e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c182:	68fb      	ldr	r3, [r7, #12]
 800c184:	2221      	movs	r2, #33	; 0x21
 800c186:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800c18a:	f7fa fa8f 	bl	80066ac <HAL_GetTick>
 800c18e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800c190:	68fb      	ldr	r3, [r7, #12]
 800c192:	88fa      	ldrh	r2, [r7, #6]
 800c194:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800c198:	68fb      	ldr	r3, [r7, #12]
 800c19a:	88fa      	ldrh	r2, [r7, #6]
 800c19c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c1a0:	68fb      	ldr	r3, [r7, #12]
 800c1a2:	689b      	ldr	r3, [r3, #8]
 800c1a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c1a8:	d108      	bne.n	800c1bc <HAL_UART_Transmit+0x6c>
 800c1aa:	68fb      	ldr	r3, [r7, #12]
 800c1ac:	691b      	ldr	r3, [r3, #16]
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d104      	bne.n	800c1bc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800c1b2:	2300      	movs	r3, #0
 800c1b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800c1b6:	68bb      	ldr	r3, [r7, #8]
 800c1b8:	61bb      	str	r3, [r7, #24]
 800c1ba:	e003      	b.n	800c1c4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800c1bc:	68bb      	ldr	r3, [r7, #8]
 800c1be:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800c1c0:	2300      	movs	r3, #0
 800c1c2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800c1c4:	e02c      	b.n	800c220 <HAL_UART_Transmit+0xd0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c1c6:	683b      	ldr	r3, [r7, #0]
 800c1c8:	9300      	str	r3, [sp, #0]
 800c1ca:	697b      	ldr	r3, [r7, #20]
 800c1cc:	2200      	movs	r2, #0
 800c1ce:	2180      	movs	r1, #128	; 0x80
 800c1d0:	68f8      	ldr	r0, [r7, #12]
 800c1d2:	f000 ff1f 	bl	800d014 <UART_WaitOnFlagUntilTimeout>
 800c1d6:	4603      	mov	r3, r0
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	d001      	beq.n	800c1e0 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 800c1dc:	2303      	movs	r3, #3
 800c1de:	e039      	b.n	800c254 <HAL_UART_Transmit+0x104>
      }
      if (pdata8bits == NULL)
 800c1e0:	69fb      	ldr	r3, [r7, #28]
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d10b      	bne.n	800c1fe <HAL_UART_Transmit+0xae>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800c1e6:	69bb      	ldr	r3, [r7, #24]
 800c1e8:	881b      	ldrh	r3, [r3, #0]
 800c1ea:	461a      	mov	r2, r3
 800c1ec:	68fb      	ldr	r3, [r7, #12]
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c1f4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800c1f6:	69bb      	ldr	r3, [r7, #24]
 800c1f8:	3302      	adds	r3, #2
 800c1fa:	61bb      	str	r3, [r7, #24]
 800c1fc:	e007      	b.n	800c20e <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800c1fe:	69fb      	ldr	r3, [r7, #28]
 800c200:	781a      	ldrb	r2, [r3, #0]
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800c208:	69fb      	ldr	r3, [r7, #28]
 800c20a:	3301      	adds	r3, #1
 800c20c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800c20e:	68fb      	ldr	r3, [r7, #12]
 800c210:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c214:	b29b      	uxth	r3, r3
 800c216:	3b01      	subs	r3, #1
 800c218:	b29a      	uxth	r2, r3
 800c21a:	68fb      	ldr	r3, [r7, #12]
 800c21c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800c220:	68fb      	ldr	r3, [r7, #12]
 800c222:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c226:	b29b      	uxth	r3, r3
 800c228:	2b00      	cmp	r3, #0
 800c22a:	d1cc      	bne.n	800c1c6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800c22c:	683b      	ldr	r3, [r7, #0]
 800c22e:	9300      	str	r3, [sp, #0]
 800c230:	697b      	ldr	r3, [r7, #20]
 800c232:	2200      	movs	r2, #0
 800c234:	2140      	movs	r1, #64	; 0x40
 800c236:	68f8      	ldr	r0, [r7, #12]
 800c238:	f000 feec 	bl	800d014 <UART_WaitOnFlagUntilTimeout>
 800c23c:	4603      	mov	r3, r0
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d001      	beq.n	800c246 <HAL_UART_Transmit+0xf6>
    {
      return HAL_TIMEOUT;
 800c242:	2303      	movs	r3, #3
 800c244:	e006      	b.n	800c254 <HAL_UART_Transmit+0x104>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800c246:	68fb      	ldr	r3, [r7, #12]
 800c248:	2220      	movs	r2, #32
 800c24a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800c24e:	2300      	movs	r3, #0
 800c250:	e000      	b.n	800c254 <HAL_UART_Transmit+0x104>
  }
  else
  {
    return HAL_BUSY;
 800c252:	2302      	movs	r3, #2
  }
}
 800c254:	4618      	mov	r0, r3
 800c256:	3720      	adds	r7, #32
 800c258:	46bd      	mov	sp, r7
 800c25a:	bd80      	pop	{r7, pc}

0800c25c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800c25c:	b580      	push	{r7, lr}
 800c25e:	b08a      	sub	sp, #40	; 0x28
 800c260:	af00      	add	r7, sp, #0
 800c262:	60f8      	str	r0, [r7, #12]
 800c264:	60b9      	str	r1, [r7, #8]
 800c266:	4613      	mov	r3, r2
 800c268:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c26a:	68fb      	ldr	r3, [r7, #12]
 800c26c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c270:	2b20      	cmp	r3, #32
 800c272:	d167      	bne.n	800c344 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800c274:	68bb      	ldr	r3, [r7, #8]
 800c276:	2b00      	cmp	r3, #0
 800c278:	d002      	beq.n	800c280 <HAL_UART_Transmit_DMA+0x24>
 800c27a:	88fb      	ldrh	r3, [r7, #6]
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	d101      	bne.n	800c284 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800c280:	2301      	movs	r3, #1
 800c282:	e060      	b.n	800c346 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 800c284:	68fb      	ldr	r3, [r7, #12]
 800c286:	68ba      	ldr	r2, [r7, #8]
 800c288:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800c28a:	68fb      	ldr	r3, [r7, #12]
 800c28c:	88fa      	ldrh	r2, [r7, #6]
 800c28e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800c292:	68fb      	ldr	r3, [r7, #12]
 800c294:	88fa      	ldrh	r2, [r7, #6]
 800c296:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c29a:	68fb      	ldr	r3, [r7, #12]
 800c29c:	2200      	movs	r2, #0
 800c29e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	2221      	movs	r2, #33	; 0x21
 800c2a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 800c2aa:	68fb      	ldr	r3, [r7, #12]
 800c2ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d028      	beq.n	800c304 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800c2b2:	68fb      	ldr	r3, [r7, #12]
 800c2b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c2b6:	4a26      	ldr	r2, [pc, #152]	; (800c350 <HAL_UART_Transmit_DMA+0xf4>)
 800c2b8:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800c2ba:	68fb      	ldr	r3, [r7, #12]
 800c2bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c2be:	4a25      	ldr	r2, [pc, #148]	; (800c354 <HAL_UART_Transmit_DMA+0xf8>)
 800c2c0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800c2c2:	68fb      	ldr	r3, [r7, #12]
 800c2c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c2c6:	4a24      	ldr	r2, [pc, #144]	; (800c358 <HAL_UART_Transmit_DMA+0xfc>)
 800c2c8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800c2ca:	68fb      	ldr	r3, [r7, #12]
 800c2cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c2ce:	2200      	movs	r2, #0
 800c2d0:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800c2d2:	68fb      	ldr	r3, [r7, #12]
 800c2d4:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800c2d6:	68fb      	ldr	r3, [r7, #12]
 800c2d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c2da:	4619      	mov	r1, r3
 800c2dc:	68fb      	ldr	r3, [r7, #12]
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	3328      	adds	r3, #40	; 0x28
 800c2e2:	461a      	mov	r2, r3
 800c2e4:	88fb      	ldrh	r3, [r7, #6]
 800c2e6:	f7fb f833 	bl	8007350 <HAL_DMA_Start_IT>
 800c2ea:	4603      	mov	r3, r0
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d009      	beq.n	800c304 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800c2f0:	68fb      	ldr	r3, [r7, #12]
 800c2f2:	2210      	movs	r2, #16
 800c2f4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800c2f8:	68fb      	ldr	r3, [r7, #12]
 800c2fa:	2220      	movs	r2, #32
 800c2fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 800c300:	2301      	movs	r3, #1
 800c302:	e020      	b.n	800c346 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800c304:	68fb      	ldr	r3, [r7, #12]
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	2240      	movs	r2, #64	; 0x40
 800c30a:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800c30c:	68fb      	ldr	r3, [r7, #12]
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	3308      	adds	r3, #8
 800c312:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c314:	697b      	ldr	r3, [r7, #20]
 800c316:	e853 3f00 	ldrex	r3, [r3]
 800c31a:	613b      	str	r3, [r7, #16]
   return(result);
 800c31c:	693b      	ldr	r3, [r7, #16]
 800c31e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c322:	627b      	str	r3, [r7, #36]	; 0x24
 800c324:	68fb      	ldr	r3, [r7, #12]
 800c326:	681b      	ldr	r3, [r3, #0]
 800c328:	3308      	adds	r3, #8
 800c32a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c32c:	623a      	str	r2, [r7, #32]
 800c32e:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c330:	69f9      	ldr	r1, [r7, #28]
 800c332:	6a3a      	ldr	r2, [r7, #32]
 800c334:	e841 2300 	strex	r3, r2, [r1]
 800c338:	61bb      	str	r3, [r7, #24]
   return(result);
 800c33a:	69bb      	ldr	r3, [r7, #24]
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d1e5      	bne.n	800c30c <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 800c340:	2300      	movs	r3, #0
 800c342:	e000      	b.n	800c346 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800c344:	2302      	movs	r3, #2
  }
}
 800c346:	4618      	mov	r0, r3
 800c348:	3728      	adds	r7, #40	; 0x28
 800c34a:	46bd      	mov	sp, r7
 800c34c:	bd80      	pop	{r7, pc}
 800c34e:	bf00      	nop
 800c350:	0800d2f3 	.word	0x0800d2f3
 800c354:	0800d38d 	.word	0x0800d38d
 800c358:	0800d3a9 	.word	0x0800d3a9

0800c35c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c35c:	b580      	push	{r7, lr}
 800c35e:	b0ba      	sub	sp, #232	; 0xe8
 800c360:	af00      	add	r7, sp, #0
 800c362:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	69db      	ldr	r3, [r3, #28]
 800c36a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	681b      	ldr	r3, [r3, #0]
 800c374:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	689b      	ldr	r3, [r3, #8]
 800c37e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800c382:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800c386:	f640 030f 	movw	r3, #2063	; 0x80f
 800c38a:	4013      	ands	r3, r2
 800c38c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800c390:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c394:	2b00      	cmp	r3, #0
 800c396:	d11b      	bne.n	800c3d0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c398:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c39c:	f003 0320 	and.w	r3, r3, #32
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	d015      	beq.n	800c3d0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c3a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c3a8:	f003 0320 	and.w	r3, r3, #32
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	d105      	bne.n	800c3bc <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c3b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c3b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d009      	beq.n	800c3d0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	f000 82e3 	beq.w	800c98c <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c3ca:	6878      	ldr	r0, [r7, #4]
 800c3cc:	4798      	blx	r3
      }
      return;
 800c3ce:	e2dd      	b.n	800c98c <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800c3d0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	f000 8123 	beq.w	800c620 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800c3da:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800c3de:	4b8d      	ldr	r3, [pc, #564]	; (800c614 <HAL_UART_IRQHandler+0x2b8>)
 800c3e0:	4013      	ands	r3, r2
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d106      	bne.n	800c3f4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800c3e6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800c3ea:	4b8b      	ldr	r3, [pc, #556]	; (800c618 <HAL_UART_IRQHandler+0x2bc>)
 800c3ec:	4013      	ands	r3, r2
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	f000 8116 	beq.w	800c620 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c3f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c3f8:	f003 0301 	and.w	r3, r3, #1
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d011      	beq.n	800c424 <HAL_UART_IRQHandler+0xc8>
 800c400:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c404:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d00b      	beq.n	800c424 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	2201      	movs	r2, #1
 800c412:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c41a:	f043 0201 	orr.w	r2, r3, #1
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c424:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c428:	f003 0302 	and.w	r3, r3, #2
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	d011      	beq.n	800c454 <HAL_UART_IRQHandler+0xf8>
 800c430:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c434:	f003 0301 	and.w	r3, r3, #1
 800c438:	2b00      	cmp	r3, #0
 800c43a:	d00b      	beq.n	800c454 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	681b      	ldr	r3, [r3, #0]
 800c440:	2202      	movs	r2, #2
 800c442:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c44a:	f043 0204 	orr.w	r2, r3, #4
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c454:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c458:	f003 0304 	and.w	r3, r3, #4
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	d011      	beq.n	800c484 <HAL_UART_IRQHandler+0x128>
 800c460:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c464:	f003 0301 	and.w	r3, r3, #1
 800c468:	2b00      	cmp	r3, #0
 800c46a:	d00b      	beq.n	800c484 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	2204      	movs	r2, #4
 800c472:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c47a:	f043 0202 	orr.w	r2, r3, #2
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800c484:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c488:	f003 0308 	and.w	r3, r3, #8
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d017      	beq.n	800c4c0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c490:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c494:	f003 0320 	and.w	r3, r3, #32
 800c498:	2b00      	cmp	r3, #0
 800c49a:	d105      	bne.n	800c4a8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800c49c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800c4a0:	4b5c      	ldr	r3, [pc, #368]	; (800c614 <HAL_UART_IRQHandler+0x2b8>)
 800c4a2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d00b      	beq.n	800c4c0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	681b      	ldr	r3, [r3, #0]
 800c4ac:	2208      	movs	r2, #8
 800c4ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c4b6:	f043 0208 	orr.w	r2, r3, #8
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800c4c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c4c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d012      	beq.n	800c4f2 <HAL_UART_IRQHandler+0x196>
 800c4cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c4d0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	d00c      	beq.n	800c4f2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c4e0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c4e8:	f043 0220 	orr.w	r2, r3, #32
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	f000 8249 	beq.w	800c990 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c4fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c502:	f003 0320 	and.w	r3, r3, #32
 800c506:	2b00      	cmp	r3, #0
 800c508:	d013      	beq.n	800c532 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c50a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c50e:	f003 0320 	and.w	r3, r3, #32
 800c512:	2b00      	cmp	r3, #0
 800c514:	d105      	bne.n	800c522 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c516:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c51a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c51e:	2b00      	cmp	r3, #0
 800c520:	d007      	beq.n	800c532 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c526:	2b00      	cmp	r3, #0
 800c528:	d003      	beq.n	800c532 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c52e:	6878      	ldr	r0, [r7, #4]
 800c530:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c538:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	689b      	ldr	r3, [r3, #8]
 800c542:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c546:	2b40      	cmp	r3, #64	; 0x40
 800c548:	d005      	beq.n	800c556 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800c54a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c54e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c552:	2b00      	cmp	r3, #0
 800c554:	d054      	beq.n	800c600 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c556:	6878      	ldr	r0, [r7, #4]
 800c558:	f000 fe65 	bl	800d226 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	689b      	ldr	r3, [r3, #8]
 800c562:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c566:	2b40      	cmp	r3, #64	; 0x40
 800c568:	d146      	bne.n	800c5f8 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	681b      	ldr	r3, [r3, #0]
 800c56e:	3308      	adds	r3, #8
 800c570:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c574:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c578:	e853 3f00 	ldrex	r3, [r3]
 800c57c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800c580:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c584:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c588:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	3308      	adds	r3, #8
 800c592:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800c596:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800c59a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c59e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800c5a2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800c5a6:	e841 2300 	strex	r3, r2, [r1]
 800c5aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800c5ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	d1d9      	bne.n	800c56a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d017      	beq.n	800c5f0 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c5c6:	4a15      	ldr	r2, [pc, #84]	; (800c61c <HAL_UART_IRQHandler+0x2c0>)
 800c5c8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c5d0:	4618      	mov	r0, r3
 800c5d2:	f7fa ff97 	bl	8007504 <HAL_DMA_Abort_IT>
 800c5d6:	4603      	mov	r3, r0
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	d019      	beq.n	800c610 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c5e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c5e4:	687a      	ldr	r2, [r7, #4]
 800c5e6:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800c5ea:	4610      	mov	r0, r2
 800c5ec:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c5ee:	e00f      	b.n	800c610 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c5f0:	6878      	ldr	r0, [r7, #4]
 800c5f2:	f000 f9e1 	bl	800c9b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c5f6:	e00b      	b.n	800c610 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c5f8:	6878      	ldr	r0, [r7, #4]
 800c5fa:	f000 f9dd 	bl	800c9b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c5fe:	e007      	b.n	800c610 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c600:	6878      	ldr	r0, [r7, #4]
 800c602:	f000 f9d9 	bl	800c9b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	2200      	movs	r2, #0
 800c60a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800c60e:	e1bf      	b.n	800c990 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c610:	bf00      	nop
    return;
 800c612:	e1bd      	b.n	800c990 <HAL_UART_IRQHandler+0x634>
 800c614:	10000001 	.word	0x10000001
 800c618:	04000120 	.word	0x04000120
 800c61c:	0800d429 	.word	0x0800d429

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c624:	2b01      	cmp	r3, #1
 800c626:	f040 8153 	bne.w	800c8d0 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800c62a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c62e:	f003 0310 	and.w	r3, r3, #16
 800c632:	2b00      	cmp	r3, #0
 800c634:	f000 814c 	beq.w	800c8d0 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800c638:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c63c:	f003 0310 	and.w	r3, r3, #16
 800c640:	2b00      	cmp	r3, #0
 800c642:	f000 8145 	beq.w	800c8d0 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	2210      	movs	r2, #16
 800c64c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	681b      	ldr	r3, [r3, #0]
 800c652:	689b      	ldr	r3, [r3, #8]
 800c654:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c658:	2b40      	cmp	r3, #64	; 0x40
 800c65a:	f040 80bb 	bne.w	800c7d4 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	685b      	ldr	r3, [r3, #4]
 800c668:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c66c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800c670:	2b00      	cmp	r3, #0
 800c672:	f000 818f 	beq.w	800c994 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c67c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c680:	429a      	cmp	r2, r3
 800c682:	f080 8187 	bcs.w	800c994 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c68c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c696:	681b      	ldr	r3, [r3, #0]
 800c698:	681b      	ldr	r3, [r3, #0]
 800c69a:	f003 0320 	and.w	r3, r3, #32
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	f040 8087 	bne.w	800c7b2 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	681b      	ldr	r3, [r3, #0]
 800c6a8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6ac:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c6b0:	e853 3f00 	ldrex	r3, [r3]
 800c6b4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800c6b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c6bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c6c0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	681b      	ldr	r3, [r3, #0]
 800c6c8:	461a      	mov	r2, r3
 800c6ca:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c6ce:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800c6d2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6d6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800c6da:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800c6de:	e841 2300 	strex	r3, r2, [r1]
 800c6e2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800c6e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	d1da      	bne.n	800c6a4 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	681b      	ldr	r3, [r3, #0]
 800c6f2:	3308      	adds	r3, #8
 800c6f4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c6f8:	e853 3f00 	ldrex	r3, [r3]
 800c6fc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800c6fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c700:	f023 0301 	bic.w	r3, r3, #1
 800c704:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	3308      	adds	r3, #8
 800c70e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800c712:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800c716:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c718:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800c71a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c71e:	e841 2300 	strex	r3, r2, [r1]
 800c722:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800c724:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c726:	2b00      	cmp	r3, #0
 800c728:	d1e1      	bne.n	800c6ee <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	3308      	adds	r3, #8
 800c730:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c732:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c734:	e853 3f00 	ldrex	r3, [r3]
 800c738:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800c73a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c73c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c740:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	3308      	adds	r3, #8
 800c74a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800c74e:	66fa      	str	r2, [r7, #108]	; 0x6c
 800c750:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c752:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c754:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c756:	e841 2300 	strex	r3, r2, [r1]
 800c75a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800c75c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d1e3      	bne.n	800c72a <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	2220      	movs	r2, #32
 800c766:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	2200      	movs	r2, #0
 800c76e:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c776:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c778:	e853 3f00 	ldrex	r3, [r3]
 800c77c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c77e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c780:	f023 0310 	bic.w	r3, r3, #16
 800c784:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	681b      	ldr	r3, [r3, #0]
 800c78c:	461a      	mov	r2, r3
 800c78e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c792:	65bb      	str	r3, [r7, #88]	; 0x58
 800c794:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c796:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c798:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c79a:	e841 2300 	strex	r3, r2, [r1]
 800c79e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c7a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	d1e4      	bne.n	800c770 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c7ac:	4618      	mov	r0, r3
 800c7ae:	f7fa fe4a 	bl	8007446 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	2202      	movs	r2, #2
 800c7b6:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c7c4:	b29b      	uxth	r3, r3
 800c7c6:	1ad3      	subs	r3, r2, r3
 800c7c8:	b29b      	uxth	r3, r3
 800c7ca:	4619      	mov	r1, r3
 800c7cc:	6878      	ldr	r0, [r7, #4]
 800c7ce:	f000 f8fd 	bl	800c9cc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c7d2:	e0df      	b.n	800c994 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c7e0:	b29b      	uxth	r3, r3
 800c7e2:	1ad3      	subs	r3, r2, r3
 800c7e4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c7ee:	b29b      	uxth	r3, r3
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	f000 80d1 	beq.w	800c998 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 800c7f6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	f000 80cc 	beq.w	800c998 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c806:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c808:	e853 3f00 	ldrex	r3, [r3]
 800c80c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c80e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c810:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c814:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	681b      	ldr	r3, [r3, #0]
 800c81c:	461a      	mov	r2, r3
 800c81e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c822:	647b      	str	r3, [r7, #68]	; 0x44
 800c824:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c826:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c828:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c82a:	e841 2300 	strex	r3, r2, [r1]
 800c82e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c830:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c832:	2b00      	cmp	r3, #0
 800c834:	d1e4      	bne.n	800c800 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	681b      	ldr	r3, [r3, #0]
 800c83a:	3308      	adds	r3, #8
 800c83c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c83e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c840:	e853 3f00 	ldrex	r3, [r3]
 800c844:	623b      	str	r3, [r7, #32]
   return(result);
 800c846:	6a3b      	ldr	r3, [r7, #32]
 800c848:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c84c:	f023 0301 	bic.w	r3, r3, #1
 800c850:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	681b      	ldr	r3, [r3, #0]
 800c858:	3308      	adds	r3, #8
 800c85a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800c85e:	633a      	str	r2, [r7, #48]	; 0x30
 800c860:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c862:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c864:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c866:	e841 2300 	strex	r3, r2, [r1]
 800c86a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c86c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c86e:	2b00      	cmp	r3, #0
 800c870:	d1e1      	bne.n	800c836 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	2220      	movs	r2, #32
 800c876:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	2200      	movs	r2, #0
 800c87e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	2200      	movs	r2, #0
 800c884:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	681b      	ldr	r3, [r3, #0]
 800c88a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c88c:	693b      	ldr	r3, [r7, #16]
 800c88e:	e853 3f00 	ldrex	r3, [r3]
 800c892:	60fb      	str	r3, [r7, #12]
   return(result);
 800c894:	68fb      	ldr	r3, [r7, #12]
 800c896:	f023 0310 	bic.w	r3, r3, #16
 800c89a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	461a      	mov	r2, r3
 800c8a4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800c8a8:	61fb      	str	r3, [r7, #28]
 800c8aa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8ac:	69b9      	ldr	r1, [r7, #24]
 800c8ae:	69fa      	ldr	r2, [r7, #28]
 800c8b0:	e841 2300 	strex	r3, r2, [r1]
 800c8b4:	617b      	str	r3, [r7, #20]
   return(result);
 800c8b6:	697b      	ldr	r3, [r7, #20]
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	d1e4      	bne.n	800c886 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	2202      	movs	r2, #2
 800c8c0:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c8c2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c8c6:	4619      	mov	r1, r3
 800c8c8:	6878      	ldr	r0, [r7, #4]
 800c8ca:	f000 f87f 	bl	800c9cc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c8ce:	e063      	b.n	800c998 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800c8d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c8d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	d00e      	beq.n	800c8fa <HAL_UART_IRQHandler+0x59e>
 800c8dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c8e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	d008      	beq.n	800c8fa <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	681b      	ldr	r3, [r3, #0]
 800c8ec:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800c8f0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800c8f2:	6878      	ldr	r0, [r7, #4]
 800c8f4:	f000 fdd9 	bl	800d4aa <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c8f8:	e051      	b.n	800c99e <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800c8fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c8fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c902:	2b00      	cmp	r3, #0
 800c904:	d014      	beq.n	800c930 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800c906:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c90a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c90e:	2b00      	cmp	r3, #0
 800c910:	d105      	bne.n	800c91e <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800c912:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c916:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	d008      	beq.n	800c930 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c922:	2b00      	cmp	r3, #0
 800c924:	d03a      	beq.n	800c99c <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c92a:	6878      	ldr	r0, [r7, #4]
 800c92c:	4798      	blx	r3
    }
    return;
 800c92e:	e035      	b.n	800c99c <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800c930:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c934:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c938:	2b00      	cmp	r3, #0
 800c93a:	d009      	beq.n	800c950 <HAL_UART_IRQHandler+0x5f4>
 800c93c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c940:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c944:	2b00      	cmp	r3, #0
 800c946:	d003      	beq.n	800c950 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 800c948:	6878      	ldr	r0, [r7, #4]
 800c94a:	f000 fd83 	bl	800d454 <UART_EndTransmit_IT>
    return;
 800c94e:	e026      	b.n	800c99e <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800c950:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c954:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d009      	beq.n	800c970 <HAL_UART_IRQHandler+0x614>
 800c95c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c960:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c964:	2b00      	cmp	r3, #0
 800c966:	d003      	beq.n	800c970 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800c968:	6878      	ldr	r0, [r7, #4]
 800c96a:	f000 fdb2 	bl	800d4d2 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c96e:	e016      	b.n	800c99e <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800c970:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c974:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c978:	2b00      	cmp	r3, #0
 800c97a:	d010      	beq.n	800c99e <HAL_UART_IRQHandler+0x642>
 800c97c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c980:	2b00      	cmp	r3, #0
 800c982:	da0c      	bge.n	800c99e <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800c984:	6878      	ldr	r0, [r7, #4]
 800c986:	f000 fd9a 	bl	800d4be <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c98a:	e008      	b.n	800c99e <HAL_UART_IRQHandler+0x642>
      return;
 800c98c:	bf00      	nop
 800c98e:	e006      	b.n	800c99e <HAL_UART_IRQHandler+0x642>
    return;
 800c990:	bf00      	nop
 800c992:	e004      	b.n	800c99e <HAL_UART_IRQHandler+0x642>
      return;
 800c994:	bf00      	nop
 800c996:	e002      	b.n	800c99e <HAL_UART_IRQHandler+0x642>
      return;
 800c998:	bf00      	nop
 800c99a:	e000      	b.n	800c99e <HAL_UART_IRQHandler+0x642>
    return;
 800c99c:	bf00      	nop
  }
}
 800c99e:	37e8      	adds	r7, #232	; 0xe8
 800c9a0:	46bd      	mov	sp, r7
 800c9a2:	bd80      	pop	{r7, pc}

0800c9a4 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c9a4:	b480      	push	{r7}
 800c9a6:	b083      	sub	sp, #12
 800c9a8:	af00      	add	r7, sp, #0
 800c9aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800c9ac:	bf00      	nop
 800c9ae:	370c      	adds	r7, #12
 800c9b0:	46bd      	mov	sp, r7
 800c9b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9b6:	4770      	bx	lr

0800c9b8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c9b8:	b480      	push	{r7}
 800c9ba:	b083      	sub	sp, #12
 800c9bc:	af00      	add	r7, sp, #0
 800c9be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800c9c0:	bf00      	nop
 800c9c2:	370c      	adds	r7, #12
 800c9c4:	46bd      	mov	sp, r7
 800c9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ca:	4770      	bx	lr

0800c9cc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c9cc:	b480      	push	{r7}
 800c9ce:	b083      	sub	sp, #12
 800c9d0:	af00      	add	r7, sp, #0
 800c9d2:	6078      	str	r0, [r7, #4]
 800c9d4:	460b      	mov	r3, r1
 800c9d6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c9d8:	bf00      	nop
 800c9da:	370c      	adds	r7, #12
 800c9dc:	46bd      	mov	sp, r7
 800c9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9e2:	4770      	bx	lr

0800c9e4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c9e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c9e8:	b08c      	sub	sp, #48	; 0x30
 800c9ea:	af00      	add	r7, sp, #0
 800c9ec:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c9ee:	2300      	movs	r3, #0
 800c9f0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c9f4:	697b      	ldr	r3, [r7, #20]
 800c9f6:	689a      	ldr	r2, [r3, #8]
 800c9f8:	697b      	ldr	r3, [r7, #20]
 800c9fa:	691b      	ldr	r3, [r3, #16]
 800c9fc:	431a      	orrs	r2, r3
 800c9fe:	697b      	ldr	r3, [r7, #20]
 800ca00:	695b      	ldr	r3, [r3, #20]
 800ca02:	431a      	orrs	r2, r3
 800ca04:	697b      	ldr	r3, [r7, #20]
 800ca06:	69db      	ldr	r3, [r3, #28]
 800ca08:	4313      	orrs	r3, r2
 800ca0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ca0c:	697b      	ldr	r3, [r7, #20]
 800ca0e:	681b      	ldr	r3, [r3, #0]
 800ca10:	681a      	ldr	r2, [r3, #0]
 800ca12:	4baf      	ldr	r3, [pc, #700]	; (800ccd0 <UART_SetConfig+0x2ec>)
 800ca14:	4013      	ands	r3, r2
 800ca16:	697a      	ldr	r2, [r7, #20]
 800ca18:	6812      	ldr	r2, [r2, #0]
 800ca1a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ca1c:	430b      	orrs	r3, r1
 800ca1e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ca20:	697b      	ldr	r3, [r7, #20]
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	685b      	ldr	r3, [r3, #4]
 800ca26:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800ca2a:	697b      	ldr	r3, [r7, #20]
 800ca2c:	68da      	ldr	r2, [r3, #12]
 800ca2e:	697b      	ldr	r3, [r7, #20]
 800ca30:	681b      	ldr	r3, [r3, #0]
 800ca32:	430a      	orrs	r2, r1
 800ca34:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ca36:	697b      	ldr	r3, [r7, #20]
 800ca38:	699b      	ldr	r3, [r3, #24]
 800ca3a:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ca3c:	697b      	ldr	r3, [r7, #20]
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	4aa4      	ldr	r2, [pc, #656]	; (800ccd4 <UART_SetConfig+0x2f0>)
 800ca42:	4293      	cmp	r3, r2
 800ca44:	d004      	beq.n	800ca50 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800ca46:	697b      	ldr	r3, [r7, #20]
 800ca48:	6a1b      	ldr	r3, [r3, #32]
 800ca4a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ca4c:	4313      	orrs	r3, r2
 800ca4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ca50:	697b      	ldr	r3, [r7, #20]
 800ca52:	681b      	ldr	r3, [r3, #0]
 800ca54:	689b      	ldr	r3, [r3, #8]
 800ca56:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800ca5a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800ca5e:	697a      	ldr	r2, [r7, #20]
 800ca60:	6812      	ldr	r2, [r2, #0]
 800ca62:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ca64:	430b      	orrs	r3, r1
 800ca66:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800ca68:	697b      	ldr	r3, [r7, #20]
 800ca6a:	681b      	ldr	r3, [r3, #0]
 800ca6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca6e:	f023 010f 	bic.w	r1, r3, #15
 800ca72:	697b      	ldr	r3, [r7, #20]
 800ca74:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ca76:	697b      	ldr	r3, [r7, #20]
 800ca78:	681b      	ldr	r3, [r3, #0]
 800ca7a:	430a      	orrs	r2, r1
 800ca7c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ca7e:	697b      	ldr	r3, [r7, #20]
 800ca80:	681b      	ldr	r3, [r3, #0]
 800ca82:	4a95      	ldr	r2, [pc, #596]	; (800ccd8 <UART_SetConfig+0x2f4>)
 800ca84:	4293      	cmp	r3, r2
 800ca86:	d125      	bne.n	800cad4 <UART_SetConfig+0xf0>
 800ca88:	2003      	movs	r0, #3
 800ca8a:	f7ff faf1 	bl	800c070 <LL_RCC_GetUSARTClockSource>
 800ca8e:	4603      	mov	r3, r0
 800ca90:	2b03      	cmp	r3, #3
 800ca92:	d81b      	bhi.n	800cacc <UART_SetConfig+0xe8>
 800ca94:	a201      	add	r2, pc, #4	; (adr r2, 800ca9c <UART_SetConfig+0xb8>)
 800ca96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca9a:	bf00      	nop
 800ca9c:	0800caad 	.word	0x0800caad
 800caa0:	0800cabd 	.word	0x0800cabd
 800caa4:	0800cab5 	.word	0x0800cab5
 800caa8:	0800cac5 	.word	0x0800cac5
 800caac:	2301      	movs	r3, #1
 800caae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800cab2:	e042      	b.n	800cb3a <UART_SetConfig+0x156>
 800cab4:	2302      	movs	r3, #2
 800cab6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800caba:	e03e      	b.n	800cb3a <UART_SetConfig+0x156>
 800cabc:	2304      	movs	r3, #4
 800cabe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800cac2:	e03a      	b.n	800cb3a <UART_SetConfig+0x156>
 800cac4:	2308      	movs	r3, #8
 800cac6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800caca:	e036      	b.n	800cb3a <UART_SetConfig+0x156>
 800cacc:	2310      	movs	r3, #16
 800cace:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800cad2:	e032      	b.n	800cb3a <UART_SetConfig+0x156>
 800cad4:	697b      	ldr	r3, [r7, #20]
 800cad6:	681b      	ldr	r3, [r3, #0]
 800cad8:	4a7e      	ldr	r2, [pc, #504]	; (800ccd4 <UART_SetConfig+0x2f0>)
 800cada:	4293      	cmp	r3, r2
 800cadc:	d12a      	bne.n	800cb34 <UART_SetConfig+0x150>
 800cade:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800cae2:	f7ff fad5 	bl	800c090 <LL_RCC_GetLPUARTClockSource>
 800cae6:	4603      	mov	r3, r0
 800cae8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800caec:	d01a      	beq.n	800cb24 <UART_SetConfig+0x140>
 800caee:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800caf2:	d81b      	bhi.n	800cb2c <UART_SetConfig+0x148>
 800caf4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800caf8:	d00c      	beq.n	800cb14 <UART_SetConfig+0x130>
 800cafa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cafe:	d815      	bhi.n	800cb2c <UART_SetConfig+0x148>
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	d003      	beq.n	800cb0c <UART_SetConfig+0x128>
 800cb04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cb08:	d008      	beq.n	800cb1c <UART_SetConfig+0x138>
 800cb0a:	e00f      	b.n	800cb2c <UART_SetConfig+0x148>
 800cb0c:	2300      	movs	r3, #0
 800cb0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800cb12:	e012      	b.n	800cb3a <UART_SetConfig+0x156>
 800cb14:	2302      	movs	r3, #2
 800cb16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800cb1a:	e00e      	b.n	800cb3a <UART_SetConfig+0x156>
 800cb1c:	2304      	movs	r3, #4
 800cb1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800cb22:	e00a      	b.n	800cb3a <UART_SetConfig+0x156>
 800cb24:	2308      	movs	r3, #8
 800cb26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800cb2a:	e006      	b.n	800cb3a <UART_SetConfig+0x156>
 800cb2c:	2310      	movs	r3, #16
 800cb2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800cb32:	e002      	b.n	800cb3a <UART_SetConfig+0x156>
 800cb34:	2310      	movs	r3, #16
 800cb36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800cb3a:	697b      	ldr	r3, [r7, #20]
 800cb3c:	681b      	ldr	r3, [r3, #0]
 800cb3e:	4a65      	ldr	r2, [pc, #404]	; (800ccd4 <UART_SetConfig+0x2f0>)
 800cb40:	4293      	cmp	r3, r2
 800cb42:	f040 8097 	bne.w	800cc74 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800cb46:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800cb4a:	2b08      	cmp	r3, #8
 800cb4c:	d823      	bhi.n	800cb96 <UART_SetConfig+0x1b2>
 800cb4e:	a201      	add	r2, pc, #4	; (adr r2, 800cb54 <UART_SetConfig+0x170>)
 800cb50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb54:	0800cb79 	.word	0x0800cb79
 800cb58:	0800cb97 	.word	0x0800cb97
 800cb5c:	0800cb81 	.word	0x0800cb81
 800cb60:	0800cb97 	.word	0x0800cb97
 800cb64:	0800cb87 	.word	0x0800cb87
 800cb68:	0800cb97 	.word	0x0800cb97
 800cb6c:	0800cb97 	.word	0x0800cb97
 800cb70:	0800cb97 	.word	0x0800cb97
 800cb74:	0800cb8f 	.word	0x0800cb8f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cb78:	f7fd faec 	bl	800a154 <HAL_RCC_GetPCLK1Freq>
 800cb7c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800cb7e:	e010      	b.n	800cba2 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800cb80:	4b56      	ldr	r3, [pc, #344]	; (800ccdc <UART_SetConfig+0x2f8>)
 800cb82:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800cb84:	e00d      	b.n	800cba2 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800cb86:	f7fd fa65 	bl	800a054 <HAL_RCC_GetSysClockFreq>
 800cb8a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800cb8c:	e009      	b.n	800cba2 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cb8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cb92:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800cb94:	e005      	b.n	800cba2 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 800cb96:	2300      	movs	r3, #0
 800cb98:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800cb9a:	2301      	movs	r3, #1
 800cb9c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800cba0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800cba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	f000 812b 	beq.w	800ce00 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800cbaa:	697b      	ldr	r3, [r7, #20]
 800cbac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbae:	4a4c      	ldr	r2, [pc, #304]	; (800cce0 <UART_SetConfig+0x2fc>)
 800cbb0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cbb4:	461a      	mov	r2, r3
 800cbb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbb8:	fbb3 f3f2 	udiv	r3, r3, r2
 800cbbc:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800cbbe:	697b      	ldr	r3, [r7, #20]
 800cbc0:	685a      	ldr	r2, [r3, #4]
 800cbc2:	4613      	mov	r3, r2
 800cbc4:	005b      	lsls	r3, r3, #1
 800cbc6:	4413      	add	r3, r2
 800cbc8:	69ba      	ldr	r2, [r7, #24]
 800cbca:	429a      	cmp	r2, r3
 800cbcc:	d305      	bcc.n	800cbda <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800cbce:	697b      	ldr	r3, [r7, #20]
 800cbd0:	685b      	ldr	r3, [r3, #4]
 800cbd2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800cbd4:	69ba      	ldr	r2, [r7, #24]
 800cbd6:	429a      	cmp	r2, r3
 800cbd8:	d903      	bls.n	800cbe2 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 800cbda:	2301      	movs	r3, #1
 800cbdc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800cbe0:	e10e      	b.n	800ce00 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cbe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbe4:	2200      	movs	r2, #0
 800cbe6:	60bb      	str	r3, [r7, #8]
 800cbe8:	60fa      	str	r2, [r7, #12]
 800cbea:	697b      	ldr	r3, [r7, #20]
 800cbec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbee:	4a3c      	ldr	r2, [pc, #240]	; (800cce0 <UART_SetConfig+0x2fc>)
 800cbf0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cbf4:	b29b      	uxth	r3, r3
 800cbf6:	2200      	movs	r2, #0
 800cbf8:	603b      	str	r3, [r7, #0]
 800cbfa:	607a      	str	r2, [r7, #4]
 800cbfc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cc00:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800cc04:	f7f4 f868 	bl	8000cd8 <__aeabi_uldivmod>
 800cc08:	4602      	mov	r2, r0
 800cc0a:	460b      	mov	r3, r1
 800cc0c:	4610      	mov	r0, r2
 800cc0e:	4619      	mov	r1, r3
 800cc10:	f04f 0200 	mov.w	r2, #0
 800cc14:	f04f 0300 	mov.w	r3, #0
 800cc18:	020b      	lsls	r3, r1, #8
 800cc1a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800cc1e:	0202      	lsls	r2, r0, #8
 800cc20:	6979      	ldr	r1, [r7, #20]
 800cc22:	6849      	ldr	r1, [r1, #4]
 800cc24:	0849      	lsrs	r1, r1, #1
 800cc26:	2000      	movs	r0, #0
 800cc28:	460c      	mov	r4, r1
 800cc2a:	4605      	mov	r5, r0
 800cc2c:	eb12 0804 	adds.w	r8, r2, r4
 800cc30:	eb43 0905 	adc.w	r9, r3, r5
 800cc34:	697b      	ldr	r3, [r7, #20]
 800cc36:	685b      	ldr	r3, [r3, #4]
 800cc38:	2200      	movs	r2, #0
 800cc3a:	469a      	mov	sl, r3
 800cc3c:	4693      	mov	fp, r2
 800cc3e:	4652      	mov	r2, sl
 800cc40:	465b      	mov	r3, fp
 800cc42:	4640      	mov	r0, r8
 800cc44:	4649      	mov	r1, r9
 800cc46:	f7f4 f847 	bl	8000cd8 <__aeabi_uldivmod>
 800cc4a:	4602      	mov	r2, r0
 800cc4c:	460b      	mov	r3, r1
 800cc4e:	4613      	mov	r3, r2
 800cc50:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800cc52:	6a3b      	ldr	r3, [r7, #32]
 800cc54:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800cc58:	d308      	bcc.n	800cc6c <UART_SetConfig+0x288>
 800cc5a:	6a3b      	ldr	r3, [r7, #32]
 800cc5c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cc60:	d204      	bcs.n	800cc6c <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 800cc62:	697b      	ldr	r3, [r7, #20]
 800cc64:	681b      	ldr	r3, [r3, #0]
 800cc66:	6a3a      	ldr	r2, [r7, #32]
 800cc68:	60da      	str	r2, [r3, #12]
 800cc6a:	e0c9      	b.n	800ce00 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 800cc6c:	2301      	movs	r3, #1
 800cc6e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800cc72:	e0c5      	b.n	800ce00 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800cc74:	697b      	ldr	r3, [r7, #20]
 800cc76:	69db      	ldr	r3, [r3, #28]
 800cc78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cc7c:	d16d      	bne.n	800cd5a <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 800cc7e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800cc82:	3b01      	subs	r3, #1
 800cc84:	2b07      	cmp	r3, #7
 800cc86:	d82d      	bhi.n	800cce4 <UART_SetConfig+0x300>
 800cc88:	a201      	add	r2, pc, #4	; (adr r2, 800cc90 <UART_SetConfig+0x2ac>)
 800cc8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc8e:	bf00      	nop
 800cc90:	0800ccb1 	.word	0x0800ccb1
 800cc94:	0800ccb9 	.word	0x0800ccb9
 800cc98:	0800cce5 	.word	0x0800cce5
 800cc9c:	0800ccbf 	.word	0x0800ccbf
 800cca0:	0800cce5 	.word	0x0800cce5
 800cca4:	0800cce5 	.word	0x0800cce5
 800cca8:	0800cce5 	.word	0x0800cce5
 800ccac:	0800ccc7 	.word	0x0800ccc7
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ccb0:	f7fd fa66 	bl	800a180 <HAL_RCC_GetPCLK2Freq>
 800ccb4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800ccb6:	e01b      	b.n	800ccf0 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ccb8:	4b08      	ldr	r3, [pc, #32]	; (800ccdc <UART_SetConfig+0x2f8>)
 800ccba:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800ccbc:	e018      	b.n	800ccf0 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ccbe:	f7fd f9c9 	bl	800a054 <HAL_RCC_GetSysClockFreq>
 800ccc2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800ccc4:	e014      	b.n	800ccf0 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ccc6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ccca:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800cccc:	e010      	b.n	800ccf0 <UART_SetConfig+0x30c>
 800ccce:	bf00      	nop
 800ccd0:	cfff69f3 	.word	0xcfff69f3
 800ccd4:	40008000 	.word	0x40008000
 800ccd8:	40013800 	.word	0x40013800
 800ccdc:	00f42400 	.word	0x00f42400
 800cce0:	08017f14 	.word	0x08017f14
      default:
        pclk = 0U;
 800cce4:	2300      	movs	r3, #0
 800cce6:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800cce8:	2301      	movs	r3, #1
 800ccea:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800ccee:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ccf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	f000 8084 	beq.w	800ce00 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ccf8:	697b      	ldr	r3, [r7, #20]
 800ccfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccfc:	4a4b      	ldr	r2, [pc, #300]	; (800ce2c <UART_SetConfig+0x448>)
 800ccfe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cd02:	461a      	mov	r2, r3
 800cd04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd06:	fbb3 f3f2 	udiv	r3, r3, r2
 800cd0a:	005a      	lsls	r2, r3, #1
 800cd0c:	697b      	ldr	r3, [r7, #20]
 800cd0e:	685b      	ldr	r3, [r3, #4]
 800cd10:	085b      	lsrs	r3, r3, #1
 800cd12:	441a      	add	r2, r3
 800cd14:	697b      	ldr	r3, [r7, #20]
 800cd16:	685b      	ldr	r3, [r3, #4]
 800cd18:	fbb2 f3f3 	udiv	r3, r2, r3
 800cd1c:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cd1e:	6a3b      	ldr	r3, [r7, #32]
 800cd20:	2b0f      	cmp	r3, #15
 800cd22:	d916      	bls.n	800cd52 <UART_SetConfig+0x36e>
 800cd24:	6a3b      	ldr	r3, [r7, #32]
 800cd26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cd2a:	d212      	bcs.n	800cd52 <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800cd2c:	6a3b      	ldr	r3, [r7, #32]
 800cd2e:	b29b      	uxth	r3, r3
 800cd30:	f023 030f 	bic.w	r3, r3, #15
 800cd34:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800cd36:	6a3b      	ldr	r3, [r7, #32]
 800cd38:	085b      	lsrs	r3, r3, #1
 800cd3a:	b29b      	uxth	r3, r3
 800cd3c:	f003 0307 	and.w	r3, r3, #7
 800cd40:	b29a      	uxth	r2, r3
 800cd42:	8bfb      	ldrh	r3, [r7, #30]
 800cd44:	4313      	orrs	r3, r2
 800cd46:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800cd48:	697b      	ldr	r3, [r7, #20]
 800cd4a:	681b      	ldr	r3, [r3, #0]
 800cd4c:	8bfa      	ldrh	r2, [r7, #30]
 800cd4e:	60da      	str	r2, [r3, #12]
 800cd50:	e056      	b.n	800ce00 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 800cd52:	2301      	movs	r3, #1
 800cd54:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800cd58:	e052      	b.n	800ce00 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800cd5a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800cd5e:	3b01      	subs	r3, #1
 800cd60:	2b07      	cmp	r3, #7
 800cd62:	d822      	bhi.n	800cdaa <UART_SetConfig+0x3c6>
 800cd64:	a201      	add	r2, pc, #4	; (adr r2, 800cd6c <UART_SetConfig+0x388>)
 800cd66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd6a:	bf00      	nop
 800cd6c:	0800cd8d 	.word	0x0800cd8d
 800cd70:	0800cd95 	.word	0x0800cd95
 800cd74:	0800cdab 	.word	0x0800cdab
 800cd78:	0800cd9b 	.word	0x0800cd9b
 800cd7c:	0800cdab 	.word	0x0800cdab
 800cd80:	0800cdab 	.word	0x0800cdab
 800cd84:	0800cdab 	.word	0x0800cdab
 800cd88:	0800cda3 	.word	0x0800cda3
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800cd8c:	f7fd f9f8 	bl	800a180 <HAL_RCC_GetPCLK2Freq>
 800cd90:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800cd92:	e010      	b.n	800cdb6 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800cd94:	4b26      	ldr	r3, [pc, #152]	; (800ce30 <UART_SetConfig+0x44c>)
 800cd96:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800cd98:	e00d      	b.n	800cdb6 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800cd9a:	f7fd f95b 	bl	800a054 <HAL_RCC_GetSysClockFreq>
 800cd9e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800cda0:	e009      	b.n	800cdb6 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cda2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cda6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800cda8:	e005      	b.n	800cdb6 <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 800cdaa:	2300      	movs	r3, #0
 800cdac:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800cdae:	2301      	movs	r3, #1
 800cdb0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800cdb4:	bf00      	nop
    }

    if (pclk != 0U)
 800cdb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	d021      	beq.n	800ce00 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cdbc:	697b      	ldr	r3, [r7, #20]
 800cdbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cdc0:	4a1a      	ldr	r2, [pc, #104]	; (800ce2c <UART_SetConfig+0x448>)
 800cdc2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cdc6:	461a      	mov	r2, r3
 800cdc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdca:	fbb3 f2f2 	udiv	r2, r3, r2
 800cdce:	697b      	ldr	r3, [r7, #20]
 800cdd0:	685b      	ldr	r3, [r3, #4]
 800cdd2:	085b      	lsrs	r3, r3, #1
 800cdd4:	441a      	add	r2, r3
 800cdd6:	697b      	ldr	r3, [r7, #20]
 800cdd8:	685b      	ldr	r3, [r3, #4]
 800cdda:	fbb2 f3f3 	udiv	r3, r2, r3
 800cdde:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cde0:	6a3b      	ldr	r3, [r7, #32]
 800cde2:	2b0f      	cmp	r3, #15
 800cde4:	d909      	bls.n	800cdfa <UART_SetConfig+0x416>
 800cde6:	6a3b      	ldr	r3, [r7, #32]
 800cde8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cdec:	d205      	bcs.n	800cdfa <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800cdee:	6a3b      	ldr	r3, [r7, #32]
 800cdf0:	b29a      	uxth	r2, r3
 800cdf2:	697b      	ldr	r3, [r7, #20]
 800cdf4:	681b      	ldr	r3, [r3, #0]
 800cdf6:	60da      	str	r2, [r3, #12]
 800cdf8:	e002      	b.n	800ce00 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 800cdfa:	2301      	movs	r3, #1
 800cdfc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800ce00:	697b      	ldr	r3, [r7, #20]
 800ce02:	2201      	movs	r2, #1
 800ce04:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800ce08:	697b      	ldr	r3, [r7, #20]
 800ce0a:	2201      	movs	r2, #1
 800ce0c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ce10:	697b      	ldr	r3, [r7, #20]
 800ce12:	2200      	movs	r2, #0
 800ce14:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800ce16:	697b      	ldr	r3, [r7, #20]
 800ce18:	2200      	movs	r2, #0
 800ce1a:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800ce1c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800ce20:	4618      	mov	r0, r3
 800ce22:	3730      	adds	r7, #48	; 0x30
 800ce24:	46bd      	mov	sp, r7
 800ce26:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ce2a:	bf00      	nop
 800ce2c:	08017f14 	.word	0x08017f14
 800ce30:	00f42400 	.word	0x00f42400

0800ce34 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ce34:	b480      	push	{r7}
 800ce36:	b083      	sub	sp, #12
 800ce38:	af00      	add	r7, sp, #0
 800ce3a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce40:	f003 0301 	and.w	r3, r3, #1
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	d00a      	beq.n	800ce5e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	681b      	ldr	r3, [r3, #0]
 800ce4c:	685b      	ldr	r3, [r3, #4]
 800ce4e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	681b      	ldr	r3, [r3, #0]
 800ce5a:	430a      	orrs	r2, r1
 800ce5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce62:	f003 0302 	and.w	r3, r3, #2
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	d00a      	beq.n	800ce80 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	681b      	ldr	r3, [r3, #0]
 800ce6e:	685b      	ldr	r3, [r3, #4]
 800ce70:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	681b      	ldr	r3, [r3, #0]
 800ce7c:	430a      	orrs	r2, r1
 800ce7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce84:	f003 0304 	and.w	r3, r3, #4
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	d00a      	beq.n	800cea2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	681b      	ldr	r3, [r3, #0]
 800ce90:	685b      	ldr	r3, [r3, #4]
 800ce92:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	681b      	ldr	r3, [r3, #0]
 800ce9e:	430a      	orrs	r2, r1
 800cea0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cea6:	f003 0308 	and.w	r3, r3, #8
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	d00a      	beq.n	800cec4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	681b      	ldr	r3, [r3, #0]
 800ceb2:	685b      	ldr	r3, [r3, #4]
 800ceb4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	681b      	ldr	r3, [r3, #0]
 800cec0:	430a      	orrs	r2, r1
 800cec2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cec8:	f003 0310 	and.w	r3, r3, #16
 800cecc:	2b00      	cmp	r3, #0
 800cece:	d00a      	beq.n	800cee6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	681b      	ldr	r3, [r3, #0]
 800ced4:	689b      	ldr	r3, [r3, #8]
 800ced6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	681b      	ldr	r3, [r3, #0]
 800cee2:	430a      	orrs	r2, r1
 800cee4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ceea:	f003 0320 	and.w	r3, r3, #32
 800ceee:	2b00      	cmp	r3, #0
 800cef0:	d00a      	beq.n	800cf08 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	681b      	ldr	r3, [r3, #0]
 800cef6:	689b      	ldr	r3, [r3, #8]
 800cef8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	681b      	ldr	r3, [r3, #0]
 800cf04:	430a      	orrs	r2, r1
 800cf06:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cf10:	2b00      	cmp	r3, #0
 800cf12:	d01a      	beq.n	800cf4a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	681b      	ldr	r3, [r3, #0]
 800cf18:	685b      	ldr	r3, [r3, #4]
 800cf1a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	681b      	ldr	r3, [r3, #0]
 800cf26:	430a      	orrs	r2, r1
 800cf28:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cf2e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cf32:	d10a      	bne.n	800cf4a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	681b      	ldr	r3, [r3, #0]
 800cf38:	685b      	ldr	r3, [r3, #4]
 800cf3a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	681b      	ldr	r3, [r3, #0]
 800cf46:	430a      	orrs	r2, r1
 800cf48:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cf52:	2b00      	cmp	r3, #0
 800cf54:	d00a      	beq.n	800cf6c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	681b      	ldr	r3, [r3, #0]
 800cf5a:	685b      	ldr	r3, [r3, #4]
 800cf5c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	681b      	ldr	r3, [r3, #0]
 800cf68:	430a      	orrs	r2, r1
 800cf6a:	605a      	str	r2, [r3, #4]
  }
}
 800cf6c:	bf00      	nop
 800cf6e:	370c      	adds	r7, #12
 800cf70:	46bd      	mov	sp, r7
 800cf72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf76:	4770      	bx	lr

0800cf78 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800cf78:	b580      	push	{r7, lr}
 800cf7a:	b086      	sub	sp, #24
 800cf7c:	af02      	add	r7, sp, #8
 800cf7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	2200      	movs	r2, #0
 800cf84:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800cf88:	f7f9 fb90 	bl	80066ac <HAL_GetTick>
 800cf8c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	681b      	ldr	r3, [r3, #0]
 800cf92:	681b      	ldr	r3, [r3, #0]
 800cf94:	f003 0308 	and.w	r3, r3, #8
 800cf98:	2b08      	cmp	r3, #8
 800cf9a:	d10e      	bne.n	800cfba <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cf9c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800cfa0:	9300      	str	r3, [sp, #0]
 800cfa2:	68fb      	ldr	r3, [r7, #12]
 800cfa4:	2200      	movs	r2, #0
 800cfa6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800cfaa:	6878      	ldr	r0, [r7, #4]
 800cfac:	f000 f832 	bl	800d014 <UART_WaitOnFlagUntilTimeout>
 800cfb0:	4603      	mov	r3, r0
 800cfb2:	2b00      	cmp	r3, #0
 800cfb4:	d001      	beq.n	800cfba <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cfb6:	2303      	movs	r3, #3
 800cfb8:	e028      	b.n	800d00c <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	681b      	ldr	r3, [r3, #0]
 800cfbe:	681b      	ldr	r3, [r3, #0]
 800cfc0:	f003 0304 	and.w	r3, r3, #4
 800cfc4:	2b04      	cmp	r3, #4
 800cfc6:	d10e      	bne.n	800cfe6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cfc8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800cfcc:	9300      	str	r3, [sp, #0]
 800cfce:	68fb      	ldr	r3, [r7, #12]
 800cfd0:	2200      	movs	r2, #0
 800cfd2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800cfd6:	6878      	ldr	r0, [r7, #4]
 800cfd8:	f000 f81c 	bl	800d014 <UART_WaitOnFlagUntilTimeout>
 800cfdc:	4603      	mov	r3, r0
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	d001      	beq.n	800cfe6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cfe2:	2303      	movs	r3, #3
 800cfe4:	e012      	b.n	800d00c <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	2220      	movs	r2, #32
 800cfea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	2220      	movs	r2, #32
 800cff2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	2200      	movs	r2, #0
 800cffa:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	2200      	movs	r2, #0
 800d000:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	2200      	movs	r2, #0
 800d006:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800d00a:	2300      	movs	r3, #0
}
 800d00c:	4618      	mov	r0, r3
 800d00e:	3710      	adds	r7, #16
 800d010:	46bd      	mov	sp, r7
 800d012:	bd80      	pop	{r7, pc}

0800d014 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d014:	b580      	push	{r7, lr}
 800d016:	b09c      	sub	sp, #112	; 0x70
 800d018:	af00      	add	r7, sp, #0
 800d01a:	60f8      	str	r0, [r7, #12]
 800d01c:	60b9      	str	r1, [r7, #8]
 800d01e:	603b      	str	r3, [r7, #0]
 800d020:	4613      	mov	r3, r2
 800d022:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d024:	e0a9      	b.n	800d17a <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d026:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d028:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d02c:	f000 80a5 	beq.w	800d17a <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d030:	f7f9 fb3c 	bl	80066ac <HAL_GetTick>
 800d034:	4602      	mov	r2, r0
 800d036:	683b      	ldr	r3, [r7, #0]
 800d038:	1ad3      	subs	r3, r2, r3
 800d03a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800d03c:	429a      	cmp	r2, r3
 800d03e:	d302      	bcc.n	800d046 <UART_WaitOnFlagUntilTimeout+0x32>
 800d040:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d042:	2b00      	cmp	r3, #0
 800d044:	d140      	bne.n	800d0c8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800d046:	68fb      	ldr	r3, [r7, #12]
 800d048:	681b      	ldr	r3, [r3, #0]
 800d04a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d04c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d04e:	e853 3f00 	ldrex	r3, [r3]
 800d052:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800d054:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d056:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800d05a:	667b      	str	r3, [r7, #100]	; 0x64
 800d05c:	68fb      	ldr	r3, [r7, #12]
 800d05e:	681b      	ldr	r3, [r3, #0]
 800d060:	461a      	mov	r2, r3
 800d062:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d064:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d066:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d068:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d06a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d06c:	e841 2300 	strex	r3, r2, [r1]
 800d070:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800d072:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d074:	2b00      	cmp	r3, #0
 800d076:	d1e6      	bne.n	800d046 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d078:	68fb      	ldr	r3, [r7, #12]
 800d07a:	681b      	ldr	r3, [r3, #0]
 800d07c:	3308      	adds	r3, #8
 800d07e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d080:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d082:	e853 3f00 	ldrex	r3, [r3]
 800d086:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d088:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d08a:	f023 0301 	bic.w	r3, r3, #1
 800d08e:	663b      	str	r3, [r7, #96]	; 0x60
 800d090:	68fb      	ldr	r3, [r7, #12]
 800d092:	681b      	ldr	r3, [r3, #0]
 800d094:	3308      	adds	r3, #8
 800d096:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d098:	64ba      	str	r2, [r7, #72]	; 0x48
 800d09a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d09c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d09e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d0a0:	e841 2300 	strex	r3, r2, [r1]
 800d0a4:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800d0a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d0a8:	2b00      	cmp	r3, #0
 800d0aa:	d1e5      	bne.n	800d078 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800d0ac:	68fb      	ldr	r3, [r7, #12]
 800d0ae:	2220      	movs	r2, #32
 800d0b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->RxState = HAL_UART_STATE_READY;
 800d0b4:	68fb      	ldr	r3, [r7, #12]
 800d0b6:	2220      	movs	r2, #32
 800d0b8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 800d0bc:	68fb      	ldr	r3, [r7, #12]
 800d0be:	2200      	movs	r2, #0
 800d0c0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

        return HAL_TIMEOUT;
 800d0c4:	2303      	movs	r3, #3
 800d0c6:	e069      	b.n	800d19c <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800d0c8:	68fb      	ldr	r3, [r7, #12]
 800d0ca:	681b      	ldr	r3, [r3, #0]
 800d0cc:	681b      	ldr	r3, [r3, #0]
 800d0ce:	f003 0304 	and.w	r3, r3, #4
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	d051      	beq.n	800d17a <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d0d6:	68fb      	ldr	r3, [r7, #12]
 800d0d8:	681b      	ldr	r3, [r3, #0]
 800d0da:	69db      	ldr	r3, [r3, #28]
 800d0dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d0e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d0e4:	d149      	bne.n	800d17a <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d0e6:	68fb      	ldr	r3, [r7, #12]
 800d0e8:	681b      	ldr	r3, [r3, #0]
 800d0ea:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d0ee:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800d0f0:	68fb      	ldr	r3, [r7, #12]
 800d0f2:	681b      	ldr	r3, [r3, #0]
 800d0f4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d0f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0f8:	e853 3f00 	ldrex	r3, [r3]
 800d0fc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d0fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d100:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800d104:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d106:	68fb      	ldr	r3, [r7, #12]
 800d108:	681b      	ldr	r3, [r3, #0]
 800d10a:	461a      	mov	r2, r3
 800d10c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d10e:	637b      	str	r3, [r7, #52]	; 0x34
 800d110:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d112:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d114:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d116:	e841 2300 	strex	r3, r2, [r1]
 800d11a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800d11c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d11e:	2b00      	cmp	r3, #0
 800d120:	d1e6      	bne.n	800d0f0 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d122:	68fb      	ldr	r3, [r7, #12]
 800d124:	681b      	ldr	r3, [r3, #0]
 800d126:	3308      	adds	r3, #8
 800d128:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d12a:	697b      	ldr	r3, [r7, #20]
 800d12c:	e853 3f00 	ldrex	r3, [r3]
 800d130:	613b      	str	r3, [r7, #16]
   return(result);
 800d132:	693b      	ldr	r3, [r7, #16]
 800d134:	f023 0301 	bic.w	r3, r3, #1
 800d138:	66bb      	str	r3, [r7, #104]	; 0x68
 800d13a:	68fb      	ldr	r3, [r7, #12]
 800d13c:	681b      	ldr	r3, [r3, #0]
 800d13e:	3308      	adds	r3, #8
 800d140:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d142:	623a      	str	r2, [r7, #32]
 800d144:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d146:	69f9      	ldr	r1, [r7, #28]
 800d148:	6a3a      	ldr	r2, [r7, #32]
 800d14a:	e841 2300 	strex	r3, r2, [r1]
 800d14e:	61bb      	str	r3, [r7, #24]
   return(result);
 800d150:	69bb      	ldr	r3, [r7, #24]
 800d152:	2b00      	cmp	r3, #0
 800d154:	d1e5      	bne.n	800d122 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800d156:	68fb      	ldr	r3, [r7, #12]
 800d158:	2220      	movs	r2, #32
 800d15a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->RxState = HAL_UART_STATE_READY;
 800d15e:	68fb      	ldr	r3, [r7, #12]
 800d160:	2220      	movs	r2, #32
 800d162:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d166:	68fb      	ldr	r3, [r7, #12]
 800d168:	2220      	movs	r2, #32
 800d16a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d16e:	68fb      	ldr	r3, [r7, #12]
 800d170:	2200      	movs	r2, #0
 800d172:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800d176:	2303      	movs	r3, #3
 800d178:	e010      	b.n	800d19c <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d17a:	68fb      	ldr	r3, [r7, #12]
 800d17c:	681b      	ldr	r3, [r3, #0]
 800d17e:	69da      	ldr	r2, [r3, #28]
 800d180:	68bb      	ldr	r3, [r7, #8]
 800d182:	4013      	ands	r3, r2
 800d184:	68ba      	ldr	r2, [r7, #8]
 800d186:	429a      	cmp	r2, r3
 800d188:	bf0c      	ite	eq
 800d18a:	2301      	moveq	r3, #1
 800d18c:	2300      	movne	r3, #0
 800d18e:	b2db      	uxtb	r3, r3
 800d190:	461a      	mov	r2, r3
 800d192:	79fb      	ldrb	r3, [r7, #7]
 800d194:	429a      	cmp	r2, r3
 800d196:	f43f af46 	beq.w	800d026 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d19a:	2300      	movs	r3, #0
}
 800d19c:	4618      	mov	r0, r3
 800d19e:	3770      	adds	r7, #112	; 0x70
 800d1a0:	46bd      	mov	sp, r7
 800d1a2:	bd80      	pop	{r7, pc}

0800d1a4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800d1a4:	b480      	push	{r7}
 800d1a6:	b08f      	sub	sp, #60	; 0x3c
 800d1a8:	af00      	add	r7, sp, #0
 800d1aa:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	681b      	ldr	r3, [r3, #0]
 800d1b0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d1b2:	6a3b      	ldr	r3, [r7, #32]
 800d1b4:	e853 3f00 	ldrex	r3, [r3]
 800d1b8:	61fb      	str	r3, [r7, #28]
   return(result);
 800d1ba:	69fb      	ldr	r3, [r7, #28]
 800d1bc:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800d1c0:	637b      	str	r3, [r7, #52]	; 0x34
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	681b      	ldr	r3, [r3, #0]
 800d1c6:	461a      	mov	r2, r3
 800d1c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d1ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d1cc:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d1ce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d1d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d1d2:	e841 2300 	strex	r3, r2, [r1]
 800d1d6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d1d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	d1e6      	bne.n	800d1ac <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	681b      	ldr	r3, [r3, #0]
 800d1e2:	3308      	adds	r3, #8
 800d1e4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d1e6:	68fb      	ldr	r3, [r7, #12]
 800d1e8:	e853 3f00 	ldrex	r3, [r3]
 800d1ec:	60bb      	str	r3, [r7, #8]
   return(result);
 800d1ee:	68bb      	ldr	r3, [r7, #8]
 800d1f0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800d1f4:	633b      	str	r3, [r7, #48]	; 0x30
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	681b      	ldr	r3, [r3, #0]
 800d1fa:	3308      	adds	r3, #8
 800d1fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d1fe:	61ba      	str	r2, [r7, #24]
 800d200:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d202:	6979      	ldr	r1, [r7, #20]
 800d204:	69ba      	ldr	r2, [r7, #24]
 800d206:	e841 2300 	strex	r3, r2, [r1]
 800d20a:	613b      	str	r3, [r7, #16]
   return(result);
 800d20c:	693b      	ldr	r3, [r7, #16]
 800d20e:	2b00      	cmp	r3, #0
 800d210:	d1e5      	bne.n	800d1de <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	2220      	movs	r2, #32
 800d216:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 800d21a:	bf00      	nop
 800d21c:	373c      	adds	r7, #60	; 0x3c
 800d21e:	46bd      	mov	sp, r7
 800d220:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d224:	4770      	bx	lr

0800d226 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d226:	b480      	push	{r7}
 800d228:	b095      	sub	sp, #84	; 0x54
 800d22a:	af00      	add	r7, sp, #0
 800d22c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	681b      	ldr	r3, [r3, #0]
 800d232:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d234:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d236:	e853 3f00 	ldrex	r3, [r3]
 800d23a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800d23c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d23e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d242:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	681b      	ldr	r3, [r3, #0]
 800d248:	461a      	mov	r2, r3
 800d24a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d24c:	643b      	str	r3, [r7, #64]	; 0x40
 800d24e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d250:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d252:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d254:	e841 2300 	strex	r3, r2, [r1]
 800d258:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d25a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	d1e6      	bne.n	800d22e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	681b      	ldr	r3, [r3, #0]
 800d264:	3308      	adds	r3, #8
 800d266:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d268:	6a3b      	ldr	r3, [r7, #32]
 800d26a:	e853 3f00 	ldrex	r3, [r3]
 800d26e:	61fb      	str	r3, [r7, #28]
   return(result);
 800d270:	69fb      	ldr	r3, [r7, #28]
 800d272:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d276:	f023 0301 	bic.w	r3, r3, #1
 800d27a:	64bb      	str	r3, [r7, #72]	; 0x48
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	681b      	ldr	r3, [r3, #0]
 800d280:	3308      	adds	r3, #8
 800d282:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d284:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d286:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d288:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d28a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d28c:	e841 2300 	strex	r3, r2, [r1]
 800d290:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d294:	2b00      	cmp	r3, #0
 800d296:	d1e3      	bne.n	800d260 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d29c:	2b01      	cmp	r3, #1
 800d29e:	d118      	bne.n	800d2d2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	681b      	ldr	r3, [r3, #0]
 800d2a4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d2a6:	68fb      	ldr	r3, [r7, #12]
 800d2a8:	e853 3f00 	ldrex	r3, [r3]
 800d2ac:	60bb      	str	r3, [r7, #8]
   return(result);
 800d2ae:	68bb      	ldr	r3, [r7, #8]
 800d2b0:	f023 0310 	bic.w	r3, r3, #16
 800d2b4:	647b      	str	r3, [r7, #68]	; 0x44
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	681b      	ldr	r3, [r3, #0]
 800d2ba:	461a      	mov	r2, r3
 800d2bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d2be:	61bb      	str	r3, [r7, #24]
 800d2c0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d2c2:	6979      	ldr	r1, [r7, #20]
 800d2c4:	69ba      	ldr	r2, [r7, #24]
 800d2c6:	e841 2300 	strex	r3, r2, [r1]
 800d2ca:	613b      	str	r3, [r7, #16]
   return(result);
 800d2cc:	693b      	ldr	r3, [r7, #16]
 800d2ce:	2b00      	cmp	r3, #0
 800d2d0:	d1e6      	bne.n	800d2a0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	2220      	movs	r2, #32
 800d2d6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	2200      	movs	r2, #0
 800d2de:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	2200      	movs	r2, #0
 800d2e4:	675a      	str	r2, [r3, #116]	; 0x74
}
 800d2e6:	bf00      	nop
 800d2e8:	3754      	adds	r7, #84	; 0x54
 800d2ea:	46bd      	mov	sp, r7
 800d2ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2f0:	4770      	bx	lr

0800d2f2 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800d2f2:	b580      	push	{r7, lr}
 800d2f4:	b090      	sub	sp, #64	; 0x40
 800d2f6:	af00      	add	r7, sp, #0
 800d2f8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d2fe:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	681b      	ldr	r3, [r3, #0]
 800d304:	681b      	ldr	r3, [r3, #0]
 800d306:	f003 0320 	and.w	r3, r3, #32
 800d30a:	2b00      	cmp	r3, #0
 800d30c:	d137      	bne.n	800d37e <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800d30e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d310:	2200      	movs	r2, #0
 800d312:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800d316:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d318:	681b      	ldr	r3, [r3, #0]
 800d31a:	3308      	adds	r3, #8
 800d31c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d31e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d320:	e853 3f00 	ldrex	r3, [r3]
 800d324:	623b      	str	r3, [r7, #32]
   return(result);
 800d326:	6a3b      	ldr	r3, [r7, #32]
 800d328:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d32c:	63bb      	str	r3, [r7, #56]	; 0x38
 800d32e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d330:	681b      	ldr	r3, [r3, #0]
 800d332:	3308      	adds	r3, #8
 800d334:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d336:	633a      	str	r2, [r7, #48]	; 0x30
 800d338:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d33a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d33c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d33e:	e841 2300 	strex	r3, r2, [r1]
 800d342:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d346:	2b00      	cmp	r3, #0
 800d348:	d1e5      	bne.n	800d316 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d34a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d34c:	681b      	ldr	r3, [r3, #0]
 800d34e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d350:	693b      	ldr	r3, [r7, #16]
 800d352:	e853 3f00 	ldrex	r3, [r3]
 800d356:	60fb      	str	r3, [r7, #12]
   return(result);
 800d358:	68fb      	ldr	r3, [r7, #12]
 800d35a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d35e:	637b      	str	r3, [r7, #52]	; 0x34
 800d360:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d362:	681b      	ldr	r3, [r3, #0]
 800d364:	461a      	mov	r2, r3
 800d366:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d368:	61fb      	str	r3, [r7, #28]
 800d36a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d36c:	69b9      	ldr	r1, [r7, #24]
 800d36e:	69fa      	ldr	r2, [r7, #28]
 800d370:	e841 2300 	strex	r3, r2, [r1]
 800d374:	617b      	str	r3, [r7, #20]
   return(result);
 800d376:	697b      	ldr	r3, [r7, #20]
 800d378:	2b00      	cmp	r3, #0
 800d37a:	d1e6      	bne.n	800d34a <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d37c:	e002      	b.n	800d384 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800d37e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800d380:	f7f7 fda2 	bl	8004ec8 <HAL_UART_TxCpltCallback>
}
 800d384:	bf00      	nop
 800d386:	3740      	adds	r7, #64	; 0x40
 800d388:	46bd      	mov	sp, r7
 800d38a:	bd80      	pop	{r7, pc}

0800d38c <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800d38c:	b580      	push	{r7, lr}
 800d38e:	b084      	sub	sp, #16
 800d390:	af00      	add	r7, sp, #0
 800d392:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d398:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800d39a:	68f8      	ldr	r0, [r7, #12]
 800d39c:	f7ff fb02 	bl	800c9a4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d3a0:	bf00      	nop
 800d3a2:	3710      	adds	r7, #16
 800d3a4:	46bd      	mov	sp, r7
 800d3a6:	bd80      	pop	{r7, pc}

0800d3a8 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800d3a8:	b580      	push	{r7, lr}
 800d3aa:	b086      	sub	sp, #24
 800d3ac:	af00      	add	r7, sp, #0
 800d3ae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d3b4:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800d3b6:	697b      	ldr	r3, [r7, #20]
 800d3b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d3bc:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800d3be:	697b      	ldr	r3, [r7, #20]
 800d3c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d3c4:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800d3c6:	697b      	ldr	r3, [r7, #20]
 800d3c8:	681b      	ldr	r3, [r3, #0]
 800d3ca:	689b      	ldr	r3, [r3, #8]
 800d3cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d3d0:	2b80      	cmp	r3, #128	; 0x80
 800d3d2:	d109      	bne.n	800d3e8 <UART_DMAError+0x40>
 800d3d4:	693b      	ldr	r3, [r7, #16]
 800d3d6:	2b21      	cmp	r3, #33	; 0x21
 800d3d8:	d106      	bne.n	800d3e8 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800d3da:	697b      	ldr	r3, [r7, #20]
 800d3dc:	2200      	movs	r2, #0
 800d3de:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800d3e2:	6978      	ldr	r0, [r7, #20]
 800d3e4:	f7ff fede 	bl	800d1a4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800d3e8:	697b      	ldr	r3, [r7, #20]
 800d3ea:	681b      	ldr	r3, [r3, #0]
 800d3ec:	689b      	ldr	r3, [r3, #8]
 800d3ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d3f2:	2b40      	cmp	r3, #64	; 0x40
 800d3f4:	d109      	bne.n	800d40a <UART_DMAError+0x62>
 800d3f6:	68fb      	ldr	r3, [r7, #12]
 800d3f8:	2b22      	cmp	r3, #34	; 0x22
 800d3fa:	d106      	bne.n	800d40a <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800d3fc:	697b      	ldr	r3, [r7, #20]
 800d3fe:	2200      	movs	r2, #0
 800d400:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800d404:	6978      	ldr	r0, [r7, #20]
 800d406:	f7ff ff0e 	bl	800d226 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800d40a:	697b      	ldr	r3, [r7, #20]
 800d40c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d410:	f043 0210 	orr.w	r2, r3, #16
 800d414:	697b      	ldr	r3, [r7, #20]
 800d416:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d41a:	6978      	ldr	r0, [r7, #20]
 800d41c:	f7ff facc 	bl	800c9b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d420:	bf00      	nop
 800d422:	3718      	adds	r7, #24
 800d424:	46bd      	mov	sp, r7
 800d426:	bd80      	pop	{r7, pc}

0800d428 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d428:	b580      	push	{r7, lr}
 800d42a:	b084      	sub	sp, #16
 800d42c:	af00      	add	r7, sp, #0
 800d42e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d434:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800d436:	68fb      	ldr	r3, [r7, #12]
 800d438:	2200      	movs	r2, #0
 800d43a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800d43e:	68fb      	ldr	r3, [r7, #12]
 800d440:	2200      	movs	r2, #0
 800d442:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d446:	68f8      	ldr	r0, [r7, #12]
 800d448:	f7ff fab6 	bl	800c9b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d44c:	bf00      	nop
 800d44e:	3710      	adds	r7, #16
 800d450:	46bd      	mov	sp, r7
 800d452:	bd80      	pop	{r7, pc}

0800d454 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800d454:	b580      	push	{r7, lr}
 800d456:	b088      	sub	sp, #32
 800d458:	af00      	add	r7, sp, #0
 800d45a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	681b      	ldr	r3, [r3, #0]
 800d460:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d462:	68fb      	ldr	r3, [r7, #12]
 800d464:	e853 3f00 	ldrex	r3, [r3]
 800d468:	60bb      	str	r3, [r7, #8]
   return(result);
 800d46a:	68bb      	ldr	r3, [r7, #8]
 800d46c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d470:	61fb      	str	r3, [r7, #28]
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	681b      	ldr	r3, [r3, #0]
 800d476:	461a      	mov	r2, r3
 800d478:	69fb      	ldr	r3, [r7, #28]
 800d47a:	61bb      	str	r3, [r7, #24]
 800d47c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d47e:	6979      	ldr	r1, [r7, #20]
 800d480:	69ba      	ldr	r2, [r7, #24]
 800d482:	e841 2300 	strex	r3, r2, [r1]
 800d486:	613b      	str	r3, [r7, #16]
   return(result);
 800d488:	693b      	ldr	r3, [r7, #16]
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	d1e6      	bne.n	800d45c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	2220      	movs	r2, #32
 800d492:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	2200      	movs	r2, #0
 800d49a:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800d49c:	6878      	ldr	r0, [r7, #4]
 800d49e:	f7f7 fd13 	bl	8004ec8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d4a2:	bf00      	nop
 800d4a4:	3720      	adds	r7, #32
 800d4a6:	46bd      	mov	sp, r7
 800d4a8:	bd80      	pop	{r7, pc}

0800d4aa <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800d4aa:	b480      	push	{r7}
 800d4ac:	b083      	sub	sp, #12
 800d4ae:	af00      	add	r7, sp, #0
 800d4b0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800d4b2:	bf00      	nop
 800d4b4:	370c      	adds	r7, #12
 800d4b6:	46bd      	mov	sp, r7
 800d4b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4bc:	4770      	bx	lr

0800d4be <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800d4be:	b480      	push	{r7}
 800d4c0:	b083      	sub	sp, #12
 800d4c2:	af00      	add	r7, sp, #0
 800d4c4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800d4c6:	bf00      	nop
 800d4c8:	370c      	adds	r7, #12
 800d4ca:	46bd      	mov	sp, r7
 800d4cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4d0:	4770      	bx	lr

0800d4d2 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800d4d2:	b480      	push	{r7}
 800d4d4:	b083      	sub	sp, #12
 800d4d6:	af00      	add	r7, sp, #0
 800d4d8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800d4da:	bf00      	nop
 800d4dc:	370c      	adds	r7, #12
 800d4de:	46bd      	mov	sp, r7
 800d4e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4e4:	4770      	bx	lr

0800d4e6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800d4e6:	b480      	push	{r7}
 800d4e8:	b085      	sub	sp, #20
 800d4ea:	af00      	add	r7, sp, #0
 800d4ec:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800d4f4:	2b01      	cmp	r3, #1
 800d4f6:	d101      	bne.n	800d4fc <HAL_UARTEx_DisableFifoMode+0x16>
 800d4f8:	2302      	movs	r3, #2
 800d4fa:	e027      	b.n	800d54c <HAL_UARTEx_DisableFifoMode+0x66>
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	2201      	movs	r2, #1
 800d500:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	2224      	movs	r2, #36	; 0x24
 800d508:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	681b      	ldr	r3, [r3, #0]
 800d510:	681b      	ldr	r3, [r3, #0]
 800d512:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	681b      	ldr	r3, [r3, #0]
 800d518:	681a      	ldr	r2, [r3, #0]
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	681b      	ldr	r3, [r3, #0]
 800d51e:	f022 0201 	bic.w	r2, r2, #1
 800d522:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800d524:	68fb      	ldr	r3, [r7, #12]
 800d526:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800d52a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	2200      	movs	r2, #0
 800d530:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	681b      	ldr	r3, [r3, #0]
 800d536:	68fa      	ldr	r2, [r7, #12]
 800d538:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	2220      	movs	r2, #32
 800d53e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	2200      	movs	r2, #0
 800d546:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800d54a:	2300      	movs	r3, #0
}
 800d54c:	4618      	mov	r0, r3
 800d54e:	3714      	adds	r7, #20
 800d550:	46bd      	mov	sp, r7
 800d552:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d556:	4770      	bx	lr

0800d558 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d558:	b580      	push	{r7, lr}
 800d55a:	b084      	sub	sp, #16
 800d55c:	af00      	add	r7, sp, #0
 800d55e:	6078      	str	r0, [r7, #4]
 800d560:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800d568:	2b01      	cmp	r3, #1
 800d56a:	d101      	bne.n	800d570 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800d56c:	2302      	movs	r3, #2
 800d56e:	e02d      	b.n	800d5cc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	2201      	movs	r2, #1
 800d574:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	2224      	movs	r2, #36	; 0x24
 800d57c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	681b      	ldr	r3, [r3, #0]
 800d584:	681b      	ldr	r3, [r3, #0]
 800d586:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	681b      	ldr	r3, [r3, #0]
 800d58c:	681a      	ldr	r2, [r3, #0]
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	681b      	ldr	r3, [r3, #0]
 800d592:	f022 0201 	bic.w	r2, r2, #1
 800d596:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	681b      	ldr	r3, [r3, #0]
 800d59c:	689b      	ldr	r3, [r3, #8]
 800d59e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	681b      	ldr	r3, [r3, #0]
 800d5a6:	683a      	ldr	r2, [r7, #0]
 800d5a8:	430a      	orrs	r2, r1
 800d5aa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d5ac:	6878      	ldr	r0, [r7, #4]
 800d5ae:	f000 f84f 	bl	800d650 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	681b      	ldr	r3, [r3, #0]
 800d5b6:	68fa      	ldr	r2, [r7, #12]
 800d5b8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	2220      	movs	r2, #32
 800d5be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	2200      	movs	r2, #0
 800d5c6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800d5ca:	2300      	movs	r3, #0
}
 800d5cc:	4618      	mov	r0, r3
 800d5ce:	3710      	adds	r7, #16
 800d5d0:	46bd      	mov	sp, r7
 800d5d2:	bd80      	pop	{r7, pc}

0800d5d4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d5d4:	b580      	push	{r7, lr}
 800d5d6:	b084      	sub	sp, #16
 800d5d8:	af00      	add	r7, sp, #0
 800d5da:	6078      	str	r0, [r7, #4]
 800d5dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800d5e4:	2b01      	cmp	r3, #1
 800d5e6:	d101      	bne.n	800d5ec <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800d5e8:	2302      	movs	r3, #2
 800d5ea:	e02d      	b.n	800d648 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	2201      	movs	r2, #1
 800d5f0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	2224      	movs	r2, #36	; 0x24
 800d5f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	681b      	ldr	r3, [r3, #0]
 800d600:	681b      	ldr	r3, [r3, #0]
 800d602:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	681b      	ldr	r3, [r3, #0]
 800d608:	681a      	ldr	r2, [r3, #0]
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	681b      	ldr	r3, [r3, #0]
 800d60e:	f022 0201 	bic.w	r2, r2, #1
 800d612:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	681b      	ldr	r3, [r3, #0]
 800d618:	689b      	ldr	r3, [r3, #8]
 800d61a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	681b      	ldr	r3, [r3, #0]
 800d622:	683a      	ldr	r2, [r7, #0]
 800d624:	430a      	orrs	r2, r1
 800d626:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d628:	6878      	ldr	r0, [r7, #4]
 800d62a:	f000 f811 	bl	800d650 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	681b      	ldr	r3, [r3, #0]
 800d632:	68fa      	ldr	r2, [r7, #12]
 800d634:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	2220      	movs	r2, #32
 800d63a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	2200      	movs	r2, #0
 800d642:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800d646:	2300      	movs	r3, #0
}
 800d648:	4618      	mov	r0, r3
 800d64a:	3710      	adds	r7, #16
 800d64c:	46bd      	mov	sp, r7
 800d64e:	bd80      	pop	{r7, pc}

0800d650 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800d650:	b480      	push	{r7}
 800d652:	b085      	sub	sp, #20
 800d654:	af00      	add	r7, sp, #0
 800d656:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d65c:	2b00      	cmp	r3, #0
 800d65e:	d108      	bne.n	800d672 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	2201      	movs	r2, #1
 800d664:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	2201      	movs	r2, #1
 800d66c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800d670:	e031      	b.n	800d6d6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800d672:	2308      	movs	r3, #8
 800d674:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800d676:	2308      	movs	r3, #8
 800d678:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	681b      	ldr	r3, [r3, #0]
 800d67e:	689b      	ldr	r3, [r3, #8]
 800d680:	0e5b      	lsrs	r3, r3, #25
 800d682:	b2db      	uxtb	r3, r3
 800d684:	f003 0307 	and.w	r3, r3, #7
 800d688:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	681b      	ldr	r3, [r3, #0]
 800d68e:	689b      	ldr	r3, [r3, #8]
 800d690:	0f5b      	lsrs	r3, r3, #29
 800d692:	b2db      	uxtb	r3, r3
 800d694:	f003 0307 	and.w	r3, r3, #7
 800d698:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d69a:	7bbb      	ldrb	r3, [r7, #14]
 800d69c:	7b3a      	ldrb	r2, [r7, #12]
 800d69e:	4911      	ldr	r1, [pc, #68]	; (800d6e4 <UARTEx_SetNbDataToProcess+0x94>)
 800d6a0:	5c8a      	ldrb	r2, [r1, r2]
 800d6a2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800d6a6:	7b3a      	ldrb	r2, [r7, #12]
 800d6a8:	490f      	ldr	r1, [pc, #60]	; (800d6e8 <UARTEx_SetNbDataToProcess+0x98>)
 800d6aa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d6ac:	fb93 f3f2 	sdiv	r3, r3, r2
 800d6b0:	b29a      	uxth	r2, r3
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d6b8:	7bfb      	ldrb	r3, [r7, #15]
 800d6ba:	7b7a      	ldrb	r2, [r7, #13]
 800d6bc:	4909      	ldr	r1, [pc, #36]	; (800d6e4 <UARTEx_SetNbDataToProcess+0x94>)
 800d6be:	5c8a      	ldrb	r2, [r1, r2]
 800d6c0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800d6c4:	7b7a      	ldrb	r2, [r7, #13]
 800d6c6:	4908      	ldr	r1, [pc, #32]	; (800d6e8 <UARTEx_SetNbDataToProcess+0x98>)
 800d6c8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d6ca:	fb93 f3f2 	sdiv	r3, r3, r2
 800d6ce:	b29a      	uxth	r2, r3
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800d6d6:	bf00      	nop
 800d6d8:	3714      	adds	r7, #20
 800d6da:	46bd      	mov	sp, r7
 800d6dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6e0:	4770      	bx	lr
 800d6e2:	bf00      	nop
 800d6e4:	08017f2c 	.word	0x08017f2c
 800d6e8:	08017f34 	.word	0x08017f34

0800d6ec <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800d6ec:	b480      	push	{r7}
 800d6ee:	b085      	sub	sp, #20
 800d6f0:	af00      	add	r7, sp, #0
 800d6f2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800d6f4:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800d6f8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800d700:	b29a      	uxth	r2, r3
 800d702:	68fb      	ldr	r3, [r7, #12]
 800d704:	b29b      	uxth	r3, r3
 800d706:	43db      	mvns	r3, r3
 800d708:	b29b      	uxth	r3, r3
 800d70a:	4013      	ands	r3, r2
 800d70c:	b29a      	uxth	r2, r3
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800d714:	2300      	movs	r3, #0
}
 800d716:	4618      	mov	r0, r3
 800d718:	3714      	adds	r7, #20
 800d71a:	46bd      	mov	sp, r7
 800d71c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d720:	4770      	bx	lr

0800d722 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800d722:	b084      	sub	sp, #16
 800d724:	b480      	push	{r7}
 800d726:	b083      	sub	sp, #12
 800d728:	af00      	add	r7, sp, #0
 800d72a:	6078      	str	r0, [r7, #4]
 800d72c:	f107 0014 	add.w	r0, r7, #20
 800d730:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	2201      	movs	r2, #1
 800d738:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	2200      	movs	r2, #0
 800d740:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	2200      	movs	r2, #0
 800d748:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	2200      	movs	r2, #0
 800d750:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800d754:	2300      	movs	r3, #0
}
 800d756:	4618      	mov	r0, r3
 800d758:	370c      	adds	r7, #12
 800d75a:	46bd      	mov	sp, r7
 800d75c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d760:	b004      	add	sp, #16
 800d762:	4770      	bx	lr

0800d764 <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 800d764:	b580      	push	{r7, lr}
 800d766:	b088      	sub	sp, #32
 800d768:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800d76a:	2300      	movs	r3, #0
 800d76c:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d76e:	f107 0308 	add.w	r3, r7, #8
 800d772:	2218      	movs	r2, #24
 800d774:	2100      	movs	r1, #0
 800d776:	4618      	mov	r0, r3
 800d778:	f001 f8d8 	bl	800e92c <Osal_MemSet>
  rq.ogf = 0x3f;
 800d77c:	233f      	movs	r3, #63	; 0x3f
 800d77e:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 800d780:	2381      	movs	r3, #129	; 0x81
 800d782:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800d784:	1dfb      	adds	r3, r7, #7
 800d786:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800d788:	2301      	movs	r3, #1
 800d78a:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d78c:	f107 0308 	add.w	r3, r7, #8
 800d790:	2100      	movs	r1, #0
 800d792:	4618      	mov	r0, r3
 800d794:	f001 fb54 	bl	800ee40 <hci_send_req>
 800d798:	4603      	mov	r3, r0
 800d79a:	2b00      	cmp	r3, #0
 800d79c:	da01      	bge.n	800d7a2 <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 800d79e:	23ff      	movs	r3, #255	; 0xff
 800d7a0:	e000      	b.n	800d7a4 <aci_gap_set_non_discoverable+0x40>
  return status;
 800d7a2:	79fb      	ldrb	r3, [r7, #7]
}
 800d7a4:	4618      	mov	r0, r3
 800d7a6:	3720      	adds	r7, #32
 800d7a8:	46bd      	mov	sp, r7
 800d7aa:	bd80      	pop	{r7, pc}

0800d7ac <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Slave_Conn_Interval_Min,
                                     uint16_t Slave_Conn_Interval_Max )
{
 800d7ac:	b5b0      	push	{r4, r5, r7, lr}
 800d7ae:	b0ce      	sub	sp, #312	; 0x138
 800d7b0:	af00      	add	r7, sp, #0
 800d7b2:	4605      	mov	r5, r0
 800d7b4:	460c      	mov	r4, r1
 800d7b6:	4610      	mov	r0, r2
 800d7b8:	4619      	mov	r1, r3
 800d7ba:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800d7be:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 800d7c2:	462a      	mov	r2, r5
 800d7c4:	701a      	strb	r2, [r3, #0]
 800d7c6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800d7ca:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800d7ce:	4622      	mov	r2, r4
 800d7d0:	801a      	strh	r2, [r3, #0]
 800d7d2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800d7d6:	f5a3 739b 	sub.w	r3, r3, #310	; 0x136
 800d7da:	4602      	mov	r2, r0
 800d7dc:	801a      	strh	r2, [r3, #0]
 800d7de:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800d7e2:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 800d7e6:	460a      	mov	r2, r1
 800d7e8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 800d7ea:	f107 0310 	add.w	r3, r7, #16
 800d7ee:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 800d7f2:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 800d7f6:	3308      	adds	r3, #8
 800d7f8:	f107 0210 	add.w	r2, r7, #16
 800d7fc:	4413      	add	r3, r2
 800d7fe:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 800d802:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 800d806:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 800d80a:	4413      	add	r3, r2
 800d80c:	3309      	adds	r3, #9
 800d80e:	f107 0210 	add.w	r2, r7, #16
 800d812:	4413      	add	r3, r2
 800d814:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800d818:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800d81c:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800d820:	2200      	movs	r2, #0
 800d822:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800d824:	2300      	movs	r3, #0
 800d826:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Type = Advertising_Type;
 800d82a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800d82e:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800d832:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 800d836:	7812      	ldrb	r2, [r2, #0]
 800d838:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800d83a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d83e:	3301      	adds	r3, #1
 800d840:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 800d844:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800d848:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800d84c:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 800d850:	8812      	ldrh	r2, [r2, #0]
 800d852:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 800d856:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d85a:	3302      	adds	r3, #2
 800d85c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 800d860:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800d864:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800d868:	f5a2 729b 	sub.w	r2, r2, #310	; 0x136
 800d86c:	8812      	ldrh	r2, [r2, #0]
 800d86e:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 800d872:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d876:	3302      	adds	r3, #2
 800d878:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 800d87c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800d880:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800d884:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 800d888:	7812      	ldrb	r2, [r2, #0]
 800d88a:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800d88c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d890:	3301      	adds	r3, #1
 800d892:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 800d896:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800d89a:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 800d89e:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800d8a0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d8a4:	3301      	adds	r3, #1
 800d8a6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 800d8aa:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800d8ae:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 800d8b2:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 800d8b4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d8b8:	3301      	adds	r3, #1
 800d8ba:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 800d8be:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800d8c2:	3308      	adds	r3, #8
 800d8c4:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 800d8c8:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 800d8cc:	4618      	mov	r0, r3
 800d8ce:	f001 f81d 	bl	800e90c <Osal_MemCpy>
    index_input += Local_Name_Length;
 800d8d2:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 800d8d6:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800d8da:	4413      	add	r3, r2
 800d8dc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 800d8e0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800d8e4:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 800d8e8:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800d8ea:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d8ee:	3301      	adds	r3, #1
 800d8f0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 800d8f4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800d8f8:	3301      	adds	r3, #1
 800d8fa:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 800d8fe:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 800d902:	4618      	mov	r0, r3
 800d904:	f001 f802 	bl	800e90c <Osal_MemCpy>
    index_input += Service_Uuid_length;
 800d908:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 800d90c:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800d910:	4413      	add	r3, r2
 800d912:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Min = Slave_Conn_Interval_Min;
 800d916:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d91a:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 800d91e:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 800d920:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d924:	3302      	adds	r3, #2
 800d926:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Max = Slave_Conn_Interval_Max;
 800d92a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d92e:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 800d932:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 800d934:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d938:	3302      	adds	r3, #2
 800d93a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d93e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d942:	2218      	movs	r2, #24
 800d944:	2100      	movs	r1, #0
 800d946:	4618      	mov	r0, r3
 800d948:	f000 fff0 	bl	800e92c <Osal_MemSet>
  rq.ogf = 0x3f;
 800d94c:	233f      	movs	r3, #63	; 0x3f
 800d94e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x083;
 800d952:	2383      	movs	r3, #131	; 0x83
 800d954:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800d958:	f107 0310 	add.w	r3, r7, #16
 800d95c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800d960:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d964:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800d968:	f107 030f 	add.w	r3, r7, #15
 800d96c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800d970:	2301      	movs	r3, #1
 800d972:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d976:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d97a:	2100      	movs	r1, #0
 800d97c:	4618      	mov	r0, r3
 800d97e:	f001 fa5f 	bl	800ee40 <hci_send_req>
 800d982:	4603      	mov	r3, r0
 800d984:	2b00      	cmp	r3, #0
 800d986:	da01      	bge.n	800d98c <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 800d988:	23ff      	movs	r3, #255	; 0xff
 800d98a:	e004      	b.n	800d996 <aci_gap_set_discoverable+0x1ea>
  return status;
 800d98c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800d990:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800d994:	781b      	ldrb	r3, [r3, #0]
}
 800d996:	4618      	mov	r0, r3
 800d998:	f507 779c 	add.w	r7, r7, #312	; 0x138
 800d99c:	46bd      	mov	sp, r7
 800d99e:	bdb0      	pop	{r4, r5, r7, pc}

0800d9a0 <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 800d9a0:	b580      	push	{r7, lr}
 800d9a2:	b0cc      	sub	sp, #304	; 0x130
 800d9a4:	af00      	add	r7, sp, #0
 800d9a6:	4602      	mov	r2, r0
 800d9a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d9ac:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800d9b0:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 800d9b2:	f107 0310 	add.w	r3, r7, #16
 800d9b6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800d9ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d9be:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800d9c2:	2200      	movs	r2, #0
 800d9c4:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800d9c6:	2300      	movs	r3, #0
 800d9c8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->IO_Capability = IO_Capability;
 800d9cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d9d0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800d9d4:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800d9d8:	7812      	ldrb	r2, [r2, #0]
 800d9da:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800d9dc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d9e0:	3301      	adds	r3, #1
 800d9e2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d9e6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d9ea:	2218      	movs	r2, #24
 800d9ec:	2100      	movs	r1, #0
 800d9ee:	4618      	mov	r0, r3
 800d9f0:	f000 ff9c 	bl	800e92c <Osal_MemSet>
  rq.ogf = 0x3f;
 800d9f4:	233f      	movs	r3, #63	; 0x3f
 800d9f6:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x085;
 800d9fa:	2385      	movs	r3, #133	; 0x85
 800d9fc:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800da00:	f107 0310 	add.w	r3, r7, #16
 800da04:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800da08:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800da0c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800da10:	f107 030f 	add.w	r3, r7, #15
 800da14:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800da18:	2301      	movs	r3, #1
 800da1a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800da1e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800da22:	2100      	movs	r1, #0
 800da24:	4618      	mov	r0, r3
 800da26:	f001 fa0b 	bl	800ee40 <hci_send_req>
 800da2a:	4603      	mov	r3, r0
 800da2c:	2b00      	cmp	r3, #0
 800da2e:	da01      	bge.n	800da34 <aci_gap_set_io_capability+0x94>
    return BLE_STATUS_TIMEOUT;
 800da30:	23ff      	movs	r3, #255	; 0xff
 800da32:	e004      	b.n	800da3e <aci_gap_set_io_capability+0x9e>
  return status;
 800da34:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800da38:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800da3c:	781b      	ldrb	r3, [r3, #0]
}
 800da3e:	4618      	mov	r0, r3
 800da40:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800da44:	46bd      	mov	sp, r7
 800da46:	bd80      	pop	{r7, pc}

0800da48 <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 800da48:	b5b0      	push	{r4, r5, r7, lr}
 800da4a:	b0cc      	sub	sp, #304	; 0x130
 800da4c:	af00      	add	r7, sp, #0
 800da4e:	4605      	mov	r5, r0
 800da50:	460c      	mov	r4, r1
 800da52:	4610      	mov	r0, r2
 800da54:	4619      	mov	r1, r3
 800da56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800da5a:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800da5e:	462a      	mov	r2, r5
 800da60:	701a      	strb	r2, [r3, #0]
 800da62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800da66:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800da6a:	4622      	mov	r2, r4
 800da6c:	701a      	strb	r2, [r3, #0]
 800da6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800da72:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 800da76:	4602      	mov	r2, r0
 800da78:	701a      	strb	r2, [r3, #0]
 800da7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800da7e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800da82:	460a      	mov	r2, r1
 800da84:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 800da86:	f107 0310 	add.w	r3, r7, #16
 800da8a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800da8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800da92:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800da96:	2200      	movs	r2, #0
 800da98:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800da9a:	2300      	movs	r3, #0
 800da9c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 800daa0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800daa4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800daa8:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800daac:	7812      	ldrb	r2, [r2, #0]
 800daae:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800dab0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800dab4:	3301      	adds	r3, #1
 800dab6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->MITM_Mode = MITM_Mode;
 800daba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800dabe:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800dac2:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800dac6:	7812      	ldrb	r2, [r2, #0]
 800dac8:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800daca:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800dace:	3301      	adds	r3, #1
 800dad0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->SC_Support = SC_Support;
 800dad4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800dad8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800dadc:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 800dae0:	7812      	ldrb	r2, [r2, #0]
 800dae2:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800dae4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800dae8:	3301      	adds	r3, #1
 800daea:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 800daee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800daf2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800daf6:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800dafa:	7812      	ldrb	r2, [r2, #0]
 800dafc:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 800dafe:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800db02:	3301      	adds	r3, #1
 800db04:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 800db08:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800db0c:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 800db10:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800db12:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800db16:	3301      	adds	r3, #1
 800db18:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 800db1c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800db20:	f897 2144 	ldrb.w	r2, [r7, #324]	; 0x144
 800db24:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800db26:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800db2a:	3301      	adds	r3, #1
 800db2c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 800db30:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800db34:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 800db38:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800db3a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800db3e:	3301      	adds	r3, #1
 800db40:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 800db44:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800db48:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800db4c:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 800db50:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800db54:	3304      	adds	r3, #4
 800db56:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 800db5a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800db5e:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 800db62:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 800db64:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800db68:	3301      	adds	r3, #1
 800db6a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800db6e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800db72:	2218      	movs	r2, #24
 800db74:	2100      	movs	r1, #0
 800db76:	4618      	mov	r0, r3
 800db78:	f000 fed8 	bl	800e92c <Osal_MemSet>
  rq.ogf = 0x3f;
 800db7c:	233f      	movs	r3, #63	; 0x3f
 800db7e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x086;
 800db82:	2386      	movs	r3, #134	; 0x86
 800db84:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800db88:	f107 0310 	add.w	r3, r7, #16
 800db8c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800db90:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800db94:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800db98:	f107 030f 	add.w	r3, r7, #15
 800db9c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800dba0:	2301      	movs	r3, #1
 800dba2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800dba6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800dbaa:	2100      	movs	r1, #0
 800dbac:	4618      	mov	r0, r3
 800dbae:	f001 f947 	bl	800ee40 <hci_send_req>
 800dbb2:	4603      	mov	r3, r0
 800dbb4:	2b00      	cmp	r3, #0
 800dbb6:	da01      	bge.n	800dbbc <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 800dbb8:	23ff      	movs	r3, #255	; 0xff
 800dbba:	e004      	b.n	800dbc6 <aci_gap_set_authentication_requirement+0x17e>
  return status;
 800dbbc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800dbc0:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800dbc4:	781b      	ldrb	r3, [r3, #0]
}
 800dbc6:	4618      	mov	r0, r3
 800dbc8:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800dbcc:	46bd      	mov	sp, r7
 800dbce:	bdb0      	pop	{r4, r5, r7, pc}

0800dbd0 <aci_gap_pass_key_resp>:
  return status;
}

tBleStatus aci_gap_pass_key_resp( uint16_t Connection_Handle,
                                  uint32_t Pass_Key )
{
 800dbd0:	b580      	push	{r7, lr}
 800dbd2:	b0cc      	sub	sp, #304	; 0x130
 800dbd4:	af00      	add	r7, sp, #0
 800dbd6:	4602      	mov	r2, r0
 800dbd8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800dbdc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800dbe0:	6019      	str	r1, [r3, #0]
 800dbe2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800dbe6:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800dbea:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_pass_key_resp_cp0 *cp0 = (aci_gap_pass_key_resp_cp0*)(cmd_buffer);
 800dbec:	f107 0310 	add.w	r3, r7, #16
 800dbf0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800dbf4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800dbf8:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800dbfc:	2200      	movs	r2, #0
 800dbfe:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800dc00:	2300      	movs	r3, #0
 800dc02:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 800dc06:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800dc0a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800dc0e:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800dc12:	8812      	ldrh	r2, [r2, #0]
 800dc14:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800dc16:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800dc1a:	3302      	adds	r3, #2
 800dc1c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Pass_Key = Pass_Key;
 800dc20:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800dc24:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800dc28:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 800dc2c:	6812      	ldr	r2, [r2, #0]
 800dc2e:	f8c3 2002 	str.w	r2, [r3, #2]
  index_input += 4;
 800dc32:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800dc36:	3304      	adds	r3, #4
 800dc38:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800dc3c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800dc40:	2218      	movs	r2, #24
 800dc42:	2100      	movs	r1, #0
 800dc44:	4618      	mov	r0, r3
 800dc46:	f000 fe71 	bl	800e92c <Osal_MemSet>
  rq.ogf = 0x3f;
 800dc4a:	233f      	movs	r3, #63	; 0x3f
 800dc4c:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x088;
 800dc50:	2388      	movs	r3, #136	; 0x88
 800dc52:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800dc56:	f107 0310 	add.w	r3, r7, #16
 800dc5a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800dc5e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800dc62:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800dc66:	f107 030f 	add.w	r3, r7, #15
 800dc6a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800dc6e:	2301      	movs	r3, #1
 800dc70:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800dc74:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800dc78:	2100      	movs	r1, #0
 800dc7a:	4618      	mov	r0, r3
 800dc7c:	f001 f8e0 	bl	800ee40 <hci_send_req>
 800dc80:	4603      	mov	r3, r0
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	da01      	bge.n	800dc8a <aci_gap_pass_key_resp+0xba>
    return BLE_STATUS_TIMEOUT;
 800dc86:	23ff      	movs	r3, #255	; 0xff
 800dc88:	e004      	b.n	800dc94 <aci_gap_pass_key_resp+0xc4>
  return status;
 800dc8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800dc8e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800dc92:	781b      	ldrb	r3, [r3, #0]
}
 800dc94:	4618      	mov	r0, r3
 800dc96:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800dc9a:	46bd      	mov	sp, r7
 800dc9c:	bd80      	pop	{r7, pc}

0800dc9e <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 800dc9e:	b590      	push	{r4, r7, lr}
 800dca0:	b0cd      	sub	sp, #308	; 0x134
 800dca2:	af00      	add	r7, sp, #0
 800dca4:	4604      	mov	r4, r0
 800dca6:	4608      	mov	r0, r1
 800dca8:	4611      	mov	r1, r2
 800dcaa:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800dcae:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 800dcb2:	6013      	str	r3, [r2, #0]
 800dcb4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800dcb8:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800dcbc:	4622      	mov	r2, r4
 800dcbe:	701a      	strb	r2, [r3, #0]
 800dcc0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800dcc4:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800dcc8:	4602      	mov	r2, r0
 800dcca:	701a      	strb	r2, [r3, #0]
 800dccc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800dcd0:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 800dcd4:	460a      	mov	r2, r1
 800dcd6:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 800dcd8:	f107 0310 	add.w	r3, r7, #16
 800dcdc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800dce0:	f107 0308 	add.w	r3, r7, #8
 800dce4:	2207      	movs	r2, #7
 800dce6:	2100      	movs	r1, #0
 800dce8:	4618      	mov	r0, r3
 800dcea:	f000 fe1f 	bl	800e92c <Osal_MemSet>
  int index_input = 0;
 800dcee:	2300      	movs	r3, #0
 800dcf0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Role = Role;
 800dcf4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800dcf8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800dcfc:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800dd00:	7812      	ldrb	r2, [r2, #0]
 800dd02:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800dd04:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800dd08:	3301      	adds	r3, #1
 800dd0a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->privacy_enabled = privacy_enabled;
 800dd0e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800dd12:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800dd16:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800dd1a:	7812      	ldrb	r2, [r2, #0]
 800dd1c:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800dd1e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800dd22:	3301      	adds	r3, #1
 800dd24:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->device_name_char_len = device_name_char_len;
 800dd28:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800dd2c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800dd30:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 800dd34:	7812      	ldrb	r2, [r2, #0]
 800dd36:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800dd38:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800dd3c:	3301      	adds	r3, #1
 800dd3e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800dd42:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800dd46:	2218      	movs	r2, #24
 800dd48:	2100      	movs	r1, #0
 800dd4a:	4618      	mov	r0, r3
 800dd4c:	f000 fdee 	bl	800e92c <Osal_MemSet>
  rq.ogf = 0x3f;
 800dd50:	233f      	movs	r3, #63	; 0x3f
 800dd52:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08a;
 800dd56:	238a      	movs	r3, #138	; 0x8a
 800dd58:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800dd5c:	f107 0310 	add.w	r3, r7, #16
 800dd60:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800dd64:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800dd68:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 800dd6c:	f107 0308 	add.w	r3, r7, #8
 800dd70:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 800dd74:	2307      	movs	r3, #7
 800dd76:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800dd7a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800dd7e:	2100      	movs	r1, #0
 800dd80:	4618      	mov	r0, r3
 800dd82:	f001 f85d 	bl	800ee40 <hci_send_req>
 800dd86:	4603      	mov	r3, r0
 800dd88:	2b00      	cmp	r3, #0
 800dd8a:	da01      	bge.n	800dd90 <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 800dd8c:	23ff      	movs	r3, #255	; 0xff
 800dd8e:	e02e      	b.n	800ddee <aci_gap_init+0x150>
  if ( resp.Status )
 800dd90:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800dd94:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800dd98:	781b      	ldrb	r3, [r3, #0]
 800dd9a:	2b00      	cmp	r3, #0
 800dd9c:	d005      	beq.n	800ddaa <aci_gap_init+0x10c>
    return resp.Status;
 800dd9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800dda2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800dda6:	781b      	ldrb	r3, [r3, #0]
 800dda8:	e021      	b.n	800ddee <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 800ddaa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ddae:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800ddb2:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800ddb6:	b29a      	uxth	r2, r3
 800ddb8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ddbc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ddc0:	681b      	ldr	r3, [r3, #0]
 800ddc2:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 800ddc4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ddc8:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800ddcc:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800ddd0:	b29a      	uxth	r2, r3
 800ddd2:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800ddd6:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 800ddd8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800dddc:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800dde0:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800dde4:	b29a      	uxth	r2, r3
 800dde6:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800ddea:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800ddec:	2300      	movs	r3, #0
}
 800ddee:	4618      	mov	r0, r3
 800ddf0:	f507 779a 	add.w	r7, r7, #308	; 0x134
 800ddf4:	46bd      	mov	sp, r7
 800ddf6:	bd90      	pop	{r4, r7, pc}

0800ddf8 <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 800ddf8:	b580      	push	{r7, lr}
 800ddfa:	b0cc      	sub	sp, #304	; 0x130
 800ddfc:	af00      	add	r7, sp, #0
 800ddfe:	4602      	mov	r2, r0
 800de00:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800de04:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800de08:	6019      	str	r1, [r3, #0]
 800de0a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800de0e:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800de12:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 800de14:	f107 0310 	add.w	r3, r7, #16
 800de18:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800de1c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800de20:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800de24:	2200      	movs	r2, #0
 800de26:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800de28:	2300      	movs	r3, #0
 800de2a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->AdvDataLen = AdvDataLen;
 800de2e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800de32:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800de36:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800de3a:	7812      	ldrb	r2, [r2, #0]
 800de3c:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800de3e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800de42:	3301      	adds	r3, #1
 800de44:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 800de48:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800de4c:	1c58      	adds	r0, r3, #1
 800de4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800de52:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800de56:	781a      	ldrb	r2, [r3, #0]
 800de58:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800de5c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800de60:	6819      	ldr	r1, [r3, #0]
 800de62:	f000 fd53 	bl	800e90c <Osal_MemCpy>
  index_input += AdvDataLen;
 800de66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800de6a:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800de6e:	781b      	ldrb	r3, [r3, #0]
 800de70:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800de74:	4413      	add	r3, r2
 800de76:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800de7a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800de7e:	2218      	movs	r2, #24
 800de80:	2100      	movs	r1, #0
 800de82:	4618      	mov	r0, r3
 800de84:	f000 fd52 	bl	800e92c <Osal_MemSet>
  rq.ogf = 0x3f;
 800de88:	233f      	movs	r3, #63	; 0x3f
 800de8a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08e;
 800de8e:	238e      	movs	r3, #142	; 0x8e
 800de90:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800de94:	f107 0310 	add.w	r3, r7, #16
 800de98:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800de9c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800dea0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800dea4:	f107 030f 	add.w	r3, r7, #15
 800dea8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800deac:	2301      	movs	r3, #1
 800deae:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800deb2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800deb6:	2100      	movs	r1, #0
 800deb8:	4618      	mov	r0, r3
 800deba:	f000 ffc1 	bl	800ee40 <hci_send_req>
 800debe:	4603      	mov	r3, r0
 800dec0:	2b00      	cmp	r3, #0
 800dec2:	da01      	bge.n	800dec8 <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 800dec4:	23ff      	movs	r3, #255	; 0xff
 800dec6:	e004      	b.n	800ded2 <aci_gap_update_adv_data+0xda>
  return status;
 800dec8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800decc:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800ded0:	781b      	ldrb	r3, [r3, #0]
}
 800ded2:	4618      	mov	r0, r3
 800ded4:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800ded8:	46bd      	mov	sp, r7
 800deda:	bd80      	pop	{r7, pc}

0800dedc <aci_gap_configure_whitelist>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_whitelist( void )
{
 800dedc:	b580      	push	{r7, lr}
 800dede:	b088      	sub	sp, #32
 800dee0:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800dee2:	2300      	movs	r3, #0
 800dee4:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800dee6:	f107 0308 	add.w	r3, r7, #8
 800deea:	2218      	movs	r2, #24
 800deec:	2100      	movs	r1, #0
 800deee:	4618      	mov	r0, r3
 800def0:	f000 fd1c 	bl	800e92c <Osal_MemSet>
  rq.ogf = 0x3f;
 800def4:	233f      	movs	r3, #63	; 0x3f
 800def6:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 800def8:	2392      	movs	r3, #146	; 0x92
 800defa:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800defc:	1dfb      	adds	r3, r7, #7
 800defe:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800df00:	2301      	movs	r3, #1
 800df02:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800df04:	f107 0308 	add.w	r3, r7, #8
 800df08:	2100      	movs	r1, #0
 800df0a:	4618      	mov	r0, r3
 800df0c:	f000 ff98 	bl	800ee40 <hci_send_req>
 800df10:	4603      	mov	r3, r0
 800df12:	2b00      	cmp	r3, #0
 800df14:	da01      	bge.n	800df1a <aci_gap_configure_whitelist+0x3e>
    return BLE_STATUS_TIMEOUT;
 800df16:	23ff      	movs	r3, #255	; 0xff
 800df18:	e000      	b.n	800df1c <aci_gap_configure_whitelist+0x40>
  return status;
 800df1a:	79fb      	ldrb	r3, [r7, #7]
}
 800df1c:	4618      	mov	r0, r3
 800df1e:	3720      	adds	r7, #32
 800df20:	46bd      	mov	sp, r7
 800df22:	bd80      	pop	{r7, pc}

0800df24 <aci_gap_numeric_comparison_value_confirm_yesno>:
  return status;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno( uint16_t Connection_Handle,
                                                           uint8_t Confirm_Yes_No )
{
 800df24:	b580      	push	{r7, lr}
 800df26:	b0cc      	sub	sp, #304	; 0x130
 800df28:	af00      	add	r7, sp, #0
 800df2a:	4602      	mov	r2, r0
 800df2c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800df30:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800df34:	801a      	strh	r2, [r3, #0]
 800df36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800df3a:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 800df3e:	460a      	mov	r2, r1
 800df40:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
 800df42:	f107 0310 	add.w	r3, r7, #16
 800df46:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800df4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800df4e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800df52:	2200      	movs	r2, #0
 800df54:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800df56:	2300      	movs	r3, #0
 800df58:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 800df5c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800df60:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800df64:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800df68:	8812      	ldrh	r2, [r2, #0]
 800df6a:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800df6c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800df70:	3302      	adds	r3, #2
 800df72:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Confirm_Yes_No = Confirm_Yes_No;
 800df76:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800df7a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800df7e:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 800df82:	7812      	ldrb	r2, [r2, #0]
 800df84:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800df86:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800df8a:	3301      	adds	r3, #1
 800df8c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800df90:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800df94:	2218      	movs	r2, #24
 800df96:	2100      	movs	r1, #0
 800df98:	4618      	mov	r0, r3
 800df9a:	f000 fcc7 	bl	800e92c <Osal_MemSet>
  rq.ogf = 0x3f;
 800df9e:	233f      	movs	r3, #63	; 0x3f
 800dfa0:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x0a5;
 800dfa4:	23a5      	movs	r3, #165	; 0xa5
 800dfa6:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800dfaa:	f107 0310 	add.w	r3, r7, #16
 800dfae:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800dfb2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800dfb6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800dfba:	f107 030f 	add.w	r3, r7, #15
 800dfbe:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800dfc2:	2301      	movs	r3, #1
 800dfc4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800dfc8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800dfcc:	2100      	movs	r1, #0
 800dfce:	4618      	mov	r0, r3
 800dfd0:	f000 ff36 	bl	800ee40 <hci_send_req>
 800dfd4:	4603      	mov	r3, r0
 800dfd6:	2b00      	cmp	r3, #0
 800dfd8:	da01      	bge.n	800dfde <aci_gap_numeric_comparison_value_confirm_yesno+0xba>
    return BLE_STATUS_TIMEOUT;
 800dfda:	23ff      	movs	r3, #255	; 0xff
 800dfdc:	e004      	b.n	800dfe8 <aci_gap_numeric_comparison_value_confirm_yesno+0xc4>
  return status;
 800dfde:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800dfe2:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800dfe6:	781b      	ldrb	r3, [r3, #0]
}
 800dfe8:	4618      	mov	r0, r3
 800dfea:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800dfee:	46bd      	mov	sp, r7
 800dff0:	bd80      	pop	{r7, pc}

0800dff2 <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 800dff2:	b580      	push	{r7, lr}
 800dff4:	b088      	sub	sp, #32
 800dff6:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800dff8:	2300      	movs	r3, #0
 800dffa:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800dffc:	f107 0308 	add.w	r3, r7, #8
 800e000:	2218      	movs	r2, #24
 800e002:	2100      	movs	r1, #0
 800e004:	4618      	mov	r0, r3
 800e006:	f000 fc91 	bl	800e92c <Osal_MemSet>
  rq.ogf = 0x3f;
 800e00a:	233f      	movs	r3, #63	; 0x3f
 800e00c:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 800e00e:	f240 1301 	movw	r3, #257	; 0x101
 800e012:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800e014:	1dfb      	adds	r3, r7, #7
 800e016:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800e018:	2301      	movs	r3, #1
 800e01a:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800e01c:	f107 0308 	add.w	r3, r7, #8
 800e020:	2100      	movs	r1, #0
 800e022:	4618      	mov	r0, r3
 800e024:	f000 ff0c 	bl	800ee40 <hci_send_req>
 800e028:	4603      	mov	r3, r0
 800e02a:	2b00      	cmp	r3, #0
 800e02c:	da01      	bge.n	800e032 <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 800e02e:	23ff      	movs	r3, #255	; 0xff
 800e030:	e000      	b.n	800e034 <aci_gatt_init+0x42>
  return status;
 800e032:	79fb      	ldrb	r3, [r7, #7]
}
 800e034:	4618      	mov	r0, r3
 800e036:	3720      	adds	r7, #32
 800e038:	46bd      	mov	sp, r7
 800e03a:	bd80      	pop	{r7, pc}

0800e03c <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 800e03c:	b590      	push	{r4, r7, lr}
 800e03e:	b0cf      	sub	sp, #316	; 0x13c
 800e040:	af00      	add	r7, sp, #0
 800e042:	4604      	mov	r4, r0
 800e044:	f507 709c 	add.w	r0, r7, #312	; 0x138
 800e048:	f5a0 709c 	sub.w	r0, r0, #312	; 0x138
 800e04c:	6001      	str	r1, [r0, #0]
 800e04e:	4610      	mov	r0, r2
 800e050:	4619      	mov	r1, r3
 800e052:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800e056:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 800e05a:	4622      	mov	r2, r4
 800e05c:	701a      	strb	r2, [r3, #0]
 800e05e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800e062:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 800e066:	4602      	mov	r2, r0
 800e068:	701a      	strb	r2, [r3, #0]
 800e06a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800e06e:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 800e072:	460a      	mov	r2, r1
 800e074:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 800e076:	f107 0310 	add.w	r3, r7, #16
 800e07a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 800e07e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800e082:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 800e086:	781b      	ldrb	r3, [r3, #0]
 800e088:	2b01      	cmp	r3, #1
 800e08a:	d00a      	beq.n	800e0a2 <aci_gatt_add_service+0x66>
 800e08c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800e090:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 800e094:	781b      	ldrb	r3, [r3, #0]
 800e096:	2b02      	cmp	r3, #2
 800e098:	d101      	bne.n	800e09e <aci_gatt_add_service+0x62>
 800e09a:	2311      	movs	r3, #17
 800e09c:	e002      	b.n	800e0a4 <aci_gatt_add_service+0x68>
 800e09e:	2301      	movs	r3, #1
 800e0a0:	e000      	b.n	800e0a4 <aci_gatt_add_service+0x68>
 800e0a2:	2303      	movs	r3, #3
 800e0a4:	f107 0210 	add.w	r2, r7, #16
 800e0a8:	4413      	add	r3, r2
 800e0aa:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800e0ae:	f107 030c 	add.w	r3, r7, #12
 800e0b2:	2203      	movs	r2, #3
 800e0b4:	2100      	movs	r1, #0
 800e0b6:	4618      	mov	r0, r3
 800e0b8:	f000 fc38 	bl	800e92c <Osal_MemSet>
  int index_input = 0;
 800e0bc:	2300      	movs	r3, #0
 800e0be:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 800e0c2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800e0c6:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800e0ca:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 800e0ce:	7812      	ldrb	r2, [r2, #0]
 800e0d0:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800e0d2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e0d6:	3301      	adds	r3, #1
 800e0d8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 800e0dc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800e0e0:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 800e0e4:	781b      	ldrb	r3, [r3, #0]
 800e0e6:	2b01      	cmp	r3, #1
 800e0e8:	d002      	beq.n	800e0f0 <aci_gatt_add_service+0xb4>
 800e0ea:	2b02      	cmp	r3, #2
 800e0ec:	d004      	beq.n	800e0f8 <aci_gatt_add_service+0xbc>
 800e0ee:	e007      	b.n	800e100 <aci_gatt_add_service+0xc4>
    {
      case 1: size = 2; break;
 800e0f0:	2302      	movs	r3, #2
 800e0f2:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 800e0f6:	e005      	b.n	800e104 <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 800e0f8:	2310      	movs	r3, #16
 800e0fa:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 800e0fe:	e001      	b.n	800e104 <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 800e100:	2397      	movs	r3, #151	; 0x97
 800e102:	e06c      	b.n	800e1de <aci_gatt_add_service+0x1a2>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 800e104:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800e108:	1c58      	adds	r0, r3, #1
 800e10a:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 800e10e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800e112:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800e116:	6819      	ldr	r1, [r3, #0]
 800e118:	f000 fbf8 	bl	800e90c <Osal_MemCpy>
    index_input += size;
 800e11c:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 800e120:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800e124:	4413      	add	r3, r2
 800e126:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Type = Service_Type;
 800e12a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800e12e:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800e132:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 800e136:	7812      	ldrb	r2, [r2, #0]
 800e138:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800e13a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e13e:	3301      	adds	r3, #1
 800e140:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 800e144:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800e148:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800e14c:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 800e150:	7812      	ldrb	r2, [r2, #0]
 800e152:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 800e154:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e158:	3301      	adds	r3, #1
 800e15a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800e15e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800e162:	2218      	movs	r2, #24
 800e164:	2100      	movs	r1, #0
 800e166:	4618      	mov	r0, r3
 800e168:	f000 fbe0 	bl	800e92c <Osal_MemSet>
  rq.ogf = 0x3f;
 800e16c:	233f      	movs	r3, #63	; 0x3f
 800e16e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x102;
 800e172:	f44f 7381 	mov.w	r3, #258	; 0x102
 800e176:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800e17a:	f107 0310 	add.w	r3, r7, #16
 800e17e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800e182:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e186:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 800e18a:	f107 030c 	add.w	r3, r7, #12
 800e18e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 800e192:	2303      	movs	r3, #3
 800e194:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800e198:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800e19c:	2100      	movs	r1, #0
 800e19e:	4618      	mov	r0, r3
 800e1a0:	f000 fe4e 	bl	800ee40 <hci_send_req>
 800e1a4:	4603      	mov	r3, r0
 800e1a6:	2b00      	cmp	r3, #0
 800e1a8:	da01      	bge.n	800e1ae <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 800e1aa:	23ff      	movs	r3, #255	; 0xff
 800e1ac:	e017      	b.n	800e1de <aci_gatt_add_service+0x1a2>
  if ( resp.Status )
 800e1ae:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800e1b2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800e1b6:	781b      	ldrb	r3, [r3, #0]
 800e1b8:	2b00      	cmp	r3, #0
 800e1ba:	d005      	beq.n	800e1c8 <aci_gatt_add_service+0x18c>
    return resp.Status;
 800e1bc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800e1c0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800e1c4:	781b      	ldrb	r3, [r3, #0]
 800e1c6:	e00a      	b.n	800e1de <aci_gatt_add_service+0x1a2>
  *Service_Handle = resp.Service_Handle;
 800e1c8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800e1cc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800e1d0:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800e1d4:	b29a      	uxth	r2, r3
 800e1d6:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800e1da:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800e1dc:	2300      	movs	r3, #0
}
 800e1de:	4618      	mov	r0, r3
 800e1e0:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 800e1e4:	46bd      	mov	sp, r7
 800e1e6:	bd90      	pop	{r4, r7, pc}

0800e1e8 <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 800e1e8:	b590      	push	{r4, r7, lr}
 800e1ea:	b0d1      	sub	sp, #324	; 0x144
 800e1ec:	af00      	add	r7, sp, #0
 800e1ee:	4604      	mov	r4, r0
 800e1f0:	4608      	mov	r0, r1
 800e1f2:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 800e1f6:	f5a1 719c 	sub.w	r1, r1, #312	; 0x138
 800e1fa:	600a      	str	r2, [r1, #0]
 800e1fc:	4619      	mov	r1, r3
 800e1fe:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800e202:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 800e206:	4622      	mov	r2, r4
 800e208:	801a      	strh	r2, [r3, #0]
 800e20a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800e20e:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 800e212:	4602      	mov	r2, r0
 800e214:	701a      	strb	r2, [r3, #0]
 800e216:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800e21a:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 800e21e:	460a      	mov	r2, r1
 800e220:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 800e222:	f107 0318 	add.w	r3, r7, #24
 800e226:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 800e22a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800e22e:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 800e232:	781b      	ldrb	r3, [r3, #0]
 800e234:	2b01      	cmp	r3, #1
 800e236:	d00a      	beq.n	800e24e <aci_gatt_add_char+0x66>
 800e238:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800e23c:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 800e240:	781b      	ldrb	r3, [r3, #0]
 800e242:	2b02      	cmp	r3, #2
 800e244:	d101      	bne.n	800e24a <aci_gatt_add_char+0x62>
 800e246:	2313      	movs	r3, #19
 800e248:	e002      	b.n	800e250 <aci_gatt_add_char+0x68>
 800e24a:	2303      	movs	r3, #3
 800e24c:	e000      	b.n	800e250 <aci_gatt_add_char+0x68>
 800e24e:	2305      	movs	r3, #5
 800e250:	f107 0218 	add.w	r2, r7, #24
 800e254:	4413      	add	r3, r2
 800e256:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800e25a:	f107 0314 	add.w	r3, r7, #20
 800e25e:	2203      	movs	r2, #3
 800e260:	2100      	movs	r1, #0
 800e262:	4618      	mov	r0, r3
 800e264:	f000 fb62 	bl	800e92c <Osal_MemSet>
  int index_input = 0;
 800e268:	2300      	movs	r3, #0
 800e26a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Service_Handle = Service_Handle;
 800e26e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800e272:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 800e276:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 800e27a:	8812      	ldrh	r2, [r2, #0]
 800e27c:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800e27e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800e282:	3302      	adds	r3, #2
 800e284:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 800e288:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800e28c:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 800e290:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 800e294:	7812      	ldrb	r2, [r2, #0]
 800e296:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800e298:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800e29c:	3301      	adds	r3, #1
 800e29e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 800e2a2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800e2a6:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 800e2aa:	781b      	ldrb	r3, [r3, #0]
 800e2ac:	2b01      	cmp	r3, #1
 800e2ae:	d002      	beq.n	800e2b6 <aci_gatt_add_char+0xce>
 800e2b0:	2b02      	cmp	r3, #2
 800e2b2:	d004      	beq.n	800e2be <aci_gatt_add_char+0xd6>
 800e2b4:	e007      	b.n	800e2c6 <aci_gatt_add_char+0xde>
    {
      case 1: size = 2; break;
 800e2b6:	2302      	movs	r3, #2
 800e2b8:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 800e2bc:	e005      	b.n	800e2ca <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 800e2be:	2310      	movs	r3, #16
 800e2c0:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 800e2c4:	e001      	b.n	800e2ca <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 800e2c6:	2397      	movs	r3, #151	; 0x97
 800e2c8:	e091      	b.n	800e3ee <aci_gatt_add_char+0x206>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 800e2ca:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800e2ce:	1cd8      	adds	r0, r3, #3
 800e2d0:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 800e2d4:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800e2d8:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800e2dc:	6819      	ldr	r1, [r3, #0]
 800e2de:	f000 fb15 	bl	800e90c <Osal_MemCpy>
    index_input += size;
 800e2e2:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 800e2e6:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 800e2ea:	4413      	add	r3, r2
 800e2ec:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 800e2f0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800e2f4:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 800e2f8:	f5a2 729d 	sub.w	r2, r2, #314	; 0x13a
 800e2fc:	8812      	ldrh	r2, [r2, #0]
 800e2fe:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 800e300:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800e304:	3302      	adds	r3, #2
 800e306:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Properties = Char_Properties;
 800e30a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800e30e:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 800e312:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 800e314:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800e318:	3301      	adds	r3, #1
 800e31a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 800e31e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800e322:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 800e326:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 800e328:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800e32c:	3301      	adds	r3, #1
 800e32e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 800e332:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800e336:	f897 2158 	ldrb.w	r2, [r7, #344]	; 0x158
 800e33a:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 800e33c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800e340:	3301      	adds	r3, #1
 800e342:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 800e346:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800e34a:	f897 215c 	ldrb.w	r2, [r7, #348]	; 0x15c
 800e34e:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 800e350:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800e354:	3301      	adds	r3, #1
 800e356:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Is_Variable = Is_Variable;
 800e35a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800e35e:	f897 2160 	ldrb.w	r2, [r7, #352]	; 0x160
 800e362:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 800e364:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800e368:	3301      	adds	r3, #1
 800e36a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800e36e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800e372:	2218      	movs	r2, #24
 800e374:	2100      	movs	r1, #0
 800e376:	4618      	mov	r0, r3
 800e378:	f000 fad8 	bl	800e92c <Osal_MemSet>
  rq.ogf = 0x3f;
 800e37c:	233f      	movs	r3, #63	; 0x3f
 800e37e:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x104;
 800e382:	f44f 7382 	mov.w	r3, #260	; 0x104
 800e386:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 800e38a:	f107 0318 	add.w	r3, r7, #24
 800e38e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 800e392:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800e396:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 800e39a:	f107 0314 	add.w	r3, r7, #20
 800e39e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 800e3a2:	2303      	movs	r3, #3
 800e3a4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 800e3a8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800e3ac:	2100      	movs	r1, #0
 800e3ae:	4618      	mov	r0, r3
 800e3b0:	f000 fd46 	bl	800ee40 <hci_send_req>
 800e3b4:	4603      	mov	r3, r0
 800e3b6:	2b00      	cmp	r3, #0
 800e3b8:	da01      	bge.n	800e3be <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 800e3ba:	23ff      	movs	r3, #255	; 0xff
 800e3bc:	e017      	b.n	800e3ee <aci_gatt_add_char+0x206>
  if ( resp.Status )
 800e3be:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800e3c2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800e3c6:	781b      	ldrb	r3, [r3, #0]
 800e3c8:	2b00      	cmp	r3, #0
 800e3ca:	d005      	beq.n	800e3d8 <aci_gatt_add_char+0x1f0>
    return resp.Status;
 800e3cc:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800e3d0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800e3d4:	781b      	ldrb	r3, [r3, #0]
 800e3d6:	e00a      	b.n	800e3ee <aci_gatt_add_char+0x206>
  *Char_Handle = resp.Char_Handle;
 800e3d8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800e3dc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800e3e0:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800e3e4:	b29a      	uxth	r2, r3
 800e3e6:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800e3ea:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800e3ec:	2300      	movs	r3, #0
}
 800e3ee:	4618      	mov	r0, r3
 800e3f0:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 800e3f4:	46bd      	mov	sp, r7
 800e3f6:	bd90      	pop	{r4, r7, pc}

0800e3f8 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 800e3f8:	b5b0      	push	{r4, r5, r7, lr}
 800e3fa:	b0cc      	sub	sp, #304	; 0x130
 800e3fc:	af00      	add	r7, sp, #0
 800e3fe:	4605      	mov	r5, r0
 800e400:	460c      	mov	r4, r1
 800e402:	4610      	mov	r0, r2
 800e404:	4619      	mov	r1, r3
 800e406:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e40a:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800e40e:	462a      	mov	r2, r5
 800e410:	801a      	strh	r2, [r3, #0]
 800e412:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e416:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800e41a:	4622      	mov	r2, r4
 800e41c:	801a      	strh	r2, [r3, #0]
 800e41e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e422:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 800e426:	4602      	mov	r2, r0
 800e428:	701a      	strb	r2, [r3, #0]
 800e42a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e42e:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 800e432:	460a      	mov	r2, r1
 800e434:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 800e436:	f107 0310 	add.w	r3, r7, #16
 800e43a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800e43e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e442:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800e446:	2200      	movs	r2, #0
 800e448:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800e44a:	2300      	movs	r3, #0
 800e44c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_Handle = Service_Handle;
 800e450:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800e454:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800e458:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800e45c:	8812      	ldrh	r2, [r2, #0]
 800e45e:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800e460:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e464:	3302      	adds	r3, #2
 800e466:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = Char_Handle;
 800e46a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800e46e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800e472:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800e476:	8812      	ldrh	r2, [r2, #0]
 800e478:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800e47a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e47e:	3302      	adds	r3, #2
 800e480:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Val_Offset = Val_Offset;
 800e484:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800e488:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800e48c:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 800e490:	7812      	ldrb	r2, [r2, #0]
 800e492:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800e494:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e498:	3301      	adds	r3, #1
 800e49a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 800e49e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800e4a2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800e4a6:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 800e4aa:	7812      	ldrb	r2, [r2, #0]
 800e4ac:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800e4ae:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e4b2:	3301      	adds	r3, #1
 800e4b4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 800e4b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800e4bc:	1d98      	adds	r0, r3, #6
 800e4be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e4c2:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 800e4c6:	781b      	ldrb	r3, [r3, #0]
 800e4c8:	461a      	mov	r2, r3
 800e4ca:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800e4ce:	f000 fa1d 	bl	800e90c <Osal_MemCpy>
  index_input += Char_Value_Length;
 800e4d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e4d6:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 800e4da:	781b      	ldrb	r3, [r3, #0]
 800e4dc:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800e4e0:	4413      	add	r3, r2
 800e4e2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800e4e6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800e4ea:	2218      	movs	r2, #24
 800e4ec:	2100      	movs	r1, #0
 800e4ee:	4618      	mov	r0, r3
 800e4f0:	f000 fa1c 	bl	800e92c <Osal_MemSet>
  rq.ogf = 0x3f;
 800e4f4:	233f      	movs	r3, #63	; 0x3f
 800e4f6:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 800e4fa:	f44f 7383 	mov.w	r3, #262	; 0x106
 800e4fe:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800e502:	f107 0310 	add.w	r3, r7, #16
 800e506:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800e50a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e50e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800e512:	f107 030f 	add.w	r3, r7, #15
 800e516:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800e51a:	2301      	movs	r3, #1
 800e51c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800e520:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800e524:	2100      	movs	r1, #0
 800e526:	4618      	mov	r0, r3
 800e528:	f000 fc8a 	bl	800ee40 <hci_send_req>
 800e52c:	4603      	mov	r3, r0
 800e52e:	2b00      	cmp	r3, #0
 800e530:	da01      	bge.n	800e536 <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 800e532:	23ff      	movs	r3, #255	; 0xff
 800e534:	e004      	b.n	800e540 <aci_gatt_update_char_value+0x148>
  return status;
 800e536:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e53a:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800e53e:	781b      	ldrb	r3, [r3, #0]
}
 800e540:	4618      	mov	r0, r3
 800e542:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800e546:	46bd      	mov	sp, r7
 800e548:	bdb0      	pop	{r4, r5, r7, pc}

0800e54a <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 800e54a:	b580      	push	{r7, lr}
 800e54c:	b0cc      	sub	sp, #304	; 0x130
 800e54e:	af00      	add	r7, sp, #0
 800e550:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e554:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800e558:	601a      	str	r2, [r3, #0]
 800e55a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e55e:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800e562:	4602      	mov	r2, r0
 800e564:	701a      	strb	r2, [r3, #0]
 800e566:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e56a:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800e56e:	460a      	mov	r2, r1
 800e570:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 800e572:	f107 0310 	add.w	r3, r7, #16
 800e576:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800e57a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e57e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800e582:	2200      	movs	r2, #0
 800e584:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800e586:	2300      	movs	r3, #0
 800e588:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Offset = Offset;
 800e58c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800e590:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800e594:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800e598:	7812      	ldrb	r2, [r2, #0]
 800e59a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800e59c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e5a0:	3301      	adds	r3, #1
 800e5a2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Length = Length;
 800e5a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800e5aa:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800e5ae:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800e5b2:	7812      	ldrb	r2, [r2, #0]
 800e5b4:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800e5b6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e5ba:	3301      	adds	r3, #1
 800e5bc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 800e5c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800e5c4:	1c98      	adds	r0, r3, #2
 800e5c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e5ca:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800e5ce:	781a      	ldrb	r2, [r3, #0]
 800e5d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e5d4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800e5d8:	6819      	ldr	r1, [r3, #0]
 800e5da:	f000 f997 	bl	800e90c <Osal_MemCpy>
  index_input += Length;
 800e5de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e5e2:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800e5e6:	781b      	ldrb	r3, [r3, #0]
 800e5e8:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800e5ec:	4413      	add	r3, r2
 800e5ee:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800e5f2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800e5f6:	2218      	movs	r2, #24
 800e5f8:	2100      	movs	r1, #0
 800e5fa:	4618      	mov	r0, r3
 800e5fc:	f000 f996 	bl	800e92c <Osal_MemSet>
  rq.ogf = 0x3f;
 800e600:	233f      	movs	r3, #63	; 0x3f
 800e602:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00c;
 800e606:	230c      	movs	r3, #12
 800e608:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800e60c:	f107 0310 	add.w	r3, r7, #16
 800e610:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800e614:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e618:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800e61c:	f107 030f 	add.w	r3, r7, #15
 800e620:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800e624:	2301      	movs	r3, #1
 800e626:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800e62a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800e62e:	2100      	movs	r1, #0
 800e630:	4618      	mov	r0, r3
 800e632:	f000 fc05 	bl	800ee40 <hci_send_req>
 800e636:	4603      	mov	r3, r0
 800e638:	2b00      	cmp	r3, #0
 800e63a:	da01      	bge.n	800e640 <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 800e63c:	23ff      	movs	r3, #255	; 0xff
 800e63e:	e004      	b.n	800e64a <aci_hal_write_config_data+0x100>
  return status;
 800e640:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e644:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800e648:	781b      	ldrb	r3, [r3, #0]
}
 800e64a:	4618      	mov	r0, r3
 800e64c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800e650:	46bd      	mov	sp, r7
 800e652:	bd80      	pop	{r7, pc}

0800e654 <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 800e654:	b580      	push	{r7, lr}
 800e656:	b0cc      	sub	sp, #304	; 0x130
 800e658:	af00      	add	r7, sp, #0
 800e65a:	4602      	mov	r2, r0
 800e65c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e660:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800e664:	701a      	strb	r2, [r3, #0]
 800e666:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e66a:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800e66e:	460a      	mov	r2, r1
 800e670:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 800e672:	f107 0310 	add.w	r3, r7, #16
 800e676:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800e67a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e67e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800e682:	2200      	movs	r2, #0
 800e684:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800e686:	2300      	movs	r3, #0
 800e688:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->En_High_Power = En_High_Power;
 800e68c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800e690:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800e694:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800e698:	7812      	ldrb	r2, [r2, #0]
 800e69a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800e69c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e6a0:	3301      	adds	r3, #1
 800e6a2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->PA_Level = PA_Level;
 800e6a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800e6aa:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800e6ae:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800e6b2:	7812      	ldrb	r2, [r2, #0]
 800e6b4:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800e6b6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e6ba:	3301      	adds	r3, #1
 800e6bc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800e6c0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800e6c4:	2218      	movs	r2, #24
 800e6c6:	2100      	movs	r1, #0
 800e6c8:	4618      	mov	r0, r3
 800e6ca:	f000 f92f 	bl	800e92c <Osal_MemSet>
  rq.ogf = 0x3f;
 800e6ce:	233f      	movs	r3, #63	; 0x3f
 800e6d0:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00f;
 800e6d4:	230f      	movs	r3, #15
 800e6d6:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800e6da:	f107 0310 	add.w	r3, r7, #16
 800e6de:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800e6e2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e6e6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800e6ea:	f107 030f 	add.w	r3, r7, #15
 800e6ee:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800e6f2:	2301      	movs	r3, #1
 800e6f4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800e6f8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800e6fc:	2100      	movs	r1, #0
 800e6fe:	4618      	mov	r0, r3
 800e700:	f000 fb9e 	bl	800ee40 <hci_send_req>
 800e704:	4603      	mov	r3, r0
 800e706:	2b00      	cmp	r3, #0
 800e708:	da01      	bge.n	800e70e <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 800e70a:	23ff      	movs	r3, #255	; 0xff
 800e70c:	e004      	b.n	800e718 <aci_hal_set_tx_power_level+0xc4>
  return status;
 800e70e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e712:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800e716:	781b      	ldrb	r3, [r3, #0]
}
 800e718:	4618      	mov	r0, r3
 800e71a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800e71e:	46bd      	mov	sp, r7
 800e720:	bd80      	pop	{r7, pc}

0800e722 <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 800e722:	b580      	push	{r7, lr}
 800e724:	b0cc      	sub	sp, #304	; 0x130
 800e726:	af00      	add	r7, sp, #0
 800e728:	4602      	mov	r2, r0
 800e72a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e72e:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800e732:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 800e734:	f107 0310 	add.w	r3, r7, #16
 800e738:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800e73c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e740:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800e744:	2200      	movs	r2, #0
 800e746:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800e748:	2300      	movs	r3, #0
 800e74a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 800e74e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800e752:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800e756:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800e75a:	8812      	ldrh	r2, [r2, #0]
 800e75c:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800e75e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e762:	3302      	adds	r3, #2
 800e764:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800e768:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800e76c:	2218      	movs	r2, #24
 800e76e:	2100      	movs	r1, #0
 800e770:	4618      	mov	r0, r3
 800e772:	f000 f8db 	bl	800e92c <Osal_MemSet>
  rq.ogf = 0x3f;
 800e776:	233f      	movs	r3, #63	; 0x3f
 800e778:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x018;
 800e77c:	2318      	movs	r3, #24
 800e77e:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800e782:	f107 0310 	add.w	r3, r7, #16
 800e786:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800e78a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e78e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800e792:	f107 030f 	add.w	r3, r7, #15
 800e796:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800e79a:	2301      	movs	r3, #1
 800e79c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800e7a0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800e7a4:	2100      	movs	r1, #0
 800e7a6:	4618      	mov	r0, r3
 800e7a8:	f000 fb4a 	bl	800ee40 <hci_send_req>
 800e7ac:	4603      	mov	r3, r0
 800e7ae:	2b00      	cmp	r3, #0
 800e7b0:	da01      	bge.n	800e7b6 <aci_hal_set_radio_activity_mask+0x94>
    return BLE_STATUS_TIMEOUT;
 800e7b2:	23ff      	movs	r3, #255	; 0xff
 800e7b4:	e004      	b.n	800e7c0 <aci_hal_set_radio_activity_mask+0x9e>
  return status;
 800e7b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e7ba:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800e7be:	781b      	ldrb	r3, [r3, #0]
}
 800e7c0:	4618      	mov	r0, r3
 800e7c2:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800e7c6:	46bd      	mov	sp, r7
 800e7c8:	bd80      	pop	{r7, pc}

0800e7ca <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 800e7ca:	b580      	push	{r7, lr}
 800e7cc:	b088      	sub	sp, #32
 800e7ce:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800e7d0:	2300      	movs	r3, #0
 800e7d2:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800e7d4:	f107 0308 	add.w	r3, r7, #8
 800e7d8:	2218      	movs	r2, #24
 800e7da:	2100      	movs	r1, #0
 800e7dc:	4618      	mov	r0, r3
 800e7de:	f000 f8a5 	bl	800e92c <Osal_MemSet>
  rq.ogf = 0x03;
 800e7e2:	2303      	movs	r3, #3
 800e7e4:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 800e7e6:	2303      	movs	r3, #3
 800e7e8:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800e7ea:	1dfb      	adds	r3, r7, #7
 800e7ec:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800e7ee:	2301      	movs	r3, #1
 800e7f0:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800e7f2:	f107 0308 	add.w	r3, r7, #8
 800e7f6:	2100      	movs	r1, #0
 800e7f8:	4618      	mov	r0, r3
 800e7fa:	f000 fb21 	bl	800ee40 <hci_send_req>
 800e7fe:	4603      	mov	r3, r0
 800e800:	2b00      	cmp	r3, #0
 800e802:	da01      	bge.n	800e808 <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 800e804:	23ff      	movs	r3, #255	; 0xff
 800e806:	e000      	b.n	800e80a <hci_reset+0x40>
  return status;
 800e808:	79fb      	ldrb	r3, [r7, #7]
}
 800e80a:	4618      	mov	r0, r3
 800e80c:	3720      	adds	r7, #32
 800e80e:	46bd      	mov	sp, r7
 800e810:	bd80      	pop	{r7, pc}

0800e812 <hci_le_set_default_phy>:
}

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 800e812:	b590      	push	{r4, r7, lr}
 800e814:	b0cd      	sub	sp, #308	; 0x134
 800e816:	af00      	add	r7, sp, #0
 800e818:	4604      	mov	r4, r0
 800e81a:	4608      	mov	r0, r1
 800e81c:	4611      	mov	r1, r2
 800e81e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e822:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800e826:	4622      	mov	r2, r4
 800e828:	701a      	strb	r2, [r3, #0]
 800e82a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e82e:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800e832:	4602      	mov	r2, r0
 800e834:	701a      	strb	r2, [r3, #0]
 800e836:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e83a:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 800e83e:	460a      	mov	r2, r1
 800e840:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 800e842:	f107 0310 	add.w	r3, r7, #16
 800e846:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800e84a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e84e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800e852:	2200      	movs	r2, #0
 800e854:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800e856:	2300      	movs	r3, #0
 800e858:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 800e85c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800e860:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800e864:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800e868:	7812      	ldrb	r2, [r2, #0]
 800e86a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800e86c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e870:	3301      	adds	r3, #1
 800e872:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->TX_PHYS = TX_PHYS;
 800e876:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800e87a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800e87e:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800e882:	7812      	ldrb	r2, [r2, #0]
 800e884:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800e886:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e88a:	3301      	adds	r3, #1
 800e88c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->RX_PHYS = RX_PHYS;
 800e890:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800e894:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800e898:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 800e89c:	7812      	ldrb	r2, [r2, #0]
 800e89e:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800e8a0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e8a4:	3301      	adds	r3, #1
 800e8a6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800e8aa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800e8ae:	2218      	movs	r2, #24
 800e8b0:	2100      	movs	r1, #0
 800e8b2:	4618      	mov	r0, r3
 800e8b4:	f000 f83a 	bl	800e92c <Osal_MemSet>
  rq.ogf = 0x08;
 800e8b8:	2308      	movs	r3, #8
 800e8ba:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x031;
 800e8be:	2331      	movs	r3, #49	; 0x31
 800e8c0:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800e8c4:	f107 0310 	add.w	r3, r7, #16
 800e8c8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800e8cc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e8d0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800e8d4:	f107 030f 	add.w	r3, r7, #15
 800e8d8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800e8dc:	2301      	movs	r3, #1
 800e8de:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800e8e2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800e8e6:	2100      	movs	r1, #0
 800e8e8:	4618      	mov	r0, r3
 800e8ea:	f000 faa9 	bl	800ee40 <hci_send_req>
 800e8ee:	4603      	mov	r3, r0
 800e8f0:	2b00      	cmp	r3, #0
 800e8f2:	da01      	bge.n	800e8f8 <hci_le_set_default_phy+0xe6>
    return BLE_STATUS_TIMEOUT;
 800e8f4:	23ff      	movs	r3, #255	; 0xff
 800e8f6:	e004      	b.n	800e902 <hci_le_set_default_phy+0xf0>
  return status;
 800e8f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e8fc:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800e900:	781b      	ldrb	r3, [r3, #0]
}
 800e902:	4618      	mov	r0, r3
 800e904:	f507 779a 	add.w	r7, r7, #308	; 0x134
 800e908:	46bd      	mov	sp, r7
 800e90a:	bd90      	pop	{r4, r7, pc}

0800e90c <Osal_MemCpy>:
 * Osal_MemCpy
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 800e90c:	b580      	push	{r7, lr}
 800e90e:	b084      	sub	sp, #16
 800e910:	af00      	add	r7, sp, #0
 800e912:	60f8      	str	r0, [r7, #12]
 800e914:	60b9      	str	r1, [r7, #8]
 800e916:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size ); 
 800e918:	687a      	ldr	r2, [r7, #4]
 800e91a:	68b9      	ldr	r1, [r7, #8]
 800e91c:	68f8      	ldr	r0, [r7, #12]
 800e91e:	f004 fbb7 	bl	8013090 <memcpy>
 800e922:	4603      	mov	r3, r0
}
 800e924:	4618      	mov	r0, r3
 800e926:	3710      	adds	r7, #16
 800e928:	46bd      	mov	sp, r7
 800e92a:	bd80      	pop	{r7, pc}

0800e92c <Osal_MemSet>:
 * Osal_MemSet
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 800e92c:	b580      	push	{r7, lr}
 800e92e:	b084      	sub	sp, #16
 800e930:	af00      	add	r7, sp, #0
 800e932:	60f8      	str	r0, [r7, #12]
 800e934:	60b9      	str	r1, [r7, #8]
 800e936:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 800e938:	687a      	ldr	r2, [r7, #4]
 800e93a:	68b9      	ldr	r1, [r7, #8]
 800e93c:	68f8      	ldr	r0, [r7, #12]
 800e93e:	f004 fbb5 	bl	80130ac <memset>
 800e942:	4603      	mov	r3, r0
}
 800e944:	4618      	mov	r0, r3
 800e946:	3710      	adds	r7, #16
 800e948:	46bd      	mov	sp, r7
 800e94a:	bd80      	pop	{r7, pc}

0800e94c <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 800e94c:	b480      	push	{r7}
 800e94e:	af00      	add	r7, sp, #0
  return;
 800e950:	bf00      	nop
}
 800e952:	46bd      	mov	sp, r7
 800e954:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e958:	4770      	bx	lr

0800e95a <BLS_Init>:

__WEAK void BLS_Init( void )
{
 800e95a:	b480      	push	{r7}
 800e95c:	af00      	add	r7, sp, #0
  return;
 800e95e:	bf00      	nop
}
 800e960:	46bd      	mov	sp, r7
 800e962:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e966:	4770      	bx	lr

0800e968 <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 800e968:	b480      	push	{r7}
 800e96a:	af00      	add	r7, sp, #0
  return;
 800e96c:	bf00      	nop
}
 800e96e:	46bd      	mov	sp, r7
 800e970:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e974:	4770      	bx	lr

0800e976 <DIS_Init>:
__WEAK void DIS_Init( void )
{
 800e976:	b480      	push	{r7}
 800e978:	af00      	add	r7, sp, #0
  return;
 800e97a:	bf00      	nop
}
 800e97c:	46bd      	mov	sp, r7
 800e97e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e982:	4770      	bx	lr

0800e984 <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 800e984:	b480      	push	{r7}
 800e986:	af00      	add	r7, sp, #0
  return;
 800e988:	bf00      	nop
}
 800e98a:	46bd      	mov	sp, r7
 800e98c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e990:	4770      	bx	lr

0800e992 <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 800e992:	b480      	push	{r7}
 800e994:	af00      	add	r7, sp, #0
  return;
 800e996:	bf00      	nop
}
 800e998:	46bd      	mov	sp, r7
 800e99a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e99e:	4770      	bx	lr

0800e9a0 <HRS_Init>:
__WEAK void HRS_Init( void )
{
 800e9a0:	b480      	push	{r7}
 800e9a2:	af00      	add	r7, sp, #0
  return;
 800e9a4:	bf00      	nop
}
 800e9a6:	46bd      	mov	sp, r7
 800e9a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9ac:	4770      	bx	lr

0800e9ae <HTS_Init>:
__WEAK void HTS_Init( void )
{
 800e9ae:	b480      	push	{r7}
 800e9b0:	af00      	add	r7, sp, #0
  return;
 800e9b2:	bf00      	nop
}
 800e9b4:	46bd      	mov	sp, r7
 800e9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9ba:	4770      	bx	lr

0800e9bc <IAS_Init>:
__WEAK void IAS_Init( void )
{
 800e9bc:	b480      	push	{r7}
 800e9be:	af00      	add	r7, sp, #0
  return;
 800e9c0:	bf00      	nop
}
 800e9c2:	46bd      	mov	sp, r7
 800e9c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9c8:	4770      	bx	lr

0800e9ca <LLS_Init>:
__WEAK void LLS_Init( void )
{
 800e9ca:	b480      	push	{r7}
 800e9cc:	af00      	add	r7, sp, #0
  return;
 800e9ce:	bf00      	nop
}
 800e9d0:	46bd      	mov	sp, r7
 800e9d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9d6:	4770      	bx	lr

0800e9d8 <TPS_Init>:
__WEAK void TPS_Init( void )
{
 800e9d8:	b480      	push	{r7}
 800e9da:	af00      	add	r7, sp, #0
  return;
 800e9dc:	bf00      	nop
}
 800e9de:	46bd      	mov	sp, r7
 800e9e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9e4:	4770      	bx	lr

0800e9e6 <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 800e9e6:	b480      	push	{r7}
 800e9e8:	af00      	add	r7, sp, #0
  return;
 800e9ea:	bf00      	nop
}
 800e9ec:	46bd      	mov	sp, r7
 800e9ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9f2:	4770      	bx	lr

0800e9f4 <P2PS_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
 800e9f4:	b480      	push	{r7}
 800e9f6:	af00      	add	r7, sp, #0
  return;
 800e9f8:	bf00      	nop
}
 800e9fa:	46bd      	mov	sp, r7
 800e9fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea00:	4770      	bx	lr

0800ea02 <ZDD_STM_Init>:
__WEAK void ZDD_STM_Init( void )
{
 800ea02:	b480      	push	{r7}
 800ea04:	af00      	add	r7, sp, #0
  return;
 800ea06:	bf00      	nop
}
 800ea08:	46bd      	mov	sp, r7
 800ea0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea0e:	4770      	bx	lr

0800ea10 <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 800ea10:	b480      	push	{r7}
 800ea12:	af00      	add	r7, sp, #0
  return;
 800ea14:	bf00      	nop
}
 800ea16:	46bd      	mov	sp, r7
 800ea18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea1c:	4770      	bx	lr

0800ea1e <MESH_Init>:
__WEAK void MESH_Init( void )
{
 800ea1e:	b480      	push	{r7}
 800ea20:	af00      	add	r7, sp, #0
  return;
 800ea22:	bf00      	nop
}
 800ea24:	46bd      	mov	sp, r7
 800ea26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea2a:	4770      	bx	lr

0800ea2c <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 800ea2c:	b480      	push	{r7}
 800ea2e:	af00      	add	r7, sp, #0
  return;
 800ea30:	bf00      	nop
}
 800ea32:	46bd      	mov	sp, r7
 800ea34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea38:	4770      	bx	lr
	...

0800ea3c <SVCCTL_Init>:
}

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 800ea3c:	b580      	push	{r7, lr}
 800ea3e:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 800ea40:	4b04      	ldr	r3, [pc, #16]	; (800ea54 <SVCCTL_Init+0x18>)
 800ea42:	2200      	movs	r2, #0
 800ea44:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 800ea46:	4b04      	ldr	r3, [pc, #16]	; (800ea58 <SVCCTL_Init+0x1c>)
 800ea48:	2200      	movs	r2, #0
 800ea4a:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 800ea4c:	f000 f806 	bl	800ea5c <SVCCTL_SvcInit>

  return;
 800ea50:	bf00      	nop
}
 800ea52:	bd80      	pop	{r7, pc}
 800ea54:	200001fc 	.word	0x200001fc
 800ea58:	2000021c 	.word	0x2000021c

0800ea5c <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 800ea5c:	b580      	push	{r7, lr}
 800ea5e:	af00      	add	r7, sp, #0
  BAS_Init();
 800ea60:	f7ff ff74 	bl	800e94c <BAS_Init>

  BLS_Init();
 800ea64:	f7ff ff79 	bl	800e95a <BLS_Init>

  CRS_STM_Init();
 800ea68:	f7ff ff7e 	bl	800e968 <CRS_STM_Init>

  DIS_Init();
 800ea6c:	f7ff ff83 	bl	800e976 <DIS_Init>

  EDS_STM_Init();
 800ea70:	f7ff ff88 	bl	800e984 <EDS_STM_Init>

  HIDS_Init();
 800ea74:	f7ff ff8d 	bl	800e992 <HIDS_Init>

  HRS_Init();
 800ea78:	f7ff ff92 	bl	800e9a0 <HRS_Init>

  HTS_Init();
 800ea7c:	f7ff ff97 	bl	800e9ae <HTS_Init>

  IAS_Init();
 800ea80:	f7ff ff9c 	bl	800e9bc <IAS_Init>

  LLS_Init();
 800ea84:	f7ff ffa1 	bl	800e9ca <LLS_Init>

  TPS_Init();
 800ea88:	f7ff ffa6 	bl	800e9d8 <TPS_Init>

  MOTENV_STM_Init();
 800ea8c:	f7ff ffab 	bl	800e9e6 <MOTENV_STM_Init>

  P2PS_STM_Init();
 800ea90:	f7ff ffb0 	bl	800e9f4 <P2PS_STM_Init>

  ZDD_STM_Init();
 800ea94:	f7ff ffb5 	bl	800ea02 <ZDD_STM_Init>

  OTAS_STM_Init();
 800ea98:	f7ff ffba 	bl	800ea10 <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 800ea9c:	f7ff ffc6 	bl	800ea2c <BVOPUS_STM_Init>

  MESH_Init();
 800eaa0:	f7ff ffbd 	bl	800ea1e <MESH_Init>

  SVCCTL_InitCustomSvc();
 800eaa4:	f002 fb3a 	bl	801111c <SVCCTL_InitCustomSvc>
  
  return;
 800eaa8:	bf00      	nop
}
 800eaaa:	bd80      	pop	{r7, pc}

0800eaac <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 800eaac:	b480      	push	{r7}
 800eaae:	b083      	sub	sp, #12
 800eab0:	af00      	add	r7, sp, #0
 800eab2:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 800eab4:	4b09      	ldr	r3, [pc, #36]	; (800eadc <SVCCTL_RegisterSvcHandler+0x30>)
 800eab6:	7f1b      	ldrb	r3, [r3, #28]
 800eab8:	4619      	mov	r1, r3
 800eaba:	4a08      	ldr	r2, [pc, #32]	; (800eadc <SVCCTL_RegisterSvcHandler+0x30>)
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 800eac2:	4b06      	ldr	r3, [pc, #24]	; (800eadc <SVCCTL_RegisterSvcHandler+0x30>)
 800eac4:	7f1b      	ldrb	r3, [r3, #28]
 800eac6:	3301      	adds	r3, #1
 800eac8:	b2da      	uxtb	r2, r3
 800eaca:	4b04      	ldr	r3, [pc, #16]	; (800eadc <SVCCTL_RegisterSvcHandler+0x30>)
 800eacc:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 800eace:	bf00      	nop
}
 800ead0:	370c      	adds	r7, #12
 800ead2:	46bd      	mov	sp, r7
 800ead4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ead8:	4770      	bx	lr
 800eada:	bf00      	nop
 800eadc:	200001fc 	.word	0x200001fc

0800eae0 <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 800eae0:	b580      	push	{r7, lr}
 800eae2:	b086      	sub	sp, #24
 800eae4:	af00      	add	r7, sp, #0
 800eae6:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	3301      	adds	r3, #1
 800eaec:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 800eaee:	2300      	movs	r3, #0
 800eaf0:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 800eaf2:	693b      	ldr	r3, [r7, #16]
 800eaf4:	781b      	ldrb	r3, [r3, #0]
 800eaf6:	2bff      	cmp	r3, #255	; 0xff
 800eaf8:	d125      	bne.n	800eb46 <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 800eafa:	693b      	ldr	r3, [r7, #16]
 800eafc:	3302      	adds	r3, #2
 800eafe:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 800eb00:	68fb      	ldr	r3, [r7, #12]
 800eb02:	881b      	ldrh	r3, [r3, #0]
 800eb04:	b29b      	uxth	r3, r3
 800eb06:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800eb0a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800eb0e:	d118      	bne.n	800eb42 <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800eb10:	2300      	movs	r3, #0
 800eb12:	757b      	strb	r3, [r7, #21]
 800eb14:	e00d      	b.n	800eb32 <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 800eb16:	7d7b      	ldrb	r3, [r7, #21]
 800eb18:	4a1a      	ldr	r2, [pc, #104]	; (800eb84 <SVCCTL_UserEvtRx+0xa4>)
 800eb1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800eb1e:	6878      	ldr	r0, [r7, #4]
 800eb20:	4798      	blx	r3
 800eb22:	4603      	mov	r3, r0
 800eb24:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 800eb26:	7dfb      	ldrb	r3, [r7, #23]
 800eb28:	2b00      	cmp	r3, #0
 800eb2a:	d108      	bne.n	800eb3e <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800eb2c:	7d7b      	ldrb	r3, [r7, #21]
 800eb2e:	3301      	adds	r3, #1
 800eb30:	757b      	strb	r3, [r7, #21]
 800eb32:	4b14      	ldr	r3, [pc, #80]	; (800eb84 <SVCCTL_UserEvtRx+0xa4>)
 800eb34:	7f1b      	ldrb	r3, [r3, #28]
 800eb36:	7d7a      	ldrb	r2, [r7, #21]
 800eb38:	429a      	cmp	r2, r3
 800eb3a:	d3ec      	bcc.n	800eb16 <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 800eb3c:	e002      	b.n	800eb44 <SVCCTL_UserEvtRx+0x64>
              break;
 800eb3e:	bf00      	nop
          break;
 800eb40:	e000      	b.n	800eb44 <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 800eb42:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 800eb44:	e000      	b.n	800eb48 <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 800eb46:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the applicaiton.
   */
  switch (event_notification_status)
 800eb48:	7dfb      	ldrb	r3, [r7, #23]
 800eb4a:	2b02      	cmp	r3, #2
 800eb4c:	d00f      	beq.n	800eb6e <SVCCTL_UserEvtRx+0x8e>
 800eb4e:	2b02      	cmp	r3, #2
 800eb50:	dc10      	bgt.n	800eb74 <SVCCTL_UserEvtRx+0x94>
 800eb52:	2b00      	cmp	r3, #0
 800eb54:	d002      	beq.n	800eb5c <SVCCTL_UserEvtRx+0x7c>
 800eb56:	2b01      	cmp	r3, #1
 800eb58:	d006      	beq.n	800eb68 <SVCCTL_UserEvtRx+0x88>
 800eb5a:	e00b      	b.n	800eb74 <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 800eb5c:	6878      	ldr	r0, [r7, #4]
 800eb5e:	f001 fc53 	bl	8010408 <SVCCTL_App_Notification>
 800eb62:	4603      	mov	r3, r0
 800eb64:	75bb      	strb	r3, [r7, #22]
      break;
 800eb66:	e008      	b.n	800eb7a <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 800eb68:	2301      	movs	r3, #1
 800eb6a:	75bb      	strb	r3, [r7, #22]
      break;
 800eb6c:	e005      	b.n	800eb7a <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 800eb6e:	2300      	movs	r3, #0
 800eb70:	75bb      	strb	r3, [r7, #22]
      break;
 800eb72:	e002      	b.n	800eb7a <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 800eb74:	2301      	movs	r3, #1
 800eb76:	75bb      	strb	r3, [r7, #22]
      break;
 800eb78:	bf00      	nop
  }

  return (return_status);
 800eb7a:	7dbb      	ldrb	r3, [r7, #22]
}
 800eb7c:	4618      	mov	r0, r3
 800eb7e:	3718      	adds	r7, #24
 800eb80:	46bd      	mov	sp, r7
 800eb82:	bd80      	pop	{r7, pc}
 800eb84:	200001fc 	.word	0x200001fc

0800eb88 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 800eb88:	b580      	push	{r7, lr}
 800eb8a:	b088      	sub	sp, #32
 800eb8c:	af00      	add	r7, sp, #0
 800eb8e:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800eb90:	f107 030c 	add.w	r3, r7, #12
 800eb94:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 800eb9c:	69fb      	ldr	r3, [r7, #28]
 800eb9e:	212d      	movs	r1, #45	; 0x2d
 800eba0:	f64f 4066 	movw	r0, #64614	; 0xfc66
 800eba4:	f000 fae2 	bl	800f16c <shci_send>
            p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800eba8:	69fb      	ldr	r3, [r7, #28]
 800ebaa:	330b      	adds	r3, #11
 800ebac:	78db      	ldrb	r3, [r3, #3]
}
 800ebae:	4618      	mov	r0, r3
 800ebb0:	3720      	adds	r7, #32
 800ebb2:	46bd      	mov	sp, r7
 800ebb4:	bd80      	pop	{r7, pc}

0800ebb6 <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 800ebb6:	b580      	push	{r7, lr}
 800ebb8:	b088      	sub	sp, #32
 800ebba:	af00      	add	r7, sp, #0
 800ebbc:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800ebbe:	f107 030c 	add.w	r3, r7, #12
 800ebc2:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 800ebca:	69fb      	ldr	r3, [r7, #28]
 800ebcc:	210f      	movs	r1, #15
 800ebce:	f64f 4068 	movw	r0, #64616	; 0xfc68
 800ebd2:	f000 facb 	bl	800f16c <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800ebd6:	69fb      	ldr	r3, [r7, #28]
 800ebd8:	330b      	adds	r3, #11
 800ebda:	78db      	ldrb	r3, [r3, #3]
}
 800ebdc:	4618      	mov	r0, r3
 800ebde:	3720      	adds	r7, #32
 800ebe0:	46bd      	mov	sp, r7
 800ebe2:	bd80      	pop	{r7, pc}

0800ebe4 <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 800ebe4:	b580      	push	{r7, lr}
 800ebe6:	b088      	sub	sp, #32
 800ebe8:	af00      	add	r7, sp, #0
 800ebea:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800ebec:	f107 030c 	add.w	r3, r7, #12
 800ebf0:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 800ebf2:	69fb      	ldr	r3, [r7, #28]
 800ebf4:	687a      	ldr	r2, [r7, #4]
 800ebf6:	2110      	movs	r1, #16
 800ebf8:	f64f 4075 	movw	r0, #64629	; 0xfc75
 800ebfc:	f000 fab6 	bl	800f16c <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800ec00:	69fb      	ldr	r3, [r7, #28]
 800ec02:	330b      	adds	r3, #11
 800ec04:	78db      	ldrb	r3, [r3, #3]
}
 800ec06:	4618      	mov	r0, r3
 800ec08:	3720      	adds	r7, #32
 800ec0a:	46bd      	mov	sp, r7
 800ec0c:	bd80      	pop	{r7, pc}
	...

0800ec10 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 800ec10:	b480      	push	{r7}
 800ec12:	b08b      	sub	sp, #44	; 0x2c
 800ec14:	af00      	add	r7, sp, #0
 800ec16:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 800ec18:	2300      	movs	r3, #0
 800ec1a:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 800ec1c:	2300      	movs	r3, #0
 800ec1e:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 800ec20:	2300      	movs	r3, #0
 800ec22:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t wireless_firmware_memorySize = 0;
 800ec24:	2300      	movs	r3, #0
 800ec26:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 800ec28:	2300      	movs	r3, #0
 800ec2a:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 800ec2c:	2300      	movs	r3, #0
 800ec2e:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 800ec30:	2300      	movs	r3, #0
 800ec32:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 800ec34:	2300      	movs	r3, #0
 800ec36:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 800ec38:	4b4a      	ldr	r3, [pc, #296]	; (800ed64 <SHCI_GetWirelessFwInfo+0x154>)
 800ec3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ec3c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800ec40:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 800ec42:	693b      	ldr	r3, [r7, #16]
 800ec44:	009b      	lsls	r3, r3, #2
 800ec46:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800ec4a:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 800ec4e:	681b      	ldr	r3, [r3, #0]
 800ec50:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 800ec52:	68bb      	ldr	r3, [r7, #8]
 800ec54:	681b      	ldr	r3, [r3, #0]
 800ec56:	4a44      	ldr	r2, [pc, #272]	; (800ed68 <SHCI_GetWirelessFwInfo+0x158>)
 800ec58:	4293      	cmp	r3, r2
 800ec5a:	d10f      	bne.n	800ec7c <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 800ec5c:	68bb      	ldr	r3, [r7, #8]
 800ec5e:	695b      	ldr	r3, [r3, #20]
 800ec60:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 800ec62:	68bb      	ldr	r3, [r7, #8]
 800ec64:	699b      	ldr	r3, [r3, #24]
 800ec66:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 800ec68:	68bb      	ldr	r3, [r7, #8]
 800ec6a:	69db      	ldr	r3, [r3, #28]
 800ec6c:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 800ec6e:	68bb      	ldr	r3, [r7, #8]
 800ec70:	68db      	ldr	r3, [r3, #12]
 800ec72:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 800ec74:	68bb      	ldr	r3, [r7, #8]
 800ec76:	691b      	ldr	r3, [r3, #16]
 800ec78:	617b      	str	r3, [r7, #20]
 800ec7a:	e01a      	b.n	800ecb2 <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 800ec7c:	693b      	ldr	r3, [r7, #16]
 800ec7e:	009b      	lsls	r3, r3, #2
 800ec80:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800ec84:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 800ec88:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 800ec8a:	68fb      	ldr	r3, [r7, #12]
 800ec8c:	681b      	ldr	r3, [r3, #0]
 800ec8e:	691b      	ldr	r3, [r3, #16]
 800ec90:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 800ec92:	68fb      	ldr	r3, [r7, #12]
 800ec94:	681b      	ldr	r3, [r3, #0]
 800ec96:	695b      	ldr	r3, [r3, #20]
 800ec98:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 800ec9a:	68fb      	ldr	r3, [r7, #12]
 800ec9c:	681b      	ldr	r3, [r3, #0]
 800ec9e:	699b      	ldr	r3, [r3, #24]
 800eca0:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 800eca2:	68fb      	ldr	r3, [r7, #12]
 800eca4:	681b      	ldr	r3, [r3, #0]
 800eca6:	685b      	ldr	r3, [r3, #4]
 800eca8:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 800ecaa:	68fb      	ldr	r3, [r7, #12]
 800ecac:	681b      	ldr	r3, [r3, #0]
 800ecae:	689b      	ldr	r3, [r3, #8]
 800ecb0:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800ecb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecb4:	0e1b      	lsrs	r3, r3, #24
 800ecb6:	b2da      	uxtb	r2, r3
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800ecbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecbe:	0c1b      	lsrs	r3, r3, #16
 800ecc0:	b2da      	uxtb	r2, r3
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800ecc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecc8:	0a1b      	lsrs	r3, r3, #8
 800ecca:	b2da      	uxtb	r2, r3
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 800ecd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecd2:	091b      	lsrs	r3, r3, #4
 800ecd4:	b2db      	uxtb	r3, r3
 800ecd6:	f003 030f 	and.w	r3, r3, #15
 800ecda:	b2da      	uxtb	r2, r3
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 800ece0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ece2:	b2db      	uxtb	r3, r3
 800ece4:	f003 030f 	and.w	r3, r3, #15
 800ece8:	b2da      	uxtb	r2, r3
 800ecea:	687b      	ldr	r3, [r7, #4]
 800ecec:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800ecee:	6a3b      	ldr	r3, [r7, #32]
 800ecf0:	0e1b      	lsrs	r3, r3, #24
 800ecf2:	b2da      	uxtb	r2, r3
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800ecf8:	6a3b      	ldr	r3, [r7, #32]
 800ecfa:	0c1b      	lsrs	r3, r3, #16
 800ecfc:	b2da      	uxtb	r2, r3
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 800ed02:	6a3b      	ldr	r3, [r7, #32]
 800ed04:	0a1b      	lsrs	r3, r3, #8
 800ed06:	b2da      	uxtb	r2, r3
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800ed0c:	6a3b      	ldr	r3, [r7, #32]
 800ed0e:	b2da      	uxtb	r2, r3
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 800ed14:	69fb      	ldr	r3, [r7, #28]
 800ed16:	b2da      	uxtb	r2, r3
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800ed1c:	69bb      	ldr	r3, [r7, #24]
 800ed1e:	0e1b      	lsrs	r3, r3, #24
 800ed20:	b2da      	uxtb	r2, r3
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800ed26:	69bb      	ldr	r3, [r7, #24]
 800ed28:	0c1b      	lsrs	r3, r3, #16
 800ed2a:	b2da      	uxtb	r2, r3
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800ed30:	69bb      	ldr	r3, [r7, #24]
 800ed32:	0a1b      	lsrs	r3, r3, #8
 800ed34:	b2da      	uxtb	r2, r3
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800ed3a:	697b      	ldr	r3, [r7, #20]
 800ed3c:	0e1b      	lsrs	r3, r3, #24
 800ed3e:	b2da      	uxtb	r2, r3
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800ed44:	697b      	ldr	r3, [r7, #20]
 800ed46:	0c1b      	lsrs	r3, r3, #16
 800ed48:	b2da      	uxtb	r2, r3
 800ed4a:	687b      	ldr	r3, [r7, #4]
 800ed4c:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800ed4e:	697b      	ldr	r3, [r7, #20]
 800ed50:	b2da      	uxtb	r2, r3
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 800ed56:	2300      	movs	r3, #0
}
 800ed58:	4618      	mov	r0, r3
 800ed5a:	372c      	adds	r7, #44	; 0x2c
 800ed5c:	46bd      	mov	sp, r7
 800ed5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed62:	4770      	bx	lr
 800ed64:	58004000 	.word	0x58004000
 800ed68:	a94656b9 	.word	0xa94656b9

0800ed6c <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800ed6c:	b580      	push	{r7, lr}
 800ed6e:	b082      	sub	sp, #8
 800ed70:	af00      	add	r7, sp, #0
 800ed72:	6078      	str	r0, [r7, #4]
 800ed74:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800ed76:	683b      	ldr	r3, [r7, #0]
 800ed78:	685b      	ldr	r3, [r3, #4]
 800ed7a:	4a08      	ldr	r2, [pc, #32]	; (800ed9c <hci_init+0x30>)
 800ed7c:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 800ed7e:	4a08      	ldr	r2, [pc, #32]	; (800eda0 <hci_init+0x34>)
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 800ed84:	4806      	ldr	r0, [pc, #24]	; (800eda0 <hci_init+0x34>)
 800ed86:	f000 f973 	bl	800f070 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800ed8a:	683b      	ldr	r3, [r7, #0]
 800ed8c:	681b      	ldr	r3, [r3, #0]
 800ed8e:	4618      	mov	r0, r3
 800ed90:	f000 f8d4 	bl	800ef3c <TlInit>

  return;
 800ed94:	bf00      	nop
}
 800ed96:	3708      	adds	r7, #8
 800ed98:	46bd      	mov	sp, r7
 800ed9a:	bd80      	pop	{r7, pc}
 800ed9c:	20000bb8 	.word	0x20000bb8
 800eda0:	20000b90 	.word	0x20000b90

0800eda4 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 800eda4:	b580      	push	{r7, lr}
 800eda6:	b084      	sub	sp, #16
 800eda8:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800edaa:	4822      	ldr	r0, [pc, #136]	; (800ee34 <hci_user_evt_proc+0x90>)
 800edac:	f000 fdde 	bl	800f96c <LST_is_empty>
 800edb0:	4603      	mov	r3, r0
 800edb2:	2b00      	cmp	r3, #0
 800edb4:	d12b      	bne.n	800ee0e <hci_user_evt_proc+0x6a>
 800edb6:	4b20      	ldr	r3, [pc, #128]	; (800ee38 <hci_user_evt_proc+0x94>)
 800edb8:	781b      	ldrb	r3, [r3, #0]
 800edba:	2b00      	cmp	r3, #0
 800edbc:	d027      	beq.n	800ee0e <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800edbe:	f107 030c 	add.w	r3, r7, #12
 800edc2:	4619      	mov	r1, r3
 800edc4:	481b      	ldr	r0, [pc, #108]	; (800ee34 <hci_user_evt_proc+0x90>)
 800edc6:	f000 fe60 	bl	800fa8a <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 800edca:	4b1c      	ldr	r3, [pc, #112]	; (800ee3c <hci_user_evt_proc+0x98>)
 800edcc:	69db      	ldr	r3, [r3, #28]
 800edce:	2b00      	cmp	r3, #0
 800edd0:	d00c      	beq.n	800edec <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800edd2:	68fb      	ldr	r3, [r7, #12]
 800edd4:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 800edd6:	2301      	movs	r3, #1
 800edd8:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 800edda:	4b18      	ldr	r3, [pc, #96]	; (800ee3c <hci_user_evt_proc+0x98>)
 800eddc:	69db      	ldr	r3, [r3, #28]
 800edde:	1d3a      	adds	r2, r7, #4
 800ede0:	4610      	mov	r0, r2
 800ede2:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 800ede4:	793a      	ldrb	r2, [r7, #4]
 800ede6:	4b14      	ldr	r3, [pc, #80]	; (800ee38 <hci_user_evt_proc+0x94>)
 800ede8:	701a      	strb	r2, [r3, #0]
 800edea:	e002      	b.n	800edf2 <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800edec:	4b12      	ldr	r3, [pc, #72]	; (800ee38 <hci_user_evt_proc+0x94>)
 800edee:	2201      	movs	r2, #1
 800edf0:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 800edf2:	4b11      	ldr	r3, [pc, #68]	; (800ee38 <hci_user_evt_proc+0x94>)
 800edf4:	781b      	ldrb	r3, [r3, #0]
 800edf6:	2b00      	cmp	r3, #0
 800edf8:	d004      	beq.n	800ee04 <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800edfa:	68fb      	ldr	r3, [r7, #12]
 800edfc:	4618      	mov	r0, r3
 800edfe:	f000 fc03 	bl	800f608 <TL_MM_EvtDone>
 800ee02:	e004      	b.n	800ee0e <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800ee04:	68fb      	ldr	r3, [r7, #12]
 800ee06:	4619      	mov	r1, r3
 800ee08:	480a      	ldr	r0, [pc, #40]	; (800ee34 <hci_user_evt_proc+0x90>)
 800ee0a:	f000 fdd1 	bl	800f9b0 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800ee0e:	4809      	ldr	r0, [pc, #36]	; (800ee34 <hci_user_evt_proc+0x90>)
 800ee10:	f000 fdac 	bl	800f96c <LST_is_empty>
 800ee14:	4603      	mov	r3, r0
 800ee16:	2b00      	cmp	r3, #0
 800ee18:	d107      	bne.n	800ee2a <hci_user_evt_proc+0x86>
 800ee1a:	4b07      	ldr	r3, [pc, #28]	; (800ee38 <hci_user_evt_proc+0x94>)
 800ee1c:	781b      	ldrb	r3, [r3, #0]
 800ee1e:	2b00      	cmp	r3, #0
 800ee20:	d003      	beq.n	800ee2a <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 800ee22:	4804      	ldr	r0, [pc, #16]	; (800ee34 <hci_user_evt_proc+0x90>)
 800ee24:	f001 ff18 	bl	8010c58 <hci_notify_asynch_evt>
  }


  return;
 800ee28:	bf00      	nop
 800ee2a:	bf00      	nop
}
 800ee2c:	3710      	adds	r7, #16
 800ee2e:	46bd      	mov	sp, r7
 800ee30:	bd80      	pop	{r7, pc}
 800ee32:	bf00      	nop
 800ee34:	20000224 	.word	0x20000224
 800ee38:	20000230 	.word	0x20000230
 800ee3c:	20000b90 	.word	0x20000b90

0800ee40 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 800ee40:	b580      	push	{r7, lr}
 800ee42:	b088      	sub	sp, #32
 800ee44:	af00      	add	r7, sp, #0
 800ee46:	6078      	str	r0, [r7, #4]
 800ee48:	460b      	mov	r3, r1
 800ee4a:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 800ee4c:	2000      	movs	r0, #0
 800ee4e:	f000 f8cb 	bl	800efe8 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 800ee52:	2300      	movs	r3, #0
 800ee54:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	885b      	ldrh	r3, [r3, #2]
 800ee5a:	b21b      	sxth	r3, r3
 800ee5c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ee60:	b21a      	sxth	r2, r3
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	881b      	ldrh	r3, [r3, #0]
 800ee66:	029b      	lsls	r3, r3, #10
 800ee68:	b21b      	sxth	r3, r3
 800ee6a:	4313      	orrs	r3, r2
 800ee6c:	b21b      	sxth	r3, r3
 800ee6e:	83bb      	strh	r3, [r7, #28]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	68db      	ldr	r3, [r3, #12]
 800ee74:	b2d9      	uxtb	r1, r3
 800ee76:	687b      	ldr	r3, [r7, #4]
 800ee78:	689a      	ldr	r2, [r3, #8]
 800ee7a:	8bbb      	ldrh	r3, [r7, #28]
 800ee7c:	4618      	mov	r0, r3
 800ee7e:	f000 f88d 	bl	800ef9c <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 800ee82:	e04e      	b.n	800ef22 <hci_send_req+0xe2>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 800ee84:	f248 00e8 	movw	r0, #33000	; 0x80e8
 800ee88:	f001 fefd 	bl	8010c86 <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800ee8c:	e043      	b.n	800ef16 <hci_send_req+0xd6>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 800ee8e:	f107 030c 	add.w	r3, r7, #12
 800ee92:	4619      	mov	r1, r3
 800ee94:	4828      	ldr	r0, [pc, #160]	; (800ef38 <hci_send_req+0xf8>)
 800ee96:	f000 fdf8 	bl	800fa8a <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 800ee9a:	68fb      	ldr	r3, [r7, #12]
 800ee9c:	7a5b      	ldrb	r3, [r3, #9]
 800ee9e:	2b0f      	cmp	r3, #15
 800eea0:	d114      	bne.n	800eecc <hci_send_req+0x8c>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 800eea2:	68fb      	ldr	r3, [r7, #12]
 800eea4:	330b      	adds	r3, #11
 800eea6:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 800eea8:	693b      	ldr	r3, [r7, #16]
 800eeaa:	885b      	ldrh	r3, [r3, #2]
 800eeac:	b29b      	uxth	r3, r3
 800eeae:	8bba      	ldrh	r2, [r7, #28]
 800eeb0:	429a      	cmp	r2, r3
 800eeb2:	d104      	bne.n	800eebe <hci_send_req+0x7e>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	691b      	ldr	r3, [r3, #16]
 800eeb8:	693a      	ldr	r2, [r7, #16]
 800eeba:	7812      	ldrb	r2, [r2, #0]
 800eebc:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 800eebe:	693b      	ldr	r3, [r7, #16]
 800eec0:	785b      	ldrb	r3, [r3, #1]
 800eec2:	2b00      	cmp	r3, #0
 800eec4:	d027      	beq.n	800ef16 <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800eec6:	2301      	movs	r3, #1
 800eec8:	77fb      	strb	r3, [r7, #31]
 800eeca:	e024      	b.n	800ef16 <hci_send_req+0xd6>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 800eecc:	68fb      	ldr	r3, [r7, #12]
 800eece:	330b      	adds	r3, #11
 800eed0:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 800eed2:	69bb      	ldr	r3, [r7, #24]
 800eed4:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800eed8:	b29b      	uxth	r3, r3
 800eeda:	8bba      	ldrh	r2, [r7, #28]
 800eedc:	429a      	cmp	r2, r3
 800eede:	d114      	bne.n	800ef0a <hci_send_req+0xca>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 800eee0:	68fb      	ldr	r3, [r7, #12]
 800eee2:	7a9b      	ldrb	r3, [r3, #10]
 800eee4:	3b03      	subs	r3, #3
 800eee6:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	695a      	ldr	r2, [r3, #20]
 800eeec:	7dfb      	ldrb	r3, [r7, #23]
 800eeee:	429a      	cmp	r2, r3
 800eef0:	bfa8      	it	ge
 800eef2:	461a      	movge	r2, r3
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	6918      	ldr	r0, [r3, #16]
 800eefc:	69bb      	ldr	r3, [r7, #24]
 800eefe:	1cd9      	adds	r1, r3, #3
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	695b      	ldr	r3, [r3, #20]
 800ef04:	461a      	mov	r2, r3
 800ef06:	f004 f8c3 	bl	8013090 <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 800ef0a:	69bb      	ldr	r3, [r7, #24]
 800ef0c:	781b      	ldrb	r3, [r3, #0]
 800ef0e:	2b00      	cmp	r3, #0
 800ef10:	d001      	beq.n	800ef16 <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800ef12:	2301      	movs	r3, #1
 800ef14:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800ef16:	4808      	ldr	r0, [pc, #32]	; (800ef38 <hci_send_req+0xf8>)
 800ef18:	f000 fd28 	bl	800f96c <LST_is_empty>
 800ef1c:	4603      	mov	r3, r0
 800ef1e:	2b00      	cmp	r3, #0
 800ef20:	d0b5      	beq.n	800ee8e <hci_send_req+0x4e>
  while(local_cmd_status == HCI_TL_CmdBusy)
 800ef22:	7ffb      	ldrb	r3, [r7, #31]
 800ef24:	2b00      	cmp	r3, #0
 800ef26:	d0ad      	beq.n	800ee84 <hci_send_req+0x44>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 800ef28:	2001      	movs	r0, #1
 800ef2a:	f000 f85d 	bl	800efe8 <NotifyCmdStatus>

  return 0;
 800ef2e:	2300      	movs	r3, #0
}
 800ef30:	4618      	mov	r0, r3
 800ef32:	3720      	adds	r7, #32
 800ef34:	46bd      	mov	sp, r7
 800ef36:	bd80      	pop	{r7, pc}
 800ef38:	20000bb0 	.word	0x20000bb0

0800ef3c <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800ef3c:	b580      	push	{r7, lr}
 800ef3e:	b086      	sub	sp, #24
 800ef40:	af00      	add	r7, sp, #0
 800ef42:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 800ef44:	480f      	ldr	r0, [pc, #60]	; (800ef84 <TlInit+0x48>)
 800ef46:	f000 fd01 	bl	800f94c <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 800ef4a:	4a0f      	ldr	r2, [pc, #60]	; (800ef88 <TlInit+0x4c>)
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 800ef50:	480e      	ldr	r0, [pc, #56]	; (800ef8c <TlInit+0x50>)
 800ef52:	f000 fcfb 	bl	800f94c <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800ef56:	4b0e      	ldr	r3, [pc, #56]	; (800ef90 <TlInit+0x54>)
 800ef58:	2201      	movs	r2, #1
 800ef5a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 800ef5c:	4b0d      	ldr	r3, [pc, #52]	; (800ef94 <TlInit+0x58>)
 800ef5e:	681b      	ldr	r3, [r3, #0]
 800ef60:	2b00      	cmp	r3, #0
 800ef62:	d00a      	beq.n	800ef7a <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 800ef68:	4b0b      	ldr	r3, [pc, #44]	; (800ef98 <TlInit+0x5c>)
 800ef6a:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 800ef6c:	4b09      	ldr	r3, [pc, #36]	; (800ef94 <TlInit+0x58>)
 800ef6e:	681b      	ldr	r3, [r3, #0]
 800ef70:	f107 0208 	add.w	r2, r7, #8
 800ef74:	4610      	mov	r0, r2
 800ef76:	4798      	blx	r3
  }

  return;
 800ef78:	bf00      	nop
 800ef7a:	bf00      	nop
}
 800ef7c:	3718      	adds	r7, #24
 800ef7e:	46bd      	mov	sp, r7
 800ef80:	bd80      	pop	{r7, pc}
 800ef82:	bf00      	nop
 800ef84:	20000bb0 	.word	0x20000bb0
 800ef88:	2000022c 	.word	0x2000022c
 800ef8c:	20000224 	.word	0x20000224
 800ef90:	20000230 	.word	0x20000230
 800ef94:	20000b90 	.word	0x20000b90
 800ef98:	0800f029 	.word	0x0800f029

0800ef9c <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 800ef9c:	b580      	push	{r7, lr}
 800ef9e:	b082      	sub	sp, #8
 800efa0:	af00      	add	r7, sp, #0
 800efa2:	4603      	mov	r3, r0
 800efa4:	603a      	str	r2, [r7, #0]
 800efa6:	80fb      	strh	r3, [r7, #6]
 800efa8:	460b      	mov	r3, r1
 800efaa:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 800efac:	4b0c      	ldr	r3, [pc, #48]	; (800efe0 <SendCmd+0x44>)
 800efae:	681b      	ldr	r3, [r3, #0]
 800efb0:	88fa      	ldrh	r2, [r7, #6]
 800efb2:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 800efb6:	4b0a      	ldr	r3, [pc, #40]	; (800efe0 <SendCmd+0x44>)
 800efb8:	681b      	ldr	r3, [r3, #0]
 800efba:	797a      	ldrb	r2, [r7, #5]
 800efbc:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 800efbe:	4b08      	ldr	r3, [pc, #32]	; (800efe0 <SendCmd+0x44>)
 800efc0:	681b      	ldr	r3, [r3, #0]
 800efc2:	330c      	adds	r3, #12
 800efc4:	797a      	ldrb	r2, [r7, #5]
 800efc6:	6839      	ldr	r1, [r7, #0]
 800efc8:	4618      	mov	r0, r3
 800efca:	f004 f861 	bl	8013090 <memcpy>

  hciContext.io.Send(0,0);
 800efce:	4b05      	ldr	r3, [pc, #20]	; (800efe4 <SendCmd+0x48>)
 800efd0:	691b      	ldr	r3, [r3, #16]
 800efd2:	2100      	movs	r1, #0
 800efd4:	2000      	movs	r0, #0
 800efd6:	4798      	blx	r3

  return;
 800efd8:	bf00      	nop
}
 800efda:	3708      	adds	r7, #8
 800efdc:	46bd      	mov	sp, r7
 800efde:	bd80      	pop	{r7, pc}
 800efe0:	2000022c 	.word	0x2000022c
 800efe4:	20000b90 	.word	0x20000b90

0800efe8 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 800efe8:	b580      	push	{r7, lr}
 800efea:	b082      	sub	sp, #8
 800efec:	af00      	add	r7, sp, #0
 800efee:	4603      	mov	r3, r0
 800eff0:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 800eff2:	79fb      	ldrb	r3, [r7, #7]
 800eff4:	2b00      	cmp	r3, #0
 800eff6:	d108      	bne.n	800f00a <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 800eff8:	4b0a      	ldr	r3, [pc, #40]	; (800f024 <NotifyCmdStatus+0x3c>)
 800effa:	681b      	ldr	r3, [r3, #0]
 800effc:	2b00      	cmp	r3, #0
 800effe:	d00d      	beq.n	800f01c <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 800f000:	4b08      	ldr	r3, [pc, #32]	; (800f024 <NotifyCmdStatus+0x3c>)
 800f002:	681b      	ldr	r3, [r3, #0]
 800f004:	2000      	movs	r0, #0
 800f006:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 800f008:	e008      	b.n	800f01c <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 800f00a:	4b06      	ldr	r3, [pc, #24]	; (800f024 <NotifyCmdStatus+0x3c>)
 800f00c:	681b      	ldr	r3, [r3, #0]
 800f00e:	2b00      	cmp	r3, #0
 800f010:	d004      	beq.n	800f01c <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 800f012:	4b04      	ldr	r3, [pc, #16]	; (800f024 <NotifyCmdStatus+0x3c>)
 800f014:	681b      	ldr	r3, [r3, #0]
 800f016:	2001      	movs	r0, #1
 800f018:	4798      	blx	r3
  return;
 800f01a:	bf00      	nop
 800f01c:	bf00      	nop
}
 800f01e:	3708      	adds	r7, #8
 800f020:	46bd      	mov	sp, r7
 800f022:	bd80      	pop	{r7, pc}
 800f024:	20000bb8 	.word	0x20000bb8

0800f028 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 800f028:	b580      	push	{r7, lr}
 800f02a:	b082      	sub	sp, #8
 800f02c:	af00      	add	r7, sp, #0
 800f02e:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	7a5b      	ldrb	r3, [r3, #9]
 800f034:	2b0f      	cmp	r3, #15
 800f036:	d003      	beq.n	800f040 <TlEvtReceived+0x18>
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	7a5b      	ldrb	r3, [r3, #9]
 800f03c:	2b0e      	cmp	r3, #14
 800f03e:	d107      	bne.n	800f050 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 800f040:	6879      	ldr	r1, [r7, #4]
 800f042:	4809      	ldr	r0, [pc, #36]	; (800f068 <TlEvtReceived+0x40>)
 800f044:	f000 fcda 	bl	800f9fc <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 800f048:	2000      	movs	r0, #0
 800f04a:	f001 fe11 	bl	8010c70 <hci_cmd_resp_release>
 800f04e:	e006      	b.n	800f05e <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 800f050:	6879      	ldr	r1, [r7, #4]
 800f052:	4806      	ldr	r0, [pc, #24]	; (800f06c <TlEvtReceived+0x44>)
 800f054:	f000 fcd2 	bl	800f9fc <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800f058:	4804      	ldr	r0, [pc, #16]	; (800f06c <TlEvtReceived+0x44>)
 800f05a:	f001 fdfd 	bl	8010c58 <hci_notify_asynch_evt>
  }

  return;
 800f05e:	bf00      	nop
}
 800f060:	3708      	adds	r7, #8
 800f062:	46bd      	mov	sp, r7
 800f064:	bd80      	pop	{r7, pc}
 800f066:	bf00      	nop
 800f068:	20000bb0 	.word	0x20000bb0
 800f06c:	20000224 	.word	0x20000224

0800f070 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 800f070:	b480      	push	{r7}
 800f072:	b083      	sub	sp, #12
 800f074:	af00      	add	r7, sp, #0
 800f076:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	4a05      	ldr	r2, [pc, #20]	; (800f090 <hci_register_io_bus+0x20>)
 800f07c:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	4a04      	ldr	r2, [pc, #16]	; (800f094 <hci_register_io_bus+0x24>)
 800f082:	611a      	str	r2, [r3, #16]

  return;
 800f084:	bf00      	nop
}
 800f086:	370c      	adds	r7, #12
 800f088:	46bd      	mov	sp, r7
 800f08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f08e:	4770      	bx	lr
 800f090:	0800f381 	.word	0x0800f381
 800f094:	0800f3e9 	.word	0x0800f3e9

0800f098 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800f098:	b580      	push	{r7, lr}
 800f09a:	b082      	sub	sp, #8
 800f09c:	af00      	add	r7, sp, #0
 800f09e:	6078      	str	r0, [r7, #4]
 800f0a0:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800f0a2:	683b      	ldr	r3, [r7, #0]
 800f0a4:	685b      	ldr	r3, [r3, #4]
 800f0a6:	4a08      	ldr	r2, [pc, #32]	; (800f0c8 <shci_init+0x30>)
 800f0a8:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 800f0aa:	4a08      	ldr	r2, [pc, #32]	; (800f0cc <shci_init+0x34>)
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 800f0b0:	4806      	ldr	r0, [pc, #24]	; (800f0cc <shci_init+0x34>)
 800f0b2:	f000 f911 	bl	800f2d8 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800f0b6:	683b      	ldr	r3, [r7, #0]
 800f0b8:	681b      	ldr	r3, [r3, #0]
 800f0ba:	4618      	mov	r0, r3
 800f0bc:	f000 f894 	bl	800f1e8 <TlInit>

  return;
 800f0c0:	bf00      	nop
}
 800f0c2:	3708      	adds	r7, #8
 800f0c4:	46bd      	mov	sp, r7
 800f0c6:	bd80      	pop	{r7, pc}
 800f0c8:	20000bdc 	.word	0x20000bdc
 800f0cc:	20000bbc 	.word	0x20000bbc

0800f0d0 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 800f0d0:	b580      	push	{r7, lr}
 800f0d2:	b084      	sub	sp, #16
 800f0d4:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800f0d6:	4822      	ldr	r0, [pc, #136]	; (800f160 <shci_user_evt_proc+0x90>)
 800f0d8:	f000 fc48 	bl	800f96c <LST_is_empty>
 800f0dc:	4603      	mov	r3, r0
 800f0de:	2b00      	cmp	r3, #0
 800f0e0:	d12b      	bne.n	800f13a <shci_user_evt_proc+0x6a>
 800f0e2:	4b20      	ldr	r3, [pc, #128]	; (800f164 <shci_user_evt_proc+0x94>)
 800f0e4:	781b      	ldrb	r3, [r3, #0]
 800f0e6:	2b00      	cmp	r3, #0
 800f0e8:	d027      	beq.n	800f13a <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800f0ea:	f107 030c 	add.w	r3, r7, #12
 800f0ee:	4619      	mov	r1, r3
 800f0f0:	481b      	ldr	r0, [pc, #108]	; (800f160 <shci_user_evt_proc+0x90>)
 800f0f2:	f000 fcca 	bl	800fa8a <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 800f0f6:	4b1c      	ldr	r3, [pc, #112]	; (800f168 <shci_user_evt_proc+0x98>)
 800f0f8:	69db      	ldr	r3, [r3, #28]
 800f0fa:	2b00      	cmp	r3, #0
 800f0fc:	d00c      	beq.n	800f118 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800f0fe:	68fb      	ldr	r3, [r7, #12]
 800f100:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 800f102:	2301      	movs	r3, #1
 800f104:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 800f106:	4b18      	ldr	r3, [pc, #96]	; (800f168 <shci_user_evt_proc+0x98>)
 800f108:	69db      	ldr	r3, [r3, #28]
 800f10a:	1d3a      	adds	r2, r7, #4
 800f10c:	4610      	mov	r0, r2
 800f10e:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 800f110:	793a      	ldrb	r2, [r7, #4]
 800f112:	4b14      	ldr	r3, [pc, #80]	; (800f164 <shci_user_evt_proc+0x94>)
 800f114:	701a      	strb	r2, [r3, #0]
 800f116:	e002      	b.n	800f11e <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800f118:	4b12      	ldr	r3, [pc, #72]	; (800f164 <shci_user_evt_proc+0x94>)
 800f11a:	2201      	movs	r2, #1
 800f11c:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 800f11e:	4b11      	ldr	r3, [pc, #68]	; (800f164 <shci_user_evt_proc+0x94>)
 800f120:	781b      	ldrb	r3, [r3, #0]
 800f122:	2b00      	cmp	r3, #0
 800f124:	d004      	beq.n	800f130 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800f126:	68fb      	ldr	r3, [r7, #12]
 800f128:	4618      	mov	r0, r3
 800f12a:	f000 fa6d 	bl	800f608 <TL_MM_EvtDone>
 800f12e:	e004      	b.n	800f13a <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800f130:	68fb      	ldr	r3, [r7, #12]
 800f132:	4619      	mov	r1, r3
 800f134:	480a      	ldr	r0, [pc, #40]	; (800f160 <shci_user_evt_proc+0x90>)
 800f136:	f000 fc3b 	bl	800f9b0 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800f13a:	4809      	ldr	r0, [pc, #36]	; (800f160 <shci_user_evt_proc+0x90>)
 800f13c:	f000 fc16 	bl	800f96c <LST_is_empty>
 800f140:	4603      	mov	r3, r0
 800f142:	2b00      	cmp	r3, #0
 800f144:	d107      	bne.n	800f156 <shci_user_evt_proc+0x86>
 800f146:	4b07      	ldr	r3, [pc, #28]	; (800f164 <shci_user_evt_proc+0x94>)
 800f148:	781b      	ldrb	r3, [r3, #0]
 800f14a:	2b00      	cmp	r3, #0
 800f14c:	d003      	beq.n	800f156 <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 800f14e:	4804      	ldr	r0, [pc, #16]	; (800f160 <shci_user_evt_proc+0x90>)
 800f150:	f7f2 fc3b 	bl	80019ca <shci_notify_asynch_evt>
  }


  return;
 800f154:	bf00      	nop
 800f156:	bf00      	nop
}
 800f158:	3710      	adds	r7, #16
 800f15a:	46bd      	mov	sp, r7
 800f15c:	bd80      	pop	{r7, pc}
 800f15e:	bf00      	nop
 800f160:	20000234 	.word	0x20000234
 800f164:	20000244 	.word	0x20000244
 800f168:	20000bbc 	.word	0x20000bbc

0800f16c <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 800f16c:	b580      	push	{r7, lr}
 800f16e:	b084      	sub	sp, #16
 800f170:	af00      	add	r7, sp, #0
 800f172:	60ba      	str	r2, [r7, #8]
 800f174:	607b      	str	r3, [r7, #4]
 800f176:	4603      	mov	r3, r0
 800f178:	81fb      	strh	r3, [r7, #14]
 800f17a:	460b      	mov	r3, r1
 800f17c:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 800f17e:	2000      	movs	r0, #0
 800f180:	f000 f864 	bl	800f24c <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 800f184:	4b16      	ldr	r3, [pc, #88]	; (800f1e0 <shci_send+0x74>)
 800f186:	681b      	ldr	r3, [r3, #0]
 800f188:	89fa      	ldrh	r2, [r7, #14]
 800f18a:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 800f18e:	4b14      	ldr	r3, [pc, #80]	; (800f1e0 <shci_send+0x74>)
 800f190:	681b      	ldr	r3, [r3, #0]
 800f192:	7b7a      	ldrb	r2, [r7, #13]
 800f194:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 800f196:	4b12      	ldr	r3, [pc, #72]	; (800f1e0 <shci_send+0x74>)
 800f198:	681b      	ldr	r3, [r3, #0]
 800f19a:	330c      	adds	r3, #12
 800f19c:	7b7a      	ldrb	r2, [r7, #13]
 800f19e:	68b9      	ldr	r1, [r7, #8]
 800f1a0:	4618      	mov	r0, r3
 800f1a2:	f003 ff75 	bl	8013090 <memcpy>

  shciContext.io.Send(0,0);
 800f1a6:	4b0f      	ldr	r3, [pc, #60]	; (800f1e4 <shci_send+0x78>)
 800f1a8:	691b      	ldr	r3, [r3, #16]
 800f1aa:	2100      	movs	r1, #0
 800f1ac:	2000      	movs	r0, #0
 800f1ae:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 800f1b0:	f248 00e8 	movw	r0, #33000	; 0x80e8
 800f1b4:	f7f2 fc20 	bl	80019f8 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	f103 0008 	add.w	r0, r3, #8
 800f1be:	4b08      	ldr	r3, [pc, #32]	; (800f1e0 <shci_send+0x74>)
 800f1c0:	6819      	ldr	r1, [r3, #0]
 800f1c2:	4b07      	ldr	r3, [pc, #28]	; (800f1e0 <shci_send+0x74>)
 800f1c4:	681b      	ldr	r3, [r3, #0]
 800f1c6:	789b      	ldrb	r3, [r3, #2]
 800f1c8:	3303      	adds	r3, #3
 800f1ca:	461a      	mov	r2, r3
 800f1cc:	f003 ff60 	bl	8013090 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800f1d0:	2001      	movs	r0, #1
 800f1d2:	f000 f83b 	bl	800f24c <Cmd_SetStatus>

  return;
 800f1d6:	bf00      	nop
}
 800f1d8:	3710      	adds	r7, #16
 800f1da:	46bd      	mov	sp, r7
 800f1dc:	bd80      	pop	{r7, pc}
 800f1de:	bf00      	nop
 800f1e0:	20000240 	.word	0x20000240
 800f1e4:	20000bbc 	.word	0x20000bbc

0800f1e8 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800f1e8:	b580      	push	{r7, lr}
 800f1ea:	b086      	sub	sp, #24
 800f1ec:	af00      	add	r7, sp, #0
 800f1ee:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 800f1f0:	4a10      	ldr	r2, [pc, #64]	; (800f234 <TlInit+0x4c>)
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 800f1f6:	4810      	ldr	r0, [pc, #64]	; (800f238 <TlInit+0x50>)
 800f1f8:	f000 fba8 	bl	800f94c <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800f1fc:	2001      	movs	r0, #1
 800f1fe:	f000 f825 	bl	800f24c <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800f202:	4b0e      	ldr	r3, [pc, #56]	; (800f23c <TlInit+0x54>)
 800f204:	2201      	movs	r2, #1
 800f206:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 800f208:	4b0d      	ldr	r3, [pc, #52]	; (800f240 <TlInit+0x58>)
 800f20a:	681b      	ldr	r3, [r3, #0]
 800f20c:	2b00      	cmp	r3, #0
 800f20e:	d00c      	beq.n	800f22a <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 800f214:	4b0b      	ldr	r3, [pc, #44]	; (800f244 <TlInit+0x5c>)
 800f216:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 800f218:	4b0b      	ldr	r3, [pc, #44]	; (800f248 <TlInit+0x60>)
 800f21a:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 800f21c:	4b08      	ldr	r3, [pc, #32]	; (800f240 <TlInit+0x58>)
 800f21e:	681b      	ldr	r3, [r3, #0]
 800f220:	f107 020c 	add.w	r2, r7, #12
 800f224:	4610      	mov	r0, r2
 800f226:	4798      	blx	r3
  }

  return;
 800f228:	bf00      	nop
 800f22a:	bf00      	nop
}
 800f22c:	3718      	adds	r7, #24
 800f22e:	46bd      	mov	sp, r7
 800f230:	bd80      	pop	{r7, pc}
 800f232:	bf00      	nop
 800f234:	20000240 	.word	0x20000240
 800f238:	20000234 	.word	0x20000234
 800f23c:	20000244 	.word	0x20000244
 800f240:	20000bbc 	.word	0x20000bbc
 800f244:	0800f29d 	.word	0x0800f29d
 800f248:	0800f2b5 	.word	0x0800f2b5

0800f24c <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 800f24c:	b580      	push	{r7, lr}
 800f24e:	b082      	sub	sp, #8
 800f250:	af00      	add	r7, sp, #0
 800f252:	4603      	mov	r3, r0
 800f254:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 800f256:	79fb      	ldrb	r3, [r7, #7]
 800f258:	2b00      	cmp	r3, #0
 800f25a:	d10b      	bne.n	800f274 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 800f25c:	4b0d      	ldr	r3, [pc, #52]	; (800f294 <Cmd_SetStatus+0x48>)
 800f25e:	681b      	ldr	r3, [r3, #0]
 800f260:	2b00      	cmp	r3, #0
 800f262:	d003      	beq.n	800f26c <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 800f264:	4b0b      	ldr	r3, [pc, #44]	; (800f294 <Cmd_SetStatus+0x48>)
 800f266:	681b      	ldr	r3, [r3, #0]
 800f268:	2000      	movs	r0, #0
 800f26a:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 800f26c:	4b0a      	ldr	r3, [pc, #40]	; (800f298 <Cmd_SetStatus+0x4c>)
 800f26e:	2200      	movs	r2, #0
 800f270:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 800f272:	e00b      	b.n	800f28c <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 800f274:	4b08      	ldr	r3, [pc, #32]	; (800f298 <Cmd_SetStatus+0x4c>)
 800f276:	2201      	movs	r2, #1
 800f278:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 800f27a:	4b06      	ldr	r3, [pc, #24]	; (800f294 <Cmd_SetStatus+0x48>)
 800f27c:	681b      	ldr	r3, [r3, #0]
 800f27e:	2b00      	cmp	r3, #0
 800f280:	d004      	beq.n	800f28c <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 800f282:	4b04      	ldr	r3, [pc, #16]	; (800f294 <Cmd_SetStatus+0x48>)
 800f284:	681b      	ldr	r3, [r3, #0]
 800f286:	2001      	movs	r0, #1
 800f288:	4798      	blx	r3
  return;
 800f28a:	bf00      	nop
 800f28c:	bf00      	nop
}
 800f28e:	3708      	adds	r7, #8
 800f290:	46bd      	mov	sp, r7
 800f292:	bd80      	pop	{r7, pc}
 800f294:	20000bdc 	.word	0x20000bdc
 800f298:	2000023c 	.word	0x2000023c

0800f29c <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 800f29c:	b580      	push	{r7, lr}
 800f29e:	b082      	sub	sp, #8
 800f2a0:	af00      	add	r7, sp, #0
 800f2a2:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 800f2a4:	2000      	movs	r0, #0
 800f2a6:	f7f2 fb9c 	bl	80019e2 <shci_cmd_resp_release>

  return;
 800f2aa:	bf00      	nop
}
 800f2ac:	3708      	adds	r7, #8
 800f2ae:	46bd      	mov	sp, r7
 800f2b0:	bd80      	pop	{r7, pc}
	...

0800f2b4 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 800f2b4:	b580      	push	{r7, lr}
 800f2b6:	b082      	sub	sp, #8
 800f2b8:	af00      	add	r7, sp, #0
 800f2ba:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 800f2bc:	6879      	ldr	r1, [r7, #4]
 800f2be:	4805      	ldr	r0, [pc, #20]	; (800f2d4 <TlUserEvtReceived+0x20>)
 800f2c0:	f000 fb9c 	bl	800f9fc <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800f2c4:	4803      	ldr	r0, [pc, #12]	; (800f2d4 <TlUserEvtReceived+0x20>)
 800f2c6:	f7f2 fb80 	bl	80019ca <shci_notify_asynch_evt>

  return;
 800f2ca:	bf00      	nop
}
 800f2cc:	3708      	adds	r7, #8
 800f2ce:	46bd      	mov	sp, r7
 800f2d0:	bd80      	pop	{r7, pc}
 800f2d2:	bf00      	nop
 800f2d4:	20000234 	.word	0x20000234

0800f2d8 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 800f2d8:	b480      	push	{r7}
 800f2da:	b083      	sub	sp, #12
 800f2dc:	af00      	add	r7, sp, #0
 800f2de:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 800f2e0:	687b      	ldr	r3, [r7, #4]
 800f2e2:	4a05      	ldr	r2, [pc, #20]	; (800f2f8 <shci_register_io_bus+0x20>)
 800f2e4:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	4a04      	ldr	r2, [pc, #16]	; (800f2fc <shci_register_io_bus+0x24>)
 800f2ea:	611a      	str	r2, [r3, #16]

  return;
 800f2ec:	bf00      	nop
}
 800f2ee:	370c      	adds	r7, #12
 800f2f0:	46bd      	mov	sp, r7
 800f2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2f6:	4770      	bx	lr
 800f2f8:	0800f495 	.word	0x0800f495
 800f2fc:	0800f4e9 	.word	0x0800f4e9

0800f300 <TL_Enable>:

/******************************************************************************
 * GENERAL
 ******************************************************************************/
void TL_Enable( void )
{
 800f300:	b580      	push	{r7, lr}
 800f302:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 800f304:	f002 fc1e 	bl	8011b44 <HW_IPCC_Enable>

  return;
 800f308:	bf00      	nop
}
 800f30a:	bd80      	pop	{r7, pc}

0800f30c <TL_Init>:


void TL_Init( void )
{
 800f30c:	b580      	push	{r7, lr}
 800f30e:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 800f310:	4b10      	ldr	r3, [pc, #64]	; (800f354 <TL_Init+0x48>)
 800f312:	4a11      	ldr	r2, [pc, #68]	; (800f358 <TL_Init+0x4c>)
 800f314:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 800f316:	4b0f      	ldr	r3, [pc, #60]	; (800f354 <TL_Init+0x48>)
 800f318:	4a10      	ldr	r2, [pc, #64]	; (800f35c <TL_Init+0x50>)
 800f31a:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 800f31c:	4b0d      	ldr	r3, [pc, #52]	; (800f354 <TL_Init+0x48>)
 800f31e:	4a10      	ldr	r2, [pc, #64]	; (800f360 <TL_Init+0x54>)
 800f320:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 800f322:	4b0c      	ldr	r3, [pc, #48]	; (800f354 <TL_Init+0x48>)
 800f324:	4a0f      	ldr	r2, [pc, #60]	; (800f364 <TL_Init+0x58>)
 800f326:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 800f328:	4b0a      	ldr	r3, [pc, #40]	; (800f354 <TL_Init+0x48>)
 800f32a:	4a0f      	ldr	r2, [pc, #60]	; (800f368 <TL_Init+0x5c>)
 800f32c:	625a      	str	r2, [r3, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 800f32e:	4b09      	ldr	r3, [pc, #36]	; (800f354 <TL_Init+0x48>)
 800f330:	4a0e      	ldr	r2, [pc, #56]	; (800f36c <TL_Init+0x60>)
 800f332:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 800f334:	4b07      	ldr	r3, [pc, #28]	; (800f354 <TL_Init+0x48>)
 800f336:	4a0e      	ldr	r2, [pc, #56]	; (800f370 <TL_Init+0x64>)
 800f338:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 800f33a:	4b06      	ldr	r3, [pc, #24]	; (800f354 <TL_Init+0x48>)
 800f33c:	4a0d      	ldr	r2, [pc, #52]	; (800f374 <TL_Init+0x68>)
 800f33e:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 800f340:	4b04      	ldr	r3, [pc, #16]	; (800f354 <TL_Init+0x48>)
 800f342:	4a0d      	ldr	r2, [pc, #52]	; (800f378 <TL_Init+0x6c>)
 800f344:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 800f346:	4b03      	ldr	r3, [pc, #12]	; (800f354 <TL_Init+0x48>)
 800f348:	4a0c      	ldr	r2, [pc, #48]	; (800f37c <TL_Init+0x70>)
 800f34a:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 800f34c:	f002 fc0e 	bl	8011b6c <HW_IPCC_Init>

  return;
 800f350:	bf00      	nop
}
 800f352:	bd80      	pop	{r7, pc}
 800f354:	20030000 	.word	0x20030000
 800f358:	20030028 	.word	0x20030028
 800f35c:	20030048 	.word	0x20030048
 800f360:	20030058 	.word	0x20030058
 800f364:	20030068 	.word	0x20030068
 800f368:	20030070 	.word	0x20030070
 800f36c:	20030078 	.word	0x20030078
 800f370:	20030080 	.word	0x20030080
 800f374:	2003009c 	.word	0x2003009c
 800f378:	200300a0 	.word	0x200300a0
 800f37c:	200300ac 	.word	0x200300ac

0800f380 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 800f380:	b580      	push	{r7, lr}
 800f382:	b084      	sub	sp, #16
 800f384:	af00      	add	r7, sp, #0
 800f386:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 800f38c:	4811      	ldr	r0, [pc, #68]	; (800f3d4 <TL_BLE_Init+0x54>)
 800f38e:	f000 fadd 	bl	800f94c <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 800f392:	4b11      	ldr	r3, [pc, #68]	; (800f3d8 <TL_BLE_Init+0x58>)
 800f394:	685b      	ldr	r3, [r3, #4]
 800f396:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800f398:	68fb      	ldr	r3, [r7, #12]
 800f39a:	689a      	ldr	r2, [r3, #8]
 800f39c:	68bb      	ldr	r3, [r7, #8]
 800f39e:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 800f3a0:	68fb      	ldr	r3, [r7, #12]
 800f3a2:	68da      	ldr	r2, [r3, #12]
 800f3a4:	68bb      	ldr	r3, [r7, #8]
 800f3a6:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 800f3a8:	68bb      	ldr	r3, [r7, #8]
 800f3aa:	4a0c      	ldr	r2, [pc, #48]	; (800f3dc <TL_BLE_Init+0x5c>)
 800f3ac:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 800f3ae:	68bb      	ldr	r3, [r7, #8]
 800f3b0:	4a08      	ldr	r2, [pc, #32]	; (800f3d4 <TL_BLE_Init+0x54>)
 800f3b2:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 800f3b4:	f002 fbf0 	bl	8011b98 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 800f3b8:	68fb      	ldr	r3, [r7, #12]
 800f3ba:	681b      	ldr	r3, [r3, #0]
 800f3bc:	4a08      	ldr	r2, [pc, #32]	; (800f3e0 <TL_BLE_Init+0x60>)
 800f3be:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 800f3c0:	68fb      	ldr	r3, [r7, #12]
 800f3c2:	685b      	ldr	r3, [r3, #4]
 800f3c4:	4a07      	ldr	r2, [pc, #28]	; (800f3e4 <TL_BLE_Init+0x64>)
 800f3c6:	6013      	str	r3, [r2, #0]

  return 0;
 800f3c8:	2300      	movs	r3, #0
}
 800f3ca:	4618      	mov	r0, r3
 800f3cc:	3710      	adds	r7, #16
 800f3ce:	46bd      	mov	sp, r7
 800f3d0:	bd80      	pop	{r7, pc}
 800f3d2:	bf00      	nop
 800f3d4:	200300c8 	.word	0x200300c8
 800f3d8:	20030000 	.word	0x20030000
 800f3dc:	20030a58 	.word	0x20030a58
 800f3e0:	20000be8 	.word	0x20000be8
 800f3e4:	20000bec 	.word	0x20000bec

0800f3e8 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 800f3e8:	b580      	push	{r7, lr}
 800f3ea:	b082      	sub	sp, #8
 800f3ec:	af00      	add	r7, sp, #0
 800f3ee:	6078      	str	r0, [r7, #4]
 800f3f0:	460b      	mov	r3, r1
 800f3f2:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 800f3f4:	4b09      	ldr	r3, [pc, #36]	; (800f41c <TL_BLE_SendCmd+0x34>)
 800f3f6:	685b      	ldr	r3, [r3, #4]
 800f3f8:	681b      	ldr	r3, [r3, #0]
 800f3fa:	2201      	movs	r2, #1
 800f3fc:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 800f3fe:	4b07      	ldr	r3, [pc, #28]	; (800f41c <TL_BLE_SendCmd+0x34>)
 800f400:	685b      	ldr	r3, [r3, #4]
 800f402:	681b      	ldr	r3, [r3, #0]
 800f404:	4619      	mov	r1, r3
 800f406:	2001      	movs	r0, #1
 800f408:	f000 f96c 	bl	800f6e4 <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 800f40c:	f002 fbce 	bl	8011bac <HW_IPCC_BLE_SendCmd>

  return 0;
 800f410:	2300      	movs	r3, #0
}
 800f412:	4618      	mov	r0, r3
 800f414:	3708      	adds	r7, #8
 800f416:	46bd      	mov	sp, r7
 800f418:	bd80      	pop	{r7, pc}
 800f41a:	bf00      	nop
 800f41c:	20030000 	.word	0x20030000

0800f420 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 800f420:	b580      	push	{r7, lr}
 800f422:	b082      	sub	sp, #8
 800f424:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 800f426:	e01c      	b.n	800f462 <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 800f428:	1d3b      	adds	r3, r7, #4
 800f42a:	4619      	mov	r1, r3
 800f42c:	4812      	ldr	r0, [pc, #72]	; (800f478 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800f42e:	f000 fb2c 	bl	800fa8a <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	7a5b      	ldrb	r3, [r3, #9]
 800f436:	2b0f      	cmp	r3, #15
 800f438:	d003      	beq.n	800f442 <HW_IPCC_BLE_RxEvtNot+0x22>
 800f43a:	687b      	ldr	r3, [r7, #4]
 800f43c:	7a5b      	ldrb	r3, [r3, #9]
 800f43e:	2b0e      	cmp	r3, #14
 800f440:	d105      	bne.n	800f44e <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 800f442:	687b      	ldr	r3, [r7, #4]
 800f444:	4619      	mov	r1, r3
 800f446:	2002      	movs	r0, #2
 800f448:	f000 f94c 	bl	800f6e4 <OutputDbgTrace>
 800f44c:	e004      	b.n	800f458 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 800f44e:	687b      	ldr	r3, [r7, #4]
 800f450:	4619      	mov	r1, r3
 800f452:	2003      	movs	r0, #3
 800f454:	f000 f946 	bl	800f6e4 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 800f458:	4b08      	ldr	r3, [pc, #32]	; (800f47c <HW_IPCC_BLE_RxEvtNot+0x5c>)
 800f45a:	681b      	ldr	r3, [r3, #0]
 800f45c:	687a      	ldr	r2, [r7, #4]
 800f45e:	4610      	mov	r0, r2
 800f460:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 800f462:	4805      	ldr	r0, [pc, #20]	; (800f478 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800f464:	f000 fa82 	bl	800f96c <LST_is_empty>
 800f468:	4603      	mov	r3, r0
 800f46a:	2b00      	cmp	r3, #0
 800f46c:	d0dc      	beq.n	800f428 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 800f46e:	bf00      	nop
}
 800f470:	3708      	adds	r7, #8
 800f472:	46bd      	mov	sp, r7
 800f474:	bd80      	pop	{r7, pc}
 800f476:	bf00      	nop
 800f478:	200300c8 	.word	0x200300c8
 800f47c:	20000be8 	.word	0x20000be8

0800f480 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 800f480:	b580      	push	{r7, lr}
 800f482:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 800f484:	4b02      	ldr	r3, [pc, #8]	; (800f490 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 800f486:	681b      	ldr	r3, [r3, #0]
 800f488:	4798      	blx	r3

  return;
 800f48a:	bf00      	nop
}
 800f48c:	bd80      	pop	{r7, pc}
 800f48e:	bf00      	nop
 800f490:	20000bec 	.word	0x20000bec

0800f494 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 800f494:	b580      	push	{r7, lr}
 800f496:	b084      	sub	sp, #16
 800f498:	af00      	add	r7, sp, #0
 800f49a:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 800f4a0:	480d      	ldr	r0, [pc, #52]	; (800f4d8 <TL_SYS_Init+0x44>)
 800f4a2:	f000 fa53 	bl	800f94c <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 800f4a6:	4b0d      	ldr	r3, [pc, #52]	; (800f4dc <TL_SYS_Init+0x48>)
 800f4a8:	68db      	ldr	r3, [r3, #12]
 800f4aa:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800f4ac:	68fb      	ldr	r3, [r7, #12]
 800f4ae:	689a      	ldr	r2, [r3, #8]
 800f4b0:	68bb      	ldr	r3, [r7, #8]
 800f4b2:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 800f4b4:	68bb      	ldr	r3, [r7, #8]
 800f4b6:	4a08      	ldr	r2, [pc, #32]	; (800f4d8 <TL_SYS_Init+0x44>)
 800f4b8:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 800f4ba:	f002 fb99 	bl	8011bf0 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 800f4be:	68fb      	ldr	r3, [r7, #12]
 800f4c0:	681b      	ldr	r3, [r3, #0]
 800f4c2:	4a07      	ldr	r2, [pc, #28]	; (800f4e0 <TL_SYS_Init+0x4c>)
 800f4c4:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 800f4c6:	68fb      	ldr	r3, [r7, #12]
 800f4c8:	685b      	ldr	r3, [r3, #4]
 800f4ca:	4a06      	ldr	r2, [pc, #24]	; (800f4e4 <TL_SYS_Init+0x50>)
 800f4cc:	6013      	str	r3, [r2, #0]

  return 0;
 800f4ce:	2300      	movs	r3, #0
}
 800f4d0:	4618      	mov	r0, r3
 800f4d2:	3710      	adds	r7, #16
 800f4d4:	46bd      	mov	sp, r7
 800f4d6:	bd80      	pop	{r7, pc}
 800f4d8:	200300d0 	.word	0x200300d0
 800f4dc:	20030000 	.word	0x20030000
 800f4e0:	20000bf0 	.word	0x20000bf0
 800f4e4:	20000bf4 	.word	0x20000bf4

0800f4e8 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 800f4e8:	b580      	push	{r7, lr}
 800f4ea:	b082      	sub	sp, #8
 800f4ec:	af00      	add	r7, sp, #0
 800f4ee:	6078      	str	r0, [r7, #4]
 800f4f0:	460b      	mov	r3, r1
 800f4f2:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 800f4f4:	4b09      	ldr	r3, [pc, #36]	; (800f51c <TL_SYS_SendCmd+0x34>)
 800f4f6:	68db      	ldr	r3, [r3, #12]
 800f4f8:	681b      	ldr	r3, [r3, #0]
 800f4fa:	2210      	movs	r2, #16
 800f4fc:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 800f4fe:	4b07      	ldr	r3, [pc, #28]	; (800f51c <TL_SYS_SendCmd+0x34>)
 800f500:	68db      	ldr	r3, [r3, #12]
 800f502:	681b      	ldr	r3, [r3, #0]
 800f504:	4619      	mov	r1, r3
 800f506:	2004      	movs	r0, #4
 800f508:	f000 f8ec 	bl	800f6e4 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 800f50c:	f002 fb7a 	bl	8011c04 <HW_IPCC_SYS_SendCmd>

  return 0;
 800f510:	2300      	movs	r3, #0
}
 800f512:	4618      	mov	r0, r3
 800f514:	3708      	adds	r7, #8
 800f516:	46bd      	mov	sp, r7
 800f518:	bd80      	pop	{r7, pc}
 800f51a:	bf00      	nop
 800f51c:	20030000 	.word	0x20030000

0800f520 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 800f520:	b580      	push	{r7, lr}
 800f522:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800f524:	4b07      	ldr	r3, [pc, #28]	; (800f544 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800f526:	68db      	ldr	r3, [r3, #12]
 800f528:	681b      	ldr	r3, [r3, #0]
 800f52a:	4619      	mov	r1, r3
 800f52c:	2005      	movs	r0, #5
 800f52e:	f000 f8d9 	bl	800f6e4 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800f532:	4b05      	ldr	r3, [pc, #20]	; (800f548 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 800f534:	681b      	ldr	r3, [r3, #0]
 800f536:	4a03      	ldr	r2, [pc, #12]	; (800f544 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800f538:	68d2      	ldr	r2, [r2, #12]
 800f53a:	6812      	ldr	r2, [r2, #0]
 800f53c:	4610      	mov	r0, r2
 800f53e:	4798      	blx	r3

  return;
 800f540:	bf00      	nop
}
 800f542:	bd80      	pop	{r7, pc}
 800f544:	20030000 	.word	0x20030000
 800f548:	20000bf0 	.word	0x20000bf0

0800f54c <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 800f54c:	b580      	push	{r7, lr}
 800f54e:	b082      	sub	sp, #8
 800f550:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800f552:	e00e      	b.n	800f572 <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 800f554:	1d3b      	adds	r3, r7, #4
 800f556:	4619      	mov	r1, r3
 800f558:	480b      	ldr	r0, [pc, #44]	; (800f588 <HW_IPCC_SYS_EvtNot+0x3c>)
 800f55a:	f000 fa96 	bl	800fa8a <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 800f55e:	687b      	ldr	r3, [r7, #4]
 800f560:	4619      	mov	r1, r3
 800f562:	2006      	movs	r0, #6
 800f564:	f000 f8be 	bl	800f6e4 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 800f568:	4b08      	ldr	r3, [pc, #32]	; (800f58c <HW_IPCC_SYS_EvtNot+0x40>)
 800f56a:	681b      	ldr	r3, [r3, #0]
 800f56c:	687a      	ldr	r2, [r7, #4]
 800f56e:	4610      	mov	r0, r2
 800f570:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800f572:	4805      	ldr	r0, [pc, #20]	; (800f588 <HW_IPCC_SYS_EvtNot+0x3c>)
 800f574:	f000 f9fa 	bl	800f96c <LST_is_empty>
 800f578:	4603      	mov	r3, r0
 800f57a:	2b00      	cmp	r3, #0
 800f57c:	d0ea      	beq.n	800f554 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 800f57e:	bf00      	nop
}
 800f580:	3708      	adds	r7, #8
 800f582:	46bd      	mov	sp, r7
 800f584:	bd80      	pop	{r7, pc}
 800f586:	bf00      	nop
 800f588:	200300d0 	.word	0x200300d0
 800f58c:	20000bf4 	.word	0x20000bf4

0800f590 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 800f590:	b580      	push	{r7, lr}
 800f592:	b082      	sub	sp, #8
 800f594:	af00      	add	r7, sp, #0
 800f596:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 800f598:	4817      	ldr	r0, [pc, #92]	; (800f5f8 <TL_MM_Init+0x68>)
 800f59a:	f000 f9d7 	bl	800f94c <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 800f59e:	4817      	ldr	r0, [pc, #92]	; (800f5fc <TL_MM_Init+0x6c>)
 800f5a0:	f000 f9d4 	bl	800f94c <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 800f5a4:	4b16      	ldr	r3, [pc, #88]	; (800f600 <TL_MM_Init+0x70>)
 800f5a6:	691b      	ldr	r3, [r3, #16]
 800f5a8:	4a16      	ldr	r2, [pc, #88]	; (800f604 <TL_MM_Init+0x74>)
 800f5aa:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 800f5ac:	4b15      	ldr	r3, [pc, #84]	; (800f604 <TL_MM_Init+0x74>)
 800f5ae:	681b      	ldr	r3, [r3, #0]
 800f5b0:	687a      	ldr	r2, [r7, #4]
 800f5b2:	6892      	ldr	r2, [r2, #8]
 800f5b4:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 800f5b6:	4b13      	ldr	r3, [pc, #76]	; (800f604 <TL_MM_Init+0x74>)
 800f5b8:	681b      	ldr	r3, [r3, #0]
 800f5ba:	687a      	ldr	r2, [r7, #4]
 800f5bc:	68d2      	ldr	r2, [r2, #12]
 800f5be:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 800f5c0:	4b10      	ldr	r3, [pc, #64]	; (800f604 <TL_MM_Init+0x74>)
 800f5c2:	681b      	ldr	r3, [r3, #0]
 800f5c4:	4a0c      	ldr	r2, [pc, #48]	; (800f5f8 <TL_MM_Init+0x68>)
 800f5c6:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 800f5c8:	4b0e      	ldr	r3, [pc, #56]	; (800f604 <TL_MM_Init+0x74>)
 800f5ca:	681b      	ldr	r3, [r3, #0]
 800f5cc:	687a      	ldr	r2, [r7, #4]
 800f5ce:	6812      	ldr	r2, [r2, #0]
 800f5d0:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 800f5d2:	4b0c      	ldr	r3, [pc, #48]	; (800f604 <TL_MM_Init+0x74>)
 800f5d4:	681b      	ldr	r3, [r3, #0]
 800f5d6:	687a      	ldr	r2, [r7, #4]
 800f5d8:	6852      	ldr	r2, [r2, #4]
 800f5da:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 800f5dc:	4b09      	ldr	r3, [pc, #36]	; (800f604 <TL_MM_Init+0x74>)
 800f5de:	681b      	ldr	r3, [r3, #0]
 800f5e0:	687a      	ldr	r2, [r7, #4]
 800f5e2:	6912      	ldr	r2, [r2, #16]
 800f5e4:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 800f5e6:	4b07      	ldr	r3, [pc, #28]	; (800f604 <TL_MM_Init+0x74>)
 800f5e8:	681b      	ldr	r3, [r3, #0]
 800f5ea:	687a      	ldr	r2, [r7, #4]
 800f5ec:	6952      	ldr	r2, [r2, #20]
 800f5ee:	619a      	str	r2, [r3, #24]

  return;
 800f5f0:	bf00      	nop
}
 800f5f2:	3708      	adds	r7, #8
 800f5f4:	46bd      	mov	sp, r7
 800f5f6:	bd80      	pop	{r7, pc}
 800f5f8:	200300b8 	.word	0x200300b8
 800f5fc:	20000be0 	.word	0x20000be0
 800f600:	20030000 	.word	0x20030000
 800f604:	20000bf8 	.word	0x20000bf8

0800f608 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 800f608:	b580      	push	{r7, lr}
 800f60a:	b082      	sub	sp, #8
 800f60c:	af00      	add	r7, sp, #0
 800f60e:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 800f610:	6879      	ldr	r1, [r7, #4]
 800f612:	4807      	ldr	r0, [pc, #28]	; (800f630 <TL_MM_EvtDone+0x28>)
 800f614:	f000 f9f2 	bl	800f9fc <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 800f618:	6879      	ldr	r1, [r7, #4]
 800f61a:	2000      	movs	r0, #0
 800f61c:	f000 f862 	bl	800f6e4 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 800f620:	4804      	ldr	r0, [pc, #16]	; (800f634 <TL_MM_EvtDone+0x2c>)
 800f622:	f002 fb15 	bl	8011c50 <HW_IPCC_MM_SendFreeBuf>

  return;
 800f626:	bf00      	nop
}
 800f628:	3708      	adds	r7, #8
 800f62a:	46bd      	mov	sp, r7
 800f62c:	bd80      	pop	{r7, pc}
 800f62e:	bf00      	nop
 800f630:	20000be0 	.word	0x20000be0
 800f634:	0800f639 	.word	0x0800f639

0800f638 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 800f638:	b580      	push	{r7, lr}
 800f63a:	b082      	sub	sp, #8
 800f63c:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800f63e:	e00c      	b.n	800f65a <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 800f640:	1d3b      	adds	r3, r7, #4
 800f642:	4619      	mov	r1, r3
 800f644:	480a      	ldr	r0, [pc, #40]	; (800f670 <SendFreeBuf+0x38>)
 800f646:	f000 fa20 	bl	800fa8a <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 800f64a:	4b0a      	ldr	r3, [pc, #40]	; (800f674 <SendFreeBuf+0x3c>)
 800f64c:	691b      	ldr	r3, [r3, #16]
 800f64e:	691b      	ldr	r3, [r3, #16]
 800f650:	687a      	ldr	r2, [r7, #4]
 800f652:	4611      	mov	r1, r2
 800f654:	4618      	mov	r0, r3
 800f656:	f000 f9d1 	bl	800f9fc <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800f65a:	4805      	ldr	r0, [pc, #20]	; (800f670 <SendFreeBuf+0x38>)
 800f65c:	f000 f986 	bl	800f96c <LST_is_empty>
 800f660:	4603      	mov	r3, r0
 800f662:	2b00      	cmp	r3, #0
 800f664:	d0ec      	beq.n	800f640 <SendFreeBuf+0x8>
  }

  return;
 800f666:	bf00      	nop
}
 800f668:	3708      	adds	r7, #8
 800f66a:	46bd      	mov	sp, r7
 800f66c:	bd80      	pop	{r7, pc}
 800f66e:	bf00      	nop
 800f670:	20000be0 	.word	0x20000be0
 800f674:	20030000 	.word	0x20030000

0800f678 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 800f678:	b580      	push	{r7, lr}
 800f67a:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 800f67c:	4805      	ldr	r0, [pc, #20]	; (800f694 <TL_TRACES_Init+0x1c>)
 800f67e:	f000 f965 	bl	800f94c <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 800f682:	4b05      	ldr	r3, [pc, #20]	; (800f698 <TL_TRACES_Init+0x20>)
 800f684:	695b      	ldr	r3, [r3, #20]
 800f686:	4a03      	ldr	r2, [pc, #12]	; (800f694 <TL_TRACES_Init+0x1c>)
 800f688:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 800f68a:	f002 fb17 	bl	8011cbc <HW_IPCC_TRACES_Init>

  return;
 800f68e:	bf00      	nop
}
 800f690:	bd80      	pop	{r7, pc}
 800f692:	bf00      	nop
 800f694:	200300c0 	.word	0x200300c0
 800f698:	20030000 	.word	0x20030000

0800f69c <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 800f69c:	b580      	push	{r7, lr}
 800f69e:	b082      	sub	sp, #8
 800f6a0:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800f6a2:	e008      	b.n	800f6b6 <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 800f6a4:	1d3b      	adds	r3, r7, #4
 800f6a6:	4619      	mov	r1, r3
 800f6a8:	4808      	ldr	r0, [pc, #32]	; (800f6cc <HW_IPCC_TRACES_EvtNot+0x30>)
 800f6aa:	f000 f9ee 	bl	800fa8a <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 800f6ae:	687b      	ldr	r3, [r7, #4]
 800f6b0:	4618      	mov	r0, r3
 800f6b2:	f000 f80d 	bl	800f6d0 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800f6b6:	4805      	ldr	r0, [pc, #20]	; (800f6cc <HW_IPCC_TRACES_EvtNot+0x30>)
 800f6b8:	f000 f958 	bl	800f96c <LST_is_empty>
 800f6bc:	4603      	mov	r3, r0
 800f6be:	2b00      	cmp	r3, #0
 800f6c0:	d0f0      	beq.n	800f6a4 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 800f6c2:	bf00      	nop
}
 800f6c4:	3708      	adds	r7, #8
 800f6c6:	46bd      	mov	sp, r7
 800f6c8:	bd80      	pop	{r7, pc}
 800f6ca:	bf00      	nop
 800f6cc:	200300c0 	.word	0x200300c0

0800f6d0 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 800f6d0:	b480      	push	{r7}
 800f6d2:	b083      	sub	sp, #12
 800f6d4:	af00      	add	r7, sp, #0
 800f6d6:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 800f6d8:	bf00      	nop
 800f6da:	370c      	adds	r7, #12
 800f6dc:	46bd      	mov	sp, r7
 800f6de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6e2:	4770      	bx	lr

0800f6e4 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 800f6e4:	b480      	push	{r7}
 800f6e6:	b085      	sub	sp, #20
 800f6e8:	af00      	add	r7, sp, #0
 800f6ea:	4603      	mov	r3, r0
 800f6ec:	6039      	str	r1, [r7, #0]
 800f6ee:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 800f6f0:	79fb      	ldrb	r3, [r7, #7]
 800f6f2:	2b06      	cmp	r3, #6
 800f6f4:	d845      	bhi.n	800f782 <OutputDbgTrace+0x9e>
 800f6f6:	a201      	add	r2, pc, #4	; (adr r2, 800f6fc <OutputDbgTrace+0x18>)
 800f6f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f6fc:	0800f719 	.word	0x0800f719
 800f700:	0800f73d 	.word	0x0800f73d
 800f704:	0800f743 	.word	0x0800f743
 800f708:	0800f757 	.word	0x0800f757
 800f70c:	0800f763 	.word	0x0800f763
 800f710:	0800f769 	.word	0x0800f769
 800f714:	0800f777 	.word	0x0800f777
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800f718:	683b      	ldr	r3, [r7, #0]
 800f71a:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800f71c:	68fb      	ldr	r3, [r7, #12]
 800f71e:	7a5b      	ldrb	r3, [r3, #9]
 800f720:	2bff      	cmp	r3, #255	; 0xff
 800f722:	d005      	beq.n	800f730 <OutputDbgTrace+0x4c>
 800f724:	2bff      	cmp	r3, #255	; 0xff
 800f726:	dc05      	bgt.n	800f734 <OutputDbgTrace+0x50>
 800f728:	2b0e      	cmp	r3, #14
 800f72a:	d005      	beq.n	800f738 <OutputDbgTrace+0x54>
 800f72c:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 800f72e:	e001      	b.n	800f734 <OutputDbgTrace+0x50>
          break;
 800f730:	bf00      	nop
 800f732:	e027      	b.n	800f784 <OutputDbgTrace+0xa0>
          break;
 800f734:	bf00      	nop
 800f736:	e025      	b.n	800f784 <OutputDbgTrace+0xa0>
          break;
 800f738:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 800f73a:	e023      	b.n	800f784 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800f73c:	683b      	ldr	r3, [r7, #0]
 800f73e:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800f740:	e020      	b.n	800f784 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800f742:	683b      	ldr	r3, [r7, #0]
 800f744:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800f746:	68fb      	ldr	r3, [r7, #12]
 800f748:	7a5b      	ldrb	r3, [r3, #9]
 800f74a:	2b0e      	cmp	r3, #14
 800f74c:	d001      	beq.n	800f752 <OutputDbgTrace+0x6e>
 800f74e:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800f750:	e000      	b.n	800f754 <OutputDbgTrace+0x70>
          break;
 800f752:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800f754:	e016      	b.n	800f784 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800f756:	683b      	ldr	r3, [r7, #0]
 800f758:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800f75a:	68fb      	ldr	r3, [r7, #12]
 800f75c:	7a5b      	ldrb	r3, [r3, #9]
 800f75e:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800f760:	e010      	b.n	800f784 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800f762:	683b      	ldr	r3, [r7, #0]
 800f764:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800f766:	e00d      	b.n	800f784 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800f768:	683b      	ldr	r3, [r7, #0]
 800f76a:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800f76c:	68fb      	ldr	r3, [r7, #12]
 800f76e:	7a5b      	ldrb	r3, [r3, #9]
 800f770:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800f772:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800f774:	e006      	b.n	800f784 <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800f776:	683b      	ldr	r3, [r7, #0]
 800f778:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800f77a:	68fb      	ldr	r3, [r7, #12]
 800f77c:	7a5b      	ldrb	r3, [r3, #9]
 800f77e:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800f780:	e000      	b.n	800f784 <OutputDbgTrace+0xa0>

    default:
      break;
 800f782:	bf00      	nop
  }

  return;
 800f784:	bf00      	nop
}
 800f786:	3714      	adds	r7, #20
 800f788:	46bd      	mov	sp, r7
 800f78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f78e:	4770      	bx	lr

0800f790 <DbgTrace_TxCpltCallback>:
 * @note   Indicate the end of the transmission of a DBG_TRACE trace buffer to DBG_TRACE USART. If queue
 *         contains new trace data to transmit, start a new transmission.
 * @retval None
 */
static void DbgTrace_TxCpltCallback(void)
{
 800f790:	b580      	push	{r7, lr}
 800f792:	b086      	sub	sp, #24
 800f794:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f796:	f3ef 8310 	mrs	r3, PRIMASK
 800f79a:	60fb      	str	r3, [r7, #12]
  return(result);
 800f79c:	68fb      	ldr	r3, [r7, #12]
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  uint8_t* buf;
  uint16_t bufSize;

  BACKUP_PRIMASK();
 800f79e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800f7a0:	b672      	cpsid	i
}
 800f7a2:	bf00      	nop

  DISABLE_IRQ();			/**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  /* Remove element just sent to UART */
  CircularQueue_Remove(&MsgDbgTraceQueue,&bufSize);
 800f7a4:	1cbb      	adds	r3, r7, #2
 800f7a6:	4619      	mov	r1, r3
 800f7a8:	4812      	ldr	r0, [pc, #72]	; (800f7f4 <DbgTrace_TxCpltCallback+0x64>)
 800f7aa:	f000 fbe6 	bl	800ff7a <CircularQueue_Remove>

  /* Sense if new data to be sent */
  buf=CircularQueue_Sense(&MsgDbgTraceQueue,&bufSize);
 800f7ae:	1cbb      	adds	r3, r7, #2
 800f7b0:	4619      	mov	r1, r3
 800f7b2:	4810      	ldr	r0, [pc, #64]	; (800f7f4 <DbgTrace_TxCpltCallback+0x64>)
 800f7b4:	f000 fcd2 	bl	801015c <CircularQueue_Sense>
 800f7b8:	6138      	str	r0, [r7, #16]


  if ( buf != NULL) 
 800f7ba:	693b      	ldr	r3, [r7, #16]
 800f7bc:	2b00      	cmp	r3, #0
 800f7be:	d00c      	beq.n	800f7da <DbgTrace_TxCpltCallback+0x4a>
 800f7c0:	697b      	ldr	r3, [r7, #20]
 800f7c2:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f7c4:	68bb      	ldr	r3, [r7, #8]
 800f7c6:	f383 8810 	msr	PRIMASK, r3
}
 800f7ca:	bf00      	nop
  {
    RESTORE_PRIMASK();
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
 800f7cc:	887b      	ldrh	r3, [r7, #2]
 800f7ce:	4a0a      	ldr	r2, [pc, #40]	; (800f7f8 <DbgTrace_TxCpltCallback+0x68>)
 800f7d0:	4619      	mov	r1, r3
 800f7d2:	6938      	ldr	r0, [r7, #16]
 800f7d4:	f7f1 fd2b 	bl	800122e <DbgOutputTraces>

  DbgTracePeripheralReady = SET;

  RESTORE_PRIMASK();
#endif
}
 800f7d8:	e008      	b.n	800f7ec <DbgTrace_TxCpltCallback+0x5c>
    DbgTracePeripheralReady = SET;
 800f7da:	4b08      	ldr	r3, [pc, #32]	; (800f7fc <DbgTrace_TxCpltCallback+0x6c>)
 800f7dc:	2201      	movs	r2, #1
 800f7de:	701a      	strb	r2, [r3, #0]
 800f7e0:	697b      	ldr	r3, [r7, #20]
 800f7e2:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	f383 8810 	msr	PRIMASK, r3
}
 800f7ea:	bf00      	nop
}
 800f7ec:	bf00      	nop
 800f7ee:	3718      	adds	r7, #24
 800f7f0:	46bd      	mov	sp, r7
 800f7f2:	bd80      	pop	{r7, pc}
 800f7f4:	20000bfc 	.word	0x20000bfc
 800f7f8:	0800f791 	.word	0x0800f791
 800f7fc:	2000000d 	.word	0x2000000d

0800f800 <DbgTraceInit>:
#endif

void DbgTraceInit( void )
{
 800f800:	b580      	push	{r7, lr}
 800f802:	b082      	sub	sp, #8
 800f804:	af02      	add	r7, sp, #8
#if (( CFG_DEBUG_TRACE_FULL != 0 ) || ( CFG_DEBUG_TRACE_LIGHT != 0 ))
  DbgOutputInit();
 800f806:	f7f1 fd0c 	bl	8001222 <DbgOutputInit>
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  CircularQueue_Init(&MsgDbgTraceQueue, MsgDbgTraceQueueBuff, DBG_TRACE_MSG_QUEUE_SIZE, 0, CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG);
 800f80a:	2302      	movs	r3, #2
 800f80c:	9300      	str	r3, [sp, #0]
 800f80e:	2300      	movs	r3, #0
 800f810:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800f814:	4903      	ldr	r1, [pc, #12]	; (800f824 <DbgTraceInit+0x24>)
 800f816:	4804      	ldr	r0, [pc, #16]	; (800f828 <DbgTraceInit+0x28>)
 800f818:	f000 f956 	bl	800fac8 <CircularQueue_Init>
#endif 
#endif
  return;
 800f81c:	bf00      	nop
}
 800f81e:	46bd      	mov	sp, r7
 800f820:	bd80      	pop	{r7, pc}
 800f822:	bf00      	nop
 800f824:	20000c1c 	.word	0x20000c1c
 800f828:	20000bfc 	.word	0x20000bfc

0800f82c <_write>:
 * @param	bufsize buffer size
 * @param	...: arguments to be formatted in format string
 * @retval none
 */
size_t _write(int handle, const unsigned char * buf, size_t bufSize)
{
 800f82c:	b580      	push	{r7, lr}
 800f82e:	b084      	sub	sp, #16
 800f830:	af00      	add	r7, sp, #0
 800f832:	60f8      	str	r0, [r7, #12]
 800f834:	60b9      	str	r1, [r7, #8]
 800f836:	607a      	str	r2, [r7, #4]
  return ( DbgTraceWrite(handle, buf, bufSize) );
 800f838:	687a      	ldr	r2, [r7, #4]
 800f83a:	68b9      	ldr	r1, [r7, #8]
 800f83c:	68f8      	ldr	r0, [r7, #12]
 800f83e:	f000 f805 	bl	800f84c <DbgTraceWrite>
 800f842:	4603      	mov	r3, r0
}
 800f844:	4618      	mov	r0, r3
 800f846:	3710      	adds	r7, #16
 800f848:	46bd      	mov	sp, r7
 800f84a:	bd80      	pop	{r7, pc}

0800f84c <DbgTraceWrite>:
 * @param buf buffer to write
 * @param bufsize buffer size
 * @retval Number of elements written
 */
size_t DbgTraceWrite(int handle, const unsigned char * buf, size_t bufSize)
{
 800f84c:	b580      	push	{r7, lr}
 800f84e:	b08a      	sub	sp, #40	; 0x28
 800f850:	af00      	add	r7, sp, #0
 800f852:	60f8      	str	r0, [r7, #12]
 800f854:	60b9      	str	r1, [r7, #8]
 800f856:	607a      	str	r2, [r7, #4]
  size_t chars_written = 0;
 800f858:	2300      	movs	r3, #0
 800f85a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f85c:	f3ef 8310 	mrs	r3, PRIMASK
 800f860:	61bb      	str	r3, [r7, #24]
  return(result);
 800f862:	69bb      	ldr	r3, [r7, #24]
  uint8_t* buffer;

  BACKUP_PRIMASK();
 800f864:	623b      	str	r3, [r7, #32]

  /* Ignore flushes */
  if ( handle == -1 )
 800f866:	68fb      	ldr	r3, [r7, #12]
 800f868:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f86c:	d102      	bne.n	800f874 <DbgTraceWrite+0x28>
  {
    chars_written = ( size_t ) 0;
 800f86e:	2300      	movs	r3, #0
 800f870:	627b      	str	r3, [r7, #36]	; 0x24
 800f872:	e037      	b.n	800f8e4 <DbgTraceWrite+0x98>
  }
  /* Only allow stdout/stderr output */
  else if ( ( handle != 1 ) && ( handle != 2 ) )
 800f874:	68fb      	ldr	r3, [r7, #12]
 800f876:	2b01      	cmp	r3, #1
 800f878:	d006      	beq.n	800f888 <DbgTraceWrite+0x3c>
 800f87a:	68fb      	ldr	r3, [r7, #12]
 800f87c:	2b02      	cmp	r3, #2
 800f87e:	d003      	beq.n	800f888 <DbgTraceWrite+0x3c>
  {
    chars_written = ( size_t ) - 1;
 800f880:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f884:	627b      	str	r3, [r7, #36]	; 0x24
 800f886:	e02d      	b.n	800f8e4 <DbgTraceWrite+0x98>
  }
  /* Parameters OK, call the low-level character output routine */
  else if (bufSize != 0)
 800f888:	687b      	ldr	r3, [r7, #4]
 800f88a:	2b00      	cmp	r3, #0
 800f88c:	d02a      	beq.n	800f8e4 <DbgTraceWrite+0x98>
  {
    chars_written = bufSize;
 800f88e:	687b      	ldr	r3, [r7, #4]
 800f890:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 800f892:	b672      	cpsid	i
}
 800f894:	bf00      	nop
    /* If queue emepty and TX free, send directly */
    /* CS Start */

#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
    DISABLE_IRQ();      /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
    buffer=CircularQueue_Add(&MsgDbgTraceQueue,(uint8_t*)buf, bufSize,1);
 800f896:	687b      	ldr	r3, [r7, #4]
 800f898:	b29a      	uxth	r2, r3
 800f89a:	2301      	movs	r3, #1
 800f89c:	68b9      	ldr	r1, [r7, #8]
 800f89e:	4814      	ldr	r0, [pc, #80]	; (800f8f0 <DbgTraceWrite+0xa4>)
 800f8a0:	f000 f944 	bl	800fb2c <CircularQueue_Add>
 800f8a4:	61f8      	str	r0, [r7, #28]
    if (buffer && DbgTracePeripheralReady)
 800f8a6:	69fb      	ldr	r3, [r7, #28]
 800f8a8:	2b00      	cmp	r3, #0
 800f8aa:	d015      	beq.n	800f8d8 <DbgTraceWrite+0x8c>
 800f8ac:	4b11      	ldr	r3, [pc, #68]	; (800f8f4 <DbgTraceWrite+0xa8>)
 800f8ae:	781b      	ldrb	r3, [r3, #0]
 800f8b0:	b2db      	uxtb	r3, r3
 800f8b2:	2b00      	cmp	r3, #0
 800f8b4:	d010      	beq.n	800f8d8 <DbgTraceWrite+0x8c>
    {
      DbgTracePeripheralReady = RESET;
 800f8b6:	4b0f      	ldr	r3, [pc, #60]	; (800f8f4 <DbgTraceWrite+0xa8>)
 800f8b8:	2200      	movs	r2, #0
 800f8ba:	701a      	strb	r2, [r3, #0]
 800f8bc:	6a3b      	ldr	r3, [r7, #32]
 800f8be:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f8c0:	697b      	ldr	r3, [r7, #20]
 800f8c2:	f383 8810 	msr	PRIMASK, r3
}
 800f8c6:	bf00      	nop
      RESTORE_PRIMASK();
      DbgOutputTraces((uint8_t*)buffer, bufSize, DbgTrace_TxCpltCallback);
 800f8c8:	687b      	ldr	r3, [r7, #4]
 800f8ca:	b29b      	uxth	r3, r3
 800f8cc:	4a0a      	ldr	r2, [pc, #40]	; (800f8f8 <DbgTraceWrite+0xac>)
 800f8ce:	4619      	mov	r1, r3
 800f8d0:	69f8      	ldr	r0, [r7, #28]
 800f8d2:	f7f1 fcac 	bl	800122e <DbgOutputTraces>
 800f8d6:	e005      	b.n	800f8e4 <DbgTraceWrite+0x98>
 800f8d8:	6a3b      	ldr	r3, [r7, #32]
 800f8da:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f8dc:	693b      	ldr	r3, [r7, #16]
 800f8de:	f383 8810 	msr	PRIMASK, r3
}
 800f8e2:	bf00      	nop
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
    while (!DbgTracePeripheralReady);
#endif
    /* CS END */
  }
  return ( chars_written );
 800f8e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800f8e6:	4618      	mov	r0, r3
 800f8e8:	3728      	adds	r7, #40	; 0x28
 800f8ea:	46bd      	mov	sp, r7
 800f8ec:	bd80      	pop	{r7, pc}
 800f8ee:	bf00      	nop
 800f8f0:	20000bfc 	.word	0x20000bfc
 800f8f4:	2000000d 	.word	0x2000000d
 800f8f8:	0800f791 	.word	0x0800f791

0800f8fc <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 800f8fc:	b480      	push	{r7}
 800f8fe:	b085      	sub	sp, #20
 800f900:	af00      	add	r7, sp, #0
 800f902:	4603      	mov	r3, r0
 800f904:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 800f906:	4b0f      	ldr	r3, [pc, #60]	; (800f944 <OTP_Read+0x48>)
 800f908:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800f90a:	e002      	b.n	800f912 <OTP_Read+0x16>
  {
    p_id -= 8 ;
 800f90c:	68fb      	ldr	r3, [r7, #12]
 800f90e:	3b08      	subs	r3, #8
 800f910:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800f912:	68fb      	ldr	r3, [r7, #12]
 800f914:	3307      	adds	r3, #7
 800f916:	781b      	ldrb	r3, [r3, #0]
 800f918:	79fa      	ldrb	r2, [r7, #7]
 800f91a:	429a      	cmp	r2, r3
 800f91c:	d003      	beq.n	800f926 <OTP_Read+0x2a>
 800f91e:	68fb      	ldr	r3, [r7, #12]
 800f920:	4a09      	ldr	r2, [pc, #36]	; (800f948 <OTP_Read+0x4c>)
 800f922:	4293      	cmp	r3, r2
 800f924:	d1f2      	bne.n	800f90c <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 800f926:	68fb      	ldr	r3, [r7, #12]
 800f928:	3307      	adds	r3, #7
 800f92a:	781b      	ldrb	r3, [r3, #0]
 800f92c:	79fa      	ldrb	r2, [r7, #7]
 800f92e:	429a      	cmp	r2, r3
 800f930:	d001      	beq.n	800f936 <OTP_Read+0x3a>
  {
    p_id = 0 ;
 800f932:	2300      	movs	r3, #0
 800f934:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 800f936:	68fb      	ldr	r3, [r7, #12]
}
 800f938:	4618      	mov	r0, r3
 800f93a:	3714      	adds	r7, #20
 800f93c:	46bd      	mov	sp, r7
 800f93e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f942:	4770      	bx	lr
 800f944:	1fff73f8 	.word	0x1fff73f8
 800f948:	1fff7000 	.word	0x1fff7000

0800f94c <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 800f94c:	b480      	push	{r7}
 800f94e:	b083      	sub	sp, #12
 800f950:	af00      	add	r7, sp, #0
 800f952:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	687a      	ldr	r2, [r7, #4]
 800f958:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	687a      	ldr	r2, [r7, #4]
 800f95e:	605a      	str	r2, [r3, #4]
}
 800f960:	bf00      	nop
 800f962:	370c      	adds	r7, #12
 800f964:	46bd      	mov	sp, r7
 800f966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f96a:	4770      	bx	lr

0800f96c <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 800f96c:	b480      	push	{r7}
 800f96e:	b087      	sub	sp, #28
 800f970:	af00      	add	r7, sp, #0
 800f972:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f974:	f3ef 8310 	mrs	r3, PRIMASK
 800f978:	60fb      	str	r3, [r7, #12]
  return(result);
 800f97a:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800f97c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800f97e:	b672      	cpsid	i
}
 800f980:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 800f982:	687b      	ldr	r3, [r7, #4]
 800f984:	681b      	ldr	r3, [r3, #0]
 800f986:	687a      	ldr	r2, [r7, #4]
 800f988:	429a      	cmp	r2, r3
 800f98a:	d102      	bne.n	800f992 <LST_is_empty+0x26>
  {
    return_value = TRUE;
 800f98c:	2301      	movs	r3, #1
 800f98e:	75fb      	strb	r3, [r7, #23]
 800f990:	e001      	b.n	800f996 <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 800f992:	2300      	movs	r3, #0
 800f994:	75fb      	strb	r3, [r7, #23]
 800f996:	693b      	ldr	r3, [r7, #16]
 800f998:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f99a:	68bb      	ldr	r3, [r7, #8]
 800f99c:	f383 8810 	msr	PRIMASK, r3
}
 800f9a0:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 800f9a2:	7dfb      	ldrb	r3, [r7, #23]
}
 800f9a4:	4618      	mov	r0, r3
 800f9a6:	371c      	adds	r7, #28
 800f9a8:	46bd      	mov	sp, r7
 800f9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9ae:	4770      	bx	lr

0800f9b0 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 800f9b0:	b480      	push	{r7}
 800f9b2:	b087      	sub	sp, #28
 800f9b4:	af00      	add	r7, sp, #0
 800f9b6:	6078      	str	r0, [r7, #4]
 800f9b8:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f9ba:	f3ef 8310 	mrs	r3, PRIMASK
 800f9be:	60fb      	str	r3, [r7, #12]
  return(result);
 800f9c0:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800f9c2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800f9c4:	b672      	cpsid	i
}
 800f9c6:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 800f9c8:	687b      	ldr	r3, [r7, #4]
 800f9ca:	681a      	ldr	r2, [r3, #0]
 800f9cc:	683b      	ldr	r3, [r7, #0]
 800f9ce:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800f9d0:	683b      	ldr	r3, [r7, #0]
 800f9d2:	687a      	ldr	r2, [r7, #4]
 800f9d4:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800f9d6:	687b      	ldr	r3, [r7, #4]
 800f9d8:	683a      	ldr	r2, [r7, #0]
 800f9da:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800f9dc:	683b      	ldr	r3, [r7, #0]
 800f9de:	681b      	ldr	r3, [r3, #0]
 800f9e0:	683a      	ldr	r2, [r7, #0]
 800f9e2:	605a      	str	r2, [r3, #4]
 800f9e4:	697b      	ldr	r3, [r7, #20]
 800f9e6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f9e8:	693b      	ldr	r3, [r7, #16]
 800f9ea:	f383 8810 	msr	PRIMASK, r3
}
 800f9ee:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800f9f0:	bf00      	nop
 800f9f2:	371c      	adds	r7, #28
 800f9f4:	46bd      	mov	sp, r7
 800f9f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9fa:	4770      	bx	lr

0800f9fc <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 800f9fc:	b480      	push	{r7}
 800f9fe:	b087      	sub	sp, #28
 800fa00:	af00      	add	r7, sp, #0
 800fa02:	6078      	str	r0, [r7, #4]
 800fa04:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fa06:	f3ef 8310 	mrs	r3, PRIMASK
 800fa0a:	60fb      	str	r3, [r7, #12]
  return(result);
 800fa0c:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800fa0e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800fa10:	b672      	cpsid	i
}
 800fa12:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 800fa14:	683b      	ldr	r3, [r7, #0]
 800fa16:	687a      	ldr	r2, [r7, #4]
 800fa18:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	685a      	ldr	r2, [r3, #4]
 800fa1e:	683b      	ldr	r3, [r7, #0]
 800fa20:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800fa22:	687b      	ldr	r3, [r7, #4]
 800fa24:	683a      	ldr	r2, [r7, #0]
 800fa26:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800fa28:	683b      	ldr	r3, [r7, #0]
 800fa2a:	685b      	ldr	r3, [r3, #4]
 800fa2c:	683a      	ldr	r2, [r7, #0]
 800fa2e:	601a      	str	r2, [r3, #0]
 800fa30:	697b      	ldr	r3, [r7, #20]
 800fa32:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800fa34:	693b      	ldr	r3, [r7, #16]
 800fa36:	f383 8810 	msr	PRIMASK, r3
}
 800fa3a:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800fa3c:	bf00      	nop
 800fa3e:	371c      	adds	r7, #28
 800fa40:	46bd      	mov	sp, r7
 800fa42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa46:	4770      	bx	lr

0800fa48 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 800fa48:	b480      	push	{r7}
 800fa4a:	b087      	sub	sp, #28
 800fa4c:	af00      	add	r7, sp, #0
 800fa4e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fa50:	f3ef 8310 	mrs	r3, PRIMASK
 800fa54:	60fb      	str	r3, [r7, #12]
  return(result);
 800fa56:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800fa58:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800fa5a:	b672      	cpsid	i
}
 800fa5c:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 800fa5e:	687b      	ldr	r3, [r7, #4]
 800fa60:	685b      	ldr	r3, [r3, #4]
 800fa62:	687a      	ldr	r2, [r7, #4]
 800fa64:	6812      	ldr	r2, [r2, #0]
 800fa66:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800fa68:	687b      	ldr	r3, [r7, #4]
 800fa6a:	681b      	ldr	r3, [r3, #0]
 800fa6c:	687a      	ldr	r2, [r7, #4]
 800fa6e:	6852      	ldr	r2, [r2, #4]
 800fa70:	605a      	str	r2, [r3, #4]
 800fa72:	697b      	ldr	r3, [r7, #20]
 800fa74:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800fa76:	693b      	ldr	r3, [r7, #16]
 800fa78:	f383 8810 	msr	PRIMASK, r3
}
 800fa7c:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800fa7e:	bf00      	nop
 800fa80:	371c      	adds	r7, #28
 800fa82:	46bd      	mov	sp, r7
 800fa84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa88:	4770      	bx	lr

0800fa8a <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 800fa8a:	b580      	push	{r7, lr}
 800fa8c:	b086      	sub	sp, #24
 800fa8e:	af00      	add	r7, sp, #0
 800fa90:	6078      	str	r0, [r7, #4]
 800fa92:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fa94:	f3ef 8310 	mrs	r3, PRIMASK
 800fa98:	60fb      	str	r3, [r7, #12]
  return(result);
 800fa9a:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800fa9c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800fa9e:	b672      	cpsid	i
}
 800faa0:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 800faa2:	687b      	ldr	r3, [r7, #4]
 800faa4:	681a      	ldr	r2, [r3, #0]
 800faa6:	683b      	ldr	r3, [r7, #0]
 800faa8:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 800faaa:	687b      	ldr	r3, [r7, #4]
 800faac:	681b      	ldr	r3, [r3, #0]
 800faae:	4618      	mov	r0, r3
 800fab0:	f7ff ffca 	bl	800fa48 <LST_remove_node>
 800fab4:	697b      	ldr	r3, [r7, #20]
 800fab6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800fab8:	693b      	ldr	r3, [r7, #16]
 800faba:	f383 8810 	msr	PRIMASK, r3
}
 800fabe:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800fac0:	bf00      	nop
 800fac2:	3718      	adds	r7, #24
 800fac4:	46bd      	mov	sp, r7
 800fac6:	bd80      	pop	{r7, pc}

0800fac8 <CircularQueue_Init>:
  * @param  queueSize:  Size of Queue Buffer
  * @param  elementSize: Size of an element in the queue. if =0, the queue will manage variable sizze elements
  * @retval   always 0
  */
int CircularQueue_Init(queue_t *q, uint8_t* queueBuffer, uint32_t queueSize, uint16_t elementSize, uint8_t optionFlags)
{
 800fac8:	b480      	push	{r7}
 800faca:	b085      	sub	sp, #20
 800facc:	af00      	add	r7, sp, #0
 800face:	60f8      	str	r0, [r7, #12]
 800fad0:	60b9      	str	r1, [r7, #8]
 800fad2:	607a      	str	r2, [r7, #4]
 800fad4:	807b      	strh	r3, [r7, #2]
  q->qBuff = queueBuffer;
 800fad6:	68fb      	ldr	r3, [r7, #12]
 800fad8:	68ba      	ldr	r2, [r7, #8]
 800fada:	601a      	str	r2, [r3, #0]
  q->first = 0;
 800fadc:	68fb      	ldr	r3, [r7, #12]
 800fade:	2200      	movs	r2, #0
 800fae0:	60da      	str	r2, [r3, #12]
  q->last = 0; /* queueSize-1; */
 800fae2:	68fb      	ldr	r3, [r7, #12]
 800fae4:	2200      	movs	r2, #0
 800fae6:	611a      	str	r2, [r3, #16]
  q->byteCount = 0;
 800fae8:	68fb      	ldr	r3, [r7, #12]
 800faea:	2200      	movs	r2, #0
 800faec:	615a      	str	r2, [r3, #20]
  q->elementCount = 0;
 800faee:	68fb      	ldr	r3, [r7, #12]
 800faf0:	2200      	movs	r2, #0
 800faf2:	619a      	str	r2, [r3, #24]
  q->queueMaxSize = queueSize;
 800faf4:	68fb      	ldr	r3, [r7, #12]
 800faf6:	687a      	ldr	r2, [r7, #4]
 800faf8:	605a      	str	r2, [r3, #4]
  q->elementSize = elementSize;
 800fafa:	68fb      	ldr	r3, [r7, #12]
 800fafc:	887a      	ldrh	r2, [r7, #2]
 800fafe:	811a      	strh	r2, [r3, #8]
  q->optionFlags = optionFlags;
 800fb00:	68fb      	ldr	r3, [r7, #12]
 800fb02:	7e3a      	ldrb	r2, [r7, #24]
 800fb04:	771a      	strb	r2, [r3, #28]

   if ((optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG) && q-> elementSize)
 800fb06:	7e3b      	ldrb	r3, [r7, #24]
 800fb08:	f003 0302 	and.w	r3, r3, #2
 800fb0c:	2b00      	cmp	r3, #0
 800fb0e:	d006      	beq.n	800fb1e <CircularQueue_Init+0x56>
 800fb10:	68fb      	ldr	r3, [r7, #12]
 800fb12:	891b      	ldrh	r3, [r3, #8]
 800fb14:	2b00      	cmp	r3, #0
 800fb16:	d002      	beq.n	800fb1e <CircularQueue_Init+0x56>
   {
    /* can not deal with splitting at the end of buffer with fixed size element */
    return -1;
 800fb18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800fb1c:	e000      	b.n	800fb20 <CircularQueue_Init+0x58>
  }
  return 0;
 800fb1e:	2300      	movs	r3, #0
}
 800fb20:	4618      	mov	r0, r3
 800fb22:	3714      	adds	r7, #20
 800fb24:	46bd      	mov	sp, r7
 800fb26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb2a:	4770      	bx	lr

0800fb2c <CircularQueue_Add>:
  * @param  elementSize:  Size of element to be added to the queue. Only used if the queue manage variable size elements
  * @param  nbElements:  number of elements in the in buffer pointed by x
  * @retval  pointer on last element just added to the queue, NULL if the element to be added do not fit in the queue (too big)
  */
uint8_t* CircularQueue_Add(queue_t *q, uint8_t* x, uint16_t elementSize, uint32_t nbElements)
{
 800fb2c:	b580      	push	{r7, lr}
 800fb2e:	b08e      	sub	sp, #56	; 0x38
 800fb30:	af00      	add	r7, sp, #0
 800fb32:	60f8      	str	r0, [r7, #12]
 800fb34:	60b9      	str	r1, [r7, #8]
 800fb36:	603b      	str	r3, [r7, #0]
 800fb38:	4613      	mov	r3, r2
 800fb3a:	80fb      	strh	r3, [r7, #6]

  uint8_t* ptr = NULL;                      /* fct return ptr to the element freshly added, if no room fct return NULL */
 800fb3c:	2300      	movs	r3, #0
 800fb3e:	623b      	str	r3, [r7, #32]
  uint16_t curElementSize = 0;              /* the size of the element currently  stored at q->last position */
 800fb40:	2300      	movs	r3, #0
 800fb42:	86fb      	strh	r3, [r7, #54]	; 0x36
  uint8_t  elemSizeStorageRoom  = 0 ;       /* Indicate the header (which contain only size) of element in case of varaibale size elemenet (q->elementsize == 0) */
 800fb44:	2300      	movs	r3, #0
 800fb46:	77fb      	strb	r3, [r7, #31]
  uint32_t curBuffPosition;                  /* the current position in the queue buffer */
  uint32_t i;                               /* loop counter */
  uint32_t NbBytesToCopy = 0, NbCopiedBytes = 0 ; /* Indicators for copying bytes in queue */
 800fb48:	2300      	movs	r3, #0
 800fb4a:	62bb      	str	r3, [r7, #40]	; 0x28
 800fb4c:	2300      	movs	r3, #0
 800fb4e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t eob_free_size;                         /* Eof End of Quque Buffer Free Size */
  uint8_t  wrap_will_occur = 0;                   /* indicate if a wrap around will occurs */
 800fb50:	2300      	movs	r3, #0
 800fb52:	77bb      	strb	r3, [r7, #30]
  uint8_t  wrapped_element_eob_size;              /* In case of Wrap around, indicat size of parta of elemenet that fit at thened of the queuue  buffer */
  uint16_t overhead = 0;                          /* In case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG or CIRCULAR_QUEUE_NO_WRAP_FLAG options, 
 800fb54:	2300      	movs	r3, #0
 800fb56:	83bb      	strh	r3, [r7, #28]
                                                     indcate the size overhead that will be generated by adding the element with wrap management (split or no wrap ) */ 
  
  
  elemSizeStorageRoom  = (q->elementSize == 0) ? 2 : 0;
 800fb58:	68fb      	ldr	r3, [r7, #12]
 800fb5a:	891b      	ldrh	r3, [r3, #8]
 800fb5c:	2b00      	cmp	r3, #0
 800fb5e:	d101      	bne.n	800fb64 <CircularQueue_Add+0x38>
 800fb60:	2302      	movs	r3, #2
 800fb62:	e000      	b.n	800fb66 <CircularQueue_Add+0x3a>
 800fb64:	2300      	movs	r3, #0
 800fb66:	77fb      	strb	r3, [r7, #31]
  /* retrieve the size of last element sored: the value stored at the beginning of the queue element if element size is variable otherwise take it from fixed element Size member */
  if (q->byteCount)
 800fb68:	68fb      	ldr	r3, [r7, #12]
 800fb6a:	695b      	ldr	r3, [r3, #20]
 800fb6c:	2b00      	cmp	r3, #0
 800fb6e:	d02a      	beq.n	800fbc6 <CircularQueue_Add+0x9a>
  {
    curElementSize = (q->elementSize == 0) ? q->qBuff[q->last] + ((q->qBuff[MOD((q->last+1), q->queueMaxSize)])<<8) + 2 : q->elementSize;
 800fb70:	68fb      	ldr	r3, [r7, #12]
 800fb72:	891b      	ldrh	r3, [r3, #8]
 800fb74:	2b00      	cmp	r3, #0
 800fb76:	d123      	bne.n	800fbc0 <CircularQueue_Add+0x94>
 800fb78:	68fb      	ldr	r3, [r7, #12]
 800fb7a:	681a      	ldr	r2, [r3, #0]
 800fb7c:	68fb      	ldr	r3, [r7, #12]
 800fb7e:	691b      	ldr	r3, [r3, #16]
 800fb80:	4413      	add	r3, r2
 800fb82:	781b      	ldrb	r3, [r3, #0]
 800fb84:	b29a      	uxth	r2, r3
 800fb86:	68fb      	ldr	r3, [r7, #12]
 800fb88:	6819      	ldr	r1, [r3, #0]
 800fb8a:	68fb      	ldr	r3, [r7, #12]
 800fb8c:	691b      	ldr	r3, [r3, #16]
 800fb8e:	1c58      	adds	r0, r3, #1
 800fb90:	68fb      	ldr	r3, [r7, #12]
 800fb92:	685b      	ldr	r3, [r3, #4]
 800fb94:	4298      	cmp	r0, r3
 800fb96:	d306      	bcc.n	800fba6 <CircularQueue_Add+0x7a>
 800fb98:	68fb      	ldr	r3, [r7, #12]
 800fb9a:	6918      	ldr	r0, [r3, #16]
 800fb9c:	68fb      	ldr	r3, [r7, #12]
 800fb9e:	685b      	ldr	r3, [r3, #4]
 800fba0:	1ac3      	subs	r3, r0, r3
 800fba2:	3301      	adds	r3, #1
 800fba4:	e002      	b.n	800fbac <CircularQueue_Add+0x80>
 800fba6:	68fb      	ldr	r3, [r7, #12]
 800fba8:	691b      	ldr	r3, [r3, #16]
 800fbaa:	3301      	adds	r3, #1
 800fbac:	440b      	add	r3, r1
 800fbae:	781b      	ldrb	r3, [r3, #0]
 800fbb0:	b29b      	uxth	r3, r3
 800fbb2:	021b      	lsls	r3, r3, #8
 800fbb4:	b29b      	uxth	r3, r3
 800fbb6:	4413      	add	r3, r2
 800fbb8:	b29b      	uxth	r3, r3
 800fbba:	3302      	adds	r3, #2
 800fbbc:	b29b      	uxth	r3, r3
 800fbbe:	e001      	b.n	800fbc4 <CircularQueue_Add+0x98>
 800fbc0:	68fb      	ldr	r3, [r7, #12]
 800fbc2:	891b      	ldrh	r3, [r3, #8]
 800fbc4:	86fb      	strh	r3, [r7, #54]	; 0x36
  }
  /* if queue element have fixed size , reset the elementSize arg with fixed element size value */
  if (q->elementSize > 0)               
 800fbc6:	68fb      	ldr	r3, [r7, #12]
 800fbc8:	891b      	ldrh	r3, [r3, #8]
 800fbca:	2b00      	cmp	r3, #0
 800fbcc:	d002      	beq.n	800fbd4 <CircularQueue_Add+0xa8>
  {
    elementSize = q->elementSize;
 800fbce:	68fb      	ldr	r3, [r7, #12]
 800fbd0:	891b      	ldrh	r3, [r3, #8]
 800fbd2:	80fb      	strh	r3, [r7, #6]
  }

   eob_free_size = (q->last >= q->first) ? q->queueMaxSize - (q->last + curElementSize) : 0;
 800fbd4:	68fb      	ldr	r3, [r7, #12]
 800fbd6:	691a      	ldr	r2, [r3, #16]
 800fbd8:	68fb      	ldr	r3, [r7, #12]
 800fbda:	68db      	ldr	r3, [r3, #12]
 800fbdc:	429a      	cmp	r2, r3
 800fbde:	d307      	bcc.n	800fbf0 <CircularQueue_Add+0xc4>
 800fbe0:	68fb      	ldr	r3, [r7, #12]
 800fbe2:	685a      	ldr	r2, [r3, #4]
 800fbe4:	68fb      	ldr	r3, [r7, #12]
 800fbe6:	6919      	ldr	r1, [r3, #16]
 800fbe8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800fbea:	440b      	add	r3, r1
 800fbec:	1ad3      	subs	r3, r2, r3
 800fbee:	e000      	b.n	800fbf2 <CircularQueue_Add+0xc6>
 800fbf0:	2300      	movs	r3, #0
 800fbf2:	61bb      	str	r3, [r7, #24]

   /* check how many bytes of wrapped element (if anay) are at end of buffer */
   wrapped_element_eob_size = (((elementSize + elemSizeStorageRoom )*nbElements) < eob_free_size) ? 0 : (eob_free_size % (elementSize + elemSizeStorageRoom));
 800fbf4:	88fa      	ldrh	r2, [r7, #6]
 800fbf6:	7ffb      	ldrb	r3, [r7, #31]
 800fbf8:	4413      	add	r3, r2
 800fbfa:	461a      	mov	r2, r3
 800fbfc:	683b      	ldr	r3, [r7, #0]
 800fbfe:	fb02 f303 	mul.w	r3, r2, r3
 800fc02:	69ba      	ldr	r2, [r7, #24]
 800fc04:	429a      	cmp	r2, r3
 800fc06:	d80b      	bhi.n	800fc20 <CircularQueue_Add+0xf4>
 800fc08:	88fa      	ldrh	r2, [r7, #6]
 800fc0a:	7ffb      	ldrb	r3, [r7, #31]
 800fc0c:	4413      	add	r3, r2
 800fc0e:	461a      	mov	r2, r3
 800fc10:	69bb      	ldr	r3, [r7, #24]
 800fc12:	fbb3 f1f2 	udiv	r1, r3, r2
 800fc16:	fb01 f202 	mul.w	r2, r1, r2
 800fc1a:	1a9b      	subs	r3, r3, r2
 800fc1c:	b2db      	uxtb	r3, r3
 800fc1e:	e000      	b.n	800fc22 <CircularQueue_Add+0xf6>
 800fc20:	2300      	movs	r3, #0
 800fc22:	75fb      	strb	r3, [r7, #23]
   wrap_will_occur  = wrapped_element_eob_size > elemSizeStorageRoom;
 800fc24:	7dfa      	ldrb	r2, [r7, #23]
 800fc26:	7ffb      	ldrb	r3, [r7, #31]
 800fc28:	429a      	cmp	r2, r3
 800fc2a:	bf8c      	ite	hi
 800fc2c:	2301      	movhi	r3, #1
 800fc2e:	2300      	movls	r3, #0
 800fc30:	b2db      	uxtb	r3, r3
 800fc32:	77bb      	strb	r3, [r7, #30]

   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)) ? wrapped_element_eob_size : overhead;
 800fc34:	7fbb      	ldrb	r3, [r7, #30]
 800fc36:	2b00      	cmp	r3, #0
 800fc38:	d008      	beq.n	800fc4c <CircularQueue_Add+0x120>
 800fc3a:	68fb      	ldr	r3, [r7, #12]
 800fc3c:	7f1b      	ldrb	r3, [r3, #28]
 800fc3e:	f003 0301 	and.w	r3, r3, #1
 800fc42:	2b00      	cmp	r3, #0
 800fc44:	d002      	beq.n	800fc4c <CircularQueue_Add+0x120>
 800fc46:	7dfb      	ldrb	r3, [r7, #23]
 800fc48:	b29b      	uxth	r3, r3
 800fc4a:	e000      	b.n	800fc4e <CircularQueue_Add+0x122>
 800fc4c:	8bbb      	ldrh	r3, [r7, #28]
 800fc4e:	83bb      	strh	r3, [r7, #28]
   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)) ? elemSizeStorageRoom  : overhead;
 800fc50:	7fbb      	ldrb	r3, [r7, #30]
 800fc52:	2b00      	cmp	r3, #0
 800fc54:	d008      	beq.n	800fc68 <CircularQueue_Add+0x13c>
 800fc56:	68fb      	ldr	r3, [r7, #12]
 800fc58:	7f1b      	ldrb	r3, [r3, #28]
 800fc5a:	f003 0302 	and.w	r3, r3, #2
 800fc5e:	2b00      	cmp	r3, #0
 800fc60:	d002      	beq.n	800fc68 <CircularQueue_Add+0x13c>
 800fc62:	7ffb      	ldrb	r3, [r7, #31]
 800fc64:	b29b      	uxth	r3, r3
 800fc66:	e000      	b.n	800fc6a <CircularQueue_Add+0x13e>
 800fc68:	8bbb      	ldrh	r3, [r7, #28]
 800fc6a:	83bb      	strh	r3, [r7, #28]
   
   
  /* Store now the elements if ennough room for all elements */
  if (elementSize && ((q->byteCount + ((elementSize + elemSizeStorageRoom )*nbElements) + overhead) <= q->queueMaxSize)) 
 800fc6c:	88fb      	ldrh	r3, [r7, #6]
 800fc6e:	2b00      	cmp	r3, #0
 800fc70:	f000 817e 	beq.w	800ff70 <CircularQueue_Add+0x444>
 800fc74:	68fb      	ldr	r3, [r7, #12]
 800fc76:	695a      	ldr	r2, [r3, #20]
 800fc78:	88f9      	ldrh	r1, [r7, #6]
 800fc7a:	7ffb      	ldrb	r3, [r7, #31]
 800fc7c:	440b      	add	r3, r1
 800fc7e:	4619      	mov	r1, r3
 800fc80:	683b      	ldr	r3, [r7, #0]
 800fc82:	fb01 f303 	mul.w	r3, r1, r3
 800fc86:	441a      	add	r2, r3
 800fc88:	8bbb      	ldrh	r3, [r7, #28]
 800fc8a:	441a      	add	r2, r3
 800fc8c:	68fb      	ldr	r3, [r7, #12]
 800fc8e:	685b      	ldr	r3, [r3, #4]
 800fc90:	429a      	cmp	r2, r3
 800fc92:	f200 816d 	bhi.w	800ff70 <CircularQueue_Add+0x444>
  { 
    /* loop to add all elements  */
    for (i=0; i < nbElements; i++) 
 800fc96:	2300      	movs	r3, #0
 800fc98:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fc9a:	e14a      	b.n	800ff32 <CircularQueue_Add+0x406>
    {
      q->last = MOD ((q->last + curElementSize),q->queueMaxSize);
 800fc9c:	68fb      	ldr	r3, [r7, #12]
 800fc9e:	691a      	ldr	r2, [r3, #16]
 800fca0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800fca2:	441a      	add	r2, r3
 800fca4:	68fb      	ldr	r3, [r7, #12]
 800fca6:	685b      	ldr	r3, [r3, #4]
 800fca8:	429a      	cmp	r2, r3
 800fcaa:	d307      	bcc.n	800fcbc <CircularQueue_Add+0x190>
 800fcac:	68fb      	ldr	r3, [r7, #12]
 800fcae:	691a      	ldr	r2, [r3, #16]
 800fcb0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800fcb2:	441a      	add	r2, r3
 800fcb4:	68fb      	ldr	r3, [r7, #12]
 800fcb6:	685b      	ldr	r3, [r3, #4]
 800fcb8:	1ad3      	subs	r3, r2, r3
 800fcba:	e003      	b.n	800fcc4 <CircularQueue_Add+0x198>
 800fcbc:	68fb      	ldr	r3, [r7, #12]
 800fcbe:	691a      	ldr	r2, [r3, #16]
 800fcc0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800fcc2:	4413      	add	r3, r2
 800fcc4:	68fa      	ldr	r2, [r7, #12]
 800fcc6:	6113      	str	r3, [r2, #16]
      curBuffPosition = q->last;
 800fcc8:	68fb      	ldr	r3, [r7, #12]
 800fcca:	691b      	ldr	r3, [r3, #16]
 800fccc:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* store the element  */
      /* store fisrt the element size if element size is varaible */
      if (q->elementSize == 0) 
 800fcce:	68fb      	ldr	r3, [r7, #12]
 800fcd0:	891b      	ldrh	r3, [r3, #8]
 800fcd2:	2b00      	cmp	r3, #0
 800fcd4:	d130      	bne.n	800fd38 <CircularQueue_Add+0x20c>
      {
        q->qBuff[curBuffPosition++]= elementSize & 0xFF;
 800fcd6:	68fb      	ldr	r3, [r7, #12]
 800fcd8:	681a      	ldr	r2, [r3, #0]
 800fcda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fcdc:	1c59      	adds	r1, r3, #1
 800fcde:	6339      	str	r1, [r7, #48]	; 0x30
 800fce0:	4413      	add	r3, r2
 800fce2:	88fa      	ldrh	r2, [r7, #6]
 800fce4:	b2d2      	uxtb	r2, r2
 800fce6:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 800fce8:	68fb      	ldr	r3, [r7, #12]
 800fcea:	685b      	ldr	r3, [r3, #4]
 800fcec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fcee:	429a      	cmp	r2, r3
 800fcf0:	d304      	bcc.n	800fcfc <CircularQueue_Add+0x1d0>
 800fcf2:	68fb      	ldr	r3, [r7, #12]
 800fcf4:	685b      	ldr	r3, [r3, #4]
 800fcf6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fcf8:	1ad3      	subs	r3, r2, r3
 800fcfa:	e000      	b.n	800fcfe <CircularQueue_Add+0x1d2>
 800fcfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fcfe:	633b      	str	r3, [r7, #48]	; 0x30
        q->qBuff[curBuffPosition++]= (elementSize & 0xFF00) >> 8 ;
 800fd00:	88fb      	ldrh	r3, [r7, #6]
 800fd02:	0a1b      	lsrs	r3, r3, #8
 800fd04:	b298      	uxth	r0, r3
 800fd06:	68fb      	ldr	r3, [r7, #12]
 800fd08:	681a      	ldr	r2, [r3, #0]
 800fd0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd0c:	1c59      	adds	r1, r3, #1
 800fd0e:	6339      	str	r1, [r7, #48]	; 0x30
 800fd10:	4413      	add	r3, r2
 800fd12:	b2c2      	uxtb	r2, r0
 800fd14:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 800fd16:	68fb      	ldr	r3, [r7, #12]
 800fd18:	685b      	ldr	r3, [r3, #4]
 800fd1a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fd1c:	429a      	cmp	r2, r3
 800fd1e:	d304      	bcc.n	800fd2a <CircularQueue_Add+0x1fe>
 800fd20:	68fb      	ldr	r3, [r7, #12]
 800fd22:	685b      	ldr	r3, [r3, #4]
 800fd24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fd26:	1ad3      	subs	r3, r2, r3
 800fd28:	e000      	b.n	800fd2c <CircularQueue_Add+0x200>
 800fd2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd2c:	633b      	str	r3, [r7, #48]	; 0x30
        q->byteCount += 2;
 800fd2e:	68fb      	ldr	r3, [r7, #12]
 800fd30:	695b      	ldr	r3, [r3, #20]
 800fd32:	1c9a      	adds	r2, r3, #2
 800fd34:	68fb      	ldr	r3, [r7, #12]
 800fd36:	615a      	str	r2, [r3, #20]
      }
      
      /* Identify number of bytes of copy takeing account possible wrap, in this case NbBytesToCopy will contains size that fit at end of the queue buffer */
      NbBytesToCopy = MIN((q->queueMaxSize-curBuffPosition),elementSize);
 800fd38:	88fa      	ldrh	r2, [r7, #6]
 800fd3a:	68fb      	ldr	r3, [r7, #12]
 800fd3c:	6859      	ldr	r1, [r3, #4]
 800fd3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd40:	1acb      	subs	r3, r1, r3
 800fd42:	4293      	cmp	r3, r2
 800fd44:	bf28      	it	cs
 800fd46:	4613      	movcs	r3, r2
 800fd48:	62bb      	str	r3, [r7, #40]	; 0x28
      /* check if no wrap (NbBytesToCopy == elementSize) or if Wrap and no spsicf option; 
         In thi case part of data will copied at the end of the buffer and the rest a the beggining */
      if ((NbBytesToCopy == elementSize) || ((NbBytesToCopy < elementSize) && (q->optionFlags == CIRCULAR_QUEUE_NO_FLAG)))
 800fd4a:	88fb      	ldrh	r3, [r7, #6]
 800fd4c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fd4e:	429a      	cmp	r2, r3
 800fd50:	d007      	beq.n	800fd62 <CircularQueue_Add+0x236>
 800fd52:	88fb      	ldrh	r3, [r7, #6]
 800fd54:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fd56:	429a      	cmp	r2, r3
 800fd58:	d225      	bcs.n	800fda6 <CircularQueue_Add+0x27a>
 800fd5a:	68fb      	ldr	r3, [r7, #12]
 800fd5c:	7f1b      	ldrb	r3, [r3, #28]
 800fd5e:	2b00      	cmp	r3, #0
 800fd60:	d121      	bne.n	800fda6 <CircularQueue_Add+0x27a>
      {
        /* Copy First part (or emtire buffer ) from current position up to the end of the buffer queue (or before if enough room)  */
        memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 800fd62:	68fb      	ldr	r3, [r7, #12]
 800fd64:	681a      	ldr	r2, [r3, #0]
 800fd66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd68:	18d0      	adds	r0, r2, r3
 800fd6a:	88fb      	ldrh	r3, [r7, #6]
 800fd6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fd6e:	fb02 f303 	mul.w	r3, r2, r3
 800fd72:	68ba      	ldr	r2, [r7, #8]
 800fd74:	4413      	add	r3, r2
 800fd76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fd78:	4619      	mov	r1, r3
 800fd7a:	f003 f989 	bl	8013090 <memcpy>
        /* Adjust bytes count */
        q->byteCount += NbBytesToCopy;
 800fd7e:	68fb      	ldr	r3, [r7, #12]
 800fd80:	695a      	ldr	r2, [r3, #20]
 800fd82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd84:	441a      	add	r2, r3
 800fd86:	68fb      	ldr	r3, [r7, #12]
 800fd88:	615a      	str	r2, [r3, #20]
        /* Wrap */
        curBuffPosition = 0; 
 800fd8a:	2300      	movs	r3, #0
 800fd8c:	633b      	str	r3, [r7, #48]	; 0x30
        /* set NbCopiedBytes bytes with  ampount copied */
        NbCopiedBytes = NbBytesToCopy;
 800fd8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd90:	627b      	str	r3, [r7, #36]	; 0x24
        /* set the rest to copy if wrao , if no wrap will be 0 */
        NbBytesToCopy = elementSize - NbBytesToCopy;
 800fd92:	88fa      	ldrh	r2, [r7, #6]
 800fd94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd96:	1ad3      	subs	r3, r2, r3
 800fd98:	62bb      	str	r3, [r7, #40]	; 0x28
        /* set the current element Size, will be used to calaculate next last position at beggining of loop */
        curElementSize = (elementSize) + elemSizeStorageRoom ;
 800fd9a:	7ffb      	ldrb	r3, [r7, #31]
 800fd9c:	b29a      	uxth	r2, r3
 800fd9e:	88fb      	ldrh	r3, [r7, #6]
 800fda0:	4413      	add	r3, r2
 800fda2:	86fb      	strh	r3, [r7, #54]	; 0x36
 800fda4:	e0a4      	b.n	800fef0 <CircularQueue_Add+0x3c4>
      }
      else if (NbBytesToCopy)  /* We have a wrap  to manage */
 800fda6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fda8:	2b00      	cmp	r3, #0
 800fdaa:	f000 80a1 	beq.w	800fef0 <CircularQueue_Add+0x3c4>
      {
       /* case of CIRCULAR_QUEUE_NO_WRAP_FLAG option */
         if (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)
 800fdae:	68fb      	ldr	r3, [r7, #12]
 800fdb0:	7f1b      	ldrb	r3, [r3, #28]
 800fdb2:	f003 0301 	and.w	r3, r3, #1
 800fdb6:	2b00      	cmp	r3, #0
 800fdb8:	d03a      	beq.n	800fe30 <CircularQueue_Add+0x304>
        {
          /* if element size are variable and NO_WRAP option, Invalidate end of buffer setting 0xFFFF size*/
          if (q->elementSize == 0)
 800fdba:	68fb      	ldr	r3, [r7, #12]
 800fdbc:	891b      	ldrh	r3, [r3, #8]
 800fdbe:	2b00      	cmp	r3, #0
 800fdc0:	d10d      	bne.n	800fdde <CircularQueue_Add+0x2b2>
          {
             q->qBuff[curBuffPosition-2] = 0xFF;
 800fdc2:	68fb      	ldr	r3, [r7, #12]
 800fdc4:	681a      	ldr	r2, [r3, #0]
 800fdc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fdc8:	3b02      	subs	r3, #2
 800fdca:	4413      	add	r3, r2
 800fdcc:	22ff      	movs	r2, #255	; 0xff
 800fdce:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = 0xFF;
 800fdd0:	68fb      	ldr	r3, [r7, #12]
 800fdd2:	681a      	ldr	r2, [r3, #0]
 800fdd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fdd6:	3b01      	subs	r3, #1
 800fdd8:	4413      	add	r3, r2
 800fdda:	22ff      	movs	r2, #255	; 0xff
 800fddc:	701a      	strb	r2, [r3, #0]
          }
          q->byteCount += NbBytesToCopy;  /* invalid data at the end of buffer are take into account in byteCount */
 800fdde:	68fb      	ldr	r3, [r7, #12]
 800fde0:	695a      	ldr	r2, [r3, #20]
 800fde2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fde4:	441a      	add	r2, r3
 800fde6:	68fb      	ldr	r3, [r7, #12]
 800fde8:	615a      	str	r2, [r3, #20]
          /* No bytes coped a the end of buffer */
          NbCopiedBytes = 0;
 800fdea:	2300      	movs	r3, #0
 800fdec:	627b      	str	r3, [r7, #36]	; 0x24
          /* all element to be copied at the begnning of buffer */
          NbBytesToCopy = elementSize; 
 800fdee:	88fb      	ldrh	r3, [r7, #6]
 800fdf0:	62bb      	str	r3, [r7, #40]	; 0x28
          /* Wrap */
          curBuffPosition = 0; 
 800fdf2:	2300      	movs	r3, #0
 800fdf4:	633b      	str	r3, [r7, #48]	; 0x30
          /* if variable size element, invalidate end of buffer setting OxFFFF in element header (size) */
          if (q->elementSize == 0)
 800fdf6:	68fb      	ldr	r3, [r7, #12]
 800fdf8:	891b      	ldrh	r3, [r3, #8]
 800fdfa:	2b00      	cmp	r3, #0
 800fdfc:	d16f      	bne.n	800fede <CircularQueue_Add+0x3b2>
          {
            q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 800fdfe:	68fb      	ldr	r3, [r7, #12]
 800fe00:	681a      	ldr	r2, [r3, #0]
 800fe02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe04:	1c59      	adds	r1, r3, #1
 800fe06:	6339      	str	r1, [r7, #48]	; 0x30
 800fe08:	4413      	add	r3, r2
 800fe0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fe0c:	b2d2      	uxtb	r2, r2
 800fe0e:	701a      	strb	r2, [r3, #0]
            q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800fe10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe12:	0a18      	lsrs	r0, r3, #8
 800fe14:	68fb      	ldr	r3, [r7, #12]
 800fe16:	681a      	ldr	r2, [r3, #0]
 800fe18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe1a:	1c59      	adds	r1, r3, #1
 800fe1c:	6339      	str	r1, [r7, #48]	; 0x30
 800fe1e:	4413      	add	r3, r2
 800fe20:	b2c2      	uxtb	r2, r0
 800fe22:	701a      	strb	r2, [r3, #0]
            q->byteCount += 2;   
 800fe24:	68fb      	ldr	r3, [r7, #12]
 800fe26:	695b      	ldr	r3, [r3, #20]
 800fe28:	1c9a      	adds	r2, r3, #2
 800fe2a:	68fb      	ldr	r3, [r7, #12]
 800fe2c:	615a      	str	r2, [r3, #20]
 800fe2e:	e056      	b.n	800fede <CircularQueue_Add+0x3b2>
          } 
           
        }
        /* case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG option */
        else if (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)
 800fe30:	68fb      	ldr	r3, [r7, #12]
 800fe32:	7f1b      	ldrb	r3, [r3, #28]
 800fe34:	f003 0302 	and.w	r3, r3, #2
 800fe38:	2b00      	cmp	r3, #0
 800fe3a:	d050      	beq.n	800fede <CircularQueue_Add+0x3b2>
        {
          if (q->elementSize == 0)
 800fe3c:	68fb      	ldr	r3, [r7, #12]
 800fe3e:	891b      	ldrh	r3, [r3, #8]
 800fe40:	2b00      	cmp	r3, #0
 800fe42:	d14a      	bne.n	800feda <CircularQueue_Add+0x3ae>
          {
            /* reset the size of current element to the nb bytes fitting at the end of buffer */
             q->qBuff[curBuffPosition-2] = NbBytesToCopy & 0xFF;
 800fe44:	68fb      	ldr	r3, [r7, #12]
 800fe46:	681a      	ldr	r2, [r3, #0]
 800fe48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe4a:	3b02      	subs	r3, #2
 800fe4c:	4413      	add	r3, r2
 800fe4e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fe50:	b2d2      	uxtb	r2, r2
 800fe52:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800fe54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe56:	0a19      	lsrs	r1, r3, #8
 800fe58:	68fb      	ldr	r3, [r7, #12]
 800fe5a:	681a      	ldr	r2, [r3, #0]
 800fe5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe5e:	3b01      	subs	r3, #1
 800fe60:	4413      	add	r3, r2
 800fe62:	b2ca      	uxtb	r2, r1
 800fe64:	701a      	strb	r2, [r3, #0]
             /* copy the bytes */ 
             memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 800fe66:	68fb      	ldr	r3, [r7, #12]
 800fe68:	681a      	ldr	r2, [r3, #0]
 800fe6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe6c:	18d0      	adds	r0, r2, r3
 800fe6e:	88fb      	ldrh	r3, [r7, #6]
 800fe70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fe72:	fb02 f303 	mul.w	r3, r2, r3
 800fe76:	68ba      	ldr	r2, [r7, #8]
 800fe78:	4413      	add	r3, r2
 800fe7a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fe7c:	4619      	mov	r1, r3
 800fe7e:	f003 f907 	bl	8013090 <memcpy>
             q->byteCount += NbBytesToCopy; 
 800fe82:	68fb      	ldr	r3, [r7, #12]
 800fe84:	695a      	ldr	r2, [r3, #20]
 800fe86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe88:	441a      	add	r2, r3
 800fe8a:	68fb      	ldr	r3, [r7, #12]
 800fe8c:	615a      	str	r2, [r3, #20]
             /* set the number of copied bytes */
             NbCopiedBytes = NbBytesToCopy;             
 800fe8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe90:	627b      	str	r3, [r7, #36]	; 0x24
             /* set rest of data to be copied to begnning of buffer */
             NbBytesToCopy = elementSize - NbBytesToCopy;
 800fe92:	88fa      	ldrh	r2, [r7, #6]
 800fe94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe96:	1ad3      	subs	r3, r2, r3
 800fe98:	62bb      	str	r3, [r7, #40]	; 0x28
             /* one element more dur to split in 2 elements */
             q->elementCount++;
 800fe9a:	68fb      	ldr	r3, [r7, #12]
 800fe9c:	699b      	ldr	r3, [r3, #24]
 800fe9e:	1c5a      	adds	r2, r3, #1
 800fea0:	68fb      	ldr	r3, [r7, #12]
 800fea2:	619a      	str	r2, [r3, #24]
             /* Wrap */
             curBuffPosition = 0; 
 800fea4:	2300      	movs	r3, #0
 800fea6:	633b      	str	r3, [r7, #48]	; 0x30
             /* Set new size for rest of data */
             q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 800fea8:	68fb      	ldr	r3, [r7, #12]
 800feaa:	681a      	ldr	r2, [r3, #0]
 800feac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800feae:	1c59      	adds	r1, r3, #1
 800feb0:	6339      	str	r1, [r7, #48]	; 0x30
 800feb2:	4413      	add	r3, r2
 800feb4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800feb6:	b2d2      	uxtb	r2, r2
 800feb8:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800feba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800febc:	0a18      	lsrs	r0, r3, #8
 800febe:	68fb      	ldr	r3, [r7, #12]
 800fec0:	681a      	ldr	r2, [r3, #0]
 800fec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fec4:	1c59      	adds	r1, r3, #1
 800fec6:	6339      	str	r1, [r7, #48]	; 0x30
 800fec8:	4413      	add	r3, r2
 800feca:	b2c2      	uxtb	r2, r0
 800fecc:	701a      	strb	r2, [r3, #0]
             q->byteCount += 2;              
 800fece:	68fb      	ldr	r3, [r7, #12]
 800fed0:	695b      	ldr	r3, [r3, #20]
 800fed2:	1c9a      	adds	r2, r3, #2
 800fed4:	68fb      	ldr	r3, [r7, #12]
 800fed6:	615a      	str	r2, [r3, #20]
 800fed8:	e001      	b.n	800fede <CircularQueue_Add+0x3b2>
          else
          {
            /* Should not occur */
            /* can not manage split Flag on Fixed size element */
            /* Buffer is corrupted */
            return NULL;
 800feda:	2300      	movs	r3, #0
 800fedc:	e049      	b.n	800ff72 <CircularQueue_Add+0x446>
          }
        }
        curElementSize = (NbBytesToCopy) + elemSizeStorageRoom ;
 800fede:	7ffb      	ldrb	r3, [r7, #31]
 800fee0:	b29a      	uxth	r2, r3
 800fee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fee4:	b29b      	uxth	r3, r3
 800fee6:	4413      	add	r3, r2
 800fee8:	86fb      	strh	r3, [r7, #54]	; 0x36
        q->last = 0;        
 800feea:	68fb      	ldr	r3, [r7, #12]
 800feec:	2200      	movs	r2, #0
 800feee:	611a      	str	r2, [r3, #16]
      }  
      
      /* some remaning byte to copy */
      if (NbBytesToCopy)      
 800fef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fef2:	2b00      	cmp	r3, #0
 800fef4:	d015      	beq.n	800ff22 <CircularQueue_Add+0x3f6>
      {
        memcpy(&q->qBuff[curBuffPosition],&x[(i*elementSize)+NbCopiedBytes],NbBytesToCopy);
 800fef6:	68fb      	ldr	r3, [r7, #12]
 800fef8:	681a      	ldr	r2, [r3, #0]
 800fefa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fefc:	18d0      	adds	r0, r2, r3
 800fefe:	88fb      	ldrh	r3, [r7, #6]
 800ff00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ff02:	fb03 f202 	mul.w	r2, r3, r2
 800ff06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff08:	4413      	add	r3, r2
 800ff0a:	68ba      	ldr	r2, [r7, #8]
 800ff0c:	4413      	add	r3, r2
 800ff0e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ff10:	4619      	mov	r1, r3
 800ff12:	f003 f8bd 	bl	8013090 <memcpy>
        q->byteCount += NbBytesToCopy;
 800ff16:	68fb      	ldr	r3, [r7, #12]
 800ff18:	695a      	ldr	r2, [r3, #20]
 800ff1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff1c:	441a      	add	r2, r3
 800ff1e:	68fb      	ldr	r3, [r7, #12]
 800ff20:	615a      	str	r2, [r3, #20]
      }      
      
      /* One more element */
      q->elementCount++;
 800ff22:	68fb      	ldr	r3, [r7, #12]
 800ff24:	699b      	ldr	r3, [r3, #24]
 800ff26:	1c5a      	adds	r2, r3, #1
 800ff28:	68fb      	ldr	r3, [r7, #12]
 800ff2a:	619a      	str	r2, [r3, #24]
    for (i=0; i < nbElements; i++) 
 800ff2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff2e:	3301      	adds	r3, #1
 800ff30:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ff32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ff34:	683b      	ldr	r3, [r7, #0]
 800ff36:	429a      	cmp	r2, r3
 800ff38:	f4ff aeb0 	bcc.w	800fc9c <CircularQueue_Add+0x170>
    }
    
    ptr = q->qBuff + (MOD((q->last+elemSizeStorageRoom ),q->queueMaxSize));
 800ff3c:	68fb      	ldr	r3, [r7, #12]
 800ff3e:	681a      	ldr	r2, [r3, #0]
 800ff40:	68fb      	ldr	r3, [r7, #12]
 800ff42:	6919      	ldr	r1, [r3, #16]
 800ff44:	7ffb      	ldrb	r3, [r7, #31]
 800ff46:	4419      	add	r1, r3
 800ff48:	68fb      	ldr	r3, [r7, #12]
 800ff4a:	685b      	ldr	r3, [r3, #4]
 800ff4c:	4299      	cmp	r1, r3
 800ff4e:	d307      	bcc.n	800ff60 <CircularQueue_Add+0x434>
 800ff50:	68fb      	ldr	r3, [r7, #12]
 800ff52:	6919      	ldr	r1, [r3, #16]
 800ff54:	7ffb      	ldrb	r3, [r7, #31]
 800ff56:	4419      	add	r1, r3
 800ff58:	68fb      	ldr	r3, [r7, #12]
 800ff5a:	685b      	ldr	r3, [r3, #4]
 800ff5c:	1acb      	subs	r3, r1, r3
 800ff5e:	e003      	b.n	800ff68 <CircularQueue_Add+0x43c>
 800ff60:	68fb      	ldr	r3, [r7, #12]
 800ff62:	6919      	ldr	r1, [r3, #16]
 800ff64:	7ffb      	ldrb	r3, [r7, #31]
 800ff66:	440b      	add	r3, r1
 800ff68:	4413      	add	r3, r2
 800ff6a:	623b      	str	r3, [r7, #32]
  /* for Breakpoint only...to remove */
  else
  {
    return NULL;
  }
  return ptr;
 800ff6c:	6a3b      	ldr	r3, [r7, #32]
 800ff6e:	e000      	b.n	800ff72 <CircularQueue_Add+0x446>
    return NULL;
 800ff70:	2300      	movs	r3, #0
}
 800ff72:	4618      	mov	r0, r3
 800ff74:	3738      	adds	r7, #56	; 0x38
 800ff76:	46bd      	mov	sp, r7
 800ff78:	bd80      	pop	{r7, pc}

0800ff7a <CircularQueue_Remove>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize: Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on removed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Remove(queue_t *q, uint16_t* elementSize)
{
 800ff7a:	b480      	push	{r7}
 800ff7c:	b085      	sub	sp, #20
 800ff7e:	af00      	add	r7, sp, #0
 800ff80:	6078      	str	r0, [r7, #4]
 800ff82:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 800ff84:	2300      	movs	r3, #0
 800ff86:	727b      	strb	r3, [r7, #9]
  uint8_t* ptr= NULL;
 800ff88:	2300      	movs	r3, #0
 800ff8a:	60fb      	str	r3, [r7, #12]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 800ff8c:	687b      	ldr	r3, [r7, #4]
 800ff8e:	891b      	ldrh	r3, [r3, #8]
 800ff90:	2b00      	cmp	r3, #0
 800ff92:	d101      	bne.n	800ff98 <CircularQueue_Remove+0x1e>
 800ff94:	2302      	movs	r3, #2
 800ff96:	e000      	b.n	800ff9a <CircularQueue_Remove+0x20>
 800ff98:	2300      	movs	r3, #0
 800ff9a:	727b      	strb	r3, [r7, #9]
  uint16_t eltSize = 0;
 800ff9c:	2300      	movs	r3, #0
 800ff9e:	817b      	strh	r3, [r7, #10]
  if (q->byteCount > 0) 
 800ffa0:	687b      	ldr	r3, [r7, #4]
 800ffa2:	695b      	ldr	r3, [r3, #20]
 800ffa4:	2b00      	cmp	r3, #0
 800ffa6:	f000 80cc 	beq.w	8010142 <CircularQueue_Remove+0x1c8>
  {
    /* retreive element Size */
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800ffaa:	687b      	ldr	r3, [r7, #4]
 800ffac:	891b      	ldrh	r3, [r3, #8]
 800ffae:	2b00      	cmp	r3, #0
 800ffb0:	d121      	bne.n	800fff6 <CircularQueue_Remove+0x7c>
 800ffb2:	687b      	ldr	r3, [r7, #4]
 800ffb4:	681a      	ldr	r2, [r3, #0]
 800ffb6:	687b      	ldr	r3, [r7, #4]
 800ffb8:	68db      	ldr	r3, [r3, #12]
 800ffba:	4413      	add	r3, r2
 800ffbc:	781b      	ldrb	r3, [r3, #0]
 800ffbe:	b29a      	uxth	r2, r3
 800ffc0:	687b      	ldr	r3, [r7, #4]
 800ffc2:	6819      	ldr	r1, [r3, #0]
 800ffc4:	687b      	ldr	r3, [r7, #4]
 800ffc6:	68db      	ldr	r3, [r3, #12]
 800ffc8:	1c58      	adds	r0, r3, #1
 800ffca:	687b      	ldr	r3, [r7, #4]
 800ffcc:	685b      	ldr	r3, [r3, #4]
 800ffce:	4298      	cmp	r0, r3
 800ffd0:	d306      	bcc.n	800ffe0 <CircularQueue_Remove+0x66>
 800ffd2:	687b      	ldr	r3, [r7, #4]
 800ffd4:	68d8      	ldr	r0, [r3, #12]
 800ffd6:	687b      	ldr	r3, [r7, #4]
 800ffd8:	685b      	ldr	r3, [r3, #4]
 800ffda:	1ac3      	subs	r3, r0, r3
 800ffdc:	3301      	adds	r3, #1
 800ffde:	e002      	b.n	800ffe6 <CircularQueue_Remove+0x6c>
 800ffe0:	687b      	ldr	r3, [r7, #4]
 800ffe2:	68db      	ldr	r3, [r3, #12]
 800ffe4:	3301      	adds	r3, #1
 800ffe6:	440b      	add	r3, r1
 800ffe8:	781b      	ldrb	r3, [r3, #0]
 800ffea:	b29b      	uxth	r3, r3
 800ffec:	021b      	lsls	r3, r3, #8
 800ffee:	b29b      	uxth	r3, r3
 800fff0:	4413      	add	r3, r2
 800fff2:	b29b      	uxth	r3, r3
 800fff4:	e001      	b.n	800fffa <CircularQueue_Remove+0x80>
 800fff6:	687b      	ldr	r3, [r7, #4]
 800fff8:	891b      	ldrh	r3, [r3, #8]
 800fffa:	817b      	strh	r3, [r7, #10]

     if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 800fffc:	687b      	ldr	r3, [r7, #4]
 800fffe:	7f1b      	ldrb	r3, [r3, #28]
 8010000:	f003 0301 	and.w	r3, r3, #1
 8010004:	2b00      	cmp	r3, #0
 8010006:	d057      	beq.n	80100b8 <CircularQueue_Remove+0x13e>
 8010008:	687b      	ldr	r3, [r7, #4]
 801000a:	7f1b      	ldrb	r3, [r3, #28]
 801000c:	f003 0302 	and.w	r3, r3, #2
 8010010:	2b00      	cmp	r3, #0
 8010012:	d151      	bne.n	80100b8 <CircularQueue_Remove+0x13e>
     {
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 8010014:	897b      	ldrh	r3, [r7, #10]
 8010016:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801001a:	4293      	cmp	r3, r2
 801001c:	d103      	bne.n	8010026 <CircularQueue_Remove+0xac>
 801001e:	687b      	ldr	r3, [r7, #4]
 8010020:	891b      	ldrh	r3, [r3, #8]
 8010022:	2b00      	cmp	r3, #0
 8010024:	d012      	beq.n	801004c <CircularQueue_Remove+0xd2>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 8010026:	687b      	ldr	r3, [r7, #4]
 8010028:	68da      	ldr	r2, [r3, #12]
 801002a:	687b      	ldr	r3, [r7, #4]
 801002c:	691b      	ldr	r3, [r3, #16]
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 801002e:	429a      	cmp	r2, r3
 8010030:	d942      	bls.n	80100b8 <CircularQueue_Remove+0x13e>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 8010032:	687b      	ldr	r3, [r7, #4]
 8010034:	891b      	ldrh	r3, [r3, #8]
 8010036:	2b00      	cmp	r3, #0
 8010038:	d03e      	beq.n	80100b8 <CircularQueue_Remove+0x13e>
 801003a:	687b      	ldr	r3, [r7, #4]
 801003c:	685a      	ldr	r2, [r3, #4]
 801003e:	687b      	ldr	r3, [r7, #4]
 8010040:	68db      	ldr	r3, [r3, #12]
 8010042:	1ad3      	subs	r3, r2, r3
 8010044:	687a      	ldr	r2, [r7, #4]
 8010046:	8912      	ldrh	r2, [r2, #8]
 8010048:	4293      	cmp	r3, r2
 801004a:	d235      	bcs.n	80100b8 <CircularQueue_Remove+0x13e>
       {
          /* all data from current position up to the end of buffer are invalid */
          q->byteCount -= (q->queueMaxSize - q->first);
 801004c:	687b      	ldr	r3, [r7, #4]
 801004e:	695a      	ldr	r2, [r3, #20]
 8010050:	687b      	ldr	r3, [r7, #4]
 8010052:	68d9      	ldr	r1, [r3, #12]
 8010054:	687b      	ldr	r3, [r7, #4]
 8010056:	685b      	ldr	r3, [r3, #4]
 8010058:	1acb      	subs	r3, r1, r3
 801005a:	441a      	add	r2, r3
 801005c:	687b      	ldr	r3, [r7, #4]
 801005e:	615a      	str	r2, [r3, #20]
          /* Adjust first element pos */
          q->first = 0;
 8010060:	687b      	ldr	r3, [r7, #4]
 8010062:	2200      	movs	r2, #0
 8010064:	60da      	str	r2, [r3, #12]
          /* retrieve the rigth size after the wrap [if varaible size element] */
          eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 8010066:	687b      	ldr	r3, [r7, #4]
 8010068:	891b      	ldrh	r3, [r3, #8]
 801006a:	2b00      	cmp	r3, #0
 801006c:	d121      	bne.n	80100b2 <CircularQueue_Remove+0x138>
 801006e:	687b      	ldr	r3, [r7, #4]
 8010070:	681a      	ldr	r2, [r3, #0]
 8010072:	687b      	ldr	r3, [r7, #4]
 8010074:	68db      	ldr	r3, [r3, #12]
 8010076:	4413      	add	r3, r2
 8010078:	781b      	ldrb	r3, [r3, #0]
 801007a:	b29a      	uxth	r2, r3
 801007c:	687b      	ldr	r3, [r7, #4]
 801007e:	6819      	ldr	r1, [r3, #0]
 8010080:	687b      	ldr	r3, [r7, #4]
 8010082:	68db      	ldr	r3, [r3, #12]
 8010084:	1c58      	adds	r0, r3, #1
 8010086:	687b      	ldr	r3, [r7, #4]
 8010088:	685b      	ldr	r3, [r3, #4]
 801008a:	4298      	cmp	r0, r3
 801008c:	d306      	bcc.n	801009c <CircularQueue_Remove+0x122>
 801008e:	687b      	ldr	r3, [r7, #4]
 8010090:	68d8      	ldr	r0, [r3, #12]
 8010092:	687b      	ldr	r3, [r7, #4]
 8010094:	685b      	ldr	r3, [r3, #4]
 8010096:	1ac3      	subs	r3, r0, r3
 8010098:	3301      	adds	r3, #1
 801009a:	e002      	b.n	80100a2 <CircularQueue_Remove+0x128>
 801009c:	687b      	ldr	r3, [r7, #4]
 801009e:	68db      	ldr	r3, [r3, #12]
 80100a0:	3301      	adds	r3, #1
 80100a2:	440b      	add	r3, r1
 80100a4:	781b      	ldrb	r3, [r3, #0]
 80100a6:	b29b      	uxth	r3, r3
 80100a8:	021b      	lsls	r3, r3, #8
 80100aa:	b29b      	uxth	r3, r3
 80100ac:	4413      	add	r3, r2
 80100ae:	b29b      	uxth	r3, r3
 80100b0:	e001      	b.n	80100b6 <CircularQueue_Remove+0x13c>
 80100b2:	687b      	ldr	r3, [r7, #4]
 80100b4:	891b      	ldrh	r3, [r3, #8]
 80100b6:	817b      	strh	r3, [r7, #10]
       }
     }

    /* retreive element */
    ptr = q->qBuff + (MOD((q->first + elemSizeStorageRoom), q->queueMaxSize));
 80100b8:	687b      	ldr	r3, [r7, #4]
 80100ba:	681a      	ldr	r2, [r3, #0]
 80100bc:	687b      	ldr	r3, [r7, #4]
 80100be:	68d9      	ldr	r1, [r3, #12]
 80100c0:	7a7b      	ldrb	r3, [r7, #9]
 80100c2:	4419      	add	r1, r3
 80100c4:	687b      	ldr	r3, [r7, #4]
 80100c6:	685b      	ldr	r3, [r3, #4]
 80100c8:	4299      	cmp	r1, r3
 80100ca:	d307      	bcc.n	80100dc <CircularQueue_Remove+0x162>
 80100cc:	687b      	ldr	r3, [r7, #4]
 80100ce:	68d9      	ldr	r1, [r3, #12]
 80100d0:	7a7b      	ldrb	r3, [r7, #9]
 80100d2:	4419      	add	r1, r3
 80100d4:	687b      	ldr	r3, [r7, #4]
 80100d6:	685b      	ldr	r3, [r3, #4]
 80100d8:	1acb      	subs	r3, r1, r3
 80100da:	e003      	b.n	80100e4 <CircularQueue_Remove+0x16a>
 80100dc:	687b      	ldr	r3, [r7, #4]
 80100de:	68d9      	ldr	r1, [r3, #12]
 80100e0:	7a7b      	ldrb	r3, [r7, #9]
 80100e2:	440b      	add	r3, r1
 80100e4:	4413      	add	r3, r2
 80100e6:	60fb      	str	r3, [r7, #12]

    /* adjust byte count */
    q->byteCount -= (eltSize + elemSizeStorageRoom) ;
 80100e8:	687b      	ldr	r3, [r7, #4]
 80100ea:	695b      	ldr	r3, [r3, #20]
 80100ec:	8979      	ldrh	r1, [r7, #10]
 80100ee:	7a7a      	ldrb	r2, [r7, #9]
 80100f0:	440a      	add	r2, r1
 80100f2:	1a9a      	subs	r2, r3, r2
 80100f4:	687b      	ldr	r3, [r7, #4]
 80100f6:	615a      	str	r2, [r3, #20]
    
    /* Adjust q->first */
    if (q->byteCount > 0)
 80100f8:	687b      	ldr	r3, [r7, #4]
 80100fa:	695b      	ldr	r3, [r3, #20]
 80100fc:	2b00      	cmp	r3, #0
 80100fe:	d01b      	beq.n	8010138 <CircularQueue_Remove+0x1be>
    {
      q->first = MOD((q->first+ eltSize + elemSizeStorageRoom ), q->queueMaxSize);
 8010100:	687b      	ldr	r3, [r7, #4]
 8010102:	68da      	ldr	r2, [r3, #12]
 8010104:	897b      	ldrh	r3, [r7, #10]
 8010106:	441a      	add	r2, r3
 8010108:	7a7b      	ldrb	r3, [r7, #9]
 801010a:	441a      	add	r2, r3
 801010c:	687b      	ldr	r3, [r7, #4]
 801010e:	685b      	ldr	r3, [r3, #4]
 8010110:	429a      	cmp	r2, r3
 8010112:	d309      	bcc.n	8010128 <CircularQueue_Remove+0x1ae>
 8010114:	687b      	ldr	r3, [r7, #4]
 8010116:	68da      	ldr	r2, [r3, #12]
 8010118:	897b      	ldrh	r3, [r7, #10]
 801011a:	441a      	add	r2, r3
 801011c:	7a7b      	ldrb	r3, [r7, #9]
 801011e:	441a      	add	r2, r3
 8010120:	687b      	ldr	r3, [r7, #4]
 8010122:	685b      	ldr	r3, [r3, #4]
 8010124:	1ad3      	subs	r3, r2, r3
 8010126:	e005      	b.n	8010134 <CircularQueue_Remove+0x1ba>
 8010128:	687b      	ldr	r3, [r7, #4]
 801012a:	68da      	ldr	r2, [r3, #12]
 801012c:	897b      	ldrh	r3, [r7, #10]
 801012e:	441a      	add	r2, r3
 8010130:	7a7b      	ldrb	r3, [r7, #9]
 8010132:	4413      	add	r3, r2
 8010134:	687a      	ldr	r2, [r7, #4]
 8010136:	60d3      	str	r3, [r2, #12]
    }    
    /* adjust element count */    
    --q->elementCount;    
 8010138:	687b      	ldr	r3, [r7, #4]
 801013a:	699b      	ldr	r3, [r3, #24]
 801013c:	1e5a      	subs	r2, r3, #1
 801013e:	687b      	ldr	r3, [r7, #4]
 8010140:	619a      	str	r2, [r3, #24]
  }
  if (elementSize != NULL)
 8010142:	683b      	ldr	r3, [r7, #0]
 8010144:	2b00      	cmp	r3, #0
 8010146:	d002      	beq.n	801014e <CircularQueue_Remove+0x1d4>
  {
    *elementSize = eltSize;
 8010148:	683b      	ldr	r3, [r7, #0]
 801014a:	897a      	ldrh	r2, [r7, #10]
 801014c:	801a      	strh	r2, [r3, #0]
  }
  return ptr;
 801014e:	68fb      	ldr	r3, [r7, #12]
}
 8010150:	4618      	mov	r0, r3
 8010152:	3714      	adds	r7, #20
 8010154:	46bd      	mov	sp, r7
 8010156:	f85d 7b04 	ldr.w	r7, [sp], #4
 801015a:	4770      	bx	lr

0801015c <CircularQueue_Sense>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize:  Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on sensed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Sense(queue_t *q, uint16_t* elementSize)
{
 801015c:	b480      	push	{r7}
 801015e:	b087      	sub	sp, #28
 8010160:	af00      	add	r7, sp, #0
 8010162:	6078      	str	r0, [r7, #4]
 8010164:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 8010166:	2300      	movs	r3, #0
 8010168:	72fb      	strb	r3, [r7, #11]
  uint8_t* x= NULL;
 801016a:	2300      	movs	r3, #0
 801016c:	617b      	str	r3, [r7, #20]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 801016e:	687b      	ldr	r3, [r7, #4]
 8010170:	891b      	ldrh	r3, [r3, #8]
 8010172:	2b00      	cmp	r3, #0
 8010174:	d101      	bne.n	801017a <CircularQueue_Sense+0x1e>
 8010176:	2302      	movs	r3, #2
 8010178:	e000      	b.n	801017c <CircularQueue_Sense+0x20>
 801017a:	2300      	movs	r3, #0
 801017c:	72fb      	strb	r3, [r7, #11]
  uint16_t eltSize = 0;
 801017e:	2300      	movs	r3, #0
 8010180:	827b      	strh	r3, [r7, #18]
  uint32_t FirstElemetPos = 0;
 8010182:	2300      	movs	r3, #0
 8010184:	60fb      	str	r3, [r7, #12]
    
  if (q->byteCount > 0) 
 8010186:	687b      	ldr	r3, [r7, #4]
 8010188:	695b      	ldr	r3, [r3, #20]
 801018a:	2b00      	cmp	r3, #0
 801018c:	f000 8090 	beq.w	80102b0 <CircularQueue_Sense+0x154>
  {
    FirstElemetPos = q->first;
 8010190:	687b      	ldr	r3, [r7, #4]
 8010192:	68db      	ldr	r3, [r3, #12]
 8010194:	60fb      	str	r3, [r7, #12]
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 8010196:	687b      	ldr	r3, [r7, #4]
 8010198:	891b      	ldrh	r3, [r3, #8]
 801019a:	2b00      	cmp	r3, #0
 801019c:	d121      	bne.n	80101e2 <CircularQueue_Sense+0x86>
 801019e:	687b      	ldr	r3, [r7, #4]
 80101a0:	681a      	ldr	r2, [r3, #0]
 80101a2:	687b      	ldr	r3, [r7, #4]
 80101a4:	68db      	ldr	r3, [r3, #12]
 80101a6:	4413      	add	r3, r2
 80101a8:	781b      	ldrb	r3, [r3, #0]
 80101aa:	b29a      	uxth	r2, r3
 80101ac:	687b      	ldr	r3, [r7, #4]
 80101ae:	6819      	ldr	r1, [r3, #0]
 80101b0:	687b      	ldr	r3, [r7, #4]
 80101b2:	68db      	ldr	r3, [r3, #12]
 80101b4:	1c58      	adds	r0, r3, #1
 80101b6:	687b      	ldr	r3, [r7, #4]
 80101b8:	685b      	ldr	r3, [r3, #4]
 80101ba:	4298      	cmp	r0, r3
 80101bc:	d306      	bcc.n	80101cc <CircularQueue_Sense+0x70>
 80101be:	687b      	ldr	r3, [r7, #4]
 80101c0:	68d8      	ldr	r0, [r3, #12]
 80101c2:	687b      	ldr	r3, [r7, #4]
 80101c4:	685b      	ldr	r3, [r3, #4]
 80101c6:	1ac3      	subs	r3, r0, r3
 80101c8:	3301      	adds	r3, #1
 80101ca:	e002      	b.n	80101d2 <CircularQueue_Sense+0x76>
 80101cc:	687b      	ldr	r3, [r7, #4]
 80101ce:	68db      	ldr	r3, [r3, #12]
 80101d0:	3301      	adds	r3, #1
 80101d2:	440b      	add	r3, r1
 80101d4:	781b      	ldrb	r3, [r3, #0]
 80101d6:	b29b      	uxth	r3, r3
 80101d8:	021b      	lsls	r3, r3, #8
 80101da:	b29b      	uxth	r3, r3
 80101dc:	4413      	add	r3, r2
 80101de:	b29b      	uxth	r3, r3
 80101e0:	e001      	b.n	80101e6 <CircularQueue_Sense+0x8a>
 80101e2:	687b      	ldr	r3, [r7, #4]
 80101e4:	891b      	ldrh	r3, [r3, #8]
 80101e6:	827b      	strh	r3, [r7, #18]
    
    if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 80101e8:	687b      	ldr	r3, [r7, #4]
 80101ea:	7f1b      	ldrb	r3, [r3, #28]
 80101ec:	f003 0301 	and.w	r3, r3, #1
 80101f0:	2b00      	cmp	r3, #0
 80101f2:	d048      	beq.n	8010286 <CircularQueue_Sense+0x12a>
 80101f4:	687b      	ldr	r3, [r7, #4]
 80101f6:	7f1b      	ldrb	r3, [r3, #28]
 80101f8:	f003 0302 	and.w	r3, r3, #2
 80101fc:	2b00      	cmp	r3, #0
 80101fe:	d142      	bne.n	8010286 <CircularQueue_Sense+0x12a>
    { 
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 8010200:	8a7b      	ldrh	r3, [r7, #18]
 8010202:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010206:	4293      	cmp	r3, r2
 8010208:	d103      	bne.n	8010212 <CircularQueue_Sense+0xb6>
 801020a:	687b      	ldr	r3, [r7, #4]
 801020c:	891b      	ldrh	r3, [r3, #8]
 801020e:	2b00      	cmp	r3, #0
 8010210:	d012      	beq.n	8010238 <CircularQueue_Sense+0xdc>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 8010212:	687b      	ldr	r3, [r7, #4]
 8010214:	68da      	ldr	r2, [r3, #12]
 8010216:	687b      	ldr	r3, [r7, #4]
 8010218:	691b      	ldr	r3, [r3, #16]
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 801021a:	429a      	cmp	r2, r3
 801021c:	d933      	bls.n	8010286 <CircularQueue_Sense+0x12a>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 801021e:	687b      	ldr	r3, [r7, #4]
 8010220:	891b      	ldrh	r3, [r3, #8]
 8010222:	2b00      	cmp	r3, #0
 8010224:	d02f      	beq.n	8010286 <CircularQueue_Sense+0x12a>
 8010226:	687b      	ldr	r3, [r7, #4]
 8010228:	685a      	ldr	r2, [r3, #4]
 801022a:	687b      	ldr	r3, [r7, #4]
 801022c:	68db      	ldr	r3, [r3, #12]
 801022e:	1ad3      	subs	r3, r2, r3
 8010230:	687a      	ldr	r2, [r7, #4]
 8010232:	8912      	ldrh	r2, [r2, #8]
 8010234:	4293      	cmp	r3, r2
 8010236:	d226      	bcs.n	8010286 <CircularQueue_Sense+0x12a>

      {
        /* all data from current position up to the end of buffer are invalid */
        FirstElemetPos = 0; /* wrap to the begiining of buffer */
 8010238:	2300      	movs	r3, #0
 801023a:	60fb      	str	r3, [r7, #12]

        /* retrieve the rigth size after the wrap [if varaible size element] */
        eltSize = (q->elementSize == 0) ? q->qBuff[FirstElemetPos]+ ((q->qBuff[MOD((FirstElemetPos+1), q->queueMaxSize)])<<8) : q->elementSize;
 801023c:	687b      	ldr	r3, [r7, #4]
 801023e:	891b      	ldrh	r3, [r3, #8]
 8010240:	2b00      	cmp	r3, #0
 8010242:	d11d      	bne.n	8010280 <CircularQueue_Sense+0x124>
 8010244:	687b      	ldr	r3, [r7, #4]
 8010246:	681a      	ldr	r2, [r3, #0]
 8010248:	68fb      	ldr	r3, [r7, #12]
 801024a:	4413      	add	r3, r2
 801024c:	781b      	ldrb	r3, [r3, #0]
 801024e:	b29a      	uxth	r2, r3
 8010250:	687b      	ldr	r3, [r7, #4]
 8010252:	6819      	ldr	r1, [r3, #0]
 8010254:	68fb      	ldr	r3, [r7, #12]
 8010256:	1c58      	adds	r0, r3, #1
 8010258:	687b      	ldr	r3, [r7, #4]
 801025a:	685b      	ldr	r3, [r3, #4]
 801025c:	4298      	cmp	r0, r3
 801025e:	d305      	bcc.n	801026c <CircularQueue_Sense+0x110>
 8010260:	687b      	ldr	r3, [r7, #4]
 8010262:	685b      	ldr	r3, [r3, #4]
 8010264:	68f8      	ldr	r0, [r7, #12]
 8010266:	1ac3      	subs	r3, r0, r3
 8010268:	3301      	adds	r3, #1
 801026a:	e001      	b.n	8010270 <CircularQueue_Sense+0x114>
 801026c:	68fb      	ldr	r3, [r7, #12]
 801026e:	3301      	adds	r3, #1
 8010270:	440b      	add	r3, r1
 8010272:	781b      	ldrb	r3, [r3, #0]
 8010274:	b29b      	uxth	r3, r3
 8010276:	021b      	lsls	r3, r3, #8
 8010278:	b29b      	uxth	r3, r3
 801027a:	4413      	add	r3, r2
 801027c:	b29b      	uxth	r3, r3
 801027e:	e001      	b.n	8010284 <CircularQueue_Sense+0x128>
 8010280:	687b      	ldr	r3, [r7, #4]
 8010282:	891b      	ldrh	r3, [r3, #8]
 8010284:	827b      	strh	r3, [r7, #18]
      }
   }
   /* retrieve element */
    x = q->qBuff + (MOD((FirstElemetPos + elemSizeStorageRoom), q->queueMaxSize));
 8010286:	687b      	ldr	r3, [r7, #4]
 8010288:	681a      	ldr	r2, [r3, #0]
 801028a:	7af9      	ldrb	r1, [r7, #11]
 801028c:	68fb      	ldr	r3, [r7, #12]
 801028e:	4419      	add	r1, r3
 8010290:	687b      	ldr	r3, [r7, #4]
 8010292:	685b      	ldr	r3, [r3, #4]
 8010294:	4299      	cmp	r1, r3
 8010296:	d306      	bcc.n	80102a6 <CircularQueue_Sense+0x14a>
 8010298:	7af9      	ldrb	r1, [r7, #11]
 801029a:	68fb      	ldr	r3, [r7, #12]
 801029c:	4419      	add	r1, r3
 801029e:	687b      	ldr	r3, [r7, #4]
 80102a0:	685b      	ldr	r3, [r3, #4]
 80102a2:	1acb      	subs	r3, r1, r3
 80102a4:	e002      	b.n	80102ac <CircularQueue_Sense+0x150>
 80102a6:	7af9      	ldrb	r1, [r7, #11]
 80102a8:	68fb      	ldr	r3, [r7, #12]
 80102aa:	440b      	add	r3, r1
 80102ac:	4413      	add	r3, r2
 80102ae:	617b      	str	r3, [r7, #20]
  }
  if (elementSize != NULL)
 80102b0:	683b      	ldr	r3, [r7, #0]
 80102b2:	2b00      	cmp	r3, #0
 80102b4:	d002      	beq.n	80102bc <CircularQueue_Sense+0x160>
  {
    *elementSize = eltSize;
 80102b6:	683b      	ldr	r3, [r7, #0]
 80102b8:	8a7a      	ldrh	r2, [r7, #18]
 80102ba:	801a      	strh	r2, [r3, #0]
  }
  return x;
 80102bc:	697b      	ldr	r3, [r7, #20]
}
 80102be:	4618      	mov	r0, r3
 80102c0:	371c      	adds	r7, #28
 80102c2:	46bd      	mov	sp, r7
 80102c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102c8:	4770      	bx	lr
	...

080102cc <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 80102cc:	b480      	push	{r7}
 80102ce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 80102d0:	4b03      	ldr	r3, [pc, #12]	; (80102e0 <LL_FLASH_GetUDN+0x14>)
 80102d2:	681b      	ldr	r3, [r3, #0]
}
 80102d4:	4618      	mov	r0, r3
 80102d6:	46bd      	mov	sp, r7
 80102d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102dc:	4770      	bx	lr
 80102de:	bf00      	nop
 80102e0:	1fff7580 	.word	0x1fff7580

080102e4 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 80102e4:	b480      	push	{r7}
 80102e6:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 80102e8:	4b03      	ldr	r3, [pc, #12]	; (80102f8 <LL_FLASH_GetDeviceID+0x14>)
 80102ea:	681b      	ldr	r3, [r3, #0]
 80102ec:	b2db      	uxtb	r3, r3
}
 80102ee:	4618      	mov	r0, r3
 80102f0:	46bd      	mov	sp, r7
 80102f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102f6:	4770      	bx	lr
 80102f8:	1fff7584 	.word	0x1fff7584

080102fc <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 80102fc:	b480      	push	{r7}
 80102fe:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 8010300:	4b03      	ldr	r3, [pc, #12]	; (8010310 <LL_FLASH_GetSTCompanyID+0x14>)
 8010302:	681b      	ldr	r3, [r3, #0]
 8010304:	0a1b      	lsrs	r3, r3, #8
}
 8010306:	4618      	mov	r0, r3
 8010308:	46bd      	mov	sp, r7
 801030a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801030e:	4770      	bx	lr
 8010310:	1fff7584 	.word	0x1fff7584

08010314 <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
 8010314:	b5b0      	push	{r4, r5, r7, lr}
 8010316:	b090      	sub	sp, #64	; 0x40
 8010318:	af00      	add	r7, sp, #0
  SHCI_CmdStatus_t status;
#if (RADIO_ACTIVITY_EVENT != 0)
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 801031a:	2392      	movs	r3, #146	; 0x92
 801031c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#endif /* RADIO_ACTIVITY_EVENT != 0 */
  /* USER CODE BEGIN APP_BLE_Init_1 */
//  UTIL_SEQ_RegTask(1 << CFG_TASK_MY_TASK, UTIL_SEQ_RFU, myTask);
//  UTIL_SEQ_SetTask(1 << CFG_TASK_MY_TASK, CFG_SCH_PRIO_0);
  /* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 8010320:	4b31      	ldr	r3, [pc, #196]	; (80103e8 <APP_BLE_Init+0xd4>)
 8010322:	1d3c      	adds	r4, r7, #4
 8010324:	461d      	mov	r5, r3
 8010326:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010328:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801032a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801032c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801032e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010330:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010332:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8010336:	c403      	stmia	r4!, {r0, r1}
 8010338:	7022      	strb	r2, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init();
 801033a:	f000 fa29 	bl	8010790 <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 801033e:	2101      	movs	r1, #1
 8010340:	2002      	movs	r0, #2
 8010342:	f001 fce3 	bl	8011d0c <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 8010346:	4a29      	ldr	r2, [pc, #164]	; (80103ec <APP_BLE_Init+0xd8>)
 8010348:	2100      	movs	r1, #0
 801034a:	2002      	movs	r0, #2
 801034c:	f001 fe0a 	bl	8011f64 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 8010350:	1d3b      	adds	r3, r7, #4
 8010352:	4618      	mov	r0, r3
 8010354:	f7fe fc18 	bl	800eb88 <SHCI_C2_BLE_Init>
 8010358:	4603      	mov	r3, r0
 801035a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  if (status != SHCI_Success)
 801035e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8010362:	2b00      	cmp	r3, #0
 8010364:	d008      	beq.n	8010378 <APP_BLE_Init+0x64>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
 8010366:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 801036a:	4619      	mov	r1, r3
 801036c:	4820      	ldr	r0, [pc, #128]	; (80103f0 <APP_BLE_Init+0xdc>)
 801036e:	f003 fbef 	bl	8013b50 <iprintf>
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 8010372:	f7f5 fc77 	bl	8005c64 <Error_Handler>
 8010376:	e002      	b.n	801037e <APP_BLE_Init+0x6a>
  }
  else
  {
    APP_DBG_MSG("  Success: SHCI_C2_BLE_Init command\n\r");
 8010378:	481e      	ldr	r0, [pc, #120]	; (80103f4 <APP_BLE_Init+0xe0>)
 801037a:	f003 fbe9 	bl	8013b50 <iprintf>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 801037e:	f000 fa1d 	bl	80107bc <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 8010382:	f7fe fb5b 	bl	800ea3c <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8010386:	4b1c      	ldr	r3, [pc, #112]	; (80103f8 <APP_BLE_Init+0xe4>)
 8010388:	2200      	movs	r2, #0
 801038a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 801038e:	4b1a      	ldr	r3, [pc, #104]	; (80103f8 <APP_BLE_Init+0xe4>)
 8010390:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010394:	82da      	strh	r2, [r3, #22]

  /**
   * From here, all initialization are BLE application specific
   */

  UTIL_SEQ_RegTask(1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 8010396:	4a19      	ldr	r2, [pc, #100]	; (80103fc <APP_BLE_Init+0xe8>)
 8010398:	2100      	movs	r1, #0
 801039a:	2001      	movs	r0, #1
 801039c:	f001 fde2 	bl	8011f64 <UTIL_SEQ_RegTask>

  /**
   * Initialization of ADV - Ad Manufacturer Element - Support OTA Bit Mask
   */
#if (RADIO_ACTIVITY_EVENT != 0)
  ret = aci_hal_set_radio_activity_mask(0x0006);
 80103a0:	2006      	movs	r0, #6
 80103a2:	f7fe f9be 	bl	800e722 <aci_hal_set_radio_activity_mask>
 80103a6:	4603      	mov	r3, r0
 80103a8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (ret != BLE_STATUS_SUCCESS)
 80103ac:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80103b0:	2b00      	cmp	r3, #0
 80103b2:	d006      	beq.n	80103c2 <APP_BLE_Init+0xae>
  {
    APP_DBG_MSG("  Fail   : aci_hal_set_radio_activity_mask command, result: 0x%x \n\r", ret);
 80103b4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80103b8:	4619      	mov	r1, r3
 80103ba:	4811      	ldr	r0, [pc, #68]	; (8010400 <APP_BLE_Init+0xec>)
 80103bc:	f003 fbc8 	bl	8013b50 <iprintf>
 80103c0:	e002      	b.n	80103c8 <APP_BLE_Init+0xb4>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_set_radio_activity_mask command\n\r");
 80103c2:	4810      	ldr	r0, [pc, #64]	; (8010404 <APP_BLE_Init+0xf0>)
 80103c4:	f003 fbc4 	bl	8013b50 <iprintf>
#endif /* L2CAP_REQUEST_NEW_CONN_PARAM != 0 */

  /**
   * Initialize Custom Template Application
   */
  Custom_APP_Init();
 80103c8:	f000 fcf2 	bl	8010db0 <Custom_APP_Init>
  /* USER CODE END APP_BLE_Init_3 */

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 80103cc:	4b0a      	ldr	r3, [pc, #40]	; (80103f8 <APP_BLE_Init+0xe4>)
 80103ce:	2200      	movs	r2, #0
 80103d0:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 80103d2:	4b09      	ldr	r3, [pc, #36]	; (80103f8 <APP_BLE_Init+0xe4>)
 80103d4:	2200      	movs	r2, #0
 80103d6:	761a      	strb	r2, [r3, #24]

  /**
   * Start to Advertise to be connected by a Client
   */
  Adv_Request(APP_BLE_FAST_ADV);
 80103d8:	2001      	movs	r0, #1
 80103da:	f000 fb7d 	bl	8010ad8 <Adv_Request>

  /* USER CODE BEGIN APP_BLE_Init_2 */

  /* USER CODE END APP_BLE_Init_2 */

  return;
 80103de:	bf00      	nop
}
 80103e0:	3740      	adds	r7, #64	; 0x40
 80103e2:	46bd      	mov	sp, r7
 80103e4:	bdb0      	pop	{r4, r5, r7, pc}
 80103e6:	bf00      	nop
 80103e8:	080166f4 	.word	0x080166f4
 80103ec:	0800eda5 	.word	0x0800eda5
 80103f0:	08016618 	.word	0x08016618
 80103f4:	08016650 	.word	0x08016650
 80103f8:	20001c24 	.word	0x20001c24
 80103fc:	08010c01 	.word	0x08010c01
 8010400:	08016678 	.word	0x08016678
 8010404:	080166bc 	.word	0x080166bc

08010408 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *p_Pckt)
{
 8010408:	b5b0      	push	{r4, r5, r7, lr}
 801040a:	b08e      	sub	sp, #56	; 0x38
 801040c:	af04      	add	r7, sp, #16
 801040e:	6078      	str	r0, [r7, #4]
  hci_event_pckt    *p_event_pckt;
  evt_le_meta_event *p_meta_evt;
  evt_blecore_aci   *p_blecore_evt;
  tBleStatus        ret = BLE_STATUS_INVALID_PARAMS;
 8010410:	2392      	movs	r3, #146	; 0x92
 8010412:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  p_event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) p_Pckt)->data;
 8010416:	687b      	ldr	r3, [r7, #4]
 8010418:	3301      	adds	r3, #1
 801041a:	623b      	str	r3, [r7, #32]

  switch (p_event_pckt->evt)
 801041c:	6a3b      	ldr	r3, [r7, #32]
 801041e:	781b      	ldrb	r3, [r3, #0]
 8010420:	2bff      	cmp	r3, #255	; 0xff
 8010422:	f000 80d7 	beq.w	80105d4 <SVCCTL_App_Notification+0x1cc>
 8010426:	2bff      	cmp	r3, #255	; 0xff
 8010428:	f300 81aa 	bgt.w	8010780 <SVCCTL_App_Notification+0x378>
 801042c:	2b05      	cmp	r3, #5
 801042e:	d002      	beq.n	8010436 <SVCCTL_App_Notification+0x2e>
 8010430:	2b3e      	cmp	r3, #62	; 0x3e
 8010432:	d02e      	beq.n	8010492 <SVCCTL_App_Notification+0x8a>

    default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 8010434:	e1a4      	b.n	8010780 <SVCCTL_App_Notification+0x378>
      p_disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) p_event_pckt->data;
 8010436:	6a3b      	ldr	r3, [r7, #32]
 8010438:	3302      	adds	r3, #2
 801043a:	60bb      	str	r3, [r7, #8]
      if (p_disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 801043c:	68bb      	ldr	r3, [r7, #8]
 801043e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8010442:	b29a      	uxth	r2, r3
 8010444:	4bb5      	ldr	r3, [pc, #724]	; (801071c <SVCCTL_App_Notification+0x314>)
 8010446:	8adb      	ldrh	r3, [r3, #22]
 8010448:	429a      	cmp	r2, r3
 801044a:	d114      	bne.n	8010476 <SVCCTL_App_Notification+0x6e>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 801044c:	4bb3      	ldr	r3, [pc, #716]	; (801071c <SVCCTL_App_Notification+0x314>)
 801044e:	2200      	movs	r2, #0
 8010450:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8010452:	4bb2      	ldr	r3, [pc, #712]	; (801071c <SVCCTL_App_Notification+0x314>)
 8010454:	2200      	movs	r2, #0
 8010456:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
        APP_DBG_MSG(">>== HCI_DISCONNECTION_COMPLETE_EVT_CODE\n");
 801045a:	48b1      	ldr	r0, [pc, #708]	; (8010720 <SVCCTL_App_Notification+0x318>)
 801045c:	f003 fc14 	bl	8013c88 <puts>
                    p_disconnection_complete_event->Connection_Handle,
 8010460:	68bb      	ldr	r3, [r7, #8]
 8010462:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8010466:	b29b      	uxth	r3, r3
        APP_DBG_MSG("     - Connection Handle:   0x%x\n     - Reason:    0x%x\n\r",
 8010468:	4619      	mov	r1, r3
                    p_disconnection_complete_event->Reason);
 801046a:	68bb      	ldr	r3, [r7, #8]
 801046c:	78db      	ldrb	r3, [r3, #3]
        APP_DBG_MSG("     - Connection Handle:   0x%x\n     - Reason:    0x%x\n\r",
 801046e:	461a      	mov	r2, r3
 8010470:	48ac      	ldr	r0, [pc, #688]	; (8010724 <SVCCTL_App_Notification+0x31c>)
 8010472:	f003 fb6d 	bl	8013b50 <iprintf>
      Adv_Request(APP_BLE_FAST_ADV);
 8010476:	2001      	movs	r0, #1
 8010478:	f000 fb2e 	bl	8010ad8 <Adv_Request>
      HandleNotification.Custom_Evt_Opcode = CUSTOM_DISCON_HANDLE_EVT;
 801047c:	4baa      	ldr	r3, [pc, #680]	; (8010728 <SVCCTL_App_Notification+0x320>)
 801047e:	2201      	movs	r2, #1
 8010480:	701a      	strb	r2, [r3, #0]
      HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8010482:	4ba6      	ldr	r3, [pc, #664]	; (801071c <SVCCTL_App_Notification+0x314>)
 8010484:	8ada      	ldrh	r2, [r3, #22]
 8010486:	4ba8      	ldr	r3, [pc, #672]	; (8010728 <SVCCTL_App_Notification+0x320>)
 8010488:	805a      	strh	r2, [r3, #2]
      Custom_APP_Notification(&HandleNotification);
 801048a:	48a7      	ldr	r0, [pc, #668]	; (8010728 <SVCCTL_App_Notification+0x320>)
 801048c:	f000 fc7c 	bl	8010d88 <Custom_APP_Notification>
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 8010490:	e179      	b.n	8010786 <SVCCTL_App_Notification+0x37e>
      p_meta_evt = (evt_le_meta_event*) p_event_pckt->data;
 8010492:	6a3b      	ldr	r3, [r7, #32]
 8010494:	3302      	adds	r3, #2
 8010496:	617b      	str	r3, [r7, #20]
      switch (p_meta_evt->subevent)
 8010498:	697b      	ldr	r3, [r7, #20]
 801049a:	781b      	ldrb	r3, [r3, #0]
 801049c:	2b01      	cmp	r3, #1
 801049e:	d02e      	beq.n	80104fe <SVCCTL_App_Notification+0xf6>
 80104a0:	2b03      	cmp	r3, #3
 80104a2:	f040 8095 	bne.w	80105d0 <SVCCTL_App_Notification+0x1c8>
          p_connection_update_complete_event = (hci_le_connection_update_complete_event_rp0 *) p_meta_evt->data;
 80104a6:	697b      	ldr	r3, [r7, #20]
 80104a8:	3301      	adds	r3, #1
 80104aa:	613b      	str	r3, [r7, #16]
          APP_DBG_MSG(">>== HCI_LE_CONNECTION_UPDATE_COMPLETE_SUBEVT_CODE\n");
 80104ac:	489f      	ldr	r0, [pc, #636]	; (801072c <SVCCTL_App_Notification+0x324>)
 80104ae:	f003 fbeb 	bl	8013c88 <puts>
                       p_connection_update_complete_event->Conn_Interval*1.25,
 80104b2:	693b      	ldr	r3, [r7, #16]
 80104b4:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 80104b8:	b29b      	uxth	r3, r3
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 80104ba:	4618      	mov	r0, r3
 80104bc:	f7f0 f80a 	bl	80004d4 <__aeabi_i2d>
 80104c0:	f04f 0200 	mov.w	r2, #0
 80104c4:	4b9a      	ldr	r3, [pc, #616]	; (8010730 <SVCCTL_App_Notification+0x328>)
 80104c6:	f7f0 f86f 	bl	80005a8 <__aeabi_dmul>
 80104ca:	4602      	mov	r2, r0
 80104cc:	460b      	mov	r3, r1
 80104ce:	4610      	mov	r0, r2
 80104d0:	4619      	mov	r1, r3
                       p_connection_update_complete_event->Conn_Latency,
 80104d2:	693b      	ldr	r3, [r7, #16]
 80104d4:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 80104d8:	b29b      	uxth	r3, r3
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 80104da:	461c      	mov	r4, r3
                       p_connection_update_complete_event->Supervision_Timeout*10);
 80104dc:	693b      	ldr	r3, [r7, #16]
 80104de:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 80104e2:	b29b      	uxth	r3, r3
 80104e4:	461a      	mov	r2, r3
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 80104e6:	4613      	mov	r3, r2
 80104e8:	009b      	lsls	r3, r3, #2
 80104ea:	4413      	add	r3, r2
 80104ec:	005b      	lsls	r3, r3, #1
 80104ee:	9301      	str	r3, [sp, #4]
 80104f0:	9400      	str	r4, [sp, #0]
 80104f2:	4602      	mov	r2, r0
 80104f4:	460b      	mov	r3, r1
 80104f6:	488f      	ldr	r0, [pc, #572]	; (8010734 <SVCCTL_App_Notification+0x32c>)
 80104f8:	f003 fb2a 	bl	8013b50 <iprintf>
          break;
 80104fc:	e069      	b.n	80105d2 <SVCCTL_App_Notification+0x1ca>
          p_connection_complete_event = (hci_le_connection_complete_event_rp0 *) p_meta_evt->data;
 80104fe:	697b      	ldr	r3, [r7, #20]
 8010500:	3301      	adds	r3, #1
 8010502:	60fb      	str	r3, [r7, #12]
          APP_DBG_MSG(">>== HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE - Connection handle: 0x%x\n", p_connection_complete_event->Connection_Handle);
 8010504:	68fb      	ldr	r3, [r7, #12]
 8010506:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 801050a:	b29b      	uxth	r3, r3
 801050c:	4619      	mov	r1, r3
 801050e:	488a      	ldr	r0, [pc, #552]	; (8010738 <SVCCTL_App_Notification+0x330>)
 8010510:	f003 fb1e 	bl	8013b50 <iprintf>
                      p_connection_complete_event->Peer_Address[5],
 8010514:	68fb      	ldr	r3, [r7, #12]
 8010516:	7a9b      	ldrb	r3, [r3, #10]
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 8010518:	4618      	mov	r0, r3
                      p_connection_complete_event->Peer_Address[4],
 801051a:	68fb      	ldr	r3, [r7, #12]
 801051c:	7a5b      	ldrb	r3, [r3, #9]
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 801051e:	461c      	mov	r4, r3
                      p_connection_complete_event->Peer_Address[3],
 8010520:	68fb      	ldr	r3, [r7, #12]
 8010522:	7a1b      	ldrb	r3, [r3, #8]
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 8010524:	461d      	mov	r5, r3
                      p_connection_complete_event->Peer_Address[2],
 8010526:	68fb      	ldr	r3, [r7, #12]
 8010528:	79db      	ldrb	r3, [r3, #7]
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 801052a:	461a      	mov	r2, r3
                      p_connection_complete_event->Peer_Address[1],
 801052c:	68fb      	ldr	r3, [r7, #12]
 801052e:	799b      	ldrb	r3, [r3, #6]
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 8010530:	4619      	mov	r1, r3
                      p_connection_complete_event->Peer_Address[0]);
 8010532:	68fb      	ldr	r3, [r7, #12]
 8010534:	795b      	ldrb	r3, [r3, #5]
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 8010536:	9302      	str	r3, [sp, #8]
 8010538:	9101      	str	r1, [sp, #4]
 801053a:	9200      	str	r2, [sp, #0]
 801053c:	462b      	mov	r3, r5
 801053e:	4622      	mov	r2, r4
 8010540:	4601      	mov	r1, r0
 8010542:	487e      	ldr	r0, [pc, #504]	; (801073c <SVCCTL_App_Notification+0x334>)
 8010544:	f003 fb04 	bl	8013b50 <iprintf>
                      p_connection_complete_event->Conn_Interval*1.25,
 8010548:	68fb      	ldr	r3, [r7, #12]
 801054a:	f8b3 300b 	ldrh.w	r3, [r3, #11]
 801054e:	b29b      	uxth	r3, r3
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 8010550:	4618      	mov	r0, r3
 8010552:	f7ef ffbf 	bl	80004d4 <__aeabi_i2d>
 8010556:	f04f 0200 	mov.w	r2, #0
 801055a:	4b75      	ldr	r3, [pc, #468]	; (8010730 <SVCCTL_App_Notification+0x328>)
 801055c:	f7f0 f824 	bl	80005a8 <__aeabi_dmul>
 8010560:	4602      	mov	r2, r0
 8010562:	460b      	mov	r3, r1
 8010564:	4610      	mov	r0, r2
 8010566:	4619      	mov	r1, r3
                      p_connection_complete_event->Conn_Latency,
 8010568:	68fb      	ldr	r3, [r7, #12]
 801056a:	f8b3 300d 	ldrh.w	r3, [r3, #13]
 801056e:	b29b      	uxth	r3, r3
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 8010570:	461c      	mov	r4, r3
                      p_connection_complete_event->Supervision_Timeout*10
 8010572:	68fb      	ldr	r3, [r7, #12]
 8010574:	f8b3 300f 	ldrh.w	r3, [r3, #15]
 8010578:	b29b      	uxth	r3, r3
 801057a:	461a      	mov	r2, r3
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 801057c:	4613      	mov	r3, r2
 801057e:	009b      	lsls	r3, r3, #2
 8010580:	4413      	add	r3, r2
 8010582:	005b      	lsls	r3, r3, #1
 8010584:	9301      	str	r3, [sp, #4]
 8010586:	9400      	str	r4, [sp, #0]
 8010588:	4602      	mov	r2, r0
 801058a:	460b      	mov	r3, r1
 801058c:	4869      	ldr	r0, [pc, #420]	; (8010734 <SVCCTL_App_Notification+0x32c>)
 801058e:	f003 fadf 	bl	8013b50 <iprintf>
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 8010592:	4b62      	ldr	r3, [pc, #392]	; (801071c <SVCCTL_App_Notification+0x314>)
 8010594:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8010598:	2b04      	cmp	r3, #4
 801059a:	d104      	bne.n	80105a6 <SVCCTL_App_Notification+0x19e>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 801059c:	4b5f      	ldr	r3, [pc, #380]	; (801071c <SVCCTL_App_Notification+0x314>)
 801059e:	2206      	movs	r2, #6
 80105a0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 80105a4:	e003      	b.n	80105ae <SVCCTL_App_Notification+0x1a6>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 80105a6:	4b5d      	ldr	r3, [pc, #372]	; (801071c <SVCCTL_App_Notification+0x314>)
 80105a8:	2205      	movs	r2, #5
 80105aa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = p_connection_complete_event->Connection_Handle;
 80105ae:	68fb      	ldr	r3, [r7, #12]
 80105b0:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80105b4:	b29a      	uxth	r2, r3
 80105b6:	4b59      	ldr	r3, [pc, #356]	; (801071c <SVCCTL_App_Notification+0x314>)
 80105b8:	82da      	strh	r2, [r3, #22]
          HandleNotification.Custom_Evt_Opcode = CUSTOM_CONN_HANDLE_EVT;
 80105ba:	4b5b      	ldr	r3, [pc, #364]	; (8010728 <SVCCTL_App_Notification+0x320>)
 80105bc:	2200      	movs	r2, #0
 80105be:	701a      	strb	r2, [r3, #0]
          HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 80105c0:	4b56      	ldr	r3, [pc, #344]	; (801071c <SVCCTL_App_Notification+0x314>)
 80105c2:	8ada      	ldrh	r2, [r3, #22]
 80105c4:	4b58      	ldr	r3, [pc, #352]	; (8010728 <SVCCTL_App_Notification+0x320>)
 80105c6:	805a      	strh	r2, [r3, #2]
          Custom_APP_Notification(&HandleNotification);
 80105c8:	4857      	ldr	r0, [pc, #348]	; (8010728 <SVCCTL_App_Notification+0x320>)
 80105ca:	f000 fbdd 	bl	8010d88 <Custom_APP_Notification>
          break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 80105ce:	e000      	b.n	80105d2 <SVCCTL_App_Notification+0x1ca>
          break;
 80105d0:	bf00      	nop
      break; /* HCI_LE_META_EVT_CODE */
 80105d2:	e0d8      	b.n	8010786 <SVCCTL_App_Notification+0x37e>
      p_blecore_evt = (evt_blecore_aci*) p_event_pckt->data;
 80105d4:	6a3b      	ldr	r3, [r7, #32]
 80105d6:	3302      	adds	r3, #2
 80105d8:	61fb      	str	r3, [r7, #28]
      switch (p_blecore_evt->ecode)
 80105da:	69fb      	ldr	r3, [r7, #28]
 80105dc:	881b      	ldrh	r3, [r3, #0]
 80105de:	b29b      	uxth	r3, r3
 80105e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80105e4:	f000 80c8 	beq.w	8010778 <SVCCTL_App_Notification+0x370>
 80105e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80105ec:	f300 80ca 	bgt.w	8010784 <SVCCTL_App_Notification+0x37c>
 80105f0:	2b04      	cmp	r3, #4
 80105f2:	f000 80c3 	beq.w	801077c <SVCCTL_App_Notification+0x374>
 80105f6:	2b04      	cmp	r3, #4
 80105f8:	f2c0 80c4 	blt.w	8010784 <SVCCTL_App_Notification+0x37c>
 80105fc:	f240 420a 	movw	r2, #1034	; 0x40a
 8010600:	4293      	cmp	r3, r2
 8010602:	f300 80bf 	bgt.w	8010784 <SVCCTL_App_Notification+0x37c>
 8010606:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801060a:	f340 80bb 	ble.w	8010784 <SVCCTL_App_Notification+0x37c>
 801060e:	f2a3 4301 	subw	r3, r3, #1025	; 0x401
 8010612:	2b09      	cmp	r3, #9
 8010614:	f200 80b6 	bhi.w	8010784 <SVCCTL_App_Notification+0x37c>
 8010618:	a201      	add	r2, pc, #4	; (adr r2, 8010620 <SVCCTL_App_Notification+0x218>)
 801061a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801061e:	bf00      	nop
 8010620:	080106e5 	.word	0x080106e5
 8010624:	08010659 	.word	0x08010659
 8010628:	08010785 	.word	0x08010785
 801062c:	08010785 	.word	0x08010785
 8010630:	08010785 	.word	0x08010785
 8010634:	08010785 	.word	0x08010785
 8010638:	08010649 	.word	0x08010649
 801063c:	08010785 	.word	0x08010785
 8010640:	0801068f 	.word	0x0801068f
 8010644:	08010651 	.word	0x08010651
          APP_DBG_MSG(">>== ACI_GAP_PROC_COMPLETE_VSEVT_CODE \r");
 8010648:	483d      	ldr	r0, [pc, #244]	; (8010740 <SVCCTL_App_Notification+0x338>)
 801064a:	f003 fa81 	bl	8013b50 <iprintf>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 801064e:	e096      	b.n	801077e <SVCCTL_App_Notification+0x376>
          APP_DBG_MSG(">>== ACI_GAP_KEYPRESS_NOTIFICATION_VSEVT_CODE\n");
 8010650:	483c      	ldr	r0, [pc, #240]	; (8010744 <SVCCTL_App_Notification+0x33c>)
 8010652:	f003 fb19 	bl	8013c88 <puts>
          break;
 8010656:	e092      	b.n	801077e <SVCCTL_App_Notification+0x376>
          APP_DBG_MSG(">>== ACI_GAP_PASS_KEY_REQ_VSEVT_CODE \n");
 8010658:	483b      	ldr	r0, [pc, #236]	; (8010748 <SVCCTL_App_Notification+0x340>)
 801065a:	f003 fb15 	bl	8013c88 <puts>
          ret = aci_gap_pass_key_resp(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, CFG_FIXED_PIN);
 801065e:	4b2f      	ldr	r3, [pc, #188]	; (801071c <SVCCTL_App_Notification+0x314>)
 8010660:	8adb      	ldrh	r3, [r3, #22]
 8010662:	493a      	ldr	r1, [pc, #232]	; (801074c <SVCCTL_App_Notification+0x344>)
 8010664:	4618      	mov	r0, r3
 8010666:	f7fd fab3 	bl	800dbd0 <aci_gap_pass_key_resp>
 801066a:	4603      	mov	r3, r0
 801066c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          if (ret != BLE_STATUS_SUCCESS)
 8010670:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010674:	2b00      	cmp	r3, #0
 8010676:	d006      	beq.n	8010686 <SVCCTL_App_Notification+0x27e>
            APP_DBG_MSG("==>> aci_gap_pass_key_resp : Fail, reason: 0x%x\n", ret);
 8010678:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801067c:	4619      	mov	r1, r3
 801067e:	4834      	ldr	r0, [pc, #208]	; (8010750 <SVCCTL_App_Notification+0x348>)
 8010680:	f003 fa66 	bl	8013b50 <iprintf>
          break;
 8010684:	e07b      	b.n	801077e <SVCCTL_App_Notification+0x376>
            APP_DBG_MSG("==>> aci_gap_pass_key_resp : Success \n");
 8010686:	4833      	ldr	r0, [pc, #204]	; (8010754 <SVCCTL_App_Notification+0x34c>)
 8010688:	f003 fafe 	bl	8013c88 <puts>
          break;
 801068c:	e077      	b.n	801077e <SVCCTL_App_Notification+0x376>
          APP_DBG_MSG(">>== ACI_GAP_NUMERIC_COMPARISON_VALUE_VSEVT_CODE\n");
 801068e:	4832      	ldr	r0, [pc, #200]	; (8010758 <SVCCTL_App_Notification+0x350>)
 8010690:	f003 fafa 	bl	8013c88 <puts>
                      ((aci_gap_numeric_comparison_value_event_rp0 *)(p_blecore_evt->data))->Numeric_Value);
 8010694:	69fb      	ldr	r3, [r7, #28]
 8010696:	3302      	adds	r3, #2
          APP_DBG_MSG("     - numeric_value = %ld\n",
 8010698:	f8d3 3002 	ldr.w	r3, [r3, #2]
 801069c:	4619      	mov	r1, r3
 801069e:	482f      	ldr	r0, [pc, #188]	; (801075c <SVCCTL_App_Notification+0x354>)
 80106a0:	f003 fa56 	bl	8013b50 <iprintf>
                      ((aci_gap_numeric_comparison_value_event_rp0 *)(p_blecore_evt->data))->Numeric_Value);
 80106a4:	69fb      	ldr	r3, [r7, #28]
 80106a6:	3302      	adds	r3, #2
          APP_DBG_MSG("     - Hex_value = %lx\n",
 80106a8:	f8d3 3002 	ldr.w	r3, [r3, #2]
 80106ac:	4619      	mov	r1, r3
 80106ae:	482c      	ldr	r0, [pc, #176]	; (8010760 <SVCCTL_App_Notification+0x358>)
 80106b0:	f003 fa4e 	bl	8013b50 <iprintf>
          ret = aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, YES);
 80106b4:	4b19      	ldr	r3, [pc, #100]	; (801071c <SVCCTL_App_Notification+0x314>)
 80106b6:	8adb      	ldrh	r3, [r3, #22]
 80106b8:	2101      	movs	r1, #1
 80106ba:	4618      	mov	r0, r3
 80106bc:	f7fd fc32 	bl	800df24 <aci_gap_numeric_comparison_value_confirm_yesno>
 80106c0:	4603      	mov	r3, r0
 80106c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          if (ret != BLE_STATUS_SUCCESS)
 80106c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80106ca:	2b00      	cmp	r3, #0
 80106cc:	d006      	beq.n	80106dc <SVCCTL_App_Notification+0x2d4>
            APP_DBG_MSG("==>> aci_gap_numeric_comparison_value_confirm_yesno-->YES : Fail, reason: 0x%x\n", ret);
 80106ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80106d2:	4619      	mov	r1, r3
 80106d4:	4823      	ldr	r0, [pc, #140]	; (8010764 <SVCCTL_App_Notification+0x35c>)
 80106d6:	f003 fa3b 	bl	8013b50 <iprintf>
          break;
 80106da:	e050      	b.n	801077e <SVCCTL_App_Notification+0x376>
            APP_DBG_MSG("==>> aci_gap_numeric_comparison_value_confirm_yesno-->YES : Success \n");
 80106dc:	4822      	ldr	r0, [pc, #136]	; (8010768 <SVCCTL_App_Notification+0x360>)
 80106de:	f003 fad3 	bl	8013c88 <puts>
          break;
 80106e2:	e04c      	b.n	801077e <SVCCTL_App_Notification+0x376>
          p_pairing_complete = (aci_gap_pairing_complete_event_rp0*)p_blecore_evt->data;
 80106e4:	69fb      	ldr	r3, [r7, #28]
 80106e6:	3302      	adds	r3, #2
 80106e8:	61bb      	str	r3, [r7, #24]
          APP_DBG_MSG(">>== ACI_GAP_PAIRING_COMPLETE_VSEVT_CODE\n");
 80106ea:	4820      	ldr	r0, [pc, #128]	; (801076c <SVCCTL_App_Notification+0x364>)
 80106ec:	f003 facc 	bl	8013c88 <puts>
          if (p_pairing_complete->Status != 0)
 80106f0:	69bb      	ldr	r3, [r7, #24]
 80106f2:	789b      	ldrb	r3, [r3, #2]
 80106f4:	2b00      	cmp	r3, #0
 80106f6:	d009      	beq.n	801070c <SVCCTL_App_Notification+0x304>
            APP_DBG_MSG("     - Pairing KO \n     - Status: 0x%x\n     - Reason: 0x%x\n", p_pairing_complete->Status, p_pairing_complete->Reason);
 80106f8:	69bb      	ldr	r3, [r7, #24]
 80106fa:	789b      	ldrb	r3, [r3, #2]
 80106fc:	4619      	mov	r1, r3
 80106fe:	69bb      	ldr	r3, [r7, #24]
 8010700:	78db      	ldrb	r3, [r3, #3]
 8010702:	461a      	mov	r2, r3
 8010704:	481a      	ldr	r0, [pc, #104]	; (8010770 <SVCCTL_App_Notification+0x368>)
 8010706:	f003 fa23 	bl	8013b50 <iprintf>
 801070a:	e002      	b.n	8010712 <SVCCTL_App_Notification+0x30a>
            APP_DBG_MSG("     - Pairing Success\n");
 801070c:	4819      	ldr	r0, [pc, #100]	; (8010774 <SVCCTL_App_Notification+0x36c>)
 801070e:	f003 fabb 	bl	8013c88 <puts>
          APP_DBG_MSG("\n");
 8010712:	200a      	movs	r0, #10
 8010714:	f003 fa34 	bl	8013b80 <putchar>
          break;
 8010718:	e031      	b.n	801077e <SVCCTL_App_Notification+0x376>
 801071a:	bf00      	nop
 801071c:	20001c24 	.word	0x20001c24
 8010720:	08016730 	.word	0x08016730
 8010724:	0801675c 	.word	0x0801675c
 8010728:	20001ca8 	.word	0x20001ca8
 801072c:	08016798 	.word	0x08016798
 8010730:	3ff40000 	.word	0x3ff40000
 8010734:	080167cc 	.word	0x080167cc
 8010738:	08016838 	.word	0x08016838
 801073c:	08016880 	.word	0x08016880
 8010740:	080168d0 	.word	0x080168d0
 8010744:	080168f8 	.word	0x080168f8
 8010748:	08016928 	.word	0x08016928
 801074c:	0001b207 	.word	0x0001b207
 8010750:	08016950 	.word	0x08016950
 8010754:	08016984 	.word	0x08016984
 8010758:	080169ac 	.word	0x080169ac
 801075c:	080169e0 	.word	0x080169e0
 8010760:	080169fc 	.word	0x080169fc
 8010764:	08016a14 	.word	0x08016a14
 8010768:	08016a64 	.word	0x08016a64
 801076c:	08016aac 	.word	0x08016aac
 8010770:	08016ad8 	.word	0x08016ad8
 8010774:	08016b14 	.word	0x08016b14
          break;
 8010778:	bf00      	nop
 801077a:	e003      	b.n	8010784 <SVCCTL_App_Notification+0x37c>
          break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 801077c:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 801077e:	e001      	b.n	8010784 <SVCCTL_App_Notification+0x37c>
      break;
 8010780:	bf00      	nop
 8010782:	e000      	b.n	8010786 <SVCCTL_App_Notification+0x37e>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8010784:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 8010786:	2301      	movs	r3, #1
}
 8010788:	4618      	mov	r0, r3
 801078a:	3728      	adds	r7, #40	; 0x28
 801078c:	46bd      	mov	sp, r7
 801078e:	bdb0      	pop	{r4, r5, r7, pc}

08010790 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init(void)
{
 8010790:	b580      	push	{r7, lr}
 8010792:	b082      	sub	sp, #8
 8010794:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 8010796:	4b06      	ldr	r3, [pc, #24]	; (80107b0 <Ble_Tl_Init+0x20>)
 8010798:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 801079a:	4b06      	ldr	r3, [pc, #24]	; (80107b4 <Ble_Tl_Init+0x24>)
 801079c:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 801079e:	463b      	mov	r3, r7
 80107a0:	4619      	mov	r1, r3
 80107a2:	4805      	ldr	r0, [pc, #20]	; (80107b8 <Ble_Tl_Init+0x28>)
 80107a4:	f7fe fae2 	bl	800ed6c <hci_init>

  return;
 80107a8:	bf00      	nop
}
 80107aa:	3708      	adds	r7, #8
 80107ac:	46bd      	mov	sp, r7
 80107ae:	bd80      	pop	{r7, pc}
 80107b0:	200300d8 	.word	0x200300d8
 80107b4:	08010cd5 	.word	0x08010cd5
 80107b8:	08010c9d 	.word	0x08010c9d

080107bc <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void)
{
 80107bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80107be:	b08d      	sub	sp, #52	; 0x34
 80107c0:	af06      	add	r7, sp, #24
  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *p_bd_addr;
  uint16_t a_appearance[1] = {BLE_CFG_GAP_APPEARANCE};
 80107c2:	2300      	movs	r3, #0
 80107c4:	803b      	strh	r3, [r7, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 80107c6:	2392      	movs	r3, #146	; 0x92
 80107c8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init*/

  APP_DBG_MSG("==>> Start Ble_Hci_Gap_Gatt_Init function\n");
 80107ca:	48a5      	ldr	r0, [pc, #660]	; (8010a60 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 80107cc:	f003 fa5c 	bl	8013c88 <puts>

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  ret = hci_reset();
 80107d0:	f7fd fffb 	bl	800e7ca <hci_reset>
 80107d4:	4603      	mov	r3, r0
 80107d6:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 80107d8:	7dfb      	ldrb	r3, [r7, #23]
 80107da:	2b00      	cmp	r3, #0
 80107dc:	d005      	beq.n	80107ea <Ble_Hci_Gap_Gatt_Init+0x2e>
  {
    APP_DBG_MSG("  Fail   : hci_reset command, result: 0x%x \n", ret);
 80107de:	7dfb      	ldrb	r3, [r7, #23]
 80107e0:	4619      	mov	r1, r3
 80107e2:	48a0      	ldr	r0, [pc, #640]	; (8010a64 <Ble_Hci_Gap_Gatt_Init+0x2a8>)
 80107e4:	f003 f9b4 	bl	8013b50 <iprintf>
 80107e8:	e002      	b.n	80107f0 <Ble_Hci_Gap_Gatt_Init+0x34>
  }
  else
  {
    APP_DBG_MSG("  Success: hci_reset command\n");
 80107ea:	489f      	ldr	r0, [pc, #636]	; (8010a68 <Ble_Hci_Gap_Gatt_Init+0x2ac>)
 80107ec:	f003 fa4c 	bl	8013c88 <puts>
  }

  /**
   * Write the BD Address
   */
  p_bd_addr = BleGetBdAddress();
 80107f0:	f000 f9c2 	bl	8010b78 <BleGetBdAddress>
 80107f4:	6138      	str	r0, [r7, #16]
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, (uint8_t*) p_bd_addr);
 80107f6:	693a      	ldr	r2, [r7, #16]
 80107f8:	2106      	movs	r1, #6
 80107fa:	2000      	movs	r0, #0
 80107fc:	f7fd fea5 	bl	800e54a <aci_hal_write_config_data>
 8010800:	4603      	mov	r3, r0
 8010802:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 8010804:	7dfb      	ldrb	r3, [r7, #23]
 8010806:	2b00      	cmp	r3, #0
 8010808:	d005      	beq.n	8010816 <Ble_Hci_Gap_Gatt_Init+0x5a>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_PUBADDR_OFFSET, result: 0x%x \n", ret);
 801080a:	7dfb      	ldrb	r3, [r7, #23]
 801080c:	4619      	mov	r1, r3
 801080e:	4897      	ldr	r0, [pc, #604]	; (8010a6c <Ble_Hci_Gap_Gatt_Init+0x2b0>)
 8010810:	f003 f99e 	bl	8013b50 <iprintf>
 8010814:	e021      	b.n	801085a <Ble_Hci_Gap_Gatt_Init+0x9e>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_PUBADDR_OFFSET\n");
 8010816:	4896      	ldr	r0, [pc, #600]	; (8010a70 <Ble_Hci_Gap_Gatt_Init+0x2b4>)
 8010818:	f003 fa36 	bl	8013c88 <puts>
    APP_DBG_MSG("  Public Bluetooth Address: %02x:%02x:%02x:%02x:%02x:%02x\n",p_bd_addr[5],p_bd_addr[4],p_bd_addr[3],p_bd_addr[2],p_bd_addr[1],p_bd_addr[0]);
 801081c:	693b      	ldr	r3, [r7, #16]
 801081e:	3305      	adds	r3, #5
 8010820:	781b      	ldrb	r3, [r3, #0]
 8010822:	4618      	mov	r0, r3
 8010824:	693b      	ldr	r3, [r7, #16]
 8010826:	3304      	adds	r3, #4
 8010828:	781b      	ldrb	r3, [r3, #0]
 801082a:	461c      	mov	r4, r3
 801082c:	693b      	ldr	r3, [r7, #16]
 801082e:	3303      	adds	r3, #3
 8010830:	781b      	ldrb	r3, [r3, #0]
 8010832:	461d      	mov	r5, r3
 8010834:	693b      	ldr	r3, [r7, #16]
 8010836:	3302      	adds	r3, #2
 8010838:	781b      	ldrb	r3, [r3, #0]
 801083a:	461a      	mov	r2, r3
 801083c:	693b      	ldr	r3, [r7, #16]
 801083e:	3301      	adds	r3, #1
 8010840:	781b      	ldrb	r3, [r3, #0]
 8010842:	4619      	mov	r1, r3
 8010844:	693b      	ldr	r3, [r7, #16]
 8010846:	781b      	ldrb	r3, [r3, #0]
 8010848:	9302      	str	r3, [sp, #8]
 801084a:	9101      	str	r1, [sp, #4]
 801084c:	9200      	str	r2, [sp, #0]
 801084e:	462b      	mov	r3, r5
 8010850:	4622      	mov	r2, r4
 8010852:	4601      	mov	r1, r0
 8010854:	4887      	ldr	r0, [pc, #540]	; (8010a74 <Ble_Hci_Gap_Gatt_Init+0x2b8>)
 8010856:	f003 f97b 	bl	8013b50 <iprintf>
#endif /* CFG_BLE_ADDRESS_TYPE != PUBLIC_ADDR */

  /**
   * Write Identity root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)a_BLE_CfgIrValue);
 801085a:	4a87      	ldr	r2, [pc, #540]	; (8010a78 <Ble_Hci_Gap_Gatt_Init+0x2bc>)
 801085c:	2110      	movs	r1, #16
 801085e:	2018      	movs	r0, #24
 8010860:	f7fd fe73 	bl	800e54a <aci_hal_write_config_data>
 8010864:	4603      	mov	r3, r0
 8010866:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 8010868:	7dfb      	ldrb	r3, [r7, #23]
 801086a:	2b00      	cmp	r3, #0
 801086c:	d005      	beq.n	801087a <Ble_Hci_Gap_Gatt_Init+0xbe>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_IR_OFFSET, result: 0x%x \n", ret);
 801086e:	7dfb      	ldrb	r3, [r7, #23]
 8010870:	4619      	mov	r1, r3
 8010872:	4882      	ldr	r0, [pc, #520]	; (8010a7c <Ble_Hci_Gap_Gatt_Init+0x2c0>)
 8010874:	f003 f96c 	bl	8013b50 <iprintf>
 8010878:	e002      	b.n	8010880 <Ble_Hci_Gap_Gatt_Init+0xc4>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_IR_OFFSET\n");
 801087a:	4881      	ldr	r0, [pc, #516]	; (8010a80 <Ble_Hci_Gap_Gatt_Init+0x2c4>)
 801087c:	f003 fa04 	bl	8013c88 <puts>
  }

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)a_BLE_CfgErValue);
 8010880:	4a80      	ldr	r2, [pc, #512]	; (8010a84 <Ble_Hci_Gap_Gatt_Init+0x2c8>)
 8010882:	2110      	movs	r1, #16
 8010884:	2008      	movs	r0, #8
 8010886:	f7fd fe60 	bl	800e54a <aci_hal_write_config_data>
 801088a:	4603      	mov	r3, r0
 801088c:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 801088e:	7dfb      	ldrb	r3, [r7, #23]
 8010890:	2b00      	cmp	r3, #0
 8010892:	d005      	beq.n	80108a0 <Ble_Hci_Gap_Gatt_Init+0xe4>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_ER_OFFSET, result: 0x%x \n", ret);
 8010894:	7dfb      	ldrb	r3, [r7, #23]
 8010896:	4619      	mov	r1, r3
 8010898:	487b      	ldr	r0, [pc, #492]	; (8010a88 <Ble_Hci_Gap_Gatt_Init+0x2cc>)
 801089a:	f003 f959 	bl	8013b50 <iprintf>
 801089e:	e002      	b.n	80108a6 <Ble_Hci_Gap_Gatt_Init+0xea>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_ER_OFFSET\n");
 80108a0:	487a      	ldr	r0, [pc, #488]	; (8010a8c <Ble_Hci_Gap_Gatt_Init+0x2d0>)
 80108a2:	f003 f9f1 	bl	8013c88 <puts>
  }

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 80108a6:	2118      	movs	r1, #24
 80108a8:	2001      	movs	r0, #1
 80108aa:	f7fd fed3 	bl	800e654 <aci_hal_set_tx_power_level>
 80108ae:	4603      	mov	r3, r0
 80108b0:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 80108b2:	7dfb      	ldrb	r3, [r7, #23]
 80108b4:	2b00      	cmp	r3, #0
 80108b6:	d005      	beq.n	80108c4 <Ble_Hci_Gap_Gatt_Init+0x108>
  {
    APP_DBG_MSG("  Fail   : aci_hal_set_tx_power_level command, result: 0x%x \n", ret);
 80108b8:	7dfb      	ldrb	r3, [r7, #23]
 80108ba:	4619      	mov	r1, r3
 80108bc:	4874      	ldr	r0, [pc, #464]	; (8010a90 <Ble_Hci_Gap_Gatt_Init+0x2d4>)
 80108be:	f003 f947 	bl	8013b50 <iprintf>
 80108c2:	e002      	b.n	80108ca <Ble_Hci_Gap_Gatt_Init+0x10e>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_set_tx_power_level command\n");
 80108c4:	4873      	ldr	r0, [pc, #460]	; (8010a94 <Ble_Hci_Gap_Gatt_Init+0x2d8>)
 80108c6:	f003 f9df 	bl	8013c88 <puts>
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_init();
 80108ca:	f7fd fb92 	bl	800dff2 <aci_gatt_init>
 80108ce:	4603      	mov	r3, r0
 80108d0:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 80108d2:	7dfb      	ldrb	r3, [r7, #23]
 80108d4:	2b00      	cmp	r3, #0
 80108d6:	d005      	beq.n	80108e4 <Ble_Hci_Gap_Gatt_Init+0x128>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_init command, result: 0x%x \n", ret);
 80108d8:	7dfb      	ldrb	r3, [r7, #23]
 80108da:	4619      	mov	r1, r3
 80108dc:	486e      	ldr	r0, [pc, #440]	; (8010a98 <Ble_Hci_Gap_Gatt_Init+0x2dc>)
 80108de:	f003 f937 	bl	8013b50 <iprintf>
 80108e2:	e002      	b.n	80108ea <Ble_Hci_Gap_Gatt_Init+0x12e>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_init command\n");
 80108e4:	486d      	ldr	r0, [pc, #436]	; (8010a9c <Ble_Hci_Gap_Gatt_Init+0x2e0>)
 80108e6:	f003 f9cf 	bl	8013c88 <puts>
  }

  /**
   * Initialize GAP interface
   */
  role = 0;
 80108ea:	2300      	movs	r3, #0
 80108ec:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 80108ee:	7bfb      	ldrb	r3, [r7, #15]
 80108f0:	f043 0301 	orr.w	r3, r3, #1
 80108f4:	73fb      	strb	r3, [r7, #15]

/* USER CODE BEGIN Role_Mngt*/

/* USER CODE END Role_Mngt */

  if (role > 0)
 80108f6:	7bfb      	ldrb	r3, [r7, #15]
 80108f8:	2b00      	cmp	r3, #0
 80108fa:	d02b      	beq.n	8010954 <Ble_Hci_Gap_Gatt_Init+0x198>
  {
    const char *name = CFG_GAP_DEVICE_NAME;
 80108fc:	4b68      	ldr	r3, [pc, #416]	; (8010aa0 <Ble_Hci_Gap_Gatt_Init+0x2e4>)
 80108fe:	60bb      	str	r3, [r7, #8]
    ret = aci_gap_init(role,
 8010900:	1dba      	adds	r2, r7, #6
 8010902:	7bf8      	ldrb	r0, [r7, #15]
 8010904:	1cbb      	adds	r3, r7, #2
 8010906:	9301      	str	r3, [sp, #4]
 8010908:	1d3b      	adds	r3, r7, #4
 801090a:	9300      	str	r3, [sp, #0]
 801090c:	4613      	mov	r3, r2
 801090e:	2208      	movs	r2, #8
 8010910:	2100      	movs	r1, #0
 8010912:	f7fd f9c4 	bl	800dc9e <aci_gap_init>
 8010916:	4603      	mov	r3, r0
 8010918:	75fb      	strb	r3, [r7, #23]
                       CFG_GAP_DEVICE_NAME_LENGTH,
                       &gap_service_handle,
                       &gap_dev_name_char_handle,
                       &gap_appearance_char_handle);

    if (ret != BLE_STATUS_SUCCESS)
 801091a:	7dfb      	ldrb	r3, [r7, #23]
 801091c:	2b00      	cmp	r3, #0
 801091e:	d005      	beq.n	801092c <Ble_Hci_Gap_Gatt_Init+0x170>
    {
      APP_DBG_MSG("  Fail   : aci_gap_init command, result: 0x%x \n", ret);
 8010920:	7dfb      	ldrb	r3, [r7, #23]
 8010922:	4619      	mov	r1, r3
 8010924:	485f      	ldr	r0, [pc, #380]	; (8010aa4 <Ble_Hci_Gap_Gatt_Init+0x2e8>)
 8010926:	f003 f913 	bl	8013b50 <iprintf>
 801092a:	e002      	b.n	8010932 <Ble_Hci_Gap_Gatt_Init+0x176>
    }
    else
    {
      APP_DBG_MSG("  Success: aci_gap_init command\n");
 801092c:	485e      	ldr	r0, [pc, #376]	; (8010aa8 <Ble_Hci_Gap_Gatt_Init+0x2ec>)
 801092e:	f003 f9ab 	bl	8013c88 <puts>
    }

    ret = aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 8010932:	88fc      	ldrh	r4, [r7, #6]
 8010934:	88bd      	ldrh	r5, [r7, #4]
 8010936:	68b8      	ldr	r0, [r7, #8]
 8010938:	f7ef fc22 	bl	8000180 <strlen>
 801093c:	4603      	mov	r3, r0
 801093e:	b2da      	uxtb	r2, r3
 8010940:	68bb      	ldr	r3, [r7, #8]
 8010942:	9300      	str	r3, [sp, #0]
 8010944:	4613      	mov	r3, r2
 8010946:	2200      	movs	r2, #0
 8010948:	4629      	mov	r1, r5
 801094a:	4620      	mov	r0, r4
 801094c:	f7fd fd54 	bl	800e3f8 <aci_gatt_update_char_value>
 8010950:	4603      	mov	r3, r0
 8010952:	75fb      	strb	r3, [r7, #23]
    {
      BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Device Name\n");
    }
  }

  ret = aci_gatt_update_char_value(gap_service_handle,
 8010954:	88f8      	ldrh	r0, [r7, #6]
 8010956:	8879      	ldrh	r1, [r7, #2]
 8010958:	463b      	mov	r3, r7
 801095a:	9300      	str	r3, [sp, #0]
 801095c:	2302      	movs	r3, #2
 801095e:	2200      	movs	r2, #0
 8010960:	f7fd fd4a 	bl	800e3f8 <aci_gatt_update_char_value>
 8010964:	4603      	mov	r3, r0
 8010966:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize Default PHY
   */
  ret = hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 8010968:	2202      	movs	r2, #2
 801096a:	2102      	movs	r1, #2
 801096c:	2000      	movs	r0, #0
 801096e:	f7fd ff50 	bl	800e812 <hci_le_set_default_phy>
 8010972:	4603      	mov	r3, r0
 8010974:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 8010976:	7dfb      	ldrb	r3, [r7, #23]
 8010978:	2b00      	cmp	r3, #0
 801097a:	d005      	beq.n	8010988 <Ble_Hci_Gap_Gatt_Init+0x1cc>
  {
    APP_DBG_MSG("  Fail   : hci_le_set_default_phy command, result: 0x%x \n", ret);
 801097c:	7dfb      	ldrb	r3, [r7, #23]
 801097e:	4619      	mov	r1, r3
 8010980:	484a      	ldr	r0, [pc, #296]	; (8010aac <Ble_Hci_Gap_Gatt_Init+0x2f0>)
 8010982:	f003 f8e5 	bl	8013b50 <iprintf>
 8010986:	e002      	b.n	801098e <Ble_Hci_Gap_Gatt_Init+0x1d2>
  }
  else
  {
    APP_DBG_MSG("  Success: hci_le_set_default_phy command\n");
 8010988:	4849      	ldr	r0, [pc, #292]	; (8010ab0 <Ble_Hci_Gap_Gatt_Init+0x2f4>)
 801098a:	f003 f97d 	bl	8013c88 <puts>
  }

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 801098e:	4b49      	ldr	r3, [pc, #292]	; (8010ab4 <Ble_Hci_Gap_Gatt_Init+0x2f8>)
 8010990:	2200      	movs	r2, #0
 8010992:	701a      	strb	r2, [r3, #0]
  ret = aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 8010994:	4b47      	ldr	r3, [pc, #284]	; (8010ab4 <Ble_Hci_Gap_Gatt_Init+0x2f8>)
 8010996:	781b      	ldrb	r3, [r3, #0]
 8010998:	4618      	mov	r0, r3
 801099a:	f7fd f801 	bl	800d9a0 <aci_gap_set_io_capability>
 801099e:	4603      	mov	r3, r0
 80109a0:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 80109a2:	7dfb      	ldrb	r3, [r7, #23]
 80109a4:	2b00      	cmp	r3, #0
 80109a6:	d005      	beq.n	80109b4 <Ble_Hci_Gap_Gatt_Init+0x1f8>
  {
    APP_DBG_MSG("  Fail   : aci_gap_set_io_capability command, result: 0x%x \n", ret);
 80109a8:	7dfb      	ldrb	r3, [r7, #23]
 80109aa:	4619      	mov	r1, r3
 80109ac:	4842      	ldr	r0, [pc, #264]	; (8010ab8 <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 80109ae:	f003 f8cf 	bl	8013b50 <iprintf>
 80109b2:	e002      	b.n	80109ba <Ble_Hci_Gap_Gatt_Init+0x1fe>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gap_set_io_capability command\n");
 80109b4:	4841      	ldr	r0, [pc, #260]	; (8010abc <Ble_Hci_Gap_Gatt_Init+0x300>)
 80109b6:	f003 f967 	bl	8013c88 <puts>
  }

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 80109ba:	4b3e      	ldr	r3, [pc, #248]	; (8010ab4 <Ble_Hci_Gap_Gatt_Init+0x2f8>)
 80109bc:	2201      	movs	r2, #1
 80109be:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 80109c0:	4b3c      	ldr	r3, [pc, #240]	; (8010ab4 <Ble_Hci_Gap_Gatt_Init+0x2f8>)
 80109c2:	2208      	movs	r2, #8
 80109c4:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 80109c6:	4b3b      	ldr	r3, [pc, #236]	; (8010ab4 <Ble_Hci_Gap_Gatt_Init+0x2f8>)
 80109c8:	2210      	movs	r2, #16
 80109ca:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 80109cc:	4b39      	ldr	r3, [pc, #228]	; (8010ab4 <Ble_Hci_Gap_Gatt_Init+0x2f8>)
 80109ce:	2201      	movs	r2, #1
 80109d0:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 80109d2:	4b38      	ldr	r3, [pc, #224]	; (8010ab4 <Ble_Hci_Gap_Gatt_Init+0x2f8>)
 80109d4:	4a3a      	ldr	r2, [pc, #232]	; (8010ac0 <Ble_Hci_Gap_Gatt_Init+0x304>)
 80109d6:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 80109d8:	4b36      	ldr	r3, [pc, #216]	; (8010ab4 <Ble_Hci_Gap_Gatt_Init+0x2f8>)
 80109da:	2200      	movs	r2, #0
 80109dc:	709a      	strb	r2, [r3, #2]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init_1*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init_1*/

  ret = aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 80109de:	4b35      	ldr	r3, [pc, #212]	; (8010ab4 <Ble_Hci_Gap_Gatt_Init+0x2f8>)
 80109e0:	789c      	ldrb	r4, [r3, #2]
 80109e2:	4b34      	ldr	r3, [pc, #208]	; (8010ab4 <Ble_Hci_Gap_Gatt_Init+0x2f8>)
 80109e4:	785d      	ldrb	r5, [r3, #1]
 80109e6:	4b33      	ldr	r3, [pc, #204]	; (8010ab4 <Ble_Hci_Gap_Gatt_Init+0x2f8>)
 80109e8:	791b      	ldrb	r3, [r3, #4]
 80109ea:	4a32      	ldr	r2, [pc, #200]	; (8010ab4 <Ble_Hci_Gap_Gatt_Init+0x2f8>)
 80109ec:	7952      	ldrb	r2, [r2, #5]
 80109ee:	4931      	ldr	r1, [pc, #196]	; (8010ab4 <Ble_Hci_Gap_Gatt_Init+0x2f8>)
 80109f0:	78c9      	ldrb	r1, [r1, #3]
 80109f2:	4830      	ldr	r0, [pc, #192]	; (8010ab4 <Ble_Hci_Gap_Gatt_Init+0x2f8>)
 80109f4:	6880      	ldr	r0, [r0, #8]
 80109f6:	2600      	movs	r6, #0
 80109f8:	9604      	str	r6, [sp, #16]
 80109fa:	9003      	str	r0, [sp, #12]
 80109fc:	9102      	str	r1, [sp, #8]
 80109fe:	9201      	str	r2, [sp, #4]
 8010a00:	9300      	str	r3, [sp, #0]
 8010a02:	2300      	movs	r3, #0
 8010a04:	2201      	movs	r2, #1
 8010a06:	4629      	mov	r1, r5
 8010a08:	4620      	mov	r0, r4
 8010a0a:	f7fd f81d 	bl	800da48 <aci_gap_set_authentication_requirement>
 8010a0e:	4603      	mov	r3, r0
 8010a10:	75fb      	strb	r3, [r7, #23]
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin,
                                               CFG_IDENTITY_ADDRESS);
  if (ret != BLE_STATUS_SUCCESS)
 8010a12:	7dfb      	ldrb	r3, [r7, #23]
 8010a14:	2b00      	cmp	r3, #0
 8010a16:	d005      	beq.n	8010a24 <Ble_Hci_Gap_Gatt_Init+0x268>
  {
    APP_DBG_MSG("  Fail   : aci_gap_set_authentication_requirement command, result: 0x%x \n", ret);
 8010a18:	7dfb      	ldrb	r3, [r7, #23]
 8010a1a:	4619      	mov	r1, r3
 8010a1c:	4829      	ldr	r0, [pc, #164]	; (8010ac4 <Ble_Hci_Gap_Gatt_Init+0x308>)
 8010a1e:	f003 f897 	bl	8013b50 <iprintf>
 8010a22:	e002      	b.n	8010a2a <Ble_Hci_Gap_Gatt_Init+0x26e>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gap_set_authentication_requirement command\n");
 8010a24:	4828      	ldr	r0, [pc, #160]	; (8010ac8 <Ble_Hci_Gap_Gatt_Init+0x30c>)
 8010a26:	f003 f92f 	bl	8013c88 <puts>
  }

  /**
   * Initialize whitelist
   */
  if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 8010a2a:	4b22      	ldr	r3, [pc, #136]	; (8010ab4 <Ble_Hci_Gap_Gatt_Init+0x2f8>)
 8010a2c:	789b      	ldrb	r3, [r3, #2]
 8010a2e:	2b00      	cmp	r3, #0
 8010a30:	d00f      	beq.n	8010a52 <Ble_Hci_Gap_Gatt_Init+0x296>
  {
    ret = aci_gap_configure_whitelist();
 8010a32:	f7fd fa53 	bl	800dedc <aci_gap_configure_whitelist>
 8010a36:	4603      	mov	r3, r0
 8010a38:	75fb      	strb	r3, [r7, #23]
    if (ret != BLE_STATUS_SUCCESS)
 8010a3a:	7dfb      	ldrb	r3, [r7, #23]
 8010a3c:	2b00      	cmp	r3, #0
 8010a3e:	d005      	beq.n	8010a4c <Ble_Hci_Gap_Gatt_Init+0x290>
    {
      APP_DBG_MSG("  Fail   : aci_gap_configure_whitelist command, result: 0x%x \n", ret);
 8010a40:	7dfb      	ldrb	r3, [r7, #23]
 8010a42:	4619      	mov	r1, r3
 8010a44:	4821      	ldr	r0, [pc, #132]	; (8010acc <Ble_Hci_Gap_Gatt_Init+0x310>)
 8010a46:	f003 f883 	bl	8013b50 <iprintf>
 8010a4a:	e002      	b.n	8010a52 <Ble_Hci_Gap_Gatt_Init+0x296>
    }
    else
    {
      APP_DBG_MSG("  Success: aci_gap_configure_whitelist command\n");
 8010a4c:	4820      	ldr	r0, [pc, #128]	; (8010ad0 <Ble_Hci_Gap_Gatt_Init+0x314>)
 8010a4e:	f003 f91b 	bl	8013c88 <puts>
    }
  }
  APP_DBG_MSG("==>> End Ble_Hci_Gap_Gatt_Init function\n\r");
 8010a52:	4820      	ldr	r0, [pc, #128]	; (8010ad4 <Ble_Hci_Gap_Gatt_Init+0x318>)
 8010a54:	f003 f87c 	bl	8013b50 <iprintf>
}
 8010a58:	bf00      	nop
 8010a5a:	371c      	adds	r7, #28
 8010a5c:	46bd      	mov	sp, r7
 8010a5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010a60:	08016b2c 	.word	0x08016b2c
 8010a64:	08016b58 	.word	0x08016b58
 8010a68:	08016b88 	.word	0x08016b88
 8010a6c:	08016ba8 	.word	0x08016ba8
 8010a70:	08016c04 	.word	0x08016c04
 8010a74:	08016c50 	.word	0x08016c50
 8010a78:	08017f44 	.word	0x08017f44
 8010a7c:	08016c8c 	.word	0x08016c8c
 8010a80:	08016ce4 	.word	0x08016ce4
 8010a84:	08017f54 	.word	0x08017f54
 8010a88:	08016d2c 	.word	0x08016d2c
 8010a8c:	08016d84 	.word	0x08016d84
 8010a90:	08016dcc 	.word	0x08016dcc
 8010a94:	08016e0c 	.word	0x08016e0c
 8010a98:	08016e3c 	.word	0x08016e3c
 8010a9c:	08016e70 	.word	0x08016e70
 8010aa0:	08016e94 	.word	0x08016e94
 8010aa4:	08016ea0 	.word	0x08016ea0
 8010aa8:	08016ed0 	.word	0x08016ed0
 8010aac:	08016ef0 	.word	0x08016ef0
 8010ab0:	08016f2c 	.word	0x08016f2c
 8010ab4:	20001c24 	.word	0x20001c24
 8010ab8:	08016f58 	.word	0x08016f58
 8010abc:	08016f98 	.word	0x08016f98
 8010ac0:	0001b207 	.word	0x0001b207
 8010ac4:	08016fc8 	.word	0x08016fc8
 8010ac8:	08017014 	.word	0x08017014
 8010acc:	08017050 	.word	0x08017050
 8010ad0:	08017090 	.word	0x08017090
 8010ad4:	080170c0 	.word	0x080170c0

08010ad8 <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t NewStatus)
{
 8010ad8:	b580      	push	{r7, lr}
 8010ada:	b08c      	sub	sp, #48	; 0x30
 8010adc:	af08      	add	r7, sp, #32
 8010ade:	4603      	mov	r3, r0
 8010ae0:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8010ae2:	2392      	movs	r3, #146	; 0x92
 8010ae4:	73fb      	strb	r3, [r7, #15]

  BleApplicationContext.Device_Connection_Status = NewStatus;
 8010ae6:	4a1e      	ldr	r2, [pc, #120]	; (8010b60 <Adv_Request+0x88>)
 8010ae8:	79fb      	ldrb	r3, [r7, #7]
 8010aea:	f882 3080 	strb.w	r3, [r2, #128]	; 0x80
  /* Start Fast or Low Power Advertising */
  ret = aci_gap_set_discoverable(ADV_TYPE,
 8010aee:	2300      	movs	r3, #0
 8010af0:	9306      	str	r3, [sp, #24]
 8010af2:	2300      	movs	r3, #0
 8010af4:	9305      	str	r3, [sp, #20]
 8010af6:	2300      	movs	r3, #0
 8010af8:	9304      	str	r3, [sp, #16]
 8010afa:	2300      	movs	r3, #0
 8010afc:	9303      	str	r3, [sp, #12]
 8010afe:	2300      	movs	r3, #0
 8010b00:	9302      	str	r3, [sp, #8]
 8010b02:	2300      	movs	r3, #0
 8010b04:	9301      	str	r3, [sp, #4]
 8010b06:	2300      	movs	r3, #0
 8010b08:	9300      	str	r3, [sp, #0]
 8010b0a:	2300      	movs	r3, #0
 8010b0c:	22a0      	movs	r2, #160	; 0xa0
 8010b0e:	2180      	movs	r1, #128	; 0x80
 8010b10:	2000      	movs	r0, #0
 8010b12:	f7fc fe4b 	bl	800d7ac <aci_gap_set_discoverable>
 8010b16:	4603      	mov	r3, r0
 8010b18:	73fb      	strb	r3, [r7, #15]
                                 0,
                                 0,
                                 0,
                                 0,
                                 0);
  if (ret != BLE_STATUS_SUCCESS)
 8010b1a:	7bfb      	ldrb	r3, [r7, #15]
 8010b1c:	2b00      	cmp	r3, #0
 8010b1e:	d005      	beq.n	8010b2c <Adv_Request+0x54>
  {
    APP_DBG_MSG("==>> aci_gap_set_discoverable - fail, result: 0x%x \n", ret);
 8010b20:	7bfb      	ldrb	r3, [r7, #15]
 8010b22:	4619      	mov	r1, r3
 8010b24:	480f      	ldr	r0, [pc, #60]	; (8010b64 <Adv_Request+0x8c>)
 8010b26:	f003 f813 	bl	8013b50 <iprintf>
 8010b2a:	e002      	b.n	8010b32 <Adv_Request+0x5a>
  }
  else
  {
    APP_DBG_MSG("==>> aci_gap_set_discoverable - Success\n");
 8010b2c:	480e      	ldr	r0, [pc, #56]	; (8010b68 <Adv_Request+0x90>)
 8010b2e:	f003 f8ab 	bl	8013c88 <puts>
  }

  /* Update Advertising data */
  ret = aci_gap_update_adv_data(sizeof(a_AdvData), (uint8_t*) a_AdvData);
 8010b32:	490e      	ldr	r1, [pc, #56]	; (8010b6c <Adv_Request+0x94>)
 8010b34:	2008      	movs	r0, #8
 8010b36:	f7fd f95f 	bl	800ddf8 <aci_gap_update_adv_data>
 8010b3a:	4603      	mov	r3, r0
 8010b3c:	73fb      	strb	r3, [r7, #15]
  if (ret != BLE_STATUS_SUCCESS)
 8010b3e:	7bfb      	ldrb	r3, [r7, #15]
 8010b40:	2b00      	cmp	r3, #0
 8010b42:	d005      	beq.n	8010b50 <Adv_Request+0x78>
  {
      APP_DBG_MSG("==>> Start Fast Advertising Failed , result: %d \n\r", ret);
 8010b44:	7bfb      	ldrb	r3, [r7, #15]
 8010b46:	4619      	mov	r1, r3
 8010b48:	4809      	ldr	r0, [pc, #36]	; (8010b70 <Adv_Request+0x98>)
 8010b4a:	f003 f801 	bl	8013b50 <iprintf>
  else
  {
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
  }

  return;
 8010b4e:	e003      	b.n	8010b58 <Adv_Request+0x80>
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
 8010b50:	4808      	ldr	r0, [pc, #32]	; (8010b74 <Adv_Request+0x9c>)
 8010b52:	f002 fffd 	bl	8013b50 <iprintf>
  return;
 8010b56:	bf00      	nop
}
 8010b58:	3710      	adds	r7, #16
 8010b5a:	46bd      	mov	sp, r7
 8010b5c:	bd80      	pop	{r7, pc}
 8010b5e:	bf00      	nop
 8010b60:	20001c24 	.word	0x20001c24
 8010b64:	080170ec 	.word	0x080170ec
 8010b68:	08017124 	.word	0x08017124
 8010b6c:	20000010 	.word	0x20000010
 8010b70:	0801714c 	.word	0x0801714c
 8010b74:	08017180 	.word	0x08017180

08010b78 <BleGetBdAddress>:

const uint8_t* BleGetBdAddress(void)
{
 8010b78:	b580      	push	{r7, lr}
 8010b7a:	b086      	sub	sp, #24
 8010b7c:	af00      	add	r7, sp, #0
  const uint8_t *p_bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 8010b7e:	f7ff fba5 	bl	80102cc <LL_FLASH_GetUDN>
 8010b82:	6138      	str	r0, [r7, #16]

  if (udn != 0xFFFFFFFF)
 8010b84:	693b      	ldr	r3, [r7, #16]
 8010b86:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010b8a:	d023      	beq.n	8010bd4 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 8010b8c:	f7ff fbb6 	bl	80102fc <LL_FLASH_GetSTCompanyID>
 8010b90:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 8010b92:	f7ff fba7 	bl	80102e4 <LL_FLASH_GetDeviceID>
 8010b96:	6078      	str	r0, [r7, #4]
     * bit[23:16] : Device ID.
     * bit[15:0] : The last 16bits from the UDN
     * Note: In order to use the Public Address in a final product, a dedicated
     * 24bits company ID (OUI) shall be bought.
     */
    a_BdAddrUdn[0] = (uint8_t)(udn & 0x000000FF);
 8010b98:	693b      	ldr	r3, [r7, #16]
 8010b9a:	b2da      	uxtb	r2, r3
 8010b9c:	4b16      	ldr	r3, [pc, #88]	; (8010bf8 <BleGetBdAddress+0x80>)
 8010b9e:	701a      	strb	r2, [r3, #0]
    a_BdAddrUdn[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 8010ba0:	693b      	ldr	r3, [r7, #16]
 8010ba2:	0a1b      	lsrs	r3, r3, #8
 8010ba4:	b2da      	uxtb	r2, r3
 8010ba6:	4b14      	ldr	r3, [pc, #80]	; (8010bf8 <BleGetBdAddress+0x80>)
 8010ba8:	705a      	strb	r2, [r3, #1]
    a_BdAddrUdn[2] = (uint8_t)device_id;
 8010baa:	687b      	ldr	r3, [r7, #4]
 8010bac:	b2da      	uxtb	r2, r3
 8010bae:	4b12      	ldr	r3, [pc, #72]	; (8010bf8 <BleGetBdAddress+0x80>)
 8010bb0:	709a      	strb	r2, [r3, #2]
    a_BdAddrUdn[3] = (uint8_t)(company_id & 0x000000FF);
 8010bb2:	68bb      	ldr	r3, [r7, #8]
 8010bb4:	b2da      	uxtb	r2, r3
 8010bb6:	4b10      	ldr	r3, [pc, #64]	; (8010bf8 <BleGetBdAddress+0x80>)
 8010bb8:	70da      	strb	r2, [r3, #3]
    a_BdAddrUdn[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 8010bba:	68bb      	ldr	r3, [r7, #8]
 8010bbc:	0a1b      	lsrs	r3, r3, #8
 8010bbe:	b2da      	uxtb	r2, r3
 8010bc0:	4b0d      	ldr	r3, [pc, #52]	; (8010bf8 <BleGetBdAddress+0x80>)
 8010bc2:	711a      	strb	r2, [r3, #4]
    a_BdAddrUdn[5] = (uint8_t)((company_id & 0x00FF0000) >> 16);
 8010bc4:	68bb      	ldr	r3, [r7, #8]
 8010bc6:	0c1b      	lsrs	r3, r3, #16
 8010bc8:	b2da      	uxtb	r2, r3
 8010bca:	4b0b      	ldr	r3, [pc, #44]	; (8010bf8 <BleGetBdAddress+0x80>)
 8010bcc:	715a      	strb	r2, [r3, #5]

    p_bd_addr = (const uint8_t *)a_BdAddrUdn;
 8010bce:	4b0a      	ldr	r3, [pc, #40]	; (8010bf8 <BleGetBdAddress+0x80>)
 8010bd0:	617b      	str	r3, [r7, #20]
 8010bd2:	e00b      	b.n	8010bec <BleGetBdAddress+0x74>
  }
  else
  {
    p_otp_addr = OTP_Read(0);
 8010bd4:	2000      	movs	r0, #0
 8010bd6:	f7fe fe91 	bl	800f8fc <OTP_Read>
 8010bda:	60f8      	str	r0, [r7, #12]
    if (p_otp_addr)
 8010bdc:	68fb      	ldr	r3, [r7, #12]
 8010bde:	2b00      	cmp	r3, #0
 8010be0:	d002      	beq.n	8010be8 <BleGetBdAddress+0x70>
    {
      p_bd_addr = ((OTP_ID0_t*)p_otp_addr)->bd_address;
 8010be2:	68fb      	ldr	r3, [r7, #12]
 8010be4:	617b      	str	r3, [r7, #20]
 8010be6:	e001      	b.n	8010bec <BleGetBdAddress+0x74>
    }
    else
    {
      p_bd_addr = a_MBdAddr;
 8010be8:	4b04      	ldr	r3, [pc, #16]	; (8010bfc <BleGetBdAddress+0x84>)
 8010bea:	617b      	str	r3, [r7, #20]
    }
  }

  return p_bd_addr;
 8010bec:	697b      	ldr	r3, [r7, #20]
}
 8010bee:	4618      	mov	r0, r3
 8010bf0:	3718      	adds	r7, #24
 8010bf2:	46bd      	mov	sp, r7
 8010bf4:	bd80      	pop	{r7, pc}
 8010bf6:	bf00      	nop
 8010bf8:	20001c1c 	.word	0x20001c1c
 8010bfc:	08017f3c 	.word	0x08017f3c

08010c00 <Adv_Cancel>:
 *
 * SPECIFIC FUNCTIONS FOR CUSTOM
 *
 *************************************************************/
static void Adv_Cancel(void)
{
 8010c00:	b580      	push	{r7, lr}
 8010c02:	b082      	sub	sp, #8
 8010c04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Adv_Cancel_1 */

  /* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 8010c06:	4b10      	ldr	r3, [pc, #64]	; (8010c48 <Adv_Cancel+0x48>)
 8010c08:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8010c0c:	2b05      	cmp	r3, #5
 8010c0e:	d017      	beq.n	8010c40 <Adv_Cancel+0x40>
  {
    tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8010c10:	2392      	movs	r3, #146	; 0x92
 8010c12:	71fb      	strb	r3, [r7, #7]

    ret = aci_gap_set_non_discoverable();
 8010c14:	f7fc fda6 	bl	800d764 <aci_gap_set_non_discoverable>
 8010c18:	4603      	mov	r3, r0
 8010c1a:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8010c1c:	4b0a      	ldr	r3, [pc, #40]	; (8010c48 <Adv_Cancel+0x48>)
 8010c1e:	2200      	movs	r2, #0
 8010c20:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    if (ret != BLE_STATUS_SUCCESS)
 8010c24:	79fb      	ldrb	r3, [r7, #7]
 8010c26:	2b00      	cmp	r3, #0
 8010c28:	d003      	beq.n	8010c32 <Adv_Cancel+0x32>
    {
      APP_DBG_MSG("** STOP ADVERTISING **  Failed \r\n\r");
 8010c2a:	4808      	ldr	r0, [pc, #32]	; (8010c4c <Adv_Cancel+0x4c>)
 8010c2c:	f002 ff90 	bl	8013b50 <iprintf>

  /* USER CODE BEGIN Adv_Cancel_2 */

  /* USER CODE END Adv_Cancel_2 */

  return;
 8010c30:	e006      	b.n	8010c40 <Adv_Cancel+0x40>
      APP_DBG_MSG("  \r\n\r");
 8010c32:	4807      	ldr	r0, [pc, #28]	; (8010c50 <Adv_Cancel+0x50>)
 8010c34:	f002 ff8c 	bl	8013b50 <iprintf>
      APP_DBG_MSG("** STOP ADVERTISING **  \r\n\r");
 8010c38:	4806      	ldr	r0, [pc, #24]	; (8010c54 <Adv_Cancel+0x54>)
 8010c3a:	f002 ff89 	bl	8013b50 <iprintf>
  return;
 8010c3e:	bf00      	nop
 8010c40:	bf00      	nop
}
 8010c42:	3708      	adds	r7, #8
 8010c44:	46bd      	mov	sp, r7
 8010c46:	bd80      	pop	{r7, pc}
 8010c48:	20001c24 	.word	0x20001c24
 8010c4c:	080171a8 	.word	0x080171a8
 8010c50:	080171cc 	.word	0x080171cc
 8010c54:	080171d4 	.word	0x080171d4

08010c58 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* p_Data)
{
 8010c58:	b580      	push	{r7, lr}
 8010c5a:	b082      	sub	sp, #8
 8010c5c:	af00      	add	r7, sp, #0
 8010c5e:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8010c60:	2100      	movs	r1, #0
 8010c62:	2002      	movs	r0, #2
 8010c64:	f001 f9a0 	bl	8011fa8 <UTIL_SEQ_SetTask>

  return;
 8010c68:	bf00      	nop
}
 8010c6a:	3708      	adds	r7, #8
 8010c6c:	46bd      	mov	sp, r7
 8010c6e:	bd80      	pop	{r7, pc}

08010c70 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t Flag)
{
 8010c70:	b580      	push	{r7, lr}
 8010c72:	b082      	sub	sp, #8
 8010c74:	af00      	add	r7, sp, #0
 8010c76:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8010c78:	2001      	movs	r0, #1
 8010c7a:	f001 fa01 	bl	8012080 <UTIL_SEQ_SetEvt>

  return;
 8010c7e:	bf00      	nop
}
 8010c80:	3708      	adds	r7, #8
 8010c82:	46bd      	mov	sp, r7
 8010c84:	bd80      	pop	{r7, pc}

08010c86 <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t Timeout)
{
 8010c86:	b580      	push	{r7, lr}
 8010c88:	b082      	sub	sp, #8
 8010c8a:	af00      	add	r7, sp, #0
 8010c8c:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8010c8e:	2001      	movs	r0, #1
 8010c90:	f001 fa16 	bl	80120c0 <UTIL_SEQ_WaitEvt>

  return;
 8010c94:	bf00      	nop
}
 8010c96:	3708      	adds	r7, #8
 8010c98:	46bd      	mov	sp, r7
 8010c9a:	bd80      	pop	{r7, pc}

08010c9c <BLE_UserEvtRx>:

static void BLE_UserEvtRx(void *p_Payload)
{
 8010c9c:	b580      	push	{r7, lr}
 8010c9e:	b084      	sub	sp, #16
 8010ca0:	af00      	add	r7, sp, #0
 8010ca2:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *p_param;

  p_param = (tHCI_UserEvtRxParam *)p_Payload;
 8010ca4:	687b      	ldr	r3, [r7, #4]
 8010ca6:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(p_param->pckt->evtserial));
 8010ca8:	68fb      	ldr	r3, [r7, #12]
 8010caa:	685b      	ldr	r3, [r3, #4]
 8010cac:	3308      	adds	r3, #8
 8010cae:	4618      	mov	r0, r3
 8010cb0:	f7fd ff16 	bl	800eae0 <SVCCTL_UserEvtRx>
 8010cb4:	4603      	mov	r3, r0
 8010cb6:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 8010cb8:	7afb      	ldrb	r3, [r7, #11]
 8010cba:	2b00      	cmp	r3, #0
 8010cbc:	d003      	beq.n	8010cc6 <BLE_UserEvtRx+0x2a>
  {
    p_param->status = HCI_TL_UserEventFlow_Enable;
 8010cbe:	68fb      	ldr	r3, [r7, #12]
 8010cc0:	2201      	movs	r2, #1
 8010cc2:	701a      	strb	r2, [r3, #0]
  else
  {
    p_param->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 8010cc4:	e003      	b.n	8010cce <BLE_UserEvtRx+0x32>
    p_param->status = HCI_TL_UserEventFlow_Disable;
 8010cc6:	68fb      	ldr	r3, [r7, #12]
 8010cc8:	2200      	movs	r2, #0
 8010cca:	701a      	strb	r2, [r3, #0]
  return;
 8010ccc:	bf00      	nop
}
 8010cce:	3710      	adds	r7, #16
 8010cd0:	46bd      	mov	sp, r7
 8010cd2:	bd80      	pop	{r7, pc}

08010cd4 <BLE_StatusNot>:

static void BLE_StatusNot(HCI_TL_CmdStatus_t Status)
{
 8010cd4:	b580      	push	{r7, lr}
 8010cd6:	b084      	sub	sp, #16
 8010cd8:	af00      	add	r7, sp, #0
 8010cda:	4603      	mov	r3, r0
 8010cdc:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (Status)
 8010cde:	79fb      	ldrb	r3, [r7, #7]
 8010ce0:	2b00      	cmp	r3, #0
 8010ce2:	d002      	beq.n	8010cea <BLE_StatusNot+0x16>
 8010ce4:	2b01      	cmp	r3, #1
 8010ce6:	d006      	beq.n	8010cf6 <BLE_StatusNot+0x22>

    default:
      /* USER CODE BEGIN Status */

      /* USER CODE END Status */
      break;
 8010ce8:	e00b      	b.n	8010d02 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8010cea:	2307      	movs	r3, #7
 8010cec:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 8010cee:	68f8      	ldr	r0, [r7, #12]
 8010cf0:	f001 f986 	bl	8012000 <UTIL_SEQ_PauseTask>
      break;
 8010cf4:	e005      	b.n	8010d02 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8010cf6:	2307      	movs	r3, #7
 8010cf8:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 8010cfa:	68f8      	ldr	r0, [r7, #12]
 8010cfc:	f001 f9a0 	bl	8012040 <UTIL_SEQ_ResumeTask>
      break;
 8010d00:	bf00      	nop
  }

  return;
 8010d02:	bf00      	nop
}
 8010d04:	3710      	adds	r7, #16
 8010d06:	46bd      	mov	sp, r7
 8010d08:	bd80      	pop	{r7, pc}
	...

08010d0c <Custom_STM_App_Notification>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void Custom_STM_App_Notification(Custom_STM_App_Notification_evt_t *pNotification)
{
 8010d0c:	b480      	push	{r7}
 8010d0e:	b083      	sub	sp, #12
 8010d10:	af00      	add	r7, sp, #0
 8010d12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_1 */

  /* USER CODE END CUSTOM_STM_App_Notification_1 */
  switch (pNotification->Custom_Evt_Opcode)
 8010d14:	687b      	ldr	r3, [r7, #4]
 8010d16:	781b      	ldrb	r3, [r3, #0]
 8010d18:	2b14      	cmp	r3, #20
 8010d1a:	d82d      	bhi.n	8010d78 <Custom_STM_App_Notification+0x6c>
 8010d1c:	a201      	add	r2, pc, #4	; (adr r2, 8010d24 <Custom_STM_App_Notification+0x18>)
 8010d1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010d22:	bf00      	nop
 8010d24:	08010d79 	.word	0x08010d79
 8010d28:	08010d79 	.word	0x08010d79
 8010d2c:	08010d79 	.word	0x08010d79
 8010d30:	08010d79 	.word	0x08010d79
 8010d34:	08010d79 	.word	0x08010d79
 8010d38:	08010d79 	.word	0x08010d79
 8010d3c:	08010d79 	.word	0x08010d79
 8010d40:	08010d79 	.word	0x08010d79
 8010d44:	08010d79 	.word	0x08010d79
 8010d48:	08010d79 	.word	0x08010d79
 8010d4c:	08010d79 	.word	0x08010d79
 8010d50:	08010d79 	.word	0x08010d79
 8010d54:	08010d79 	.word	0x08010d79
 8010d58:	08010d79 	.word	0x08010d79
 8010d5c:	08010d79 	.word	0x08010d79
 8010d60:	08010d79 	.word	0x08010d79
 8010d64:	08010d79 	.word	0x08010d79
 8010d68:	08010d79 	.word	0x08010d79
 8010d6c:	08010d79 	.word	0x08010d79
 8010d70:	08010d79 	.word	0x08010d79
 8010d74:	08010d79 	.word	0x08010d79

    default:
      /* USER CODE BEGIN CUSTOM_STM_App_Notification_default */

      /* USER CODE END CUSTOM_STM_App_Notification_default */
      break;
 8010d78:	bf00      	nop
  }
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_2 */

  /* USER CODE END CUSTOM_STM_App_Notification_2 */
  return;
 8010d7a:	bf00      	nop
}
 8010d7c:	370c      	adds	r7, #12
 8010d7e:	46bd      	mov	sp, r7
 8010d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d84:	4770      	bx	lr
 8010d86:	bf00      	nop

08010d88 <Custom_APP_Notification>:

void Custom_APP_Notification(Custom_App_ConnHandle_Not_evt_t *pNotification)
{
 8010d88:	b480      	push	{r7}
 8010d8a:	b083      	sub	sp, #12
 8010d8c:	af00      	add	r7, sp, #0
 8010d8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_APP_Notification_1 */

  /* USER CODE END CUSTOM_APP_Notification_1 */

  switch (pNotification->Custom_Evt_Opcode)
 8010d90:	687b      	ldr	r3, [r7, #4]
 8010d92:	781b      	ldrb	r3, [r3, #0]
 8010d94:	2b00      	cmp	r3, #0
 8010d96:	d002      	beq.n	8010d9e <Custom_APP_Notification+0x16>
 8010d98:	2b01      	cmp	r3, #1
 8010d9a:	d002      	beq.n	8010da2 <Custom_APP_Notification+0x1a>

    default:
      /* USER CODE BEGIN CUSTOM_APP_Notification_default */

      /* USER CODE END CUSTOM_APP_Notification_default */
      break;
 8010d9c:	e002      	b.n	8010da4 <Custom_APP_Notification+0x1c>
      break;
 8010d9e:	bf00      	nop
 8010da0:	e000      	b.n	8010da4 <Custom_APP_Notification+0x1c>
      break;
 8010da2:	bf00      	nop

  /* USER CODE BEGIN CUSTOM_APP_Notification_2 */

  /* USER CODE END CUSTOM_APP_Notification_2 */

  return;
 8010da4:	bf00      	nop
}
 8010da6:	370c      	adds	r7, #12
 8010da8:	46bd      	mov	sp, r7
 8010daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dae:	4770      	bx	lr

08010db0 <Custom_APP_Init>:

void Custom_APP_Init(void)
{
 8010db0:	b480      	push	{r7}
 8010db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CUSTOM_APP_Init */

  /* USER CODE END CUSTOM_APP_Init */
  return;
 8010db4:	bf00      	nop
}
 8010db6:	46bd      	mov	sp, r7
 8010db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dbc:	4770      	bx	lr
	...

08010dc0 <Custom_STM_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t Custom_STM_Event_Handler(void *Event)
{
 8010dc0:	b580      	push	{r7, lr}
 8010dc2:	b08a      	sub	sp, #40	; 0x28
 8010dc4:	af00      	add	r7, sp, #0
 8010dc6:	6078      	str	r0, [r7, #4]
  Custom_STM_App_Notification_evt_t     Notification;
  /* USER CODE BEGIN Custom_STM_Event_Handler_1 */

  /* USER CODE END Custom_STM_Event_Handler_1 */

  return_value = SVCCTL_EvtNotAck;
 8010dc8:	2300      	movs	r3, #0
 8010dca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 8010dce:	687b      	ldr	r3, [r7, #4]
 8010dd0:	3301      	adds	r3, #1
 8010dd2:	623b      	str	r3, [r7, #32]

  switch (event_pckt->evt)
 8010dd4:	6a3b      	ldr	r3, [r7, #32]
 8010dd6:	781b      	ldrb	r3, [r3, #0]
 8010dd8:	2bff      	cmp	r3, #255	; 0xff
 8010dda:	f040 8195 	bne.w	8011108 <Custom_STM_Event_Handler+0x348>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 8010dde:	6a3b      	ldr	r3, [r7, #32]
 8010de0:	3302      	adds	r3, #2
 8010de2:	61fb      	str	r3, [r7, #28]
      switch (blecore_evt->ecode)
 8010de4:	69fb      	ldr	r3, [r7, #28]
 8010de6:	881b      	ldrh	r3, [r3, #0]
 8010de8:	b29b      	uxth	r3, r3
 8010dea:	f640 4214 	movw	r2, #3092	; 0xc14
 8010dee:	4293      	cmp	r3, r2
 8010df0:	f000 8184 	beq.w	80110fc <Custom_STM_Event_Handler+0x33c>
 8010df4:	f640 4214 	movw	r2, #3092	; 0xc14
 8010df8:	4293      	cmp	r3, r2
 8010dfa:	f300 8181 	bgt.w	8011100 <Custom_STM_Event_Handler+0x340>
 8010dfe:	f640 4201 	movw	r2, #3073	; 0xc01
 8010e02:	4293      	cmp	r3, r2
 8010e04:	d003      	beq.n	8010e0e <Custom_STM_Event_Handler+0x4e>
 8010e06:	f640 4213 	movw	r2, #3091	; 0xc13
 8010e0a:	4293      	cmp	r3, r2

          /* USER CODE END EVT_BLUE_GATT_WRITE_PERMIT_REQ_BEGIN */
          /* USER CODE BEGIN EVT_BLUE_GATT_WRITE_PERMIT_REQ_END */

          /* USER CODE END EVT_BLUE_GATT_WRITE_PERMIT_REQ_END */
          break;
 8010e0c:	e17b      	b.n	8011106 <Custom_STM_Event_Handler+0x346>
        	HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 8010e0e:	2101      	movs	r1, #1
 8010e10:	48ad      	ldr	r0, [pc, #692]	; (80110c8 <Custom_STM_Event_Handler+0x308>)
 8010e12:	f7f6 feaf 	bl	8007b74 <HAL_GPIO_TogglePin>
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 8010e16:	69fb      	ldr	r3, [r7, #28]
 8010e18:	3302      	adds	r3, #2
 8010e1a:	61bb      	str	r3, [r7, #24]
          if (attribute_modified->Attr_Handle == (CustomContext.CustomModeHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 8010e1c:	69bb      	ldr	r3, [r7, #24]
 8010e1e:	885b      	ldrh	r3, [r3, #2]
 8010e20:	b29b      	uxth	r3, r3
 8010e22:	461a      	mov	r2, r3
 8010e24:	4ba9      	ldr	r3, [pc, #676]	; (80110cc <Custom_STM_Event_Handler+0x30c>)
 8010e26:	885b      	ldrh	r3, [r3, #2]
 8010e28:	3302      	adds	r3, #2
 8010e2a:	429a      	cmp	r2, r3
 8010e2c:	d119      	bne.n	8010e62 <Custom_STM_Event_Handler+0xa2>
            return_value = SVCCTL_EvtAckFlowEnable;
 8010e2e:	2301      	movs	r3, #1
 8010e30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            switch (attribute_modified->Attr_Data[0])
 8010e34:	69bb      	ldr	r3, [r7, #24]
 8010e36:	7a1b      	ldrb	r3, [r3, #8]
 8010e38:	2b00      	cmp	r3, #0
 8010e3a:	d002      	beq.n	8010e42 <Custom_STM_Event_Handler+0x82>
 8010e3c:	2b01      	cmp	r3, #1
 8010e3e:	d008      	beq.n	8010e52 <Custom_STM_Event_Handler+0x92>
              break;
 8010e40:	e15b      	b.n	80110fa <Custom_STM_Event_Handler+0x33a>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_MODE_NOTIFY_DISABLED_EVT;
 8010e42:	2302      	movs	r3, #2
 8010e44:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 8010e46:	f107 0308 	add.w	r3, r7, #8
 8010e4a:	4618      	mov	r0, r3
 8010e4c:	f7ff ff5e 	bl	8010d0c <Custom_STM_App_Notification>
                break;
 8010e50:	e153      	b.n	80110fa <Custom_STM_Event_Handler+0x33a>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_MODE_NOTIFY_ENABLED_EVT;
 8010e52:	2301      	movs	r3, #1
 8010e54:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 8010e56:	f107 0308 	add.w	r3, r7, #8
 8010e5a:	4618      	mov	r0, r3
 8010e5c:	f7ff ff56 	bl	8010d0c <Custom_STM_App_Notification>
                break;
 8010e60:	e14b      	b.n	80110fa <Custom_STM_Event_Handler+0x33a>
          else if (attribute_modified->Attr_Handle == (CustomContext.CustomBattery_VHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 8010e62:	69bb      	ldr	r3, [r7, #24]
 8010e64:	885b      	ldrh	r3, [r3, #2]
 8010e66:	b29b      	uxth	r3, r3
 8010e68:	461a      	mov	r2, r3
 8010e6a:	4b98      	ldr	r3, [pc, #608]	; (80110cc <Custom_STM_Event_Handler+0x30c>)
 8010e6c:	889b      	ldrh	r3, [r3, #4]
 8010e6e:	3302      	adds	r3, #2
 8010e70:	429a      	cmp	r2, r3
 8010e72:	d119      	bne.n	8010ea8 <Custom_STM_Event_Handler+0xe8>
            return_value = SVCCTL_EvtAckFlowEnable;
 8010e74:	2301      	movs	r3, #1
 8010e76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            switch (attribute_modified->Attr_Data[0])
 8010e7a:	69bb      	ldr	r3, [r7, #24]
 8010e7c:	7a1b      	ldrb	r3, [r3, #8]
 8010e7e:	2b00      	cmp	r3, #0
 8010e80:	d002      	beq.n	8010e88 <Custom_STM_Event_Handler+0xc8>
 8010e82:	2b01      	cmp	r3, #1
 8010e84:	d008      	beq.n	8010e98 <Custom_STM_Event_Handler+0xd8>
              break;
 8010e86:	e138      	b.n	80110fa <Custom_STM_Event_Handler+0x33a>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_BATTERY_V_NOTIFY_DISABLED_EVT;
 8010e88:	2304      	movs	r3, #4
 8010e8a:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 8010e8c:	f107 0308 	add.w	r3, r7, #8
 8010e90:	4618      	mov	r0, r3
 8010e92:	f7ff ff3b 	bl	8010d0c <Custom_STM_App_Notification>
                break;
 8010e96:	e130      	b.n	80110fa <Custom_STM_Event_Handler+0x33a>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_BATTERY_V_NOTIFY_ENABLED_EVT;
 8010e98:	2303      	movs	r3, #3
 8010e9a:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 8010e9c:	f107 0308 	add.w	r3, r7, #8
 8010ea0:	4618      	mov	r0, r3
 8010ea2:	f7ff ff33 	bl	8010d0c <Custom_STM_App_Notification>
                break;
 8010ea6:	e128      	b.n	80110fa <Custom_STM_Event_Handler+0x33a>
          else if (attribute_modified->Attr_Handle == (CustomContext.CustomMcu_TempHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 8010ea8:	69bb      	ldr	r3, [r7, #24]
 8010eaa:	885b      	ldrh	r3, [r3, #2]
 8010eac:	b29b      	uxth	r3, r3
 8010eae:	461a      	mov	r2, r3
 8010eb0:	4b86      	ldr	r3, [pc, #536]	; (80110cc <Custom_STM_Event_Handler+0x30c>)
 8010eb2:	88db      	ldrh	r3, [r3, #6]
 8010eb4:	3302      	adds	r3, #2
 8010eb6:	429a      	cmp	r2, r3
 8010eb8:	d119      	bne.n	8010eee <Custom_STM_Event_Handler+0x12e>
            return_value = SVCCTL_EvtAckFlowEnable;
 8010eba:	2301      	movs	r3, #1
 8010ebc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            switch (attribute_modified->Attr_Data[0])
 8010ec0:	69bb      	ldr	r3, [r7, #24]
 8010ec2:	7a1b      	ldrb	r3, [r3, #8]
 8010ec4:	2b00      	cmp	r3, #0
 8010ec6:	d002      	beq.n	8010ece <Custom_STM_Event_Handler+0x10e>
 8010ec8:	2b01      	cmp	r3, #1
 8010eca:	d008      	beq.n	8010ede <Custom_STM_Event_Handler+0x11e>
              break;
 8010ecc:	e115      	b.n	80110fa <Custom_STM_Event_Handler+0x33a>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_MCU_TEMP_NOTIFY_DISABLED_EVT;
 8010ece:	2306      	movs	r3, #6
 8010ed0:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 8010ed2:	f107 0308 	add.w	r3, r7, #8
 8010ed6:	4618      	mov	r0, r3
 8010ed8:	f7ff ff18 	bl	8010d0c <Custom_STM_App_Notification>
                break;
 8010edc:	e10d      	b.n	80110fa <Custom_STM_Event_Handler+0x33a>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_MCU_TEMP_NOTIFY_ENABLED_EVT;
 8010ede:	2305      	movs	r3, #5
 8010ee0:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 8010ee2:	f107 0308 	add.w	r3, r7, #8
 8010ee6:	4618      	mov	r0, r3
 8010ee8:	f7ff ff10 	bl	8010d0c <Custom_STM_App_Notification>
                break;
 8010eec:	e105      	b.n	80110fa <Custom_STM_Event_Handler+0x33a>
          else if (attribute_modified->Attr_Handle == (CustomContext.CustomBme_IaqHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 8010eee:	69bb      	ldr	r3, [r7, #24]
 8010ef0:	885b      	ldrh	r3, [r3, #2]
 8010ef2:	b29b      	uxth	r3, r3
 8010ef4:	461a      	mov	r2, r3
 8010ef6:	4b75      	ldr	r3, [pc, #468]	; (80110cc <Custom_STM_Event_Handler+0x30c>)
 8010ef8:	895b      	ldrh	r3, [r3, #10]
 8010efa:	3302      	adds	r3, #2
 8010efc:	429a      	cmp	r2, r3
 8010efe:	d119      	bne.n	8010f34 <Custom_STM_Event_Handler+0x174>
            return_value = SVCCTL_EvtAckFlowEnable;
 8010f00:	2301      	movs	r3, #1
 8010f02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            switch (attribute_modified->Attr_Data[0])
 8010f06:	69bb      	ldr	r3, [r7, #24]
 8010f08:	7a1b      	ldrb	r3, [r3, #8]
 8010f0a:	2b00      	cmp	r3, #0
 8010f0c:	d002      	beq.n	8010f14 <Custom_STM_Event_Handler+0x154>
 8010f0e:	2b01      	cmp	r3, #1
 8010f10:	d008      	beq.n	8010f24 <Custom_STM_Event_Handler+0x164>
              break;
 8010f12:	e0f2      	b.n	80110fa <Custom_STM_Event_Handler+0x33a>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_BME_IAQ_NOTIFY_DISABLED_EVT;
 8010f14:	2308      	movs	r3, #8
 8010f16:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 8010f18:	f107 0308 	add.w	r3, r7, #8
 8010f1c:	4618      	mov	r0, r3
 8010f1e:	f7ff fef5 	bl	8010d0c <Custom_STM_App_Notification>
                break;
 8010f22:	e0ea      	b.n	80110fa <Custom_STM_Event_Handler+0x33a>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_BME_IAQ_NOTIFY_ENABLED_EVT;
 8010f24:	2307      	movs	r3, #7
 8010f26:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 8010f28:	f107 0308 	add.w	r3, r7, #8
 8010f2c:	4618      	mov	r0, r3
 8010f2e:	f7ff feed 	bl	8010d0c <Custom_STM_App_Notification>
                break;
 8010f32:	e0e2      	b.n	80110fa <Custom_STM_Event_Handler+0x33a>
          else if (attribute_modified->Attr_Handle == (CustomContext.CustomBme_TempHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 8010f34:	69bb      	ldr	r3, [r7, #24]
 8010f36:	885b      	ldrh	r3, [r3, #2]
 8010f38:	b29b      	uxth	r3, r3
 8010f3a:	461a      	mov	r2, r3
 8010f3c:	4b63      	ldr	r3, [pc, #396]	; (80110cc <Custom_STM_Event_Handler+0x30c>)
 8010f3e:	899b      	ldrh	r3, [r3, #12]
 8010f40:	3302      	adds	r3, #2
 8010f42:	429a      	cmp	r2, r3
 8010f44:	d119      	bne.n	8010f7a <Custom_STM_Event_Handler+0x1ba>
            return_value = SVCCTL_EvtAckFlowEnable;
 8010f46:	2301      	movs	r3, #1
 8010f48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            switch (attribute_modified->Attr_Data[0])
 8010f4c:	69bb      	ldr	r3, [r7, #24]
 8010f4e:	7a1b      	ldrb	r3, [r3, #8]
 8010f50:	2b00      	cmp	r3, #0
 8010f52:	d002      	beq.n	8010f5a <Custom_STM_Event_Handler+0x19a>
 8010f54:	2b01      	cmp	r3, #1
 8010f56:	d008      	beq.n	8010f6a <Custom_STM_Event_Handler+0x1aa>
              break;
 8010f58:	e0cf      	b.n	80110fa <Custom_STM_Event_Handler+0x33a>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_BME_TEMP_NOTIFY_DISABLED_EVT;
 8010f5a:	230a      	movs	r3, #10
 8010f5c:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 8010f5e:	f107 0308 	add.w	r3, r7, #8
 8010f62:	4618      	mov	r0, r3
 8010f64:	f7ff fed2 	bl	8010d0c <Custom_STM_App_Notification>
                break;
 8010f68:	e0c7      	b.n	80110fa <Custom_STM_Event_Handler+0x33a>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_BME_TEMP_NOTIFY_ENABLED_EVT;
 8010f6a:	2309      	movs	r3, #9
 8010f6c:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 8010f6e:	f107 0308 	add.w	r3, r7, #8
 8010f72:	4618      	mov	r0, r3
 8010f74:	f7ff feca 	bl	8010d0c <Custom_STM_App_Notification>
                break;
 8010f78:	e0bf      	b.n	80110fa <Custom_STM_Event_Handler+0x33a>
          else if (attribute_modified->Attr_Handle == (CustomContext.CustomBme_HumHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 8010f7a:	69bb      	ldr	r3, [r7, #24]
 8010f7c:	885b      	ldrh	r3, [r3, #2]
 8010f7e:	b29b      	uxth	r3, r3
 8010f80:	461a      	mov	r2, r3
 8010f82:	4b52      	ldr	r3, [pc, #328]	; (80110cc <Custom_STM_Event_Handler+0x30c>)
 8010f84:	89db      	ldrh	r3, [r3, #14]
 8010f86:	3302      	adds	r3, #2
 8010f88:	429a      	cmp	r2, r3
 8010f8a:	d119      	bne.n	8010fc0 <Custom_STM_Event_Handler+0x200>
            return_value = SVCCTL_EvtAckFlowEnable;
 8010f8c:	2301      	movs	r3, #1
 8010f8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            switch (attribute_modified->Attr_Data[0])
 8010f92:	69bb      	ldr	r3, [r7, #24]
 8010f94:	7a1b      	ldrb	r3, [r3, #8]
 8010f96:	2b00      	cmp	r3, #0
 8010f98:	d002      	beq.n	8010fa0 <Custom_STM_Event_Handler+0x1e0>
 8010f9a:	2b01      	cmp	r3, #1
 8010f9c:	d008      	beq.n	8010fb0 <Custom_STM_Event_Handler+0x1f0>
              break;
 8010f9e:	e0ac      	b.n	80110fa <Custom_STM_Event_Handler+0x33a>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_BME_HUM_NOTIFY_DISABLED_EVT;
 8010fa0:	230c      	movs	r3, #12
 8010fa2:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 8010fa4:	f107 0308 	add.w	r3, r7, #8
 8010fa8:	4618      	mov	r0, r3
 8010faa:	f7ff feaf 	bl	8010d0c <Custom_STM_App_Notification>
                break;
 8010fae:	e0a4      	b.n	80110fa <Custom_STM_Event_Handler+0x33a>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_BME_HUM_NOTIFY_ENABLED_EVT;
 8010fb0:	230b      	movs	r3, #11
 8010fb2:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 8010fb4:	f107 0308 	add.w	r3, r7, #8
 8010fb8:	4618      	mov	r0, r3
 8010fba:	f7ff fea7 	bl	8010d0c <Custom_STM_App_Notification>
                break;
 8010fbe:	e09c      	b.n	80110fa <Custom_STM_Event_Handler+0x33a>
          else if (attribute_modified->Attr_Handle == (CustomContext.CustomBme_PressHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 8010fc0:	69bb      	ldr	r3, [r7, #24]
 8010fc2:	885b      	ldrh	r3, [r3, #2]
 8010fc4:	b29b      	uxth	r3, r3
 8010fc6:	461a      	mov	r2, r3
 8010fc8:	4b40      	ldr	r3, [pc, #256]	; (80110cc <Custom_STM_Event_Handler+0x30c>)
 8010fca:	8a1b      	ldrh	r3, [r3, #16]
 8010fcc:	3302      	adds	r3, #2
 8010fce:	429a      	cmp	r2, r3
 8010fd0:	d119      	bne.n	8011006 <Custom_STM_Event_Handler+0x246>
            return_value = SVCCTL_EvtAckFlowEnable;
 8010fd2:	2301      	movs	r3, #1
 8010fd4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            switch (attribute_modified->Attr_Data[0])
 8010fd8:	69bb      	ldr	r3, [r7, #24]
 8010fda:	7a1b      	ldrb	r3, [r3, #8]
 8010fdc:	2b00      	cmp	r3, #0
 8010fde:	d002      	beq.n	8010fe6 <Custom_STM_Event_Handler+0x226>
 8010fe0:	2b01      	cmp	r3, #1
 8010fe2:	d008      	beq.n	8010ff6 <Custom_STM_Event_Handler+0x236>
              break;
 8010fe4:	e089      	b.n	80110fa <Custom_STM_Event_Handler+0x33a>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_BME_PRESS_NOTIFY_DISABLED_EVT;
 8010fe6:	230e      	movs	r3, #14
 8010fe8:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 8010fea:	f107 0308 	add.w	r3, r7, #8
 8010fee:	4618      	mov	r0, r3
 8010ff0:	f7ff fe8c 	bl	8010d0c <Custom_STM_App_Notification>
                break;
 8010ff4:	e081      	b.n	80110fa <Custom_STM_Event_Handler+0x33a>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_BME_PRESS_NOTIFY_ENABLED_EVT;
 8010ff6:	230d      	movs	r3, #13
 8010ff8:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 8010ffa:	f107 0308 	add.w	r3, r7, #8
 8010ffe:	4618      	mov	r0, r3
 8011000:	f7ff fe84 	bl	8010d0c <Custom_STM_App_Notification>
                break;
 8011004:	e079      	b.n	80110fa <Custom_STM_Event_Handler+0x33a>
          else if (attribute_modified->Attr_Handle == (CustomContext.CustomCoHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 8011006:	69bb      	ldr	r3, [r7, #24]
 8011008:	885b      	ldrh	r3, [r3, #2]
 801100a:	b29b      	uxth	r3, r3
 801100c:	461a      	mov	r2, r3
 801100e:	4b2f      	ldr	r3, [pc, #188]	; (80110cc <Custom_STM_Event_Handler+0x30c>)
 8011010:	8a9b      	ldrh	r3, [r3, #20]
 8011012:	3302      	adds	r3, #2
 8011014:	429a      	cmp	r2, r3
 8011016:	d119      	bne.n	801104c <Custom_STM_Event_Handler+0x28c>
            return_value = SVCCTL_EvtAckFlowEnable;
 8011018:	2301      	movs	r3, #1
 801101a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            switch (attribute_modified->Attr_Data[0])
 801101e:	69bb      	ldr	r3, [r7, #24]
 8011020:	7a1b      	ldrb	r3, [r3, #8]
 8011022:	2b00      	cmp	r3, #0
 8011024:	d002      	beq.n	801102c <Custom_STM_Event_Handler+0x26c>
 8011026:	2b01      	cmp	r3, #1
 8011028:	d008      	beq.n	801103c <Custom_STM_Event_Handler+0x27c>
              break;
 801102a:	e066      	b.n	80110fa <Custom_STM_Event_Handler+0x33a>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_CO_NOTIFY_DISABLED_EVT;
 801102c:	2310      	movs	r3, #16
 801102e:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 8011030:	f107 0308 	add.w	r3, r7, #8
 8011034:	4618      	mov	r0, r3
 8011036:	f7ff fe69 	bl	8010d0c <Custom_STM_App_Notification>
                break;
 801103a:	e05e      	b.n	80110fa <Custom_STM_Event_Handler+0x33a>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_CO_NOTIFY_ENABLED_EVT;
 801103c:	230f      	movs	r3, #15
 801103e:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 8011040:	f107 0308 	add.w	r3, r7, #8
 8011044:	4618      	mov	r0, r3
 8011046:	f7ff fe61 	bl	8010d0c <Custom_STM_App_Notification>
                break;
 801104a:	e056      	b.n	80110fa <Custom_STM_Event_Handler+0x33a>
          else if (attribute_modified->Attr_Handle == (CustomContext.CustomNh3Hdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 801104c:	69bb      	ldr	r3, [r7, #24]
 801104e:	885b      	ldrh	r3, [r3, #2]
 8011050:	b29b      	uxth	r3, r3
 8011052:	461a      	mov	r2, r3
 8011054:	4b1d      	ldr	r3, [pc, #116]	; (80110cc <Custom_STM_Event_Handler+0x30c>)
 8011056:	8adb      	ldrh	r3, [r3, #22]
 8011058:	3302      	adds	r3, #2
 801105a:	429a      	cmp	r2, r3
 801105c:	d119      	bne.n	8011092 <Custom_STM_Event_Handler+0x2d2>
            return_value = SVCCTL_EvtAckFlowEnable;
 801105e:	2301      	movs	r3, #1
 8011060:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            switch (attribute_modified->Attr_Data[0])
 8011064:	69bb      	ldr	r3, [r7, #24]
 8011066:	7a1b      	ldrb	r3, [r3, #8]
 8011068:	2b00      	cmp	r3, #0
 801106a:	d002      	beq.n	8011072 <Custom_STM_Event_Handler+0x2b2>
 801106c:	2b01      	cmp	r3, #1
 801106e:	d008      	beq.n	8011082 <Custom_STM_Event_Handler+0x2c2>
              break;
 8011070:	e043      	b.n	80110fa <Custom_STM_Event_Handler+0x33a>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_NH3_NOTIFY_DISABLED_EVT;
 8011072:	2312      	movs	r3, #18
 8011074:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 8011076:	f107 0308 	add.w	r3, r7, #8
 801107a:	4618      	mov	r0, r3
 801107c:	f7ff fe46 	bl	8010d0c <Custom_STM_App_Notification>
                break;
 8011080:	e03b      	b.n	80110fa <Custom_STM_Event_Handler+0x33a>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_NH3_NOTIFY_ENABLED_EVT;
 8011082:	2311      	movs	r3, #17
 8011084:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 8011086:	f107 0308 	add.w	r3, r7, #8
 801108a:	4618      	mov	r0, r3
 801108c:	f7ff fe3e 	bl	8010d0c <Custom_STM_App_Notification>
                break;
 8011090:	e033      	b.n	80110fa <Custom_STM_Event_Handler+0x33a>
          else if (attribute_modified->Attr_Handle == (CustomContext.CustomNo2Hdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 8011092:	69bb      	ldr	r3, [r7, #24]
 8011094:	885b      	ldrh	r3, [r3, #2]
 8011096:	b29b      	uxth	r3, r3
 8011098:	461a      	mov	r2, r3
 801109a:	4b0c      	ldr	r3, [pc, #48]	; (80110cc <Custom_STM_Event_Handler+0x30c>)
 801109c:	8b1b      	ldrh	r3, [r3, #24]
 801109e:	3302      	adds	r3, #2
 80110a0:	429a      	cmp	r2, r3
 80110a2:	d11d      	bne.n	80110e0 <Custom_STM_Event_Handler+0x320>
            return_value = SVCCTL_EvtAckFlowEnable;
 80110a4:	2301      	movs	r3, #1
 80110a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            switch (attribute_modified->Attr_Data[0])
 80110aa:	69bb      	ldr	r3, [r7, #24]
 80110ac:	7a1b      	ldrb	r3, [r3, #8]
 80110ae:	2b00      	cmp	r3, #0
 80110b0:	d002      	beq.n	80110b8 <Custom_STM_Event_Handler+0x2f8>
 80110b2:	2b01      	cmp	r3, #1
 80110b4:	d00c      	beq.n	80110d0 <Custom_STM_Event_Handler+0x310>
              break;
 80110b6:	e020      	b.n	80110fa <Custom_STM_Event_Handler+0x33a>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_NO2_NOTIFY_DISABLED_EVT;
 80110b8:	2314      	movs	r3, #20
 80110ba:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 80110bc:	f107 0308 	add.w	r3, r7, #8
 80110c0:	4618      	mov	r0, r3
 80110c2:	f7ff fe23 	bl	8010d0c <Custom_STM_App_Notification>
                break;
 80110c6:	e018      	b.n	80110fa <Custom_STM_Event_Handler+0x33a>
 80110c8:	48000400 	.word	0x48000400
 80110cc:	20001cac 	.word	0x20001cac
                Notification.Custom_Evt_Opcode = CUSTOM_STM_NO2_NOTIFY_ENABLED_EVT;
 80110d0:	2313      	movs	r3, #19
 80110d2:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 80110d4:	f107 0308 	add.w	r3, r7, #8
 80110d8:	4618      	mov	r0, r3
 80110da:	f7ff fe17 	bl	8010d0c <Custom_STM_App_Notification>
                break;
 80110de:	e00c      	b.n	80110fa <Custom_STM_Event_Handler+0x33a>
          else if (attribute_modified->Attr_Handle == (CustomContext.CustomModeHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 80110e0:	69bb      	ldr	r3, [r7, #24]
 80110e2:	885b      	ldrh	r3, [r3, #2]
 80110e4:	b29b      	uxth	r3, r3
 80110e6:	461a      	mov	r2, r3
 80110e8:	4b0b      	ldr	r3, [pc, #44]	; (8011118 <Custom_STM_Event_Handler+0x358>)
 80110ea:	885b      	ldrh	r3, [r3, #2]
 80110ec:	3301      	adds	r3, #1
 80110ee:	429a      	cmp	r2, r3
 80110f0:	d108      	bne.n	8011104 <Custom_STM_Event_Handler+0x344>
            return_value = SVCCTL_EvtAckFlowEnable;
 80110f2:	2301      	movs	r3, #1
 80110f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          break;
 80110f8:	e004      	b.n	8011104 <Custom_STM_Event_Handler+0x344>
 80110fa:	e003      	b.n	8011104 <Custom_STM_Event_Handler+0x344>
          break;
 80110fc:	bf00      	nop
 80110fe:	e004      	b.n	801110a <Custom_STM_Event_Handler+0x34a>
        /* USER CODE END BLECORE_EVT */
        default:
          /* USER CODE BEGIN EVT_DEFAULT */

          /* USER CODE END EVT_DEFAULT */
          break;
 8011100:	bf00      	nop
 8011102:	e002      	b.n	801110a <Custom_STM_Event_Handler+0x34a>
          break;
 8011104:	bf00      	nop
      }
      /* USER CODE BEGIN EVT_VENDOR*/

      /* USER CODE END EVT_VENDOR*/
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8011106:	e000      	b.n	801110a <Custom_STM_Event_Handler+0x34a>

    default:
      /* USER CODE BEGIN EVENT_PCKT*/

      /* USER CODE END EVENT_PCKT*/
      break;
 8011108:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_Event_Handler_2 */

  /* USER CODE END Custom_STM_Event_Handler_2 */

  return(return_value);
 801110a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}/* end Custom_STM_Event_Handler */
 801110e:	4618      	mov	r0, r3
 8011110:	3728      	adds	r7, #40	; 0x28
 8011112:	46bd      	mov	sp, r7
 8011114:	bd80      	pop	{r7, pc}
 8011116:	bf00      	nop
 8011118:	20001cac 	.word	0x20001cac

0801111c <SVCCTL_InitCustomSvc>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void SVCCTL_InitCustomSvc(void)
{
 801111c:	b580      	push	{r7, lr}
 801111e:	b08c      	sub	sp, #48	; 0x30
 8011120:	af06      	add	r7, sp, #24

  Char_UUID_t  uuid;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8011122:	2392      	movs	r3, #146	; 0x92
 8011124:	75fb      	strb	r3, [r7, #23]
  /* USER CODE END SVCCTL_InitCustomSvc_1 */

  /**
   *  Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(Custom_STM_Event_Handler);
 8011126:	48bc      	ldr	r0, [pc, #752]	; (8011418 <SVCCTL_InitCustomSvc+0x2fc>)
 8011128:	f7fd fcc0 	bl	800eaac <SVCCTL_RegisterSvcHandler>
   *                                1 for BATTERY_V configuration descriptor +
   *                                1 for MCU_TEMP configuration descriptor +
   *                              = 10
   */

  COPY_STATUS_SVC_UUID(uuid.Char_UUID_128);
 801112c:	238f      	movs	r3, #143	; 0x8f
 801112e:	713b      	strb	r3, [r7, #4]
 8011130:	23e5      	movs	r3, #229	; 0xe5
 8011132:	717b      	strb	r3, [r7, #5]
 8011134:	23b3      	movs	r3, #179	; 0xb3
 8011136:	71bb      	strb	r3, [r7, #6]
 8011138:	23d5      	movs	r3, #213	; 0xd5
 801113a:	71fb      	strb	r3, [r7, #7]
 801113c:	232e      	movs	r3, #46	; 0x2e
 801113e:	723b      	strb	r3, [r7, #8]
 8011140:	237f      	movs	r3, #127	; 0x7f
 8011142:	727b      	strb	r3, [r7, #9]
 8011144:	234a      	movs	r3, #74	; 0x4a
 8011146:	72bb      	strb	r3, [r7, #10]
 8011148:	2398      	movs	r3, #152	; 0x98
 801114a:	72fb      	strb	r3, [r7, #11]
 801114c:	232a      	movs	r3, #42	; 0x2a
 801114e:	733b      	strb	r3, [r7, #12]
 8011150:	2348      	movs	r3, #72	; 0x48
 8011152:	737b      	strb	r3, [r7, #13]
 8011154:	237a      	movs	r3, #122	; 0x7a
 8011156:	73bb      	strb	r3, [r7, #14]
 8011158:	23cc      	movs	r3, #204	; 0xcc
 801115a:	73fb      	strb	r3, [r7, #15]
 801115c:	2300      	movs	r3, #0
 801115e:	743b      	strb	r3, [r7, #16]
 8011160:	2300      	movs	r3, #0
 8011162:	747b      	strb	r3, [r7, #17]
 8011164:	2300      	movs	r3, #0
 8011166:	74bb      	strb	r3, [r7, #18]
 8011168:	2300      	movs	r3, #0
 801116a:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_service(UUID_TYPE_128,
 801116c:	1d39      	adds	r1, r7, #4
 801116e:	4bab      	ldr	r3, [pc, #684]	; (801141c <SVCCTL_InitCustomSvc+0x300>)
 8011170:	9300      	str	r3, [sp, #0]
 8011172:	230a      	movs	r3, #10
 8011174:	2201      	movs	r2, #1
 8011176:	2002      	movs	r0, #2
 8011178:	f7fc ff60 	bl	800e03c <aci_gatt_add_service>
 801117c:	4603      	mov	r3, r0
 801117e:	75fb      	strb	r3, [r7, #23]
                             (Service_UUID_t *) &uuid,
                             PRIMARY_SERVICE,
                             10,
                             &(CustomContext.CustomStatus_SvcHdle));
  if (ret != BLE_STATUS_SUCCESS)
 8011180:	7dfb      	ldrb	r3, [r7, #23]
 8011182:	2b00      	cmp	r3, #0
 8011184:	d005      	beq.n	8011192 <SVCCTL_InitCustomSvc+0x76>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_service command: STATUS_SVC, error code: 0x%x \n\r", ret);
 8011186:	7dfb      	ldrb	r3, [r7, #23]
 8011188:	4619      	mov	r1, r3
 801118a:	48a5      	ldr	r0, [pc, #660]	; (8011420 <SVCCTL_InitCustomSvc+0x304>)
 801118c:	f002 fce0 	bl	8013b50 <iprintf>
 8011190:	e002      	b.n	8011198 <SVCCTL_InitCustomSvc+0x7c>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_add_service command: STATUS_SVC \n\r");
 8011192:	48a4      	ldr	r0, [pc, #656]	; (8011424 <SVCCTL_InitCustomSvc+0x308>)
 8011194:	f002 fcdc 	bl	8013b50 <iprintf>
  }

  /**
   *  MODE
   */
  COPY_MODE_UUID(uuid.Char_UUID_128);
 8011198:	2319      	movs	r3, #25
 801119a:	713b      	strb	r3, [r7, #4]
 801119c:	23ed      	movs	r3, #237	; 0xed
 801119e:	717b      	strb	r3, [r7, #5]
 80111a0:	2382      	movs	r3, #130	; 0x82
 80111a2:	71bb      	strb	r3, [r7, #6]
 80111a4:	23ae      	movs	r3, #174	; 0xae
 80111a6:	71fb      	strb	r3, [r7, #7]
 80111a8:	23ed      	movs	r3, #237	; 0xed
 80111aa:	723b      	strb	r3, [r7, #8]
 80111ac:	2321      	movs	r3, #33	; 0x21
 80111ae:	727b      	strb	r3, [r7, #9]
 80111b0:	234c      	movs	r3, #76	; 0x4c
 80111b2:	72bb      	strb	r3, [r7, #10]
 80111b4:	239d      	movs	r3, #157	; 0x9d
 80111b6:	72fb      	strb	r3, [r7, #11]
 80111b8:	2341      	movs	r3, #65	; 0x41
 80111ba:	733b      	strb	r3, [r7, #12]
 80111bc:	2345      	movs	r3, #69	; 0x45
 80111be:	737b      	strb	r3, [r7, #13]
 80111c0:	2322      	movs	r3, #34	; 0x22
 80111c2:	73bb      	strb	r3, [r7, #14]
 80111c4:	238e      	movs	r3, #142	; 0x8e
 80111c6:	73fb      	strb	r3, [r7, #15]
 80111c8:	230a      	movs	r3, #10
 80111ca:	743b      	strb	r3, [r7, #16]
 80111cc:	2318      	movs	r3, #24
 80111ce:	747b      	strb	r3, [r7, #17]
 80111d0:	2300      	movs	r3, #0
 80111d2:	74bb      	strb	r3, [r7, #18]
 80111d4:	2300      	movs	r3, #0
 80111d6:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomStatus_SvcHdle,
 80111d8:	4b90      	ldr	r3, [pc, #576]	; (801141c <SVCCTL_InitCustomSvc+0x300>)
 80111da:	8818      	ldrh	r0, [r3, #0]
 80111dc:	4b92      	ldr	r3, [pc, #584]	; (8011428 <SVCCTL_InitCustomSvc+0x30c>)
 80111de:	781b      	ldrb	r3, [r3, #0]
 80111e0:	b29b      	uxth	r3, r3
 80111e2:	1d3a      	adds	r2, r7, #4
 80111e4:	4991      	ldr	r1, [pc, #580]	; (801142c <SVCCTL_InitCustomSvc+0x310>)
 80111e6:	9105      	str	r1, [sp, #20]
 80111e8:	2100      	movs	r1, #0
 80111ea:	9104      	str	r1, [sp, #16]
 80111ec:	2110      	movs	r1, #16
 80111ee:	9103      	str	r1, [sp, #12]
 80111f0:	2101      	movs	r1, #1
 80111f2:	9102      	str	r1, [sp, #8]
 80111f4:	2101      	movs	r1, #1
 80111f6:	9101      	str	r1, [sp, #4]
 80111f8:	2118      	movs	r1, #24
 80111fa:	9100      	str	r1, [sp, #0]
 80111fc:	2102      	movs	r1, #2
 80111fe:	f7fc fff3 	bl	800e1e8 <aci_gatt_add_char>
 8011202:	4603      	mov	r3, r0
 8011204:	75fb      	strb	r3, [r7, #23]
                          ATTR_PERMISSION_AUTHEN_READ,
                          GATT_NOTIFY_ATTRIBUTE_WRITE,
                          0x10,
                          CHAR_VALUE_LEN_CONSTANT,
                          &(CustomContext.CustomModeHdle));
  if (ret != BLE_STATUS_SUCCESS)
 8011206:	7dfb      	ldrb	r3, [r7, #23]
 8011208:	2b00      	cmp	r3, #0
 801120a:	d005      	beq.n	8011218 <SVCCTL_InitCustomSvc+0xfc>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_char command   : MODE, error code: 0x%x \n\r", ret);
 801120c:	7dfb      	ldrb	r3, [r7, #23]
 801120e:	4619      	mov	r1, r3
 8011210:	4887      	ldr	r0, [pc, #540]	; (8011430 <SVCCTL_InitCustomSvc+0x314>)
 8011212:	f002 fc9d 	bl	8013b50 <iprintf>
 8011216:	e002      	b.n	801121e <SVCCTL_InitCustomSvc+0x102>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_add_char command   : MODE \n\r");
 8011218:	4886      	ldr	r0, [pc, #536]	; (8011434 <SVCCTL_InitCustomSvc+0x318>)
 801121a:	f002 fc99 	bl	8013b50 <iprintf>
  }
  /**
   *  BATTERY_V
   */
  COPY_BATTERY_V_UUID(uuid.Char_UUID_128);
 801121e:	2319      	movs	r3, #25
 8011220:	713b      	strb	r3, [r7, #4]
 8011222:	23ed      	movs	r3, #237	; 0xed
 8011224:	717b      	strb	r3, [r7, #5]
 8011226:	2382      	movs	r3, #130	; 0x82
 8011228:	71bb      	strb	r3, [r7, #6]
 801122a:	23ae      	movs	r3, #174	; 0xae
 801122c:	71fb      	strb	r3, [r7, #7]
 801122e:	23ed      	movs	r3, #237	; 0xed
 8011230:	723b      	strb	r3, [r7, #8]
 8011232:	2321      	movs	r3, #33	; 0x21
 8011234:	727b      	strb	r3, [r7, #9]
 8011236:	234c      	movs	r3, #76	; 0x4c
 8011238:	72bb      	strb	r3, [r7, #10]
 801123a:	239d      	movs	r3, #157	; 0x9d
 801123c:	72fb      	strb	r3, [r7, #11]
 801123e:	2341      	movs	r3, #65	; 0x41
 8011240:	733b      	strb	r3, [r7, #12]
 8011242:	2345      	movs	r3, #69	; 0x45
 8011244:	737b      	strb	r3, [r7, #13]
 8011246:	2322      	movs	r3, #34	; 0x22
 8011248:	73bb      	strb	r3, [r7, #14]
 801124a:	238e      	movs	r3, #142	; 0x8e
 801124c:	73fb      	strb	r3, [r7, #15]
 801124e:	2319      	movs	r3, #25
 8011250:	743b      	strb	r3, [r7, #16]
 8011252:	232a      	movs	r3, #42	; 0x2a
 8011254:	747b      	strb	r3, [r7, #17]
 8011256:	2300      	movs	r3, #0
 8011258:	74bb      	strb	r3, [r7, #18]
 801125a:	2300      	movs	r3, #0
 801125c:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomStatus_SvcHdle,
 801125e:	4b6f      	ldr	r3, [pc, #444]	; (801141c <SVCCTL_InitCustomSvc+0x300>)
 8011260:	8818      	ldrh	r0, [r3, #0]
 8011262:	4b75      	ldr	r3, [pc, #468]	; (8011438 <SVCCTL_InitCustomSvc+0x31c>)
 8011264:	781b      	ldrb	r3, [r3, #0]
 8011266:	b29b      	uxth	r3, r3
 8011268:	1d3a      	adds	r2, r7, #4
 801126a:	4974      	ldr	r1, [pc, #464]	; (801143c <SVCCTL_InitCustomSvc+0x320>)
 801126c:	9105      	str	r1, [sp, #20]
 801126e:	2100      	movs	r1, #0
 8011270:	9104      	str	r1, [sp, #16]
 8011272:	2110      	movs	r1, #16
 8011274:	9103      	str	r1, [sp, #12]
 8011276:	2100      	movs	r1, #0
 8011278:	9102      	str	r1, [sp, #8]
 801127a:	2100      	movs	r1, #0
 801127c:	9101      	str	r1, [sp, #4]
 801127e:	2110      	movs	r1, #16
 8011280:	9100      	str	r1, [sp, #0]
 8011282:	2102      	movs	r1, #2
 8011284:	f7fc ffb0 	bl	800e1e8 <aci_gatt_add_char>
 8011288:	4603      	mov	r3, r0
 801128a:	75fb      	strb	r3, [r7, #23]
                          ATTR_PERMISSION_NONE,
                          GATT_DONT_NOTIFY_EVENTS,
                          0x10,
                          CHAR_VALUE_LEN_CONSTANT,
                          &(CustomContext.CustomBattery_VHdle));
  if (ret != BLE_STATUS_SUCCESS)
 801128c:	7dfb      	ldrb	r3, [r7, #23]
 801128e:	2b00      	cmp	r3, #0
 8011290:	d005      	beq.n	801129e <SVCCTL_InitCustomSvc+0x182>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_char command   : BATTERY_V, error code: 0x%x \n\r", ret);
 8011292:	7dfb      	ldrb	r3, [r7, #23]
 8011294:	4619      	mov	r1, r3
 8011296:	486a      	ldr	r0, [pc, #424]	; (8011440 <SVCCTL_InitCustomSvc+0x324>)
 8011298:	f002 fc5a 	bl	8013b50 <iprintf>
 801129c:	e002      	b.n	80112a4 <SVCCTL_InitCustomSvc+0x188>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_add_char command   : BATTERY_V \n\r");
 801129e:	4869      	ldr	r0, [pc, #420]	; (8011444 <SVCCTL_InitCustomSvc+0x328>)
 80112a0:	f002 fc56 	bl	8013b50 <iprintf>
  }
  /**
   *  MCU_TEMP
   */
  COPY_MCU_TEMP_UUID(uuid.Char_UUID_128);
 80112a4:	2319      	movs	r3, #25
 80112a6:	713b      	strb	r3, [r7, #4]
 80112a8:	23ed      	movs	r3, #237	; 0xed
 80112aa:	717b      	strb	r3, [r7, #5]
 80112ac:	2382      	movs	r3, #130	; 0x82
 80112ae:	71bb      	strb	r3, [r7, #6]
 80112b0:	23ae      	movs	r3, #174	; 0xae
 80112b2:	71fb      	strb	r3, [r7, #7]
 80112b4:	23ed      	movs	r3, #237	; 0xed
 80112b6:	723b      	strb	r3, [r7, #8]
 80112b8:	2321      	movs	r3, #33	; 0x21
 80112ba:	727b      	strb	r3, [r7, #9]
 80112bc:	234c      	movs	r3, #76	; 0x4c
 80112be:	72bb      	strb	r3, [r7, #10]
 80112c0:	239d      	movs	r3, #157	; 0x9d
 80112c2:	72fb      	strb	r3, [r7, #11]
 80112c4:	2341      	movs	r3, #65	; 0x41
 80112c6:	733b      	strb	r3, [r7, #12]
 80112c8:	2345      	movs	r3, #69	; 0x45
 80112ca:	737b      	strb	r3, [r7, #13]
 80112cc:	2322      	movs	r3, #34	; 0x22
 80112ce:	73bb      	strb	r3, [r7, #14]
 80112d0:	238e      	movs	r3, #142	; 0x8e
 80112d2:	73fb      	strb	r3, [r7, #15]
 80112d4:	231c      	movs	r3, #28
 80112d6:	743b      	strb	r3, [r7, #16]
 80112d8:	232a      	movs	r3, #42	; 0x2a
 80112da:	747b      	strb	r3, [r7, #17]
 80112dc:	2300      	movs	r3, #0
 80112de:	74bb      	strb	r3, [r7, #18]
 80112e0:	2300      	movs	r3, #0
 80112e2:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomStatus_SvcHdle,
 80112e4:	4b4d      	ldr	r3, [pc, #308]	; (801141c <SVCCTL_InitCustomSvc+0x300>)
 80112e6:	8818      	ldrh	r0, [r3, #0]
 80112e8:	4b57      	ldr	r3, [pc, #348]	; (8011448 <SVCCTL_InitCustomSvc+0x32c>)
 80112ea:	781b      	ldrb	r3, [r3, #0]
 80112ec:	b29b      	uxth	r3, r3
 80112ee:	1d3a      	adds	r2, r7, #4
 80112f0:	4956      	ldr	r1, [pc, #344]	; (801144c <SVCCTL_InitCustomSvc+0x330>)
 80112f2:	9105      	str	r1, [sp, #20]
 80112f4:	2100      	movs	r1, #0
 80112f6:	9104      	str	r1, [sp, #16]
 80112f8:	2110      	movs	r1, #16
 80112fa:	9103      	str	r1, [sp, #12]
 80112fc:	2100      	movs	r1, #0
 80112fe:	9102      	str	r1, [sp, #8]
 8011300:	2100      	movs	r1, #0
 8011302:	9101      	str	r1, [sp, #4]
 8011304:	2110      	movs	r1, #16
 8011306:	9100      	str	r1, [sp, #0]
 8011308:	2102      	movs	r1, #2
 801130a:	f7fc ff6d 	bl	800e1e8 <aci_gatt_add_char>
 801130e:	4603      	mov	r3, r0
 8011310:	75fb      	strb	r3, [r7, #23]
                          ATTR_PERMISSION_NONE,
                          GATT_DONT_NOTIFY_EVENTS,
                          0x10,
                          CHAR_VALUE_LEN_CONSTANT,
                          &(CustomContext.CustomMcu_TempHdle));
  if (ret != BLE_STATUS_SUCCESS)
 8011312:	7dfb      	ldrb	r3, [r7, #23]
 8011314:	2b00      	cmp	r3, #0
 8011316:	d005      	beq.n	8011324 <SVCCTL_InitCustomSvc+0x208>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_char command   : MCU_TEMP, error code: 0x%x \n\r", ret);
 8011318:	7dfb      	ldrb	r3, [r7, #23]
 801131a:	4619      	mov	r1, r3
 801131c:	484c      	ldr	r0, [pc, #304]	; (8011450 <SVCCTL_InitCustomSvc+0x334>)
 801131e:	f002 fc17 	bl	8013b50 <iprintf>
 8011322:	e002      	b.n	801132a <SVCCTL_InitCustomSvc+0x20e>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_add_char command   : MCU_TEMP \n\r");
 8011324:	484b      	ldr	r0, [pc, #300]	; (8011454 <SVCCTL_InitCustomSvc+0x338>)
 8011326:	f002 fc13 	bl	8013b50 <iprintf>
   *                                1 for BME_HUM configuration descriptor +
   *                                1 for BME_PRESS configuration descriptor +
   *                              = 13
   */

  COPY_BME_SVC_UUID(uuid.Char_UUID_128);
 801132a:	238f      	movs	r3, #143	; 0x8f
 801132c:	713b      	strb	r3, [r7, #4]
 801132e:	23e5      	movs	r3, #229	; 0xe5
 8011330:	717b      	strb	r3, [r7, #5]
 8011332:	23b3      	movs	r3, #179	; 0xb3
 8011334:	71bb      	strb	r3, [r7, #6]
 8011336:	23d5      	movs	r3, #213	; 0xd5
 8011338:	71fb      	strb	r3, [r7, #7]
 801133a:	232e      	movs	r3, #46	; 0x2e
 801133c:	723b      	strb	r3, [r7, #8]
 801133e:	237f      	movs	r3, #127	; 0x7f
 8011340:	727b      	strb	r3, [r7, #9]
 8011342:	234a      	movs	r3, #74	; 0x4a
 8011344:	72bb      	strb	r3, [r7, #10]
 8011346:	2398      	movs	r3, #152	; 0x98
 8011348:	72fb      	strb	r3, [r7, #11]
 801134a:	232a      	movs	r3, #42	; 0x2a
 801134c:	733b      	strb	r3, [r7, #12]
 801134e:	2348      	movs	r3, #72	; 0x48
 8011350:	737b      	strb	r3, [r7, #13]
 8011352:	237a      	movs	r3, #122	; 0x7a
 8011354:	73bb      	strb	r3, [r7, #14]
 8011356:	23cc      	movs	r3, #204	; 0xcc
 8011358:	73fb      	strb	r3, [r7, #15]
 801135a:	237a      	movs	r3, #122	; 0x7a
 801135c:	743b      	strb	r3, [r7, #16]
 801135e:	2310      	movs	r3, #16
 8011360:	747b      	strb	r3, [r7, #17]
 8011362:	2300      	movs	r3, #0
 8011364:	74bb      	strb	r3, [r7, #18]
 8011366:	2300      	movs	r3, #0
 8011368:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_service(UUID_TYPE_128,
 801136a:	1d39      	adds	r1, r7, #4
 801136c:	4b3a      	ldr	r3, [pc, #232]	; (8011458 <SVCCTL_InitCustomSvc+0x33c>)
 801136e:	9300      	str	r3, [sp, #0]
 8011370:	230d      	movs	r3, #13
 8011372:	2201      	movs	r2, #1
 8011374:	2002      	movs	r0, #2
 8011376:	f7fc fe61 	bl	800e03c <aci_gatt_add_service>
 801137a:	4603      	mov	r3, r0
 801137c:	75fb      	strb	r3, [r7, #23]
                             (Service_UUID_t *) &uuid,
                             PRIMARY_SERVICE,
                             13,
                             &(CustomContext.CustomBme_SvcHdle));
  if (ret != BLE_STATUS_SUCCESS)
 801137e:	7dfb      	ldrb	r3, [r7, #23]
 8011380:	2b00      	cmp	r3, #0
 8011382:	d005      	beq.n	8011390 <SVCCTL_InitCustomSvc+0x274>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_service command: BME_SVC, error code: 0x%x \n\r", ret);
 8011384:	7dfb      	ldrb	r3, [r7, #23]
 8011386:	4619      	mov	r1, r3
 8011388:	4834      	ldr	r0, [pc, #208]	; (801145c <SVCCTL_InitCustomSvc+0x340>)
 801138a:	f002 fbe1 	bl	8013b50 <iprintf>
 801138e:	e002      	b.n	8011396 <SVCCTL_InitCustomSvc+0x27a>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_add_service command: BME_SVC \n\r");
 8011390:	4833      	ldr	r0, [pc, #204]	; (8011460 <SVCCTL_InitCustomSvc+0x344>)
 8011392:	f002 fbdd 	bl	8013b50 <iprintf>
  }

  /**
   *  BME_IAQ
   */
  COPY_BME_IAQ_UUID(uuid.Char_UUID_128);
 8011396:	2319      	movs	r3, #25
 8011398:	713b      	strb	r3, [r7, #4]
 801139a:	23ed      	movs	r3, #237	; 0xed
 801139c:	717b      	strb	r3, [r7, #5]
 801139e:	2382      	movs	r3, #130	; 0x82
 80113a0:	71bb      	strb	r3, [r7, #6]
 80113a2:	23ae      	movs	r3, #174	; 0xae
 80113a4:	71fb      	strb	r3, [r7, #7]
 80113a6:	23ed      	movs	r3, #237	; 0xed
 80113a8:	723b      	strb	r3, [r7, #8]
 80113aa:	2321      	movs	r3, #33	; 0x21
 80113ac:	727b      	strb	r3, [r7, #9]
 80113ae:	234c      	movs	r3, #76	; 0x4c
 80113b0:	72bb      	strb	r3, [r7, #10]
 80113b2:	239d      	movs	r3, #157	; 0x9d
 80113b4:	72fb      	strb	r3, [r7, #11]
 80113b6:	2341      	movs	r3, #65	; 0x41
 80113b8:	733b      	strb	r3, [r7, #12]
 80113ba:	2345      	movs	r3, #69	; 0x45
 80113bc:	737b      	strb	r3, [r7, #13]
 80113be:	2322      	movs	r3, #34	; 0x22
 80113c0:	73bb      	strb	r3, [r7, #14]
 80113c2:	238e      	movs	r3, #142	; 0x8e
 80113c4:	73fb      	strb	r3, [r7, #15]
 80113c6:	238c      	movs	r3, #140	; 0x8c
 80113c8:	743b      	strb	r3, [r7, #16]
 80113ca:	232b      	movs	r3, #43	; 0x2b
 80113cc:	747b      	strb	r3, [r7, #17]
 80113ce:	2300      	movs	r3, #0
 80113d0:	74bb      	strb	r3, [r7, #18]
 80113d2:	2300      	movs	r3, #0
 80113d4:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomBme_SvcHdle,
 80113d6:	4b11      	ldr	r3, [pc, #68]	; (801141c <SVCCTL_InitCustomSvc+0x300>)
 80113d8:	8918      	ldrh	r0, [r3, #8]
 80113da:	4b22      	ldr	r3, [pc, #136]	; (8011464 <SVCCTL_InitCustomSvc+0x348>)
 80113dc:	781b      	ldrb	r3, [r3, #0]
 80113de:	b29b      	uxth	r3, r3
 80113e0:	1d3a      	adds	r2, r7, #4
 80113e2:	4921      	ldr	r1, [pc, #132]	; (8011468 <SVCCTL_InitCustomSvc+0x34c>)
 80113e4:	9105      	str	r1, [sp, #20]
 80113e6:	2101      	movs	r1, #1
 80113e8:	9104      	str	r1, [sp, #16]
 80113ea:	2110      	movs	r1, #16
 80113ec:	9103      	str	r1, [sp, #12]
 80113ee:	2100      	movs	r1, #0
 80113f0:	9102      	str	r1, [sp, #8]
 80113f2:	2100      	movs	r1, #0
 80113f4:	9101      	str	r1, [sp, #4]
 80113f6:	2110      	movs	r1, #16
 80113f8:	9100      	str	r1, [sp, #0]
 80113fa:	2102      	movs	r1, #2
 80113fc:	f7fc fef4 	bl	800e1e8 <aci_gatt_add_char>
 8011400:	4603      	mov	r3, r0
 8011402:	75fb      	strb	r3, [r7, #23]
                          ATTR_PERMISSION_NONE,
                          GATT_DONT_NOTIFY_EVENTS,
                          0x10,
                          CHAR_VALUE_LEN_VARIABLE,
                          &(CustomContext.CustomBme_IaqHdle));
  if (ret != BLE_STATUS_SUCCESS)
 8011404:	7dfb      	ldrb	r3, [r7, #23]
 8011406:	2b00      	cmp	r3, #0
 8011408:	d032      	beq.n	8011470 <SVCCTL_InitCustomSvc+0x354>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_char command   : BME_IAQ, error code: 0x%x \n\r", ret);
 801140a:	7dfb      	ldrb	r3, [r7, #23]
 801140c:	4619      	mov	r1, r3
 801140e:	4817      	ldr	r0, [pc, #92]	; (801146c <SVCCTL_InitCustomSvc+0x350>)
 8011410:	f002 fb9e 	bl	8013b50 <iprintf>
 8011414:	e02f      	b.n	8011476 <SVCCTL_InitCustomSvc+0x35a>
 8011416:	bf00      	nop
 8011418:	08010dc1 	.word	0x08010dc1
 801141c:	20001cac 	.word	0x20001cac
 8011420:	080171f0 	.word	0x080171f0
 8011424:	0801723c 	.word	0x0801723c
 8011428:	20000018 	.word	0x20000018
 801142c:	20001cae 	.word	0x20001cae
 8011430:	08017274 	.word	0x08017274
 8011434:	080172b8 	.word	0x080172b8
 8011438:	20000019 	.word	0x20000019
 801143c:	20001cb0 	.word	0x20001cb0
 8011440:	080172ec 	.word	0x080172ec
 8011444:	08017334 	.word	0x08017334
 8011448:	2000001a 	.word	0x2000001a
 801144c:	20001cb2 	.word	0x20001cb2
 8011450:	0801736c 	.word	0x0801736c
 8011454:	080173b4 	.word	0x080173b4
 8011458:	20001cb4 	.word	0x20001cb4
 801145c:	080173ec 	.word	0x080173ec
 8011460:	08017434 	.word	0x08017434
 8011464:	2000001b 	.word	0x2000001b
 8011468:	20001cb6 	.word	0x20001cb6
 801146c:	08017468 	.word	0x08017468
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_add_char command   : BME_IAQ \n\r");
 8011470:	48b3      	ldr	r0, [pc, #716]	; (8011740 <SVCCTL_InitCustomSvc+0x624>)
 8011472:	f002 fb6d 	bl	8013b50 <iprintf>
  }
  /**
   *  BME_TEMP
   */
  COPY_BME_TEMP_UUID(uuid.Char_UUID_128);
 8011476:	2319      	movs	r3, #25
 8011478:	713b      	strb	r3, [r7, #4]
 801147a:	23ed      	movs	r3, #237	; 0xed
 801147c:	717b      	strb	r3, [r7, #5]
 801147e:	2382      	movs	r3, #130	; 0x82
 8011480:	71bb      	strb	r3, [r7, #6]
 8011482:	23ae      	movs	r3, #174	; 0xae
 8011484:	71fb      	strb	r3, [r7, #7]
 8011486:	23ed      	movs	r3, #237	; 0xed
 8011488:	723b      	strb	r3, [r7, #8]
 801148a:	2321      	movs	r3, #33	; 0x21
 801148c:	727b      	strb	r3, [r7, #9]
 801148e:	234c      	movs	r3, #76	; 0x4c
 8011490:	72bb      	strb	r3, [r7, #10]
 8011492:	239d      	movs	r3, #157	; 0x9d
 8011494:	72fb      	strb	r3, [r7, #11]
 8011496:	2341      	movs	r3, #65	; 0x41
 8011498:	733b      	strb	r3, [r7, #12]
 801149a:	2345      	movs	r3, #69	; 0x45
 801149c:	737b      	strb	r3, [r7, #13]
 801149e:	2322      	movs	r3, #34	; 0x22
 80114a0:	73bb      	strb	r3, [r7, #14]
 80114a2:	238e      	movs	r3, #142	; 0x8e
 80114a4:	73fb      	strb	r3, [r7, #15]
 80114a6:	236e      	movs	r3, #110	; 0x6e
 80114a8:	743b      	strb	r3, [r7, #16]
 80114aa:	232a      	movs	r3, #42	; 0x2a
 80114ac:	747b      	strb	r3, [r7, #17]
 80114ae:	2300      	movs	r3, #0
 80114b0:	74bb      	strb	r3, [r7, #18]
 80114b2:	2300      	movs	r3, #0
 80114b4:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomBme_SvcHdle,
 80114b6:	4ba3      	ldr	r3, [pc, #652]	; (8011744 <SVCCTL_InitCustomSvc+0x628>)
 80114b8:	8918      	ldrh	r0, [r3, #8]
 80114ba:	4ba3      	ldr	r3, [pc, #652]	; (8011748 <SVCCTL_InitCustomSvc+0x62c>)
 80114bc:	781b      	ldrb	r3, [r3, #0]
 80114be:	b29b      	uxth	r3, r3
 80114c0:	1d3a      	adds	r2, r7, #4
 80114c2:	49a2      	ldr	r1, [pc, #648]	; (801174c <SVCCTL_InitCustomSvc+0x630>)
 80114c4:	9105      	str	r1, [sp, #20]
 80114c6:	2100      	movs	r1, #0
 80114c8:	9104      	str	r1, [sp, #16]
 80114ca:	2110      	movs	r1, #16
 80114cc:	9103      	str	r1, [sp, #12]
 80114ce:	2100      	movs	r1, #0
 80114d0:	9102      	str	r1, [sp, #8]
 80114d2:	2100      	movs	r1, #0
 80114d4:	9101      	str	r1, [sp, #4]
 80114d6:	2110      	movs	r1, #16
 80114d8:	9100      	str	r1, [sp, #0]
 80114da:	2102      	movs	r1, #2
 80114dc:	f7fc fe84 	bl	800e1e8 <aci_gatt_add_char>
 80114e0:	4603      	mov	r3, r0
 80114e2:	75fb      	strb	r3, [r7, #23]
                          ATTR_PERMISSION_NONE,
                          GATT_DONT_NOTIFY_EVENTS,
                          0x10,
                          CHAR_VALUE_LEN_CONSTANT,
                          &(CustomContext.CustomBme_TempHdle));
  if (ret != BLE_STATUS_SUCCESS)
 80114e4:	7dfb      	ldrb	r3, [r7, #23]
 80114e6:	2b00      	cmp	r3, #0
 80114e8:	d005      	beq.n	80114f6 <SVCCTL_InitCustomSvc+0x3da>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_char command   : BME_TEMP, error code: 0x%x \n\r", ret);
 80114ea:	7dfb      	ldrb	r3, [r7, #23]
 80114ec:	4619      	mov	r1, r3
 80114ee:	4898      	ldr	r0, [pc, #608]	; (8011750 <SVCCTL_InitCustomSvc+0x634>)
 80114f0:	f002 fb2e 	bl	8013b50 <iprintf>
 80114f4:	e002      	b.n	80114fc <SVCCTL_InitCustomSvc+0x3e0>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_add_char command   : BME_TEMP \n\r");
 80114f6:	4897      	ldr	r0, [pc, #604]	; (8011754 <SVCCTL_InitCustomSvc+0x638>)
 80114f8:	f002 fb2a 	bl	8013b50 <iprintf>
  }
  /**
   *  BME_HUM
   */
  COPY_BME_HUM_UUID(uuid.Char_UUID_128);
 80114fc:	2319      	movs	r3, #25
 80114fe:	713b      	strb	r3, [r7, #4]
 8011500:	23ed      	movs	r3, #237	; 0xed
 8011502:	717b      	strb	r3, [r7, #5]
 8011504:	2382      	movs	r3, #130	; 0x82
 8011506:	71bb      	strb	r3, [r7, #6]
 8011508:	23ae      	movs	r3, #174	; 0xae
 801150a:	71fb      	strb	r3, [r7, #7]
 801150c:	23ed      	movs	r3, #237	; 0xed
 801150e:	723b      	strb	r3, [r7, #8]
 8011510:	2321      	movs	r3, #33	; 0x21
 8011512:	727b      	strb	r3, [r7, #9]
 8011514:	234c      	movs	r3, #76	; 0x4c
 8011516:	72bb      	strb	r3, [r7, #10]
 8011518:	239d      	movs	r3, #157	; 0x9d
 801151a:	72fb      	strb	r3, [r7, #11]
 801151c:	2341      	movs	r3, #65	; 0x41
 801151e:	733b      	strb	r3, [r7, #12]
 8011520:	2345      	movs	r3, #69	; 0x45
 8011522:	737b      	strb	r3, [r7, #13]
 8011524:	2322      	movs	r3, #34	; 0x22
 8011526:	73bb      	strb	r3, [r7, #14]
 8011528:	238e      	movs	r3, #142	; 0x8e
 801152a:	73fb      	strb	r3, [r7, #15]
 801152c:	236f      	movs	r3, #111	; 0x6f
 801152e:	743b      	strb	r3, [r7, #16]
 8011530:	232a      	movs	r3, #42	; 0x2a
 8011532:	747b      	strb	r3, [r7, #17]
 8011534:	2300      	movs	r3, #0
 8011536:	74bb      	strb	r3, [r7, #18]
 8011538:	2300      	movs	r3, #0
 801153a:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomBme_SvcHdle,
 801153c:	4b81      	ldr	r3, [pc, #516]	; (8011744 <SVCCTL_InitCustomSvc+0x628>)
 801153e:	8918      	ldrh	r0, [r3, #8]
 8011540:	4b85      	ldr	r3, [pc, #532]	; (8011758 <SVCCTL_InitCustomSvc+0x63c>)
 8011542:	781b      	ldrb	r3, [r3, #0]
 8011544:	b29b      	uxth	r3, r3
 8011546:	1d3a      	adds	r2, r7, #4
 8011548:	4984      	ldr	r1, [pc, #528]	; (801175c <SVCCTL_InitCustomSvc+0x640>)
 801154a:	9105      	str	r1, [sp, #20]
 801154c:	2100      	movs	r1, #0
 801154e:	9104      	str	r1, [sp, #16]
 8011550:	2110      	movs	r1, #16
 8011552:	9103      	str	r1, [sp, #12]
 8011554:	2100      	movs	r1, #0
 8011556:	9102      	str	r1, [sp, #8]
 8011558:	2100      	movs	r1, #0
 801155a:	9101      	str	r1, [sp, #4]
 801155c:	2110      	movs	r1, #16
 801155e:	9100      	str	r1, [sp, #0]
 8011560:	2102      	movs	r1, #2
 8011562:	f7fc fe41 	bl	800e1e8 <aci_gatt_add_char>
 8011566:	4603      	mov	r3, r0
 8011568:	75fb      	strb	r3, [r7, #23]
                          ATTR_PERMISSION_NONE,
                          GATT_DONT_NOTIFY_EVENTS,
                          0x10,
                          CHAR_VALUE_LEN_CONSTANT,
                          &(CustomContext.CustomBme_HumHdle));
  if (ret != BLE_STATUS_SUCCESS)
 801156a:	7dfb      	ldrb	r3, [r7, #23]
 801156c:	2b00      	cmp	r3, #0
 801156e:	d005      	beq.n	801157c <SVCCTL_InitCustomSvc+0x460>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_char command   : BME_HUM, error code: 0x%x \n\r", ret);
 8011570:	7dfb      	ldrb	r3, [r7, #23]
 8011572:	4619      	mov	r1, r3
 8011574:	487a      	ldr	r0, [pc, #488]	; (8011760 <SVCCTL_InitCustomSvc+0x644>)
 8011576:	f002 faeb 	bl	8013b50 <iprintf>
 801157a:	e002      	b.n	8011582 <SVCCTL_InitCustomSvc+0x466>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_add_char command   : BME_HUM \n\r");
 801157c:	4879      	ldr	r0, [pc, #484]	; (8011764 <SVCCTL_InitCustomSvc+0x648>)
 801157e:	f002 fae7 	bl	8013b50 <iprintf>
  }
  /**
   *  BME_PRESS
   */
  COPY_BME_PRESS_UUID(uuid.Char_UUID_128);
 8011582:	2319      	movs	r3, #25
 8011584:	713b      	strb	r3, [r7, #4]
 8011586:	23ed      	movs	r3, #237	; 0xed
 8011588:	717b      	strb	r3, [r7, #5]
 801158a:	2382      	movs	r3, #130	; 0x82
 801158c:	71bb      	strb	r3, [r7, #6]
 801158e:	23ae      	movs	r3, #174	; 0xae
 8011590:	71fb      	strb	r3, [r7, #7]
 8011592:	23ed      	movs	r3, #237	; 0xed
 8011594:	723b      	strb	r3, [r7, #8]
 8011596:	2321      	movs	r3, #33	; 0x21
 8011598:	727b      	strb	r3, [r7, #9]
 801159a:	234c      	movs	r3, #76	; 0x4c
 801159c:	72bb      	strb	r3, [r7, #10]
 801159e:	239d      	movs	r3, #157	; 0x9d
 80115a0:	72fb      	strb	r3, [r7, #11]
 80115a2:	2341      	movs	r3, #65	; 0x41
 80115a4:	733b      	strb	r3, [r7, #12]
 80115a6:	2345      	movs	r3, #69	; 0x45
 80115a8:	737b      	strb	r3, [r7, #13]
 80115aa:	2322      	movs	r3, #34	; 0x22
 80115ac:	73bb      	strb	r3, [r7, #14]
 80115ae:	238e      	movs	r3, #142	; 0x8e
 80115b0:	73fb      	strb	r3, [r7, #15]
 80115b2:	236d      	movs	r3, #109	; 0x6d
 80115b4:	743b      	strb	r3, [r7, #16]
 80115b6:	232a      	movs	r3, #42	; 0x2a
 80115b8:	747b      	strb	r3, [r7, #17]
 80115ba:	2300      	movs	r3, #0
 80115bc:	74bb      	strb	r3, [r7, #18]
 80115be:	2300      	movs	r3, #0
 80115c0:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomBme_SvcHdle,
 80115c2:	4b60      	ldr	r3, [pc, #384]	; (8011744 <SVCCTL_InitCustomSvc+0x628>)
 80115c4:	8918      	ldrh	r0, [r3, #8]
 80115c6:	4b68      	ldr	r3, [pc, #416]	; (8011768 <SVCCTL_InitCustomSvc+0x64c>)
 80115c8:	781b      	ldrb	r3, [r3, #0]
 80115ca:	b29b      	uxth	r3, r3
 80115cc:	1d3a      	adds	r2, r7, #4
 80115ce:	4967      	ldr	r1, [pc, #412]	; (801176c <SVCCTL_InitCustomSvc+0x650>)
 80115d0:	9105      	str	r1, [sp, #20]
 80115d2:	2100      	movs	r1, #0
 80115d4:	9104      	str	r1, [sp, #16]
 80115d6:	2110      	movs	r1, #16
 80115d8:	9103      	str	r1, [sp, #12]
 80115da:	2100      	movs	r1, #0
 80115dc:	9102      	str	r1, [sp, #8]
 80115de:	2100      	movs	r1, #0
 80115e0:	9101      	str	r1, [sp, #4]
 80115e2:	2110      	movs	r1, #16
 80115e4:	9100      	str	r1, [sp, #0]
 80115e6:	2102      	movs	r1, #2
 80115e8:	f7fc fdfe 	bl	800e1e8 <aci_gatt_add_char>
 80115ec:	4603      	mov	r3, r0
 80115ee:	75fb      	strb	r3, [r7, #23]
                          ATTR_PERMISSION_NONE,
                          GATT_DONT_NOTIFY_EVENTS,
                          0x10,
                          CHAR_VALUE_LEN_CONSTANT,
                          &(CustomContext.CustomBme_PressHdle));
  if (ret != BLE_STATUS_SUCCESS)
 80115f0:	7dfb      	ldrb	r3, [r7, #23]
 80115f2:	2b00      	cmp	r3, #0
 80115f4:	d005      	beq.n	8011602 <SVCCTL_InitCustomSvc+0x4e6>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_char command   : BME_PRESS, error code: 0x%x \n\r", ret);
 80115f6:	7dfb      	ldrb	r3, [r7, #23]
 80115f8:	4619      	mov	r1, r3
 80115fa:	485d      	ldr	r0, [pc, #372]	; (8011770 <SVCCTL_InitCustomSvc+0x654>)
 80115fc:	f002 faa8 	bl	8013b50 <iprintf>
 8011600:	e002      	b.n	8011608 <SVCCTL_InitCustomSvc+0x4ec>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_add_char command   : BME_PRESS \n\r");
 8011602:	485c      	ldr	r0, [pc, #368]	; (8011774 <SVCCTL_InitCustomSvc+0x658>)
 8011604:	f002 faa4 	bl	8013b50 <iprintf>
   *                                1 for NH3 configuration descriptor +
   *                                1 for NO2 configuration descriptor +
   *                              = 10
   */

  uuid.Char_UUID_16 = 0x001a;
 8011608:	231a      	movs	r3, #26
 801160a:	80bb      	strh	r3, [r7, #4]
  ret = aci_gatt_add_service(UUID_TYPE_16,
 801160c:	1d39      	adds	r1, r7, #4
 801160e:	4b5a      	ldr	r3, [pc, #360]	; (8011778 <SVCCTL_InitCustomSvc+0x65c>)
 8011610:	9300      	str	r3, [sp, #0]
 8011612:	230a      	movs	r3, #10
 8011614:	2201      	movs	r2, #1
 8011616:	2001      	movs	r0, #1
 8011618:	f7fc fd10 	bl	800e03c <aci_gatt_add_service>
 801161c:	4603      	mov	r3, r0
 801161e:	75fb      	strb	r3, [r7, #23]
                             (Service_UUID_t *) &uuid,
                             PRIMARY_SERVICE,
                             10,
                             &(CustomContext.CustomMics_SvcHdle));
  if (ret != BLE_STATUS_SUCCESS)
 8011620:	7dfb      	ldrb	r3, [r7, #23]
 8011622:	2b00      	cmp	r3, #0
 8011624:	d005      	beq.n	8011632 <SVCCTL_InitCustomSvc+0x516>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_service command: MiCS_SVC, error code: 0x%x \n\r", ret);
 8011626:	7dfb      	ldrb	r3, [r7, #23]
 8011628:	4619      	mov	r1, r3
 801162a:	4854      	ldr	r0, [pc, #336]	; (801177c <SVCCTL_InitCustomSvc+0x660>)
 801162c:	f002 fa90 	bl	8013b50 <iprintf>
 8011630:	e002      	b.n	8011638 <SVCCTL_InitCustomSvc+0x51c>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_add_service command: MiCS_SVC \n\r");
 8011632:	4853      	ldr	r0, [pc, #332]	; (8011780 <SVCCTL_InitCustomSvc+0x664>)
 8011634:	f002 fa8c 	bl	8013b50 <iprintf>
  }

  /**
   *  CO
   */
  COPY_CO_UUID(uuid.Char_UUID_128);
 8011638:	2319      	movs	r3, #25
 801163a:	713b      	strb	r3, [r7, #4]
 801163c:	23ed      	movs	r3, #237	; 0xed
 801163e:	717b      	strb	r3, [r7, #5]
 8011640:	2382      	movs	r3, #130	; 0x82
 8011642:	71bb      	strb	r3, [r7, #6]
 8011644:	23ae      	movs	r3, #174	; 0xae
 8011646:	71fb      	strb	r3, [r7, #7]
 8011648:	23ed      	movs	r3, #237	; 0xed
 801164a:	723b      	strb	r3, [r7, #8]
 801164c:	2321      	movs	r3, #33	; 0x21
 801164e:	727b      	strb	r3, [r7, #9]
 8011650:	234c      	movs	r3, #76	; 0x4c
 8011652:	72bb      	strb	r3, [r7, #10]
 8011654:	239d      	movs	r3, #157	; 0x9d
 8011656:	72fb      	strb	r3, [r7, #11]
 8011658:	2341      	movs	r3, #65	; 0x41
 801165a:	733b      	strb	r3, [r7, #12]
 801165c:	2345      	movs	r3, #69	; 0x45
 801165e:	737b      	strb	r3, [r7, #13]
 8011660:	2322      	movs	r3, #34	; 0x22
 8011662:	73bb      	strb	r3, [r7, #14]
 8011664:	238e      	movs	r3, #142	; 0x8e
 8011666:	73fb      	strb	r3, [r7, #15]
 8011668:	23d0      	movs	r3, #208	; 0xd0
 801166a:	743b      	strb	r3, [r7, #16]
 801166c:	232b      	movs	r3, #43	; 0x2b
 801166e:	747b      	strb	r3, [r7, #17]
 8011670:	2300      	movs	r3, #0
 8011672:	74bb      	strb	r3, [r7, #18]
 8011674:	2300      	movs	r3, #0
 8011676:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomMics_SvcHdle,
 8011678:	4b32      	ldr	r3, [pc, #200]	; (8011744 <SVCCTL_InitCustomSvc+0x628>)
 801167a:	8a58      	ldrh	r0, [r3, #18]
 801167c:	4b41      	ldr	r3, [pc, #260]	; (8011784 <SVCCTL_InitCustomSvc+0x668>)
 801167e:	781b      	ldrb	r3, [r3, #0]
 8011680:	b29b      	uxth	r3, r3
 8011682:	1d3a      	adds	r2, r7, #4
 8011684:	4940      	ldr	r1, [pc, #256]	; (8011788 <SVCCTL_InitCustomSvc+0x66c>)
 8011686:	9105      	str	r1, [sp, #20]
 8011688:	2100      	movs	r1, #0
 801168a:	9104      	str	r1, [sp, #16]
 801168c:	2110      	movs	r1, #16
 801168e:	9103      	str	r1, [sp, #12]
 8011690:	2100      	movs	r1, #0
 8011692:	9102      	str	r1, [sp, #8]
 8011694:	2100      	movs	r1, #0
 8011696:	9101      	str	r1, [sp, #4]
 8011698:	2110      	movs	r1, #16
 801169a:	9100      	str	r1, [sp, #0]
 801169c:	2102      	movs	r1, #2
 801169e:	f7fc fda3 	bl	800e1e8 <aci_gatt_add_char>
 80116a2:	4603      	mov	r3, r0
 80116a4:	75fb      	strb	r3, [r7, #23]
                          ATTR_PERMISSION_NONE,
                          GATT_DONT_NOTIFY_EVENTS,
                          0x10,
                          CHAR_VALUE_LEN_CONSTANT,
                          &(CustomContext.CustomCoHdle));
  if (ret != BLE_STATUS_SUCCESS)
 80116a6:	7dfb      	ldrb	r3, [r7, #23]
 80116a8:	2b00      	cmp	r3, #0
 80116aa:	d005      	beq.n	80116b8 <SVCCTL_InitCustomSvc+0x59c>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_char command   : CO, error code: 0x%x \n\r", ret);
 80116ac:	7dfb      	ldrb	r3, [r7, #23]
 80116ae:	4619      	mov	r1, r3
 80116b0:	4836      	ldr	r0, [pc, #216]	; (801178c <SVCCTL_InitCustomSvc+0x670>)
 80116b2:	f002 fa4d 	bl	8013b50 <iprintf>
 80116b6:	e002      	b.n	80116be <SVCCTL_InitCustomSvc+0x5a2>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_add_char command   : CO \n\r");
 80116b8:	4835      	ldr	r0, [pc, #212]	; (8011790 <SVCCTL_InitCustomSvc+0x674>)
 80116ba:	f002 fa49 	bl	8013b50 <iprintf>
  }
  /**
   *  NH3
   */
  COPY_NH3_UUID(uuid.Char_UUID_128);
 80116be:	2319      	movs	r3, #25
 80116c0:	713b      	strb	r3, [r7, #4]
 80116c2:	23ed      	movs	r3, #237	; 0xed
 80116c4:	717b      	strb	r3, [r7, #5]
 80116c6:	2382      	movs	r3, #130	; 0x82
 80116c8:	71bb      	strb	r3, [r7, #6]
 80116ca:	23ae      	movs	r3, #174	; 0xae
 80116cc:	71fb      	strb	r3, [r7, #7]
 80116ce:	23ed      	movs	r3, #237	; 0xed
 80116d0:	723b      	strb	r3, [r7, #8]
 80116d2:	2321      	movs	r3, #33	; 0x21
 80116d4:	727b      	strb	r3, [r7, #9]
 80116d6:	234c      	movs	r3, #76	; 0x4c
 80116d8:	72bb      	strb	r3, [r7, #10]
 80116da:	239d      	movs	r3, #157	; 0x9d
 80116dc:	72fb      	strb	r3, [r7, #11]
 80116de:	2341      	movs	r3, #65	; 0x41
 80116e0:	733b      	strb	r3, [r7, #12]
 80116e2:	2345      	movs	r3, #69	; 0x45
 80116e4:	737b      	strb	r3, [r7, #13]
 80116e6:	2322      	movs	r3, #34	; 0x22
 80116e8:	73bb      	strb	r3, [r7, #14]
 80116ea:	238e      	movs	r3, #142	; 0x8e
 80116ec:	73fb      	strb	r3, [r7, #15]
 80116ee:	23cf      	movs	r3, #207	; 0xcf
 80116f0:	743b      	strb	r3, [r7, #16]
 80116f2:	232b      	movs	r3, #43	; 0x2b
 80116f4:	747b      	strb	r3, [r7, #17]
 80116f6:	2300      	movs	r3, #0
 80116f8:	74bb      	strb	r3, [r7, #18]
 80116fa:	2300      	movs	r3, #0
 80116fc:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomMics_SvcHdle,
 80116fe:	4b11      	ldr	r3, [pc, #68]	; (8011744 <SVCCTL_InitCustomSvc+0x628>)
 8011700:	8a58      	ldrh	r0, [r3, #18]
 8011702:	4b24      	ldr	r3, [pc, #144]	; (8011794 <SVCCTL_InitCustomSvc+0x678>)
 8011704:	781b      	ldrb	r3, [r3, #0]
 8011706:	b29b      	uxth	r3, r3
 8011708:	1d3a      	adds	r2, r7, #4
 801170a:	4923      	ldr	r1, [pc, #140]	; (8011798 <SVCCTL_InitCustomSvc+0x67c>)
 801170c:	9105      	str	r1, [sp, #20]
 801170e:	2100      	movs	r1, #0
 8011710:	9104      	str	r1, [sp, #16]
 8011712:	2110      	movs	r1, #16
 8011714:	9103      	str	r1, [sp, #12]
 8011716:	2100      	movs	r1, #0
 8011718:	9102      	str	r1, [sp, #8]
 801171a:	2100      	movs	r1, #0
 801171c:	9101      	str	r1, [sp, #4]
 801171e:	2110      	movs	r1, #16
 8011720:	9100      	str	r1, [sp, #0]
 8011722:	2102      	movs	r1, #2
 8011724:	f7fc fd60 	bl	800e1e8 <aci_gatt_add_char>
 8011728:	4603      	mov	r3, r0
 801172a:	75fb      	strb	r3, [r7, #23]
                          ATTR_PERMISSION_NONE,
                          GATT_DONT_NOTIFY_EVENTS,
                          0x10,
                          CHAR_VALUE_LEN_CONSTANT,
                          &(CustomContext.CustomNh3Hdle));
  if (ret != BLE_STATUS_SUCCESS)
 801172c:	7dfb      	ldrb	r3, [r7, #23]
 801172e:	2b00      	cmp	r3, #0
 8011730:	d036      	beq.n	80117a0 <SVCCTL_InitCustomSvc+0x684>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_char command   : NH3, error code: 0x%x \n\r", ret);
 8011732:	7dfb      	ldrb	r3, [r7, #23]
 8011734:	4619      	mov	r1, r3
 8011736:	4819      	ldr	r0, [pc, #100]	; (801179c <SVCCTL_InitCustomSvc+0x680>)
 8011738:	f002 fa0a 	bl	8013b50 <iprintf>
 801173c:	e033      	b.n	80117a6 <SVCCTL_InitCustomSvc+0x68a>
 801173e:	bf00      	nop
 8011740:	080174b0 	.word	0x080174b0
 8011744:	20001cac 	.word	0x20001cac
 8011748:	2000001c 	.word	0x2000001c
 801174c:	20001cb8 	.word	0x20001cb8
 8011750:	080174e4 	.word	0x080174e4
 8011754:	0801752c 	.word	0x0801752c
 8011758:	2000001d 	.word	0x2000001d
 801175c:	20001cba 	.word	0x20001cba
 8011760:	08017564 	.word	0x08017564
 8011764:	080175ac 	.word	0x080175ac
 8011768:	2000001e 	.word	0x2000001e
 801176c:	20001cbc 	.word	0x20001cbc
 8011770:	080175e0 	.word	0x080175e0
 8011774:	08017628 	.word	0x08017628
 8011778:	20001cbe 	.word	0x20001cbe
 801177c:	08017660 	.word	0x08017660
 8011780:	080176a8 	.word	0x080176a8
 8011784:	2000001f 	.word	0x2000001f
 8011788:	20001cc0 	.word	0x20001cc0
 801178c:	080176e0 	.word	0x080176e0
 8011790:	08017724 	.word	0x08017724
 8011794:	20000020 	.word	0x20000020
 8011798:	20001cc2 	.word	0x20001cc2
 801179c:	08017754 	.word	0x08017754
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_add_char command   : NH3 \n\r");
 80117a0:	4824      	ldr	r0, [pc, #144]	; (8011834 <SVCCTL_InitCustomSvc+0x718>)
 80117a2:	f002 f9d5 	bl	8013b50 <iprintf>
  }
  /**
   *  NO2
   */
  COPY_NO2_UUID(uuid.Char_UUID_128);
 80117a6:	2319      	movs	r3, #25
 80117a8:	713b      	strb	r3, [r7, #4]
 80117aa:	23ed      	movs	r3, #237	; 0xed
 80117ac:	717b      	strb	r3, [r7, #5]
 80117ae:	2382      	movs	r3, #130	; 0x82
 80117b0:	71bb      	strb	r3, [r7, #6]
 80117b2:	23ae      	movs	r3, #174	; 0xae
 80117b4:	71fb      	strb	r3, [r7, #7]
 80117b6:	23ed      	movs	r3, #237	; 0xed
 80117b8:	723b      	strb	r3, [r7, #8]
 80117ba:	2321      	movs	r3, #33	; 0x21
 80117bc:	727b      	strb	r3, [r7, #9]
 80117be:	234c      	movs	r3, #76	; 0x4c
 80117c0:	72bb      	strb	r3, [r7, #10]
 80117c2:	239d      	movs	r3, #157	; 0x9d
 80117c4:	72fb      	strb	r3, [r7, #11]
 80117c6:	2341      	movs	r3, #65	; 0x41
 80117c8:	733b      	strb	r3, [r7, #12]
 80117ca:	2345      	movs	r3, #69	; 0x45
 80117cc:	737b      	strb	r3, [r7, #13]
 80117ce:	2322      	movs	r3, #34	; 0x22
 80117d0:	73bb      	strb	r3, [r7, #14]
 80117d2:	238e      	movs	r3, #142	; 0x8e
 80117d4:	73fb      	strb	r3, [r7, #15]
 80117d6:	23d2      	movs	r3, #210	; 0xd2
 80117d8:	743b      	strb	r3, [r7, #16]
 80117da:	232b      	movs	r3, #43	; 0x2b
 80117dc:	747b      	strb	r3, [r7, #17]
 80117de:	2300      	movs	r3, #0
 80117e0:	74bb      	strb	r3, [r7, #18]
 80117e2:	2300      	movs	r3, #0
 80117e4:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomMics_SvcHdle,
 80117e6:	4b14      	ldr	r3, [pc, #80]	; (8011838 <SVCCTL_InitCustomSvc+0x71c>)
 80117e8:	8a58      	ldrh	r0, [r3, #18]
 80117ea:	4b14      	ldr	r3, [pc, #80]	; (801183c <SVCCTL_InitCustomSvc+0x720>)
 80117ec:	781b      	ldrb	r3, [r3, #0]
 80117ee:	b29b      	uxth	r3, r3
 80117f0:	1d3a      	adds	r2, r7, #4
 80117f2:	4913      	ldr	r1, [pc, #76]	; (8011840 <SVCCTL_InitCustomSvc+0x724>)
 80117f4:	9105      	str	r1, [sp, #20]
 80117f6:	2100      	movs	r1, #0
 80117f8:	9104      	str	r1, [sp, #16]
 80117fa:	2110      	movs	r1, #16
 80117fc:	9103      	str	r1, [sp, #12]
 80117fe:	2100      	movs	r1, #0
 8011800:	9102      	str	r1, [sp, #8]
 8011802:	2100      	movs	r1, #0
 8011804:	9101      	str	r1, [sp, #4]
 8011806:	2110      	movs	r1, #16
 8011808:	9100      	str	r1, [sp, #0]
 801180a:	2102      	movs	r1, #2
 801180c:	f7fc fcec 	bl	800e1e8 <aci_gatt_add_char>
 8011810:	4603      	mov	r3, r0
 8011812:	75fb      	strb	r3, [r7, #23]
                          ATTR_PERMISSION_NONE,
                          GATT_DONT_NOTIFY_EVENTS,
                          0x10,
                          CHAR_VALUE_LEN_CONSTANT,
                          &(CustomContext.CustomNo2Hdle));
  if (ret != BLE_STATUS_SUCCESS)
 8011814:	7dfb      	ldrb	r3, [r7, #23]
 8011816:	2b00      	cmp	r3, #0
 8011818:	d005      	beq.n	8011826 <SVCCTL_InitCustomSvc+0x70a>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_char command   : NO2, error code: 0x%x \n\r", ret);
 801181a:	7dfb      	ldrb	r3, [r7, #23]
 801181c:	4619      	mov	r1, r3
 801181e:	4809      	ldr	r0, [pc, #36]	; (8011844 <SVCCTL_InitCustomSvc+0x728>)
 8011820:	f002 f996 	bl	8013b50 <iprintf>

  /* USER CODE BEGIN SVCCTL_InitCustomSvc_2 */

  /* USER CODE END SVCCTL_InitCustomSvc_2 */

  return;
 8011824:	e003      	b.n	801182e <SVCCTL_InitCustomSvc+0x712>
    APP_DBG_MSG("  Success: aci_gatt_add_char command   : NO2 \n\r");
 8011826:	4808      	ldr	r0, [pc, #32]	; (8011848 <SVCCTL_InitCustomSvc+0x72c>)
 8011828:	f002 f992 	bl	8013b50 <iprintf>
  return;
 801182c:	bf00      	nop
}
 801182e:	3718      	adds	r7, #24
 8011830:	46bd      	mov	sp, r7
 8011832:	bd80      	pop	{r7, pc}
 8011834:	08017798 	.word	0x08017798
 8011838:	20001cac 	.word	0x20001cac
 801183c:	20000021 	.word	0x20000021
 8011840:	20001cc4 	.word	0x20001cc4
 8011844:	080177c8 	.word	0x080177c8
 8011848:	0801780c 	.word	0x0801780c

0801184c <LL_PWR_EnableBootC2>:
{
 801184c:	b480      	push	{r7}
 801184e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8011850:	4b05      	ldr	r3, [pc, #20]	; (8011868 <LL_PWR_EnableBootC2+0x1c>)
 8011852:	68db      	ldr	r3, [r3, #12]
 8011854:	4a04      	ldr	r2, [pc, #16]	; (8011868 <LL_PWR_EnableBootC2+0x1c>)
 8011856:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801185a:	60d3      	str	r3, [r2, #12]
}
 801185c:	bf00      	nop
 801185e:	46bd      	mov	sp, r7
 8011860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011864:	4770      	bx	lr
 8011866:	bf00      	nop
 8011868:	58000400 	.word	0x58000400

0801186c <LL_C2_EXTI_EnableEvent_32_63>:
{
 801186c:	b480      	push	{r7}
 801186e:	b083      	sub	sp, #12
 8011870:	af00      	add	r7, sp, #0
 8011872:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 8011874:	4b06      	ldr	r3, [pc, #24]	; (8011890 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8011876:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 801187a:	4905      	ldr	r1, [pc, #20]	; (8011890 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 801187c:	687b      	ldr	r3, [r7, #4]
 801187e:	4313      	orrs	r3, r2
 8011880:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 8011884:	bf00      	nop
 8011886:	370c      	adds	r7, #12
 8011888:	46bd      	mov	sp, r7
 801188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801188e:	4770      	bx	lr
 8011890:	58000800 	.word	0x58000800

08011894 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8011894:	b480      	push	{r7}
 8011896:	b083      	sub	sp, #12
 8011898:	af00      	add	r7, sp, #0
 801189a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 801189c:	4b05      	ldr	r3, [pc, #20]	; (80118b4 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 801189e:	6a1a      	ldr	r2, [r3, #32]
 80118a0:	4904      	ldr	r1, [pc, #16]	; (80118b4 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80118a2:	687b      	ldr	r3, [r7, #4]
 80118a4:	4313      	orrs	r3, r2
 80118a6:	620b      	str	r3, [r1, #32]
}
 80118a8:	bf00      	nop
 80118aa:	370c      	adds	r7, #12
 80118ac:	46bd      	mov	sp, r7
 80118ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118b2:	4770      	bx	lr
 80118b4:	58000800 	.word	0x58000800

080118b8 <LL_AHB3_GRP1_EnableClock>:
{
 80118b8:	b480      	push	{r7}
 80118ba:	b085      	sub	sp, #20
 80118bc:	af00      	add	r7, sp, #0
 80118be:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 80118c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80118c4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80118c6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80118ca:	687b      	ldr	r3, [r7, #4]
 80118cc:	4313      	orrs	r3, r2
 80118ce:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80118d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80118d4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80118d6:	687b      	ldr	r3, [r7, #4]
 80118d8:	4013      	ands	r3, r2
 80118da:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80118dc:	68fb      	ldr	r3, [r7, #12]
}
 80118de:	bf00      	nop
 80118e0:	3714      	adds	r7, #20
 80118e2:	46bd      	mov	sp, r7
 80118e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118e8:	4770      	bx	lr

080118ea <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 80118ea:	b480      	push	{r7}
 80118ec:	b085      	sub	sp, #20
 80118ee:	af00      	add	r7, sp, #0
 80118f0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 80118f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80118f6:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 80118fa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80118fe:	687b      	ldr	r3, [r7, #4]
 8011900:	4313      	orrs	r3, r2
 8011902:	f8c1 3150 	str.w	r3, [r1, #336]	; 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 8011906:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801190a:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 801190e:	687b      	ldr	r3, [r7, #4]
 8011910:	4013      	ands	r3, r2
 8011912:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8011914:	68fb      	ldr	r3, [r7, #12]
}
 8011916:	bf00      	nop
 8011918:	3714      	adds	r7, #20
 801191a:	46bd      	mov	sp, r7
 801191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011920:	4770      	bx	lr

08011922 <LL_C1_IPCC_EnableIT_TXF>:
{
 8011922:	b480      	push	{r7}
 8011924:	b083      	sub	sp, #12
 8011926:	af00      	add	r7, sp, #0
 8011928:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 801192a:	687b      	ldr	r3, [r7, #4]
 801192c:	681b      	ldr	r3, [r3, #0]
 801192e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8011932:	687b      	ldr	r3, [r7, #4]
 8011934:	601a      	str	r2, [r3, #0]
}
 8011936:	bf00      	nop
 8011938:	370c      	adds	r7, #12
 801193a:	46bd      	mov	sp, r7
 801193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011940:	4770      	bx	lr

08011942 <LL_C1_IPCC_EnableIT_RXO>:
{
 8011942:	b480      	push	{r7}
 8011944:	b083      	sub	sp, #12
 8011946:	af00      	add	r7, sp, #0
 8011948:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 801194a:	687b      	ldr	r3, [r7, #4]
 801194c:	681b      	ldr	r3, [r3, #0]
 801194e:	f043 0201 	orr.w	r2, r3, #1
 8011952:	687b      	ldr	r3, [r7, #4]
 8011954:	601a      	str	r2, [r3, #0]
}
 8011956:	bf00      	nop
 8011958:	370c      	adds	r7, #12
 801195a:	46bd      	mov	sp, r7
 801195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011960:	4770      	bx	lr

08011962 <LL_C1_IPCC_EnableTransmitChannel>:
{
 8011962:	b480      	push	{r7}
 8011964:	b083      	sub	sp, #12
 8011966:	af00      	add	r7, sp, #0
 8011968:	6078      	str	r0, [r7, #4]
 801196a:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 801196c:	687b      	ldr	r3, [r7, #4]
 801196e:	685a      	ldr	r2, [r3, #4]
 8011970:	683b      	ldr	r3, [r7, #0]
 8011972:	041b      	lsls	r3, r3, #16
 8011974:	43db      	mvns	r3, r3
 8011976:	401a      	ands	r2, r3
 8011978:	687b      	ldr	r3, [r7, #4]
 801197a:	605a      	str	r2, [r3, #4]
}
 801197c:	bf00      	nop
 801197e:	370c      	adds	r7, #12
 8011980:	46bd      	mov	sp, r7
 8011982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011986:	4770      	bx	lr

08011988 <LL_C1_IPCC_DisableTransmitChannel>:
{
 8011988:	b480      	push	{r7}
 801198a:	b083      	sub	sp, #12
 801198c:	af00      	add	r7, sp, #0
 801198e:	6078      	str	r0, [r7, #4]
 8011990:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8011992:	687b      	ldr	r3, [r7, #4]
 8011994:	685a      	ldr	r2, [r3, #4]
 8011996:	683b      	ldr	r3, [r7, #0]
 8011998:	041b      	lsls	r3, r3, #16
 801199a:	431a      	orrs	r2, r3
 801199c:	687b      	ldr	r3, [r7, #4]
 801199e:	605a      	str	r2, [r3, #4]
}
 80119a0:	bf00      	nop
 80119a2:	370c      	adds	r7, #12
 80119a4:	46bd      	mov	sp, r7
 80119a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119aa:	4770      	bx	lr

080119ac <LL_C1_IPCC_EnableReceiveChannel>:
{
 80119ac:	b480      	push	{r7}
 80119ae:	b083      	sub	sp, #12
 80119b0:	af00      	add	r7, sp, #0
 80119b2:	6078      	str	r0, [r7, #4]
 80119b4:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 80119b6:	687b      	ldr	r3, [r7, #4]
 80119b8:	685a      	ldr	r2, [r3, #4]
 80119ba:	683b      	ldr	r3, [r7, #0]
 80119bc:	43db      	mvns	r3, r3
 80119be:	401a      	ands	r2, r3
 80119c0:	687b      	ldr	r3, [r7, #4]
 80119c2:	605a      	str	r2, [r3, #4]
}
 80119c4:	bf00      	nop
 80119c6:	370c      	adds	r7, #12
 80119c8:	46bd      	mov	sp, r7
 80119ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119ce:	4770      	bx	lr

080119d0 <LL_C1_IPCC_ClearFlag_CHx>:
{
 80119d0:	b480      	push	{r7}
 80119d2:	b083      	sub	sp, #12
 80119d4:	af00      	add	r7, sp, #0
 80119d6:	6078      	str	r0, [r7, #4]
 80119d8:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 80119da:	687b      	ldr	r3, [r7, #4]
 80119dc:	683a      	ldr	r2, [r7, #0]
 80119de:	609a      	str	r2, [r3, #8]
}
 80119e0:	bf00      	nop
 80119e2:	370c      	adds	r7, #12
 80119e4:	46bd      	mov	sp, r7
 80119e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119ea:	4770      	bx	lr

080119ec <LL_C1_IPCC_SetFlag_CHx>:
{
 80119ec:	b480      	push	{r7}
 80119ee:	b083      	sub	sp, #12
 80119f0:	af00      	add	r7, sp, #0
 80119f2:	6078      	str	r0, [r7, #4]
 80119f4:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 80119f6:	683b      	ldr	r3, [r7, #0]
 80119f8:	041a      	lsls	r2, r3, #16
 80119fa:	687b      	ldr	r3, [r7, #4]
 80119fc:	609a      	str	r2, [r3, #8]
}
 80119fe:	bf00      	nop
 8011a00:	370c      	adds	r7, #12
 8011a02:	46bd      	mov	sp, r7
 8011a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a08:	4770      	bx	lr

08011a0a <LL_C1_IPCC_IsActiveFlag_CHx>:
{
 8011a0a:	b480      	push	{r7}
 8011a0c:	b083      	sub	sp, #12
 8011a0e:	af00      	add	r7, sp, #0
 8011a10:	6078      	str	r0, [r7, #4]
 8011a12:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 8011a14:	687b      	ldr	r3, [r7, #4]
 8011a16:	68da      	ldr	r2, [r3, #12]
 8011a18:	683b      	ldr	r3, [r7, #0]
 8011a1a:	4013      	ands	r3, r2
 8011a1c:	683a      	ldr	r2, [r7, #0]
 8011a1e:	429a      	cmp	r2, r3
 8011a20:	d101      	bne.n	8011a26 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 8011a22:	2301      	movs	r3, #1
 8011a24:	e000      	b.n	8011a28 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 8011a26:	2300      	movs	r3, #0
}
 8011a28:	4618      	mov	r0, r3
 8011a2a:	370c      	adds	r7, #12
 8011a2c:	46bd      	mov	sp, r7
 8011a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a32:	4770      	bx	lr

08011a34 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8011a34:	b480      	push	{r7}
 8011a36:	b083      	sub	sp, #12
 8011a38:	af00      	add	r7, sp, #0
 8011a3a:	6078      	str	r0, [r7, #4]
 8011a3c:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 8011a3e:	687b      	ldr	r3, [r7, #4]
 8011a40:	69da      	ldr	r2, [r3, #28]
 8011a42:	683b      	ldr	r3, [r7, #0]
 8011a44:	4013      	ands	r3, r2
 8011a46:	683a      	ldr	r2, [r7, #0]
 8011a48:	429a      	cmp	r2, r3
 8011a4a:	d101      	bne.n	8011a50 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 8011a4c:	2301      	movs	r3, #1
 8011a4e:	e000      	b.n	8011a52 <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 8011a50:	2300      	movs	r3, #0
}
 8011a52:	4618      	mov	r0, r3
 8011a54:	370c      	adds	r7, #12
 8011a56:	46bd      	mov	sp, r7
 8011a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a5c:	4770      	bx	lr
	...

08011a60 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 8011a60:	b580      	push	{r7, lr}
 8011a62:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 8011a64:	2102      	movs	r1, #2
 8011a66:	4819      	ldr	r0, [pc, #100]	; (8011acc <HW_IPCC_Rx_Handler+0x6c>)
 8011a68:	f7ff ffe4 	bl	8011a34 <LL_C2_IPCC_IsActiveFlag_CHx>
 8011a6c:	4603      	mov	r3, r0
 8011a6e:	2b00      	cmp	r3, #0
 8011a70:	d009      	beq.n	8011a86 <HW_IPCC_Rx_Handler+0x26>
 8011a72:	4b16      	ldr	r3, [pc, #88]	; (8011acc <HW_IPCC_Rx_Handler+0x6c>)
 8011a74:	685b      	ldr	r3, [r3, #4]
 8011a76:	43db      	mvns	r3, r3
 8011a78:	f003 0302 	and.w	r3, r3, #2
 8011a7c:	2b00      	cmp	r3, #0
 8011a7e:	d002      	beq.n	8011a86 <HW_IPCC_Rx_Handler+0x26>
  {
      HW_IPCC_SYS_EvtHandler();
 8011a80:	f000 f8da 	bl	8011c38 <HW_IPCC_SYS_EvtHandler>
 8011a84:	e01f      	b.n	8011ac6 <HW_IPCC_Rx_Handler+0x66>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 8011a86:	2101      	movs	r1, #1
 8011a88:	4810      	ldr	r0, [pc, #64]	; (8011acc <HW_IPCC_Rx_Handler+0x6c>)
 8011a8a:	f7ff ffd3 	bl	8011a34 <LL_C2_IPCC_IsActiveFlag_CHx>
 8011a8e:	4603      	mov	r3, r0
 8011a90:	2b00      	cmp	r3, #0
 8011a92:	d008      	beq.n	8011aa6 <HW_IPCC_Rx_Handler+0x46>
 8011a94:	4b0d      	ldr	r3, [pc, #52]	; (8011acc <HW_IPCC_Rx_Handler+0x6c>)
 8011a96:	685b      	ldr	r3, [r3, #4]
 8011a98:	f003 0301 	and.w	r3, r3, #1
 8011a9c:	2b00      	cmp	r3, #0
 8011a9e:	d102      	bne.n	8011aa6 <HW_IPCC_Rx_Handler+0x46>
  {
    HW_IPCC_BLE_EvtHandler();
 8011aa0:	f000 f88e 	bl	8011bc0 <HW_IPCC_BLE_EvtHandler>
 8011aa4:	e00f      	b.n	8011ac6 <HW_IPCC_Rx_Handler+0x66>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 8011aa6:	2108      	movs	r1, #8
 8011aa8:	4808      	ldr	r0, [pc, #32]	; (8011acc <HW_IPCC_Rx_Handler+0x6c>)
 8011aaa:	f7ff ffc3 	bl	8011a34 <LL_C2_IPCC_IsActiveFlag_CHx>
 8011aae:	4603      	mov	r3, r0
 8011ab0:	2b00      	cmp	r3, #0
 8011ab2:	d009      	beq.n	8011ac8 <HW_IPCC_Rx_Handler+0x68>
 8011ab4:	4b05      	ldr	r3, [pc, #20]	; (8011acc <HW_IPCC_Rx_Handler+0x6c>)
 8011ab6:	685b      	ldr	r3, [r3, #4]
 8011ab8:	43db      	mvns	r3, r3
 8011aba:	f003 0308 	and.w	r3, r3, #8
 8011abe:	2b00      	cmp	r3, #0
 8011ac0:	d002      	beq.n	8011ac8 <HW_IPCC_Rx_Handler+0x68>
  {
    HW_IPCC_TRACES_EvtHandler();
 8011ac2:	f000 f905 	bl	8011cd0 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 8011ac6:	bf00      	nop
 8011ac8:	bf00      	nop
}
 8011aca:	bd80      	pop	{r7, pc}
 8011acc:	58000c00 	.word	0x58000c00

08011ad0 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 8011ad0:	b580      	push	{r7, lr}
 8011ad2:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 8011ad4:	2102      	movs	r1, #2
 8011ad6:	481a      	ldr	r0, [pc, #104]	; (8011b40 <HW_IPCC_Tx_Handler+0x70>)
 8011ad8:	f7ff ff97 	bl	8011a0a <LL_C1_IPCC_IsActiveFlag_CHx>
 8011adc:	4603      	mov	r3, r0
 8011ade:	2b00      	cmp	r3, #0
 8011ae0:	d109      	bne.n	8011af6 <HW_IPCC_Tx_Handler+0x26>
 8011ae2:	4b17      	ldr	r3, [pc, #92]	; (8011b40 <HW_IPCC_Tx_Handler+0x70>)
 8011ae4:	685b      	ldr	r3, [r3, #4]
 8011ae6:	43db      	mvns	r3, r3
 8011ae8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011aec:	2b00      	cmp	r3, #0
 8011aee:	d002      	beq.n	8011af6 <HW_IPCC_Tx_Handler+0x26>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 8011af0:	f000 f896 	bl	8011c20 <HW_IPCC_SYS_CmdEvtHandler>
 8011af4:	e020      	b.n	8011b38 <HW_IPCC_Tx_Handler+0x68>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 8011af6:	2108      	movs	r1, #8
 8011af8:	4811      	ldr	r0, [pc, #68]	; (8011b40 <HW_IPCC_Tx_Handler+0x70>)
 8011afa:	f7ff ff86 	bl	8011a0a <LL_C1_IPCC_IsActiveFlag_CHx>
 8011afe:	4603      	mov	r3, r0
 8011b00:	2b00      	cmp	r3, #0
 8011b02:	d109      	bne.n	8011b18 <HW_IPCC_Tx_Handler+0x48>
 8011b04:	4b0e      	ldr	r3, [pc, #56]	; (8011b40 <HW_IPCC_Tx_Handler+0x70>)
 8011b06:	685b      	ldr	r3, [r3, #4]
 8011b08:	43db      	mvns	r3, r3
 8011b0a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8011b0e:	2b00      	cmp	r3, #0
 8011b10:	d002      	beq.n	8011b18 <HW_IPCC_Tx_Handler+0x48>
  {
    HW_IPCC_MM_FreeBufHandler();
 8011b12:	f000 f8bf 	bl	8011c94 <HW_IPCC_MM_FreeBufHandler>
 8011b16:	e00f      	b.n	8011b38 <HW_IPCC_Tx_Handler+0x68>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 8011b18:	2120      	movs	r1, #32
 8011b1a:	4809      	ldr	r0, [pc, #36]	; (8011b40 <HW_IPCC_Tx_Handler+0x70>)
 8011b1c:	f7ff ff75 	bl	8011a0a <LL_C1_IPCC_IsActiveFlag_CHx>
 8011b20:	4603      	mov	r3, r0
 8011b22:	2b00      	cmp	r3, #0
 8011b24:	d109      	bne.n	8011b3a <HW_IPCC_Tx_Handler+0x6a>
 8011b26:	4b06      	ldr	r3, [pc, #24]	; (8011b40 <HW_IPCC_Tx_Handler+0x70>)
 8011b28:	685b      	ldr	r3, [r3, #4]
 8011b2a:	43db      	mvns	r3, r3
 8011b2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8011b30:	2b00      	cmp	r3, #0
 8011b32:	d002      	beq.n	8011b3a <HW_IPCC_Tx_Handler+0x6a>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 8011b34:	f000 f850 	bl	8011bd8 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 8011b38:	bf00      	nop
 8011b3a:	bf00      	nop
}
 8011b3c:	bd80      	pop	{r7, pc}
 8011b3e:	bf00      	nop
 8011b40:	58000c00 	.word	0x58000c00

08011b44 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 8011b44:	b580      	push	{r7, lr}
 8011b46:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 8011b48:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8011b4c:	f7ff fecd 	bl	80118ea <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 8011b50:	f44f 7000 	mov.w	r0, #512	; 0x200
 8011b54:	f7ff fe9e 	bl	8011894 <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 8011b58:	f44f 7000 	mov.w	r0, #512	; 0x200
 8011b5c:	f7ff fe86 	bl	801186c <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 8011b60:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 8011b62:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 8011b64:	f7ff fe72 	bl	801184c <LL_PWR_EnableBootC2>

  return;
 8011b68:	bf00      	nop
}
 8011b6a:	bd80      	pop	{r7, pc}

08011b6c <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 8011b6c:	b580      	push	{r7, lr}
 8011b6e:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 8011b70:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8011b74:	f7ff fea0 	bl	80118b8 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 8011b78:	4806      	ldr	r0, [pc, #24]	; (8011b94 <HW_IPCC_Init+0x28>)
 8011b7a:	f7ff fee2 	bl	8011942 <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 8011b7e:	4805      	ldr	r0, [pc, #20]	; (8011b94 <HW_IPCC_Init+0x28>)
 8011b80:	f7ff fecf 	bl	8011922 <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8011b84:	202c      	movs	r0, #44	; 0x2c
 8011b86:	f7f5 faf6 	bl	8007176 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8011b8a:	202d      	movs	r0, #45	; 0x2d
 8011b8c:	f7f5 faf3 	bl	8007176 <HAL_NVIC_EnableIRQ>

  return;
 8011b90:	bf00      	nop
}
 8011b92:	bd80      	pop	{r7, pc}
 8011b94:	58000c00 	.word	0x58000c00

08011b98 <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 8011b98:	b580      	push	{r7, lr}
 8011b9a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8011b9c:	2101      	movs	r1, #1
 8011b9e:	4802      	ldr	r0, [pc, #8]	; (8011ba8 <HW_IPCC_BLE_Init+0x10>)
 8011ba0:	f7ff ff04 	bl	80119ac <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8011ba4:	bf00      	nop
}
 8011ba6:	bd80      	pop	{r7, pc}
 8011ba8:	58000c00 	.word	0x58000c00

08011bac <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 8011bac:	b580      	push	{r7, lr}
 8011bae:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 8011bb0:	2101      	movs	r1, #1
 8011bb2:	4802      	ldr	r0, [pc, #8]	; (8011bbc <HW_IPCC_BLE_SendCmd+0x10>)
 8011bb4:	f7ff ff1a 	bl	80119ec <LL_C1_IPCC_SetFlag_CHx>

  return;
 8011bb8:	bf00      	nop
}
 8011bba:	bd80      	pop	{r7, pc}
 8011bbc:	58000c00 	.word	0x58000c00

08011bc0 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 8011bc0:	b580      	push	{r7, lr}
 8011bc2:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 8011bc4:	f7fd fc2c 	bl	800f420 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8011bc8:	2101      	movs	r1, #1
 8011bca:	4802      	ldr	r0, [pc, #8]	; (8011bd4 <HW_IPCC_BLE_EvtHandler+0x14>)
 8011bcc:	f7ff ff00 	bl	80119d0 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8011bd0:	bf00      	nop
}
 8011bd2:	bd80      	pop	{r7, pc}
 8011bd4:	58000c00 	.word	0x58000c00

08011bd8 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 8011bd8:	b580      	push	{r7, lr}
 8011bda:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 8011bdc:	2120      	movs	r1, #32
 8011bde:	4803      	ldr	r0, [pc, #12]	; (8011bec <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 8011be0:	f7ff fed2 	bl	8011988 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 8011be4:	f7fd fc4c 	bl	800f480 <HW_IPCC_BLE_AclDataAckNot>

  return;
 8011be8:	bf00      	nop
}
 8011bea:	bd80      	pop	{r7, pc}
 8011bec:	58000c00 	.word	0x58000c00

08011bf0 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 8011bf0:	b580      	push	{r7, lr}
 8011bf2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8011bf4:	2102      	movs	r1, #2
 8011bf6:	4802      	ldr	r0, [pc, #8]	; (8011c00 <HW_IPCC_SYS_Init+0x10>)
 8011bf8:	f7ff fed8 	bl	80119ac <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8011bfc:	bf00      	nop
}
 8011bfe:	bd80      	pop	{r7, pc}
 8011c00:	58000c00 	.word	0x58000c00

08011c04 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 8011c04:	b580      	push	{r7, lr}
 8011c06:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8011c08:	2102      	movs	r1, #2
 8011c0a:	4804      	ldr	r0, [pc, #16]	; (8011c1c <HW_IPCC_SYS_SendCmd+0x18>)
 8011c0c:	f7ff feee 	bl	80119ec <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8011c10:	2102      	movs	r1, #2
 8011c12:	4802      	ldr	r0, [pc, #8]	; (8011c1c <HW_IPCC_SYS_SendCmd+0x18>)
 8011c14:	f7ff fea5 	bl	8011962 <LL_C1_IPCC_EnableTransmitChannel>

  return;
 8011c18:	bf00      	nop
}
 8011c1a:	bd80      	pop	{r7, pc}
 8011c1c:	58000c00 	.word	0x58000c00

08011c20 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 8011c20:	b580      	push	{r7, lr}
 8011c22:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8011c24:	2102      	movs	r1, #2
 8011c26:	4803      	ldr	r0, [pc, #12]	; (8011c34 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 8011c28:	f7ff feae 	bl	8011988 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 8011c2c:	f7fd fc78 	bl	800f520 <HW_IPCC_SYS_CmdEvtNot>

  return;
 8011c30:	bf00      	nop
}
 8011c32:	bd80      	pop	{r7, pc}
 8011c34:	58000c00 	.word	0x58000c00

08011c38 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 8011c38:	b580      	push	{r7, lr}
 8011c3a:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 8011c3c:	f7fd fc86 	bl	800f54c <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8011c40:	2102      	movs	r1, #2
 8011c42:	4802      	ldr	r0, [pc, #8]	; (8011c4c <HW_IPCC_SYS_EvtHandler+0x14>)
 8011c44:	f7ff fec4 	bl	80119d0 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8011c48:	bf00      	nop
}
 8011c4a:	bd80      	pop	{r7, pc}
 8011c4c:	58000c00 	.word	0x58000c00

08011c50 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 8011c50:	b580      	push	{r7, lr}
 8011c52:	b082      	sub	sp, #8
 8011c54:	af00      	add	r7, sp, #0
 8011c56:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 8011c58:	2108      	movs	r1, #8
 8011c5a:	480c      	ldr	r0, [pc, #48]	; (8011c8c <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8011c5c:	f7ff fed5 	bl	8011a0a <LL_C1_IPCC_IsActiveFlag_CHx>
 8011c60:	4603      	mov	r3, r0
 8011c62:	2b00      	cmp	r3, #0
 8011c64:	d007      	beq.n	8011c76 <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 8011c66:	4a0a      	ldr	r2, [pc, #40]	; (8011c90 <HW_IPCC_MM_SendFreeBuf+0x40>)
 8011c68:	687b      	ldr	r3, [r7, #4]
 8011c6a:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8011c6c:	2108      	movs	r1, #8
 8011c6e:	4807      	ldr	r0, [pc, #28]	; (8011c8c <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8011c70:	f7ff fe77 	bl	8011962 <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 8011c74:	e006      	b.n	8011c84 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 8011c76:	687b      	ldr	r3, [r7, #4]
 8011c78:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8011c7a:	2108      	movs	r1, #8
 8011c7c:	4803      	ldr	r0, [pc, #12]	; (8011c8c <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8011c7e:	f7ff feb5 	bl	80119ec <LL_C1_IPCC_SetFlag_CHx>
  return;
 8011c82:	bf00      	nop
}
 8011c84:	3708      	adds	r7, #8
 8011c86:	46bd      	mov	sp, r7
 8011c88:	bd80      	pop	{r7, pc}
 8011c8a:	bf00      	nop
 8011c8c:	58000c00 	.word	0x58000c00
 8011c90:	20001cc8 	.word	0x20001cc8

08011c94 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 8011c94:	b580      	push	{r7, lr}
 8011c96:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8011c98:	2108      	movs	r1, #8
 8011c9a:	4806      	ldr	r0, [pc, #24]	; (8011cb4 <HW_IPCC_MM_FreeBufHandler+0x20>)
 8011c9c:	f7ff fe74 	bl	8011988 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 8011ca0:	4b05      	ldr	r3, [pc, #20]	; (8011cb8 <HW_IPCC_MM_FreeBufHandler+0x24>)
 8011ca2:	681b      	ldr	r3, [r3, #0]
 8011ca4:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8011ca6:	2108      	movs	r1, #8
 8011ca8:	4802      	ldr	r0, [pc, #8]	; (8011cb4 <HW_IPCC_MM_FreeBufHandler+0x20>)
 8011caa:	f7ff fe9f 	bl	80119ec <LL_C1_IPCC_SetFlag_CHx>

  return;
 8011cae:	bf00      	nop
}
 8011cb0:	bd80      	pop	{r7, pc}
 8011cb2:	bf00      	nop
 8011cb4:	58000c00 	.word	0x58000c00
 8011cb8:	20001cc8 	.word	0x20001cc8

08011cbc <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 8011cbc:	b580      	push	{r7, lr}
 8011cbe:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 8011cc0:	2108      	movs	r1, #8
 8011cc2:	4802      	ldr	r0, [pc, #8]	; (8011ccc <HW_IPCC_TRACES_Init+0x10>)
 8011cc4:	f7ff fe72 	bl	80119ac <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8011cc8:	bf00      	nop
}
 8011cca:	bd80      	pop	{r7, pc}
 8011ccc:	58000c00 	.word	0x58000c00

08011cd0 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 8011cd0:	b580      	push	{r7, lr}
 8011cd2:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 8011cd4:	f7fd fce2 	bl	800f69c <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 8011cd8:	2108      	movs	r1, #8
 8011cda:	4802      	ldr	r0, [pc, #8]	; (8011ce4 <HW_IPCC_TRACES_EvtHandler+0x14>)
 8011cdc:	f7ff fe78 	bl	80119d0 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8011ce0:	bf00      	nop
}
 8011ce2:	bd80      	pop	{r7, pc}
 8011ce4:	58000c00 	.word	0x58000c00

08011ce8 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 8011ce8:	b480      	push	{r7}
 8011cea:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 8011cec:	4b05      	ldr	r3, [pc, #20]	; (8011d04 <UTIL_LPM_Init+0x1c>)
 8011cee:	2200      	movs	r2, #0
 8011cf0:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 8011cf2:	4b05      	ldr	r3, [pc, #20]	; (8011d08 <UTIL_LPM_Init+0x20>)
 8011cf4:	2200      	movs	r2, #0
 8011cf6:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8011cf8:	bf00      	nop
 8011cfa:	46bd      	mov	sp, r7
 8011cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d00:	4770      	bx	lr
 8011d02:	bf00      	nop
 8011d04:	20001ccc 	.word	0x20001ccc
 8011d08:	20001cd0 	.word	0x20001cd0

08011d0c <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8011d0c:	b480      	push	{r7}
 8011d0e:	b087      	sub	sp, #28
 8011d10:	af00      	add	r7, sp, #0
 8011d12:	6078      	str	r0, [r7, #4]
 8011d14:	460b      	mov	r3, r1
 8011d16:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011d18:	f3ef 8310 	mrs	r3, PRIMASK
 8011d1c:	613b      	str	r3, [r7, #16]
  return(result);
 8011d1e:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 8011d20:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8011d22:	b672      	cpsid	i
}
 8011d24:	bf00      	nop
  
  switch(state)
 8011d26:	78fb      	ldrb	r3, [r7, #3]
 8011d28:	2b00      	cmp	r3, #0
 8011d2a:	d008      	beq.n	8011d3e <UTIL_LPM_SetOffMode+0x32>
 8011d2c:	2b01      	cmp	r3, #1
 8011d2e:	d10e      	bne.n	8011d4e <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 8011d30:	4b0d      	ldr	r3, [pc, #52]	; (8011d68 <UTIL_LPM_SetOffMode+0x5c>)
 8011d32:	681a      	ldr	r2, [r3, #0]
 8011d34:	687b      	ldr	r3, [r7, #4]
 8011d36:	4313      	orrs	r3, r2
 8011d38:	4a0b      	ldr	r2, [pc, #44]	; (8011d68 <UTIL_LPM_SetOffMode+0x5c>)
 8011d3a:	6013      	str	r3, [r2, #0]
      break;
 8011d3c:	e008      	b.n	8011d50 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 8011d3e:	687b      	ldr	r3, [r7, #4]
 8011d40:	43da      	mvns	r2, r3
 8011d42:	4b09      	ldr	r3, [pc, #36]	; (8011d68 <UTIL_LPM_SetOffMode+0x5c>)
 8011d44:	681b      	ldr	r3, [r3, #0]
 8011d46:	4013      	ands	r3, r2
 8011d48:	4a07      	ldr	r2, [pc, #28]	; (8011d68 <UTIL_LPM_SetOffMode+0x5c>)
 8011d4a:	6013      	str	r3, [r2, #0]
      break;
 8011d4c:	e000      	b.n	8011d50 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 8011d4e:	bf00      	nop
 8011d50:	697b      	ldr	r3, [r7, #20]
 8011d52:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011d54:	68fb      	ldr	r3, [r7, #12]
 8011d56:	f383 8810 	msr	PRIMASK, r3
}
 8011d5a:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8011d5c:	bf00      	nop
 8011d5e:	371c      	adds	r7, #28
 8011d60:	46bd      	mov	sp, r7
 8011d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d66:	4770      	bx	lr
 8011d68:	20001cd0 	.word	0x20001cd0

08011d6c <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 8011d6c:	b580      	push	{r7, lr}
 8011d6e:	b090      	sub	sp, #64	; 0x40
 8011d70:	af00      	add	r7, sp, #0
 8011d72:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 8011d74:	4b73      	ldr	r3, [pc, #460]	; (8011f44 <UTIL_SEQ_Run+0x1d8>)
 8011d76:	681b      	ldr	r3, [r3, #0]
 8011d78:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 8011d7a:	4b72      	ldr	r3, [pc, #456]	; (8011f44 <UTIL_SEQ_Run+0x1d8>)
 8011d7c:	681a      	ldr	r2, [r3, #0]
 8011d7e:	687b      	ldr	r3, [r7, #4]
 8011d80:	4013      	ands	r3, r2
 8011d82:	4a70      	ldr	r2, [pc, #448]	; (8011f44 <UTIL_SEQ_Run+0x1d8>)
 8011d84:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 8011d86:	4b70      	ldr	r3, [pc, #448]	; (8011f48 <UTIL_SEQ_Run+0x1dc>)
 8011d88:	681b      	ldr	r3, [r3, #0]
 8011d8a:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 8011d8c:	4b6f      	ldr	r3, [pc, #444]	; (8011f4c <UTIL_SEQ_Run+0x1e0>)
 8011d8e:	681b      	ldr	r3, [r3, #0]
 8011d90:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 8011d92:	4b6f      	ldr	r3, [pc, #444]	; (8011f50 <UTIL_SEQ_Run+0x1e4>)
 8011d94:	681b      	ldr	r3, [r3, #0]
 8011d96:	633b      	str	r3, [r7, #48]	; 0x30
  local_evtwaited =  EvtWaited;
 8011d98:	4b6e      	ldr	r3, [pc, #440]	; (8011f54 <UTIL_SEQ_Run+0x1e8>)
 8011d9a:	681b      	ldr	r3, [r3, #0]
 8011d9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8011d9e:	e08d      	b.n	8011ebc <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 8011da0:	2300      	movs	r3, #0
 8011da2:	63fb      	str	r3, [r7, #60]	; 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 8011da4:	e002      	b.n	8011dac <UTIL_SEQ_Run+0x40>
    {
      counter++;
 8011da6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011da8:	3301      	adds	r3, #1
 8011daa:	63fb      	str	r3, [r7, #60]	; 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 8011dac:	4a6a      	ldr	r2, [pc, #424]	; (8011f58 <UTIL_SEQ_Run+0x1ec>)
 8011dae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011db0:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8011db4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011db6:	401a      	ands	r2, r3
 8011db8:	4b62      	ldr	r3, [pc, #392]	; (8011f44 <UTIL_SEQ_Run+0x1d8>)
 8011dba:	681b      	ldr	r3, [r3, #0]
 8011dbc:	4013      	ands	r3, r2
 8011dbe:	2b00      	cmp	r3, #0
 8011dc0:	d0f1      	beq.n	8011da6 <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 8011dc2:	4a65      	ldr	r2, [pc, #404]	; (8011f58 <UTIL_SEQ_Run+0x1ec>)
 8011dc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011dc6:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8011dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011dcc:	401a      	ands	r2, r3
 8011dce:	4b5d      	ldr	r3, [pc, #372]	; (8011f44 <UTIL_SEQ_Run+0x1d8>)
 8011dd0:	681b      	ldr	r3, [r3, #0]
 8011dd2:	4013      	ands	r3, r2
 8011dd4:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 8011dd6:	4a60      	ldr	r2, [pc, #384]	; (8011f58 <UTIL_SEQ_Run+0x1ec>)
 8011dd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011dda:	00db      	lsls	r3, r3, #3
 8011ddc:	4413      	add	r3, r2
 8011dde:	685a      	ldr	r2, [r3, #4]
 8011de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011de2:	4013      	ands	r3, r2
 8011de4:	2b00      	cmp	r3, #0
 8011de6:	d106      	bne.n	8011df6 <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 8011de8:	4a5b      	ldr	r2, [pc, #364]	; (8011f58 <UTIL_SEQ_Run+0x1ec>)
 8011dea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011dec:	00db      	lsls	r3, r3, #3
 8011dee:	4413      	add	r3, r2
 8011df0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011df4:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 8011df6:	4a58      	ldr	r2, [pc, #352]	; (8011f58 <UTIL_SEQ_Run+0x1ec>)
 8011df8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011dfa:	00db      	lsls	r3, r3, #3
 8011dfc:	4413      	add	r3, r2
 8011dfe:	685a      	ldr	r2, [r3, #4]
 8011e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e02:	4013      	ands	r3, r2
 8011e04:	4618      	mov	r0, r3
 8011e06:	f000 f9b3 	bl	8012170 <SEQ_BitPosition>
 8011e0a:	4603      	mov	r3, r0
 8011e0c:	461a      	mov	r2, r3
 8011e0e:	4b53      	ldr	r3, [pc, #332]	; (8011f5c <UTIL_SEQ_Run+0x1f0>)
 8011e10:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 8011e12:	4a51      	ldr	r2, [pc, #324]	; (8011f58 <UTIL_SEQ_Run+0x1ec>)
 8011e14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011e16:	00db      	lsls	r3, r3, #3
 8011e18:	4413      	add	r3, r2
 8011e1a:	685a      	ldr	r2, [r3, #4]
 8011e1c:	4b4f      	ldr	r3, [pc, #316]	; (8011f5c <UTIL_SEQ_Run+0x1f0>)
 8011e1e:	681b      	ldr	r3, [r3, #0]
 8011e20:	2101      	movs	r1, #1
 8011e22:	fa01 f303 	lsl.w	r3, r1, r3
 8011e26:	43db      	mvns	r3, r3
 8011e28:	401a      	ands	r2, r3
 8011e2a:	494b      	ldr	r1, [pc, #300]	; (8011f58 <UTIL_SEQ_Run+0x1ec>)
 8011e2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011e2e:	00db      	lsls	r3, r3, #3
 8011e30:	440b      	add	r3, r1
 8011e32:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011e34:	f3ef 8310 	mrs	r3, PRIMASK
 8011e38:	61bb      	str	r3, [r7, #24]
  return(result);
 8011e3a:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8011e3c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8011e3e:	b672      	cpsid	i
}
 8011e40:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 8011e42:	4b46      	ldr	r3, [pc, #280]	; (8011f5c <UTIL_SEQ_Run+0x1f0>)
 8011e44:	681b      	ldr	r3, [r3, #0]
 8011e46:	2201      	movs	r2, #1
 8011e48:	fa02 f303 	lsl.w	r3, r2, r3
 8011e4c:	43da      	mvns	r2, r3
 8011e4e:	4b3e      	ldr	r3, [pc, #248]	; (8011f48 <UTIL_SEQ_Run+0x1dc>)
 8011e50:	681b      	ldr	r3, [r3, #0]
 8011e52:	4013      	ands	r3, r2
 8011e54:	4a3c      	ldr	r2, [pc, #240]	; (8011f48 <UTIL_SEQ_Run+0x1dc>)
 8011e56:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8011e58:	2302      	movs	r3, #2
 8011e5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011e5c:	e013      	b.n	8011e86 <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 8011e5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011e60:	3b01      	subs	r3, #1
 8011e62:	4a3d      	ldr	r2, [pc, #244]	; (8011f58 <UTIL_SEQ_Run+0x1ec>)
 8011e64:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 8011e68:	4b3c      	ldr	r3, [pc, #240]	; (8011f5c <UTIL_SEQ_Run+0x1f0>)
 8011e6a:	681b      	ldr	r3, [r3, #0]
 8011e6c:	2201      	movs	r2, #1
 8011e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8011e72:	43da      	mvns	r2, r3
 8011e74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011e76:	3b01      	subs	r3, #1
 8011e78:	400a      	ands	r2, r1
 8011e7a:	4937      	ldr	r1, [pc, #220]	; (8011f58 <UTIL_SEQ_Run+0x1ec>)
 8011e7c:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8011e80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011e82:	3b01      	subs	r3, #1
 8011e84:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011e86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011e88:	2b00      	cmp	r3, #0
 8011e8a:	d1e8      	bne.n	8011e5e <UTIL_SEQ_Run+0xf2>
 8011e8c:	6a3b      	ldr	r3, [r7, #32]
 8011e8e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011e90:	697b      	ldr	r3, [r7, #20]
 8011e92:	f383 8810 	msr	PRIMASK, r3
}
 8011e96:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 8011e98:	4b30      	ldr	r3, [pc, #192]	; (8011f5c <UTIL_SEQ_Run+0x1f0>)
 8011e9a:	681b      	ldr	r3, [r3, #0]
 8011e9c:	4a30      	ldr	r2, [pc, #192]	; (8011f60 <UTIL_SEQ_Run+0x1f4>)
 8011e9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011ea2:	4798      	blx	r3

    local_taskset = TaskSet;
 8011ea4:	4b28      	ldr	r3, [pc, #160]	; (8011f48 <UTIL_SEQ_Run+0x1dc>)
 8011ea6:	681b      	ldr	r3, [r3, #0]
 8011ea8:	63bb      	str	r3, [r7, #56]	; 0x38
    local_evtset = EvtSet;
 8011eaa:	4b28      	ldr	r3, [pc, #160]	; (8011f4c <UTIL_SEQ_Run+0x1e0>)
 8011eac:	681b      	ldr	r3, [r3, #0]
 8011eae:	637b      	str	r3, [r7, #52]	; 0x34
    local_taskmask = TaskMask;
 8011eb0:	4b27      	ldr	r3, [pc, #156]	; (8011f50 <UTIL_SEQ_Run+0x1e4>)
 8011eb2:	681b      	ldr	r3, [r3, #0]
 8011eb4:	633b      	str	r3, [r7, #48]	; 0x30
    local_evtwaited = EvtWaited;
 8011eb6:	4b27      	ldr	r3, [pc, #156]	; (8011f54 <UTIL_SEQ_Run+0x1e8>)
 8011eb8:	681b      	ldr	r3, [r3, #0]
 8011eba:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8011ebc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011ebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ec0:	401a      	ands	r2, r3
 8011ec2:	4b20      	ldr	r3, [pc, #128]	; (8011f44 <UTIL_SEQ_Run+0x1d8>)
 8011ec4:	681b      	ldr	r3, [r3, #0]
 8011ec6:	4013      	ands	r3, r2
 8011ec8:	2b00      	cmp	r3, #0
 8011eca:	d005      	beq.n	8011ed8 <UTIL_SEQ_Run+0x16c>
 8011ecc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011ece:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ed0:	4013      	ands	r3, r2
 8011ed2:	2b00      	cmp	r3, #0
 8011ed4:	f43f af64 	beq.w	8011da0 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 8011ed8:	4b20      	ldr	r3, [pc, #128]	; (8011f5c <UTIL_SEQ_Run+0x1f0>)
 8011eda:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011ede:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 8011ee0:	f000 f938 	bl	8012154 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011ee4:	f3ef 8310 	mrs	r3, PRIMASK
 8011ee8:	613b      	str	r3, [r7, #16]
  return(result);
 8011eea:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 8011eec:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8011eee:	b672      	cpsid	i
}
 8011ef0:	bf00      	nop
  local_taskset = TaskSet;
 8011ef2:	4b15      	ldr	r3, [pc, #84]	; (8011f48 <UTIL_SEQ_Run+0x1dc>)
 8011ef4:	681b      	ldr	r3, [r3, #0]
 8011ef6:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 8011ef8:	4b14      	ldr	r3, [pc, #80]	; (8011f4c <UTIL_SEQ_Run+0x1e0>)
 8011efa:	681b      	ldr	r3, [r3, #0]
 8011efc:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 8011efe:	4b14      	ldr	r3, [pc, #80]	; (8011f50 <UTIL_SEQ_Run+0x1e4>)
 8011f00:	681b      	ldr	r3, [r3, #0]
 8011f02:	633b      	str	r3, [r7, #48]	; 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 8011f04:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011f06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f08:	401a      	ands	r2, r3
 8011f0a:	4b0e      	ldr	r3, [pc, #56]	; (8011f44 <UTIL_SEQ_Run+0x1d8>)
 8011f0c:	681b      	ldr	r3, [r3, #0]
 8011f0e:	4013      	ands	r3, r2
 8011f10:	2b00      	cmp	r3, #0
 8011f12:	d107      	bne.n	8011f24 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 8011f14:	4b0f      	ldr	r3, [pc, #60]	; (8011f54 <UTIL_SEQ_Run+0x1e8>)
 8011f16:	681a      	ldr	r2, [r3, #0]
 8011f18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011f1a:	4013      	ands	r3, r2
 8011f1c:	2b00      	cmp	r3, #0
 8011f1e:	d101      	bne.n	8011f24 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 8011f20:	f7ef fd3f 	bl	80019a2 <UTIL_SEQ_Idle>
 8011f24:	69fb      	ldr	r3, [r7, #28]
 8011f26:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011f28:	68fb      	ldr	r3, [r7, #12]
 8011f2a:	f383 8810 	msr	PRIMASK, r3
}
 8011f2e:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 8011f30:	f000 f917 	bl	8012162 <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 8011f34:	4a03      	ldr	r2, [pc, #12]	; (8011f44 <UTIL_SEQ_Run+0x1d8>)
 8011f36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f38:	6013      	str	r3, [r2, #0]

  return;
 8011f3a:	bf00      	nop
}
 8011f3c:	3740      	adds	r7, #64	; 0x40
 8011f3e:	46bd      	mov	sp, r7
 8011f40:	bd80      	pop	{r7, pc}
 8011f42:	bf00      	nop
 8011f44:	20000028 	.word	0x20000028
 8011f48:	20001cd4 	.word	0x20001cd4
 8011f4c:	20001cd8 	.word	0x20001cd8
 8011f50:	20000024 	.word	0x20000024
 8011f54:	20001cdc 	.word	0x20001cdc
 8011f58:	20001d64 	.word	0x20001d64
 8011f5c:	20001ce0 	.word	0x20001ce0
 8011f60:	20001ce4 	.word	0x20001ce4

08011f64 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 8011f64:	b580      	push	{r7, lr}
 8011f66:	b088      	sub	sp, #32
 8011f68:	af00      	add	r7, sp, #0
 8011f6a:	60f8      	str	r0, [r7, #12]
 8011f6c:	60b9      	str	r1, [r7, #8]
 8011f6e:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011f70:	f3ef 8310 	mrs	r3, PRIMASK
 8011f74:	617b      	str	r3, [r7, #20]
  return(result);
 8011f76:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 8011f78:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8011f7a:	b672      	cpsid	i
}
 8011f7c:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 8011f7e:	68f8      	ldr	r0, [r7, #12]
 8011f80:	f000 f8f6 	bl	8012170 <SEQ_BitPosition>
 8011f84:	4603      	mov	r3, r0
 8011f86:	4619      	mov	r1, r3
 8011f88:	4a06      	ldr	r2, [pc, #24]	; (8011fa4 <UTIL_SEQ_RegTask+0x40>)
 8011f8a:	687b      	ldr	r3, [r7, #4]
 8011f8c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8011f90:	69fb      	ldr	r3, [r7, #28]
 8011f92:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011f94:	69bb      	ldr	r3, [r7, #24]
 8011f96:	f383 8810 	msr	PRIMASK, r3
}
 8011f9a:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 8011f9c:	bf00      	nop
}
 8011f9e:	3720      	adds	r7, #32
 8011fa0:	46bd      	mov	sp, r7
 8011fa2:	bd80      	pop	{r7, pc}
 8011fa4:	20001ce4 	.word	0x20001ce4

08011fa8 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 8011fa8:	b480      	push	{r7}
 8011faa:	b087      	sub	sp, #28
 8011fac:	af00      	add	r7, sp, #0
 8011fae:	6078      	str	r0, [r7, #4]
 8011fb0:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011fb2:	f3ef 8310 	mrs	r3, PRIMASK
 8011fb6:	60fb      	str	r3, [r7, #12]
  return(result);
 8011fb8:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8011fba:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8011fbc:	b672      	cpsid	i
}
 8011fbe:	bf00      	nop

  TaskSet |= TaskId_bm;
 8011fc0:	4b0d      	ldr	r3, [pc, #52]	; (8011ff8 <UTIL_SEQ_SetTask+0x50>)
 8011fc2:	681a      	ldr	r2, [r3, #0]
 8011fc4:	687b      	ldr	r3, [r7, #4]
 8011fc6:	4313      	orrs	r3, r2
 8011fc8:	4a0b      	ldr	r2, [pc, #44]	; (8011ff8 <UTIL_SEQ_SetTask+0x50>)
 8011fca:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 8011fcc:	4a0b      	ldr	r2, [pc, #44]	; (8011ffc <UTIL_SEQ_SetTask+0x54>)
 8011fce:	683b      	ldr	r3, [r7, #0]
 8011fd0:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8011fd4:	687b      	ldr	r3, [r7, #4]
 8011fd6:	431a      	orrs	r2, r3
 8011fd8:	4908      	ldr	r1, [pc, #32]	; (8011ffc <UTIL_SEQ_SetTask+0x54>)
 8011fda:	683b      	ldr	r3, [r7, #0]
 8011fdc:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 8011fe0:	697b      	ldr	r3, [r7, #20]
 8011fe2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011fe4:	693b      	ldr	r3, [r7, #16]
 8011fe6:	f383 8810 	msr	PRIMASK, r3
}
 8011fea:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8011fec:	bf00      	nop
}
 8011fee:	371c      	adds	r7, #28
 8011ff0:	46bd      	mov	sp, r7
 8011ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ff6:	4770      	bx	lr
 8011ff8:	20001cd4 	.word	0x20001cd4
 8011ffc:	20001d64 	.word	0x20001d64

08012000 <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 8012000:	b480      	push	{r7}
 8012002:	b087      	sub	sp, #28
 8012004:	af00      	add	r7, sp, #0
 8012006:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012008:	f3ef 8310 	mrs	r3, PRIMASK
 801200c:	60fb      	str	r3, [r7, #12]
  return(result);
 801200e:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8012010:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8012012:	b672      	cpsid	i
}
 8012014:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 8012016:	687b      	ldr	r3, [r7, #4]
 8012018:	43da      	mvns	r2, r3
 801201a:	4b08      	ldr	r3, [pc, #32]	; (801203c <UTIL_SEQ_PauseTask+0x3c>)
 801201c:	681b      	ldr	r3, [r3, #0]
 801201e:	4013      	ands	r3, r2
 8012020:	4a06      	ldr	r2, [pc, #24]	; (801203c <UTIL_SEQ_PauseTask+0x3c>)
 8012022:	6013      	str	r3, [r2, #0]
 8012024:	697b      	ldr	r3, [r7, #20]
 8012026:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012028:	693b      	ldr	r3, [r7, #16]
 801202a:	f383 8810 	msr	PRIMASK, r3
}
 801202e:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8012030:	bf00      	nop
}
 8012032:	371c      	adds	r7, #28
 8012034:	46bd      	mov	sp, r7
 8012036:	f85d 7b04 	ldr.w	r7, [sp], #4
 801203a:	4770      	bx	lr
 801203c:	20000024 	.word	0x20000024

08012040 <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 8012040:	b480      	push	{r7}
 8012042:	b087      	sub	sp, #28
 8012044:	af00      	add	r7, sp, #0
 8012046:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012048:	f3ef 8310 	mrs	r3, PRIMASK
 801204c:	60fb      	str	r3, [r7, #12]
  return(result);
 801204e:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8012050:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8012052:	b672      	cpsid	i
}
 8012054:	bf00      	nop

  TaskMask |= TaskId_bm;
 8012056:	4b09      	ldr	r3, [pc, #36]	; (801207c <UTIL_SEQ_ResumeTask+0x3c>)
 8012058:	681a      	ldr	r2, [r3, #0]
 801205a:	687b      	ldr	r3, [r7, #4]
 801205c:	4313      	orrs	r3, r2
 801205e:	4a07      	ldr	r2, [pc, #28]	; (801207c <UTIL_SEQ_ResumeTask+0x3c>)
 8012060:	6013      	str	r3, [r2, #0]
 8012062:	697b      	ldr	r3, [r7, #20]
 8012064:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012066:	693b      	ldr	r3, [r7, #16]
 8012068:	f383 8810 	msr	PRIMASK, r3
}
 801206c:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 801206e:	bf00      	nop
}
 8012070:	371c      	adds	r7, #28
 8012072:	46bd      	mov	sp, r7
 8012074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012078:	4770      	bx	lr
 801207a:	bf00      	nop
 801207c:	20000024 	.word	0x20000024

08012080 <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 8012080:	b480      	push	{r7}
 8012082:	b087      	sub	sp, #28
 8012084:	af00      	add	r7, sp, #0
 8012086:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012088:	f3ef 8310 	mrs	r3, PRIMASK
 801208c:	60fb      	str	r3, [r7, #12]
  return(result);
 801208e:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8012090:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8012092:	b672      	cpsid	i
}
 8012094:	bf00      	nop

  EvtSet |= EvtId_bm;
 8012096:	4b09      	ldr	r3, [pc, #36]	; (80120bc <UTIL_SEQ_SetEvt+0x3c>)
 8012098:	681a      	ldr	r2, [r3, #0]
 801209a:	687b      	ldr	r3, [r7, #4]
 801209c:	4313      	orrs	r3, r2
 801209e:	4a07      	ldr	r2, [pc, #28]	; (80120bc <UTIL_SEQ_SetEvt+0x3c>)
 80120a0:	6013      	str	r3, [r2, #0]
 80120a2:	697b      	ldr	r3, [r7, #20]
 80120a4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80120a6:	693b      	ldr	r3, [r7, #16]
 80120a8:	f383 8810 	msr	PRIMASK, r3
}
 80120ac:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 80120ae:	bf00      	nop
}
 80120b0:	371c      	adds	r7, #28
 80120b2:	46bd      	mov	sp, r7
 80120b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120b8:	4770      	bx	lr
 80120ba:	bf00      	nop
 80120bc:	20001cd8 	.word	0x20001cd8

080120c0 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 80120c0:	b580      	push	{r7, lr}
 80120c2:	b088      	sub	sp, #32
 80120c4:	af00      	add	r7, sp, #0
 80120c6:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 80120c8:	4b1f      	ldr	r3, [pc, #124]	; (8012148 <UTIL_SEQ_WaitEvt+0x88>)
 80120ca:	681b      	ldr	r3, [r3, #0]
 80120cc:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 80120ce:	4b1e      	ldr	r3, [pc, #120]	; (8012148 <UTIL_SEQ_WaitEvt+0x88>)
 80120d0:	681b      	ldr	r3, [r3, #0]
 80120d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80120d6:	d102      	bne.n	80120de <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 80120d8:	2300      	movs	r3, #0
 80120da:	61fb      	str	r3, [r7, #28]
 80120dc:	e005      	b.n	80120ea <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 80120de:	4b1a      	ldr	r3, [pc, #104]	; (8012148 <UTIL_SEQ_WaitEvt+0x88>)
 80120e0:	681b      	ldr	r3, [r3, #0]
 80120e2:	2201      	movs	r2, #1
 80120e4:	fa02 f303 	lsl.w	r3, r2, r3
 80120e8:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 80120ea:	4b18      	ldr	r3, [pc, #96]	; (801214c <UTIL_SEQ_WaitEvt+0x8c>)
 80120ec:	681b      	ldr	r3, [r3, #0]
 80120ee:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 80120f0:	4a16      	ldr	r2, [pc, #88]	; (801214c <UTIL_SEQ_WaitEvt+0x8c>)
 80120f2:	687b      	ldr	r3, [r7, #4]
 80120f4:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 80120f6:	e003      	b.n	8012100 <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 80120f8:	6879      	ldr	r1, [r7, #4]
 80120fa:	69f8      	ldr	r0, [r7, #28]
 80120fc:	f7ef fc58 	bl	80019b0 <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 8012100:	4b13      	ldr	r3, [pc, #76]	; (8012150 <UTIL_SEQ_WaitEvt+0x90>)
 8012102:	681a      	ldr	r2, [r3, #0]
 8012104:	687b      	ldr	r3, [r7, #4]
 8012106:	4013      	ands	r3, r2
 8012108:	2b00      	cmp	r3, #0
 801210a:	d0f5      	beq.n	80120f8 <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 801210c:	4a0e      	ldr	r2, [pc, #56]	; (8012148 <UTIL_SEQ_WaitEvt+0x88>)
 801210e:	69bb      	ldr	r3, [r7, #24]
 8012110:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012112:	f3ef 8310 	mrs	r3, PRIMASK
 8012116:	60bb      	str	r3, [r7, #8]
  return(result);
 8012118:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801211a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801211c:	b672      	cpsid	i
}
 801211e:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 8012120:	687b      	ldr	r3, [r7, #4]
 8012122:	43da      	mvns	r2, r3
 8012124:	4b0a      	ldr	r3, [pc, #40]	; (8012150 <UTIL_SEQ_WaitEvt+0x90>)
 8012126:	681b      	ldr	r3, [r3, #0]
 8012128:	4013      	ands	r3, r2
 801212a:	4a09      	ldr	r2, [pc, #36]	; (8012150 <UTIL_SEQ_WaitEvt+0x90>)
 801212c:	6013      	str	r3, [r2, #0]
 801212e:	693b      	ldr	r3, [r7, #16]
 8012130:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012132:	68fb      	ldr	r3, [r7, #12]
 8012134:	f383 8810 	msr	PRIMASK, r3
}
 8012138:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 801213a:	4a04      	ldr	r2, [pc, #16]	; (801214c <UTIL_SEQ_WaitEvt+0x8c>)
 801213c:	697b      	ldr	r3, [r7, #20]
 801213e:	6013      	str	r3, [r2, #0]
  return;
 8012140:	bf00      	nop
}
 8012142:	3720      	adds	r7, #32
 8012144:	46bd      	mov	sp, r7
 8012146:	bd80      	pop	{r7, pc}
 8012148:	20001ce0 	.word	0x20001ce0
 801214c:	20001cdc 	.word	0x20001cdc
 8012150:	20001cd8 	.word	0x20001cd8

08012154 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 8012154:	b480      	push	{r7}
 8012156:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8012158:	bf00      	nop
}
 801215a:	46bd      	mov	sp, r7
 801215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012160:	4770      	bx	lr

08012162 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 8012162:	b480      	push	{r7}
 8012164:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8012166:	bf00      	nop
}
 8012168:	46bd      	mov	sp, r7
 801216a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801216e:	4770      	bx	lr

08012170 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 8012170:	b480      	push	{r7}
 8012172:	b085      	sub	sp, #20
 8012174:	af00      	add	r7, sp, #0
 8012176:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 8012178:	2300      	movs	r3, #0
 801217a:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 801217c:	687b      	ldr	r3, [r7, #4]
 801217e:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 8012180:	68bb      	ldr	r3, [r7, #8]
 8012182:	0c1b      	lsrs	r3, r3, #16
 8012184:	041b      	lsls	r3, r3, #16
 8012186:	2b00      	cmp	r3, #0
 8012188:	d104      	bne.n	8012194 <SEQ_BitPosition+0x24>
 801218a:	2310      	movs	r3, #16
 801218c:	73fb      	strb	r3, [r7, #15]
 801218e:	68bb      	ldr	r3, [r7, #8]
 8012190:	041b      	lsls	r3, r3, #16
 8012192:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 8012194:	68bb      	ldr	r3, [r7, #8]
 8012196:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 801219a:	2b00      	cmp	r3, #0
 801219c:	d105      	bne.n	80121aa <SEQ_BitPosition+0x3a>
 801219e:	7bfb      	ldrb	r3, [r7, #15]
 80121a0:	3308      	adds	r3, #8
 80121a2:	73fb      	strb	r3, [r7, #15]
 80121a4:	68bb      	ldr	r3, [r7, #8]
 80121a6:	021b      	lsls	r3, r3, #8
 80121a8:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 80121aa:	68bb      	ldr	r3, [r7, #8]
 80121ac:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80121b0:	2b00      	cmp	r3, #0
 80121b2:	d105      	bne.n	80121c0 <SEQ_BitPosition+0x50>
 80121b4:	7bfb      	ldrb	r3, [r7, #15]
 80121b6:	3304      	adds	r3, #4
 80121b8:	73fb      	strb	r3, [r7, #15]
 80121ba:	68bb      	ldr	r3, [r7, #8]
 80121bc:	011b      	lsls	r3, r3, #4
 80121be:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 80121c0:	68bb      	ldr	r3, [r7, #8]
 80121c2:	0f1b      	lsrs	r3, r3, #28
 80121c4:	4a07      	ldr	r2, [pc, #28]	; (80121e4 <SEQ_BitPosition+0x74>)
 80121c6:	5cd2      	ldrb	r2, [r2, r3]
 80121c8:	7bfb      	ldrb	r3, [r7, #15]
 80121ca:	4413      	add	r3, r2
 80121cc:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 80121ce:	7bfb      	ldrb	r3, [r7, #15]
 80121d0:	f1c3 031f 	rsb	r3, r3, #31
 80121d4:	b2db      	uxtb	r3, r3
}
 80121d6:	4618      	mov	r0, r3
 80121d8:	3714      	adds	r7, #20
 80121da:	46bd      	mov	sp, r7
 80121dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121e0:	4770      	bx	lr
 80121e2:	bf00      	nop
 80121e4:	08017f64 	.word	0x08017f64

080121e8 <pow>:
 80121e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80121ea:	ed2d 8b02 	vpush	{d8}
 80121ee:	eeb0 8a40 	vmov.f32	s16, s0
 80121f2:	eef0 8a60 	vmov.f32	s17, s1
 80121f6:	ec55 4b11 	vmov	r4, r5, d1
 80121fa:	f000 f865 	bl	80122c8 <__ieee754_pow>
 80121fe:	4622      	mov	r2, r4
 8012200:	462b      	mov	r3, r5
 8012202:	4620      	mov	r0, r4
 8012204:	4629      	mov	r1, r5
 8012206:	ec57 6b10 	vmov	r6, r7, d0
 801220a:	f7ee fc67 	bl	8000adc <__aeabi_dcmpun>
 801220e:	2800      	cmp	r0, #0
 8012210:	d13b      	bne.n	801228a <pow+0xa2>
 8012212:	ec51 0b18 	vmov	r0, r1, d8
 8012216:	2200      	movs	r2, #0
 8012218:	2300      	movs	r3, #0
 801221a:	f7ee fc2d 	bl	8000a78 <__aeabi_dcmpeq>
 801221e:	b1b8      	cbz	r0, 8012250 <pow+0x68>
 8012220:	2200      	movs	r2, #0
 8012222:	2300      	movs	r3, #0
 8012224:	4620      	mov	r0, r4
 8012226:	4629      	mov	r1, r5
 8012228:	f7ee fc26 	bl	8000a78 <__aeabi_dcmpeq>
 801222c:	2800      	cmp	r0, #0
 801222e:	d146      	bne.n	80122be <pow+0xd6>
 8012230:	ec45 4b10 	vmov	d0, r4, r5
 8012234:	f000 fe61 	bl	8012efa <finite>
 8012238:	b338      	cbz	r0, 801228a <pow+0xa2>
 801223a:	2200      	movs	r2, #0
 801223c:	2300      	movs	r3, #0
 801223e:	4620      	mov	r0, r4
 8012240:	4629      	mov	r1, r5
 8012242:	f7ee fc23 	bl	8000a8c <__aeabi_dcmplt>
 8012246:	b300      	cbz	r0, 801228a <pow+0xa2>
 8012248:	f000 fee8 	bl	801301c <__errno>
 801224c:	2322      	movs	r3, #34	; 0x22
 801224e:	e01b      	b.n	8012288 <pow+0xa0>
 8012250:	ec47 6b10 	vmov	d0, r6, r7
 8012254:	f000 fe51 	bl	8012efa <finite>
 8012258:	b9e0      	cbnz	r0, 8012294 <pow+0xac>
 801225a:	eeb0 0a48 	vmov.f32	s0, s16
 801225e:	eef0 0a68 	vmov.f32	s1, s17
 8012262:	f000 fe4a 	bl	8012efa <finite>
 8012266:	b1a8      	cbz	r0, 8012294 <pow+0xac>
 8012268:	ec45 4b10 	vmov	d0, r4, r5
 801226c:	f000 fe45 	bl	8012efa <finite>
 8012270:	b180      	cbz	r0, 8012294 <pow+0xac>
 8012272:	4632      	mov	r2, r6
 8012274:	463b      	mov	r3, r7
 8012276:	4630      	mov	r0, r6
 8012278:	4639      	mov	r1, r7
 801227a:	f7ee fc2f 	bl	8000adc <__aeabi_dcmpun>
 801227e:	2800      	cmp	r0, #0
 8012280:	d0e2      	beq.n	8012248 <pow+0x60>
 8012282:	f000 fecb 	bl	801301c <__errno>
 8012286:	2321      	movs	r3, #33	; 0x21
 8012288:	6003      	str	r3, [r0, #0]
 801228a:	ecbd 8b02 	vpop	{d8}
 801228e:	ec47 6b10 	vmov	d0, r6, r7
 8012292:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012294:	2200      	movs	r2, #0
 8012296:	2300      	movs	r3, #0
 8012298:	4630      	mov	r0, r6
 801229a:	4639      	mov	r1, r7
 801229c:	f7ee fbec 	bl	8000a78 <__aeabi_dcmpeq>
 80122a0:	2800      	cmp	r0, #0
 80122a2:	d0f2      	beq.n	801228a <pow+0xa2>
 80122a4:	eeb0 0a48 	vmov.f32	s0, s16
 80122a8:	eef0 0a68 	vmov.f32	s1, s17
 80122ac:	f000 fe25 	bl	8012efa <finite>
 80122b0:	2800      	cmp	r0, #0
 80122b2:	d0ea      	beq.n	801228a <pow+0xa2>
 80122b4:	ec45 4b10 	vmov	d0, r4, r5
 80122b8:	f000 fe1f 	bl	8012efa <finite>
 80122bc:	e7c3      	b.n	8012246 <pow+0x5e>
 80122be:	4f01      	ldr	r7, [pc, #4]	; (80122c4 <pow+0xdc>)
 80122c0:	2600      	movs	r6, #0
 80122c2:	e7e2      	b.n	801228a <pow+0xa2>
 80122c4:	3ff00000 	.word	0x3ff00000

080122c8 <__ieee754_pow>:
 80122c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80122cc:	ed2d 8b06 	vpush	{d8-d10}
 80122d0:	b089      	sub	sp, #36	; 0x24
 80122d2:	ed8d 1b00 	vstr	d1, [sp]
 80122d6:	e9dd 2900 	ldrd	r2, r9, [sp]
 80122da:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 80122de:	ea58 0102 	orrs.w	r1, r8, r2
 80122e2:	ec57 6b10 	vmov	r6, r7, d0
 80122e6:	d115      	bne.n	8012314 <__ieee754_pow+0x4c>
 80122e8:	19b3      	adds	r3, r6, r6
 80122ea:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 80122ee:	4152      	adcs	r2, r2
 80122f0:	4299      	cmp	r1, r3
 80122f2:	4b89      	ldr	r3, [pc, #548]	; (8012518 <__ieee754_pow+0x250>)
 80122f4:	4193      	sbcs	r3, r2
 80122f6:	f080 84d2 	bcs.w	8012c9e <__ieee754_pow+0x9d6>
 80122fa:	e9dd 2300 	ldrd	r2, r3, [sp]
 80122fe:	4630      	mov	r0, r6
 8012300:	4639      	mov	r1, r7
 8012302:	f7ed ff9b 	bl	800023c <__adddf3>
 8012306:	ec41 0b10 	vmov	d0, r0, r1
 801230a:	b009      	add	sp, #36	; 0x24
 801230c:	ecbd 8b06 	vpop	{d8-d10}
 8012310:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012314:	4b81      	ldr	r3, [pc, #516]	; (801251c <__ieee754_pow+0x254>)
 8012316:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 801231a:	429c      	cmp	r4, r3
 801231c:	ee10 aa10 	vmov	sl, s0
 8012320:	463d      	mov	r5, r7
 8012322:	dc06      	bgt.n	8012332 <__ieee754_pow+0x6a>
 8012324:	d101      	bne.n	801232a <__ieee754_pow+0x62>
 8012326:	2e00      	cmp	r6, #0
 8012328:	d1e7      	bne.n	80122fa <__ieee754_pow+0x32>
 801232a:	4598      	cmp	r8, r3
 801232c:	dc01      	bgt.n	8012332 <__ieee754_pow+0x6a>
 801232e:	d10f      	bne.n	8012350 <__ieee754_pow+0x88>
 8012330:	b172      	cbz	r2, 8012350 <__ieee754_pow+0x88>
 8012332:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8012336:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 801233a:	ea55 050a 	orrs.w	r5, r5, sl
 801233e:	d1dc      	bne.n	80122fa <__ieee754_pow+0x32>
 8012340:	e9dd 3200 	ldrd	r3, r2, [sp]
 8012344:	18db      	adds	r3, r3, r3
 8012346:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 801234a:	4152      	adcs	r2, r2
 801234c:	429d      	cmp	r5, r3
 801234e:	e7d0      	b.n	80122f2 <__ieee754_pow+0x2a>
 8012350:	2d00      	cmp	r5, #0
 8012352:	da3b      	bge.n	80123cc <__ieee754_pow+0x104>
 8012354:	4b72      	ldr	r3, [pc, #456]	; (8012520 <__ieee754_pow+0x258>)
 8012356:	4598      	cmp	r8, r3
 8012358:	dc51      	bgt.n	80123fe <__ieee754_pow+0x136>
 801235a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 801235e:	4598      	cmp	r8, r3
 8012360:	f340 84ac 	ble.w	8012cbc <__ieee754_pow+0x9f4>
 8012364:	ea4f 5328 	mov.w	r3, r8, asr #20
 8012368:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801236c:	2b14      	cmp	r3, #20
 801236e:	dd0f      	ble.n	8012390 <__ieee754_pow+0xc8>
 8012370:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8012374:	fa22 f103 	lsr.w	r1, r2, r3
 8012378:	fa01 f303 	lsl.w	r3, r1, r3
 801237c:	4293      	cmp	r3, r2
 801237e:	f040 849d 	bne.w	8012cbc <__ieee754_pow+0x9f4>
 8012382:	f001 0101 	and.w	r1, r1, #1
 8012386:	f1c1 0302 	rsb	r3, r1, #2
 801238a:	9304      	str	r3, [sp, #16]
 801238c:	b182      	cbz	r2, 80123b0 <__ieee754_pow+0xe8>
 801238e:	e05f      	b.n	8012450 <__ieee754_pow+0x188>
 8012390:	2a00      	cmp	r2, #0
 8012392:	d15b      	bne.n	801244c <__ieee754_pow+0x184>
 8012394:	f1c3 0314 	rsb	r3, r3, #20
 8012398:	fa48 f103 	asr.w	r1, r8, r3
 801239c:	fa01 f303 	lsl.w	r3, r1, r3
 80123a0:	4543      	cmp	r3, r8
 80123a2:	f040 8488 	bne.w	8012cb6 <__ieee754_pow+0x9ee>
 80123a6:	f001 0101 	and.w	r1, r1, #1
 80123aa:	f1c1 0302 	rsb	r3, r1, #2
 80123ae:	9304      	str	r3, [sp, #16]
 80123b0:	4b5c      	ldr	r3, [pc, #368]	; (8012524 <__ieee754_pow+0x25c>)
 80123b2:	4598      	cmp	r8, r3
 80123b4:	d132      	bne.n	801241c <__ieee754_pow+0x154>
 80123b6:	f1b9 0f00 	cmp.w	r9, #0
 80123ba:	f280 8478 	bge.w	8012cae <__ieee754_pow+0x9e6>
 80123be:	4959      	ldr	r1, [pc, #356]	; (8012524 <__ieee754_pow+0x25c>)
 80123c0:	4632      	mov	r2, r6
 80123c2:	463b      	mov	r3, r7
 80123c4:	2000      	movs	r0, #0
 80123c6:	f7ee fa19 	bl	80007fc <__aeabi_ddiv>
 80123ca:	e79c      	b.n	8012306 <__ieee754_pow+0x3e>
 80123cc:	2300      	movs	r3, #0
 80123ce:	9304      	str	r3, [sp, #16]
 80123d0:	2a00      	cmp	r2, #0
 80123d2:	d13d      	bne.n	8012450 <__ieee754_pow+0x188>
 80123d4:	4b51      	ldr	r3, [pc, #324]	; (801251c <__ieee754_pow+0x254>)
 80123d6:	4598      	cmp	r8, r3
 80123d8:	d1ea      	bne.n	80123b0 <__ieee754_pow+0xe8>
 80123da:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80123de:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80123e2:	ea53 030a 	orrs.w	r3, r3, sl
 80123e6:	f000 845a 	beq.w	8012c9e <__ieee754_pow+0x9d6>
 80123ea:	4b4f      	ldr	r3, [pc, #316]	; (8012528 <__ieee754_pow+0x260>)
 80123ec:	429c      	cmp	r4, r3
 80123ee:	dd08      	ble.n	8012402 <__ieee754_pow+0x13a>
 80123f0:	f1b9 0f00 	cmp.w	r9, #0
 80123f4:	f2c0 8457 	blt.w	8012ca6 <__ieee754_pow+0x9de>
 80123f8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80123fc:	e783      	b.n	8012306 <__ieee754_pow+0x3e>
 80123fe:	2302      	movs	r3, #2
 8012400:	e7e5      	b.n	80123ce <__ieee754_pow+0x106>
 8012402:	f1b9 0f00 	cmp.w	r9, #0
 8012406:	f04f 0000 	mov.w	r0, #0
 801240a:	f04f 0100 	mov.w	r1, #0
 801240e:	f6bf af7a 	bge.w	8012306 <__ieee754_pow+0x3e>
 8012412:	e9dd 0300 	ldrd	r0, r3, [sp]
 8012416:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801241a:	e774      	b.n	8012306 <__ieee754_pow+0x3e>
 801241c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8012420:	d106      	bne.n	8012430 <__ieee754_pow+0x168>
 8012422:	4632      	mov	r2, r6
 8012424:	463b      	mov	r3, r7
 8012426:	4630      	mov	r0, r6
 8012428:	4639      	mov	r1, r7
 801242a:	f7ee f8bd 	bl	80005a8 <__aeabi_dmul>
 801242e:	e76a      	b.n	8012306 <__ieee754_pow+0x3e>
 8012430:	4b3e      	ldr	r3, [pc, #248]	; (801252c <__ieee754_pow+0x264>)
 8012432:	4599      	cmp	r9, r3
 8012434:	d10c      	bne.n	8012450 <__ieee754_pow+0x188>
 8012436:	2d00      	cmp	r5, #0
 8012438:	db0a      	blt.n	8012450 <__ieee754_pow+0x188>
 801243a:	ec47 6b10 	vmov	d0, r6, r7
 801243e:	b009      	add	sp, #36	; 0x24
 8012440:	ecbd 8b06 	vpop	{d8-d10}
 8012444:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012448:	f000 bc6c 	b.w	8012d24 <__ieee754_sqrt>
 801244c:	2300      	movs	r3, #0
 801244e:	9304      	str	r3, [sp, #16]
 8012450:	ec47 6b10 	vmov	d0, r6, r7
 8012454:	f000 fd48 	bl	8012ee8 <fabs>
 8012458:	ec51 0b10 	vmov	r0, r1, d0
 801245c:	f1ba 0f00 	cmp.w	sl, #0
 8012460:	d129      	bne.n	80124b6 <__ieee754_pow+0x1ee>
 8012462:	b124      	cbz	r4, 801246e <__ieee754_pow+0x1a6>
 8012464:	4b2f      	ldr	r3, [pc, #188]	; (8012524 <__ieee754_pow+0x25c>)
 8012466:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 801246a:	429a      	cmp	r2, r3
 801246c:	d123      	bne.n	80124b6 <__ieee754_pow+0x1ee>
 801246e:	f1b9 0f00 	cmp.w	r9, #0
 8012472:	da05      	bge.n	8012480 <__ieee754_pow+0x1b8>
 8012474:	4602      	mov	r2, r0
 8012476:	460b      	mov	r3, r1
 8012478:	2000      	movs	r0, #0
 801247a:	492a      	ldr	r1, [pc, #168]	; (8012524 <__ieee754_pow+0x25c>)
 801247c:	f7ee f9be 	bl	80007fc <__aeabi_ddiv>
 8012480:	2d00      	cmp	r5, #0
 8012482:	f6bf af40 	bge.w	8012306 <__ieee754_pow+0x3e>
 8012486:	9b04      	ldr	r3, [sp, #16]
 8012488:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801248c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8012490:	4323      	orrs	r3, r4
 8012492:	d108      	bne.n	80124a6 <__ieee754_pow+0x1de>
 8012494:	4602      	mov	r2, r0
 8012496:	460b      	mov	r3, r1
 8012498:	4610      	mov	r0, r2
 801249a:	4619      	mov	r1, r3
 801249c:	f7ed fecc 	bl	8000238 <__aeabi_dsub>
 80124a0:	4602      	mov	r2, r0
 80124a2:	460b      	mov	r3, r1
 80124a4:	e78f      	b.n	80123c6 <__ieee754_pow+0xfe>
 80124a6:	9b04      	ldr	r3, [sp, #16]
 80124a8:	2b01      	cmp	r3, #1
 80124aa:	f47f af2c 	bne.w	8012306 <__ieee754_pow+0x3e>
 80124ae:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80124b2:	4619      	mov	r1, r3
 80124b4:	e727      	b.n	8012306 <__ieee754_pow+0x3e>
 80124b6:	0feb      	lsrs	r3, r5, #31
 80124b8:	3b01      	subs	r3, #1
 80124ba:	9306      	str	r3, [sp, #24]
 80124bc:	9a06      	ldr	r2, [sp, #24]
 80124be:	9b04      	ldr	r3, [sp, #16]
 80124c0:	4313      	orrs	r3, r2
 80124c2:	d102      	bne.n	80124ca <__ieee754_pow+0x202>
 80124c4:	4632      	mov	r2, r6
 80124c6:	463b      	mov	r3, r7
 80124c8:	e7e6      	b.n	8012498 <__ieee754_pow+0x1d0>
 80124ca:	4b19      	ldr	r3, [pc, #100]	; (8012530 <__ieee754_pow+0x268>)
 80124cc:	4598      	cmp	r8, r3
 80124ce:	f340 80fb 	ble.w	80126c8 <__ieee754_pow+0x400>
 80124d2:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80124d6:	4598      	cmp	r8, r3
 80124d8:	4b13      	ldr	r3, [pc, #76]	; (8012528 <__ieee754_pow+0x260>)
 80124da:	dd0c      	ble.n	80124f6 <__ieee754_pow+0x22e>
 80124dc:	429c      	cmp	r4, r3
 80124de:	dc0f      	bgt.n	8012500 <__ieee754_pow+0x238>
 80124e0:	f1b9 0f00 	cmp.w	r9, #0
 80124e4:	da0f      	bge.n	8012506 <__ieee754_pow+0x23e>
 80124e6:	2000      	movs	r0, #0
 80124e8:	b009      	add	sp, #36	; 0x24
 80124ea:	ecbd 8b06 	vpop	{d8-d10}
 80124ee:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80124f2:	f000 bcf0 	b.w	8012ed6 <__math_oflow>
 80124f6:	429c      	cmp	r4, r3
 80124f8:	dbf2      	blt.n	80124e0 <__ieee754_pow+0x218>
 80124fa:	4b0a      	ldr	r3, [pc, #40]	; (8012524 <__ieee754_pow+0x25c>)
 80124fc:	429c      	cmp	r4, r3
 80124fe:	dd19      	ble.n	8012534 <__ieee754_pow+0x26c>
 8012500:	f1b9 0f00 	cmp.w	r9, #0
 8012504:	dcef      	bgt.n	80124e6 <__ieee754_pow+0x21e>
 8012506:	2000      	movs	r0, #0
 8012508:	b009      	add	sp, #36	; 0x24
 801250a:	ecbd 8b06 	vpop	{d8-d10}
 801250e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012512:	f000 bcd7 	b.w	8012ec4 <__math_uflow>
 8012516:	bf00      	nop
 8012518:	fff00000 	.word	0xfff00000
 801251c:	7ff00000 	.word	0x7ff00000
 8012520:	433fffff 	.word	0x433fffff
 8012524:	3ff00000 	.word	0x3ff00000
 8012528:	3fefffff 	.word	0x3fefffff
 801252c:	3fe00000 	.word	0x3fe00000
 8012530:	41e00000 	.word	0x41e00000
 8012534:	4b60      	ldr	r3, [pc, #384]	; (80126b8 <__ieee754_pow+0x3f0>)
 8012536:	2200      	movs	r2, #0
 8012538:	f7ed fe7e 	bl	8000238 <__aeabi_dsub>
 801253c:	a354      	add	r3, pc, #336	; (adr r3, 8012690 <__ieee754_pow+0x3c8>)
 801253e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012542:	4604      	mov	r4, r0
 8012544:	460d      	mov	r5, r1
 8012546:	f7ee f82f 	bl	80005a8 <__aeabi_dmul>
 801254a:	a353      	add	r3, pc, #332	; (adr r3, 8012698 <__ieee754_pow+0x3d0>)
 801254c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012550:	4606      	mov	r6, r0
 8012552:	460f      	mov	r7, r1
 8012554:	4620      	mov	r0, r4
 8012556:	4629      	mov	r1, r5
 8012558:	f7ee f826 	bl	80005a8 <__aeabi_dmul>
 801255c:	4b57      	ldr	r3, [pc, #348]	; (80126bc <__ieee754_pow+0x3f4>)
 801255e:	4682      	mov	sl, r0
 8012560:	468b      	mov	fp, r1
 8012562:	2200      	movs	r2, #0
 8012564:	4620      	mov	r0, r4
 8012566:	4629      	mov	r1, r5
 8012568:	f7ee f81e 	bl	80005a8 <__aeabi_dmul>
 801256c:	4602      	mov	r2, r0
 801256e:	460b      	mov	r3, r1
 8012570:	a14b      	add	r1, pc, #300	; (adr r1, 80126a0 <__ieee754_pow+0x3d8>)
 8012572:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012576:	f7ed fe5f 	bl	8000238 <__aeabi_dsub>
 801257a:	4622      	mov	r2, r4
 801257c:	462b      	mov	r3, r5
 801257e:	f7ee f813 	bl	80005a8 <__aeabi_dmul>
 8012582:	4602      	mov	r2, r0
 8012584:	460b      	mov	r3, r1
 8012586:	2000      	movs	r0, #0
 8012588:	494d      	ldr	r1, [pc, #308]	; (80126c0 <__ieee754_pow+0x3f8>)
 801258a:	f7ed fe55 	bl	8000238 <__aeabi_dsub>
 801258e:	4622      	mov	r2, r4
 8012590:	4680      	mov	r8, r0
 8012592:	4689      	mov	r9, r1
 8012594:	462b      	mov	r3, r5
 8012596:	4620      	mov	r0, r4
 8012598:	4629      	mov	r1, r5
 801259a:	f7ee f805 	bl	80005a8 <__aeabi_dmul>
 801259e:	4602      	mov	r2, r0
 80125a0:	460b      	mov	r3, r1
 80125a2:	4640      	mov	r0, r8
 80125a4:	4649      	mov	r1, r9
 80125a6:	f7ed ffff 	bl	80005a8 <__aeabi_dmul>
 80125aa:	a33f      	add	r3, pc, #252	; (adr r3, 80126a8 <__ieee754_pow+0x3e0>)
 80125ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125b0:	f7ed fffa 	bl	80005a8 <__aeabi_dmul>
 80125b4:	4602      	mov	r2, r0
 80125b6:	460b      	mov	r3, r1
 80125b8:	4650      	mov	r0, sl
 80125ba:	4659      	mov	r1, fp
 80125bc:	f7ed fe3c 	bl	8000238 <__aeabi_dsub>
 80125c0:	4602      	mov	r2, r0
 80125c2:	460b      	mov	r3, r1
 80125c4:	4680      	mov	r8, r0
 80125c6:	4689      	mov	r9, r1
 80125c8:	4630      	mov	r0, r6
 80125ca:	4639      	mov	r1, r7
 80125cc:	f7ed fe36 	bl	800023c <__adddf3>
 80125d0:	2000      	movs	r0, #0
 80125d2:	4632      	mov	r2, r6
 80125d4:	463b      	mov	r3, r7
 80125d6:	4604      	mov	r4, r0
 80125d8:	460d      	mov	r5, r1
 80125da:	f7ed fe2d 	bl	8000238 <__aeabi_dsub>
 80125de:	4602      	mov	r2, r0
 80125e0:	460b      	mov	r3, r1
 80125e2:	4640      	mov	r0, r8
 80125e4:	4649      	mov	r1, r9
 80125e6:	f7ed fe27 	bl	8000238 <__aeabi_dsub>
 80125ea:	9b04      	ldr	r3, [sp, #16]
 80125ec:	9a06      	ldr	r2, [sp, #24]
 80125ee:	3b01      	subs	r3, #1
 80125f0:	4313      	orrs	r3, r2
 80125f2:	4682      	mov	sl, r0
 80125f4:	468b      	mov	fp, r1
 80125f6:	f040 81e7 	bne.w	80129c8 <__ieee754_pow+0x700>
 80125fa:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 80126b0 <__ieee754_pow+0x3e8>
 80125fe:	eeb0 8a47 	vmov.f32	s16, s14
 8012602:	eef0 8a67 	vmov.f32	s17, s15
 8012606:	e9dd 6700 	ldrd	r6, r7, [sp]
 801260a:	2600      	movs	r6, #0
 801260c:	4632      	mov	r2, r6
 801260e:	463b      	mov	r3, r7
 8012610:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012614:	f7ed fe10 	bl	8000238 <__aeabi_dsub>
 8012618:	4622      	mov	r2, r4
 801261a:	462b      	mov	r3, r5
 801261c:	f7ed ffc4 	bl	80005a8 <__aeabi_dmul>
 8012620:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012624:	4680      	mov	r8, r0
 8012626:	4689      	mov	r9, r1
 8012628:	4650      	mov	r0, sl
 801262a:	4659      	mov	r1, fp
 801262c:	f7ed ffbc 	bl	80005a8 <__aeabi_dmul>
 8012630:	4602      	mov	r2, r0
 8012632:	460b      	mov	r3, r1
 8012634:	4640      	mov	r0, r8
 8012636:	4649      	mov	r1, r9
 8012638:	f7ed fe00 	bl	800023c <__adddf3>
 801263c:	4632      	mov	r2, r6
 801263e:	463b      	mov	r3, r7
 8012640:	4680      	mov	r8, r0
 8012642:	4689      	mov	r9, r1
 8012644:	4620      	mov	r0, r4
 8012646:	4629      	mov	r1, r5
 8012648:	f7ed ffae 	bl	80005a8 <__aeabi_dmul>
 801264c:	460b      	mov	r3, r1
 801264e:	4604      	mov	r4, r0
 8012650:	460d      	mov	r5, r1
 8012652:	4602      	mov	r2, r0
 8012654:	4649      	mov	r1, r9
 8012656:	4640      	mov	r0, r8
 8012658:	f7ed fdf0 	bl	800023c <__adddf3>
 801265c:	4b19      	ldr	r3, [pc, #100]	; (80126c4 <__ieee754_pow+0x3fc>)
 801265e:	4299      	cmp	r1, r3
 8012660:	ec45 4b19 	vmov	d9, r4, r5
 8012664:	4606      	mov	r6, r0
 8012666:	460f      	mov	r7, r1
 8012668:	468b      	mov	fp, r1
 801266a:	f340 82f1 	ble.w	8012c50 <__ieee754_pow+0x988>
 801266e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8012672:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8012676:	4303      	orrs	r3, r0
 8012678:	f000 81e4 	beq.w	8012a44 <__ieee754_pow+0x77c>
 801267c:	ec51 0b18 	vmov	r0, r1, d8
 8012680:	2200      	movs	r2, #0
 8012682:	2300      	movs	r3, #0
 8012684:	f7ee fa02 	bl	8000a8c <__aeabi_dcmplt>
 8012688:	3800      	subs	r0, #0
 801268a:	bf18      	it	ne
 801268c:	2001      	movne	r0, #1
 801268e:	e72b      	b.n	80124e8 <__ieee754_pow+0x220>
 8012690:	60000000 	.word	0x60000000
 8012694:	3ff71547 	.word	0x3ff71547
 8012698:	f85ddf44 	.word	0xf85ddf44
 801269c:	3e54ae0b 	.word	0x3e54ae0b
 80126a0:	55555555 	.word	0x55555555
 80126a4:	3fd55555 	.word	0x3fd55555
 80126a8:	652b82fe 	.word	0x652b82fe
 80126ac:	3ff71547 	.word	0x3ff71547
 80126b0:	00000000 	.word	0x00000000
 80126b4:	bff00000 	.word	0xbff00000
 80126b8:	3ff00000 	.word	0x3ff00000
 80126bc:	3fd00000 	.word	0x3fd00000
 80126c0:	3fe00000 	.word	0x3fe00000
 80126c4:	408fffff 	.word	0x408fffff
 80126c8:	4bd5      	ldr	r3, [pc, #852]	; (8012a20 <__ieee754_pow+0x758>)
 80126ca:	402b      	ands	r3, r5
 80126cc:	2200      	movs	r2, #0
 80126ce:	b92b      	cbnz	r3, 80126dc <__ieee754_pow+0x414>
 80126d0:	4bd4      	ldr	r3, [pc, #848]	; (8012a24 <__ieee754_pow+0x75c>)
 80126d2:	f7ed ff69 	bl	80005a8 <__aeabi_dmul>
 80126d6:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80126da:	460c      	mov	r4, r1
 80126dc:	1523      	asrs	r3, r4, #20
 80126de:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80126e2:	4413      	add	r3, r2
 80126e4:	9305      	str	r3, [sp, #20]
 80126e6:	4bd0      	ldr	r3, [pc, #832]	; (8012a28 <__ieee754_pow+0x760>)
 80126e8:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80126ec:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80126f0:	429c      	cmp	r4, r3
 80126f2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80126f6:	dd08      	ble.n	801270a <__ieee754_pow+0x442>
 80126f8:	4bcc      	ldr	r3, [pc, #816]	; (8012a2c <__ieee754_pow+0x764>)
 80126fa:	429c      	cmp	r4, r3
 80126fc:	f340 8162 	ble.w	80129c4 <__ieee754_pow+0x6fc>
 8012700:	9b05      	ldr	r3, [sp, #20]
 8012702:	3301      	adds	r3, #1
 8012704:	9305      	str	r3, [sp, #20]
 8012706:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 801270a:	2400      	movs	r4, #0
 801270c:	00e3      	lsls	r3, r4, #3
 801270e:	9307      	str	r3, [sp, #28]
 8012710:	4bc7      	ldr	r3, [pc, #796]	; (8012a30 <__ieee754_pow+0x768>)
 8012712:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8012716:	ed93 7b00 	vldr	d7, [r3]
 801271a:	4629      	mov	r1, r5
 801271c:	ec53 2b17 	vmov	r2, r3, d7
 8012720:	eeb0 9a47 	vmov.f32	s18, s14
 8012724:	eef0 9a67 	vmov.f32	s19, s15
 8012728:	4682      	mov	sl, r0
 801272a:	f7ed fd85 	bl	8000238 <__aeabi_dsub>
 801272e:	4652      	mov	r2, sl
 8012730:	4606      	mov	r6, r0
 8012732:	460f      	mov	r7, r1
 8012734:	462b      	mov	r3, r5
 8012736:	ec51 0b19 	vmov	r0, r1, d9
 801273a:	f7ed fd7f 	bl	800023c <__adddf3>
 801273e:	4602      	mov	r2, r0
 8012740:	460b      	mov	r3, r1
 8012742:	2000      	movs	r0, #0
 8012744:	49bb      	ldr	r1, [pc, #748]	; (8012a34 <__ieee754_pow+0x76c>)
 8012746:	f7ee f859 	bl	80007fc <__aeabi_ddiv>
 801274a:	ec41 0b1a 	vmov	d10, r0, r1
 801274e:	4602      	mov	r2, r0
 8012750:	460b      	mov	r3, r1
 8012752:	4630      	mov	r0, r6
 8012754:	4639      	mov	r1, r7
 8012756:	f7ed ff27 	bl	80005a8 <__aeabi_dmul>
 801275a:	2300      	movs	r3, #0
 801275c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012760:	9302      	str	r3, [sp, #8]
 8012762:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8012766:	46ab      	mov	fp, r5
 8012768:	106d      	asrs	r5, r5, #1
 801276a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 801276e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8012772:	ec41 0b18 	vmov	d8, r0, r1
 8012776:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 801277a:	2200      	movs	r2, #0
 801277c:	4640      	mov	r0, r8
 801277e:	4649      	mov	r1, r9
 8012780:	4614      	mov	r4, r2
 8012782:	461d      	mov	r5, r3
 8012784:	f7ed ff10 	bl	80005a8 <__aeabi_dmul>
 8012788:	4602      	mov	r2, r0
 801278a:	460b      	mov	r3, r1
 801278c:	4630      	mov	r0, r6
 801278e:	4639      	mov	r1, r7
 8012790:	f7ed fd52 	bl	8000238 <__aeabi_dsub>
 8012794:	ec53 2b19 	vmov	r2, r3, d9
 8012798:	4606      	mov	r6, r0
 801279a:	460f      	mov	r7, r1
 801279c:	4620      	mov	r0, r4
 801279e:	4629      	mov	r1, r5
 80127a0:	f7ed fd4a 	bl	8000238 <__aeabi_dsub>
 80127a4:	4602      	mov	r2, r0
 80127a6:	460b      	mov	r3, r1
 80127a8:	4650      	mov	r0, sl
 80127aa:	4659      	mov	r1, fp
 80127ac:	f7ed fd44 	bl	8000238 <__aeabi_dsub>
 80127b0:	4642      	mov	r2, r8
 80127b2:	464b      	mov	r3, r9
 80127b4:	f7ed fef8 	bl	80005a8 <__aeabi_dmul>
 80127b8:	4602      	mov	r2, r0
 80127ba:	460b      	mov	r3, r1
 80127bc:	4630      	mov	r0, r6
 80127be:	4639      	mov	r1, r7
 80127c0:	f7ed fd3a 	bl	8000238 <__aeabi_dsub>
 80127c4:	ec53 2b1a 	vmov	r2, r3, d10
 80127c8:	f7ed feee 	bl	80005a8 <__aeabi_dmul>
 80127cc:	ec53 2b18 	vmov	r2, r3, d8
 80127d0:	ec41 0b19 	vmov	d9, r0, r1
 80127d4:	ec51 0b18 	vmov	r0, r1, d8
 80127d8:	f7ed fee6 	bl	80005a8 <__aeabi_dmul>
 80127dc:	a37c      	add	r3, pc, #496	; (adr r3, 80129d0 <__ieee754_pow+0x708>)
 80127de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80127e2:	4604      	mov	r4, r0
 80127e4:	460d      	mov	r5, r1
 80127e6:	f7ed fedf 	bl	80005a8 <__aeabi_dmul>
 80127ea:	a37b      	add	r3, pc, #492	; (adr r3, 80129d8 <__ieee754_pow+0x710>)
 80127ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80127f0:	f7ed fd24 	bl	800023c <__adddf3>
 80127f4:	4622      	mov	r2, r4
 80127f6:	462b      	mov	r3, r5
 80127f8:	f7ed fed6 	bl	80005a8 <__aeabi_dmul>
 80127fc:	a378      	add	r3, pc, #480	; (adr r3, 80129e0 <__ieee754_pow+0x718>)
 80127fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012802:	f7ed fd1b 	bl	800023c <__adddf3>
 8012806:	4622      	mov	r2, r4
 8012808:	462b      	mov	r3, r5
 801280a:	f7ed fecd 	bl	80005a8 <__aeabi_dmul>
 801280e:	a376      	add	r3, pc, #472	; (adr r3, 80129e8 <__ieee754_pow+0x720>)
 8012810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012814:	f7ed fd12 	bl	800023c <__adddf3>
 8012818:	4622      	mov	r2, r4
 801281a:	462b      	mov	r3, r5
 801281c:	f7ed fec4 	bl	80005a8 <__aeabi_dmul>
 8012820:	a373      	add	r3, pc, #460	; (adr r3, 80129f0 <__ieee754_pow+0x728>)
 8012822:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012826:	f7ed fd09 	bl	800023c <__adddf3>
 801282a:	4622      	mov	r2, r4
 801282c:	462b      	mov	r3, r5
 801282e:	f7ed febb 	bl	80005a8 <__aeabi_dmul>
 8012832:	a371      	add	r3, pc, #452	; (adr r3, 80129f8 <__ieee754_pow+0x730>)
 8012834:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012838:	f7ed fd00 	bl	800023c <__adddf3>
 801283c:	4622      	mov	r2, r4
 801283e:	4606      	mov	r6, r0
 8012840:	460f      	mov	r7, r1
 8012842:	462b      	mov	r3, r5
 8012844:	4620      	mov	r0, r4
 8012846:	4629      	mov	r1, r5
 8012848:	f7ed feae 	bl	80005a8 <__aeabi_dmul>
 801284c:	4602      	mov	r2, r0
 801284e:	460b      	mov	r3, r1
 8012850:	4630      	mov	r0, r6
 8012852:	4639      	mov	r1, r7
 8012854:	f7ed fea8 	bl	80005a8 <__aeabi_dmul>
 8012858:	4642      	mov	r2, r8
 801285a:	4604      	mov	r4, r0
 801285c:	460d      	mov	r5, r1
 801285e:	464b      	mov	r3, r9
 8012860:	ec51 0b18 	vmov	r0, r1, d8
 8012864:	f7ed fcea 	bl	800023c <__adddf3>
 8012868:	ec53 2b19 	vmov	r2, r3, d9
 801286c:	f7ed fe9c 	bl	80005a8 <__aeabi_dmul>
 8012870:	4622      	mov	r2, r4
 8012872:	462b      	mov	r3, r5
 8012874:	f7ed fce2 	bl	800023c <__adddf3>
 8012878:	4642      	mov	r2, r8
 801287a:	4682      	mov	sl, r0
 801287c:	468b      	mov	fp, r1
 801287e:	464b      	mov	r3, r9
 8012880:	4640      	mov	r0, r8
 8012882:	4649      	mov	r1, r9
 8012884:	f7ed fe90 	bl	80005a8 <__aeabi_dmul>
 8012888:	4b6b      	ldr	r3, [pc, #428]	; (8012a38 <__ieee754_pow+0x770>)
 801288a:	2200      	movs	r2, #0
 801288c:	4606      	mov	r6, r0
 801288e:	460f      	mov	r7, r1
 8012890:	f7ed fcd4 	bl	800023c <__adddf3>
 8012894:	4652      	mov	r2, sl
 8012896:	465b      	mov	r3, fp
 8012898:	f7ed fcd0 	bl	800023c <__adddf3>
 801289c:	2000      	movs	r0, #0
 801289e:	4604      	mov	r4, r0
 80128a0:	460d      	mov	r5, r1
 80128a2:	4602      	mov	r2, r0
 80128a4:	460b      	mov	r3, r1
 80128a6:	4640      	mov	r0, r8
 80128a8:	4649      	mov	r1, r9
 80128aa:	f7ed fe7d 	bl	80005a8 <__aeabi_dmul>
 80128ae:	4b62      	ldr	r3, [pc, #392]	; (8012a38 <__ieee754_pow+0x770>)
 80128b0:	4680      	mov	r8, r0
 80128b2:	4689      	mov	r9, r1
 80128b4:	2200      	movs	r2, #0
 80128b6:	4620      	mov	r0, r4
 80128b8:	4629      	mov	r1, r5
 80128ba:	f7ed fcbd 	bl	8000238 <__aeabi_dsub>
 80128be:	4632      	mov	r2, r6
 80128c0:	463b      	mov	r3, r7
 80128c2:	f7ed fcb9 	bl	8000238 <__aeabi_dsub>
 80128c6:	4602      	mov	r2, r0
 80128c8:	460b      	mov	r3, r1
 80128ca:	4650      	mov	r0, sl
 80128cc:	4659      	mov	r1, fp
 80128ce:	f7ed fcb3 	bl	8000238 <__aeabi_dsub>
 80128d2:	ec53 2b18 	vmov	r2, r3, d8
 80128d6:	f7ed fe67 	bl	80005a8 <__aeabi_dmul>
 80128da:	4622      	mov	r2, r4
 80128dc:	4606      	mov	r6, r0
 80128de:	460f      	mov	r7, r1
 80128e0:	462b      	mov	r3, r5
 80128e2:	ec51 0b19 	vmov	r0, r1, d9
 80128e6:	f7ed fe5f 	bl	80005a8 <__aeabi_dmul>
 80128ea:	4602      	mov	r2, r0
 80128ec:	460b      	mov	r3, r1
 80128ee:	4630      	mov	r0, r6
 80128f0:	4639      	mov	r1, r7
 80128f2:	f7ed fca3 	bl	800023c <__adddf3>
 80128f6:	4606      	mov	r6, r0
 80128f8:	460f      	mov	r7, r1
 80128fa:	4602      	mov	r2, r0
 80128fc:	460b      	mov	r3, r1
 80128fe:	4640      	mov	r0, r8
 8012900:	4649      	mov	r1, r9
 8012902:	f7ed fc9b 	bl	800023c <__adddf3>
 8012906:	a33e      	add	r3, pc, #248	; (adr r3, 8012a00 <__ieee754_pow+0x738>)
 8012908:	e9d3 2300 	ldrd	r2, r3, [r3]
 801290c:	2000      	movs	r0, #0
 801290e:	4604      	mov	r4, r0
 8012910:	460d      	mov	r5, r1
 8012912:	f7ed fe49 	bl	80005a8 <__aeabi_dmul>
 8012916:	4642      	mov	r2, r8
 8012918:	ec41 0b18 	vmov	d8, r0, r1
 801291c:	464b      	mov	r3, r9
 801291e:	4620      	mov	r0, r4
 8012920:	4629      	mov	r1, r5
 8012922:	f7ed fc89 	bl	8000238 <__aeabi_dsub>
 8012926:	4602      	mov	r2, r0
 8012928:	460b      	mov	r3, r1
 801292a:	4630      	mov	r0, r6
 801292c:	4639      	mov	r1, r7
 801292e:	f7ed fc83 	bl	8000238 <__aeabi_dsub>
 8012932:	a335      	add	r3, pc, #212	; (adr r3, 8012a08 <__ieee754_pow+0x740>)
 8012934:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012938:	f7ed fe36 	bl	80005a8 <__aeabi_dmul>
 801293c:	a334      	add	r3, pc, #208	; (adr r3, 8012a10 <__ieee754_pow+0x748>)
 801293e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012942:	4606      	mov	r6, r0
 8012944:	460f      	mov	r7, r1
 8012946:	4620      	mov	r0, r4
 8012948:	4629      	mov	r1, r5
 801294a:	f7ed fe2d 	bl	80005a8 <__aeabi_dmul>
 801294e:	4602      	mov	r2, r0
 8012950:	460b      	mov	r3, r1
 8012952:	4630      	mov	r0, r6
 8012954:	4639      	mov	r1, r7
 8012956:	f7ed fc71 	bl	800023c <__adddf3>
 801295a:	9a07      	ldr	r2, [sp, #28]
 801295c:	4b37      	ldr	r3, [pc, #220]	; (8012a3c <__ieee754_pow+0x774>)
 801295e:	4413      	add	r3, r2
 8012960:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012964:	f7ed fc6a 	bl	800023c <__adddf3>
 8012968:	4682      	mov	sl, r0
 801296a:	9805      	ldr	r0, [sp, #20]
 801296c:	468b      	mov	fp, r1
 801296e:	f7ed fdb1 	bl	80004d4 <__aeabi_i2d>
 8012972:	9a07      	ldr	r2, [sp, #28]
 8012974:	4b32      	ldr	r3, [pc, #200]	; (8012a40 <__ieee754_pow+0x778>)
 8012976:	4413      	add	r3, r2
 8012978:	e9d3 8900 	ldrd	r8, r9, [r3]
 801297c:	4606      	mov	r6, r0
 801297e:	460f      	mov	r7, r1
 8012980:	4652      	mov	r2, sl
 8012982:	465b      	mov	r3, fp
 8012984:	ec51 0b18 	vmov	r0, r1, d8
 8012988:	f7ed fc58 	bl	800023c <__adddf3>
 801298c:	4642      	mov	r2, r8
 801298e:	464b      	mov	r3, r9
 8012990:	f7ed fc54 	bl	800023c <__adddf3>
 8012994:	4632      	mov	r2, r6
 8012996:	463b      	mov	r3, r7
 8012998:	f7ed fc50 	bl	800023c <__adddf3>
 801299c:	2000      	movs	r0, #0
 801299e:	4632      	mov	r2, r6
 80129a0:	463b      	mov	r3, r7
 80129a2:	4604      	mov	r4, r0
 80129a4:	460d      	mov	r5, r1
 80129a6:	f7ed fc47 	bl	8000238 <__aeabi_dsub>
 80129aa:	4642      	mov	r2, r8
 80129ac:	464b      	mov	r3, r9
 80129ae:	f7ed fc43 	bl	8000238 <__aeabi_dsub>
 80129b2:	ec53 2b18 	vmov	r2, r3, d8
 80129b6:	f7ed fc3f 	bl	8000238 <__aeabi_dsub>
 80129ba:	4602      	mov	r2, r0
 80129bc:	460b      	mov	r3, r1
 80129be:	4650      	mov	r0, sl
 80129c0:	4659      	mov	r1, fp
 80129c2:	e610      	b.n	80125e6 <__ieee754_pow+0x31e>
 80129c4:	2401      	movs	r4, #1
 80129c6:	e6a1      	b.n	801270c <__ieee754_pow+0x444>
 80129c8:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8012a18 <__ieee754_pow+0x750>
 80129cc:	e617      	b.n	80125fe <__ieee754_pow+0x336>
 80129ce:	bf00      	nop
 80129d0:	4a454eef 	.word	0x4a454eef
 80129d4:	3fca7e28 	.word	0x3fca7e28
 80129d8:	93c9db65 	.word	0x93c9db65
 80129dc:	3fcd864a 	.word	0x3fcd864a
 80129e0:	a91d4101 	.word	0xa91d4101
 80129e4:	3fd17460 	.word	0x3fd17460
 80129e8:	518f264d 	.word	0x518f264d
 80129ec:	3fd55555 	.word	0x3fd55555
 80129f0:	db6fabff 	.word	0xdb6fabff
 80129f4:	3fdb6db6 	.word	0x3fdb6db6
 80129f8:	33333303 	.word	0x33333303
 80129fc:	3fe33333 	.word	0x3fe33333
 8012a00:	e0000000 	.word	0xe0000000
 8012a04:	3feec709 	.word	0x3feec709
 8012a08:	dc3a03fd 	.word	0xdc3a03fd
 8012a0c:	3feec709 	.word	0x3feec709
 8012a10:	145b01f5 	.word	0x145b01f5
 8012a14:	be3e2fe0 	.word	0xbe3e2fe0
 8012a18:	00000000 	.word	0x00000000
 8012a1c:	3ff00000 	.word	0x3ff00000
 8012a20:	7ff00000 	.word	0x7ff00000
 8012a24:	43400000 	.word	0x43400000
 8012a28:	0003988e 	.word	0x0003988e
 8012a2c:	000bb679 	.word	0x000bb679
 8012a30:	08017f78 	.word	0x08017f78
 8012a34:	3ff00000 	.word	0x3ff00000
 8012a38:	40080000 	.word	0x40080000
 8012a3c:	08017f98 	.word	0x08017f98
 8012a40:	08017f88 	.word	0x08017f88
 8012a44:	a3b5      	add	r3, pc, #724	; (adr r3, 8012d1c <__ieee754_pow+0xa54>)
 8012a46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a4a:	4640      	mov	r0, r8
 8012a4c:	4649      	mov	r1, r9
 8012a4e:	f7ed fbf5 	bl	800023c <__adddf3>
 8012a52:	4622      	mov	r2, r4
 8012a54:	ec41 0b1a 	vmov	d10, r0, r1
 8012a58:	462b      	mov	r3, r5
 8012a5a:	4630      	mov	r0, r6
 8012a5c:	4639      	mov	r1, r7
 8012a5e:	f7ed fbeb 	bl	8000238 <__aeabi_dsub>
 8012a62:	4602      	mov	r2, r0
 8012a64:	460b      	mov	r3, r1
 8012a66:	ec51 0b1a 	vmov	r0, r1, d10
 8012a6a:	f7ee f82d 	bl	8000ac8 <__aeabi_dcmpgt>
 8012a6e:	2800      	cmp	r0, #0
 8012a70:	f47f ae04 	bne.w	801267c <__ieee754_pow+0x3b4>
 8012a74:	4aa4      	ldr	r2, [pc, #656]	; (8012d08 <__ieee754_pow+0xa40>)
 8012a76:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8012a7a:	4293      	cmp	r3, r2
 8012a7c:	f340 8108 	ble.w	8012c90 <__ieee754_pow+0x9c8>
 8012a80:	151b      	asrs	r3, r3, #20
 8012a82:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8012a86:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8012a8a:	fa4a f303 	asr.w	r3, sl, r3
 8012a8e:	445b      	add	r3, fp
 8012a90:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8012a94:	4e9d      	ldr	r6, [pc, #628]	; (8012d0c <__ieee754_pow+0xa44>)
 8012a96:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8012a9a:	4116      	asrs	r6, r2
 8012a9c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8012aa0:	2000      	movs	r0, #0
 8012aa2:	ea23 0106 	bic.w	r1, r3, r6
 8012aa6:	f1c2 0214 	rsb	r2, r2, #20
 8012aaa:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8012aae:	fa4a fa02 	asr.w	sl, sl, r2
 8012ab2:	f1bb 0f00 	cmp.w	fp, #0
 8012ab6:	4602      	mov	r2, r0
 8012ab8:	460b      	mov	r3, r1
 8012aba:	4620      	mov	r0, r4
 8012abc:	4629      	mov	r1, r5
 8012abe:	bfb8      	it	lt
 8012ac0:	f1ca 0a00 	rsblt	sl, sl, #0
 8012ac4:	f7ed fbb8 	bl	8000238 <__aeabi_dsub>
 8012ac8:	ec41 0b19 	vmov	d9, r0, r1
 8012acc:	4642      	mov	r2, r8
 8012ace:	464b      	mov	r3, r9
 8012ad0:	ec51 0b19 	vmov	r0, r1, d9
 8012ad4:	f7ed fbb2 	bl	800023c <__adddf3>
 8012ad8:	a37b      	add	r3, pc, #492	; (adr r3, 8012cc8 <__ieee754_pow+0xa00>)
 8012ada:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ade:	2000      	movs	r0, #0
 8012ae0:	4604      	mov	r4, r0
 8012ae2:	460d      	mov	r5, r1
 8012ae4:	f7ed fd60 	bl	80005a8 <__aeabi_dmul>
 8012ae8:	ec53 2b19 	vmov	r2, r3, d9
 8012aec:	4606      	mov	r6, r0
 8012aee:	460f      	mov	r7, r1
 8012af0:	4620      	mov	r0, r4
 8012af2:	4629      	mov	r1, r5
 8012af4:	f7ed fba0 	bl	8000238 <__aeabi_dsub>
 8012af8:	4602      	mov	r2, r0
 8012afa:	460b      	mov	r3, r1
 8012afc:	4640      	mov	r0, r8
 8012afe:	4649      	mov	r1, r9
 8012b00:	f7ed fb9a 	bl	8000238 <__aeabi_dsub>
 8012b04:	a372      	add	r3, pc, #456	; (adr r3, 8012cd0 <__ieee754_pow+0xa08>)
 8012b06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b0a:	f7ed fd4d 	bl	80005a8 <__aeabi_dmul>
 8012b0e:	a372      	add	r3, pc, #456	; (adr r3, 8012cd8 <__ieee754_pow+0xa10>)
 8012b10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b14:	4680      	mov	r8, r0
 8012b16:	4689      	mov	r9, r1
 8012b18:	4620      	mov	r0, r4
 8012b1a:	4629      	mov	r1, r5
 8012b1c:	f7ed fd44 	bl	80005a8 <__aeabi_dmul>
 8012b20:	4602      	mov	r2, r0
 8012b22:	460b      	mov	r3, r1
 8012b24:	4640      	mov	r0, r8
 8012b26:	4649      	mov	r1, r9
 8012b28:	f7ed fb88 	bl	800023c <__adddf3>
 8012b2c:	4604      	mov	r4, r0
 8012b2e:	460d      	mov	r5, r1
 8012b30:	4602      	mov	r2, r0
 8012b32:	460b      	mov	r3, r1
 8012b34:	4630      	mov	r0, r6
 8012b36:	4639      	mov	r1, r7
 8012b38:	f7ed fb80 	bl	800023c <__adddf3>
 8012b3c:	4632      	mov	r2, r6
 8012b3e:	463b      	mov	r3, r7
 8012b40:	4680      	mov	r8, r0
 8012b42:	4689      	mov	r9, r1
 8012b44:	f7ed fb78 	bl	8000238 <__aeabi_dsub>
 8012b48:	4602      	mov	r2, r0
 8012b4a:	460b      	mov	r3, r1
 8012b4c:	4620      	mov	r0, r4
 8012b4e:	4629      	mov	r1, r5
 8012b50:	f7ed fb72 	bl	8000238 <__aeabi_dsub>
 8012b54:	4642      	mov	r2, r8
 8012b56:	4606      	mov	r6, r0
 8012b58:	460f      	mov	r7, r1
 8012b5a:	464b      	mov	r3, r9
 8012b5c:	4640      	mov	r0, r8
 8012b5e:	4649      	mov	r1, r9
 8012b60:	f7ed fd22 	bl	80005a8 <__aeabi_dmul>
 8012b64:	a35e      	add	r3, pc, #376	; (adr r3, 8012ce0 <__ieee754_pow+0xa18>)
 8012b66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b6a:	4604      	mov	r4, r0
 8012b6c:	460d      	mov	r5, r1
 8012b6e:	f7ed fd1b 	bl	80005a8 <__aeabi_dmul>
 8012b72:	a35d      	add	r3, pc, #372	; (adr r3, 8012ce8 <__ieee754_pow+0xa20>)
 8012b74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b78:	f7ed fb5e 	bl	8000238 <__aeabi_dsub>
 8012b7c:	4622      	mov	r2, r4
 8012b7e:	462b      	mov	r3, r5
 8012b80:	f7ed fd12 	bl	80005a8 <__aeabi_dmul>
 8012b84:	a35a      	add	r3, pc, #360	; (adr r3, 8012cf0 <__ieee754_pow+0xa28>)
 8012b86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b8a:	f7ed fb57 	bl	800023c <__adddf3>
 8012b8e:	4622      	mov	r2, r4
 8012b90:	462b      	mov	r3, r5
 8012b92:	f7ed fd09 	bl	80005a8 <__aeabi_dmul>
 8012b96:	a358      	add	r3, pc, #352	; (adr r3, 8012cf8 <__ieee754_pow+0xa30>)
 8012b98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b9c:	f7ed fb4c 	bl	8000238 <__aeabi_dsub>
 8012ba0:	4622      	mov	r2, r4
 8012ba2:	462b      	mov	r3, r5
 8012ba4:	f7ed fd00 	bl	80005a8 <__aeabi_dmul>
 8012ba8:	a355      	add	r3, pc, #340	; (adr r3, 8012d00 <__ieee754_pow+0xa38>)
 8012baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012bae:	f7ed fb45 	bl	800023c <__adddf3>
 8012bb2:	4622      	mov	r2, r4
 8012bb4:	462b      	mov	r3, r5
 8012bb6:	f7ed fcf7 	bl	80005a8 <__aeabi_dmul>
 8012bba:	4602      	mov	r2, r0
 8012bbc:	460b      	mov	r3, r1
 8012bbe:	4640      	mov	r0, r8
 8012bc0:	4649      	mov	r1, r9
 8012bc2:	f7ed fb39 	bl	8000238 <__aeabi_dsub>
 8012bc6:	4604      	mov	r4, r0
 8012bc8:	460d      	mov	r5, r1
 8012bca:	4602      	mov	r2, r0
 8012bcc:	460b      	mov	r3, r1
 8012bce:	4640      	mov	r0, r8
 8012bd0:	4649      	mov	r1, r9
 8012bd2:	f7ed fce9 	bl	80005a8 <__aeabi_dmul>
 8012bd6:	2200      	movs	r2, #0
 8012bd8:	ec41 0b19 	vmov	d9, r0, r1
 8012bdc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8012be0:	4620      	mov	r0, r4
 8012be2:	4629      	mov	r1, r5
 8012be4:	f7ed fb28 	bl	8000238 <__aeabi_dsub>
 8012be8:	4602      	mov	r2, r0
 8012bea:	460b      	mov	r3, r1
 8012bec:	ec51 0b19 	vmov	r0, r1, d9
 8012bf0:	f7ed fe04 	bl	80007fc <__aeabi_ddiv>
 8012bf4:	4632      	mov	r2, r6
 8012bf6:	4604      	mov	r4, r0
 8012bf8:	460d      	mov	r5, r1
 8012bfa:	463b      	mov	r3, r7
 8012bfc:	4640      	mov	r0, r8
 8012bfe:	4649      	mov	r1, r9
 8012c00:	f7ed fcd2 	bl	80005a8 <__aeabi_dmul>
 8012c04:	4632      	mov	r2, r6
 8012c06:	463b      	mov	r3, r7
 8012c08:	f7ed fb18 	bl	800023c <__adddf3>
 8012c0c:	4602      	mov	r2, r0
 8012c0e:	460b      	mov	r3, r1
 8012c10:	4620      	mov	r0, r4
 8012c12:	4629      	mov	r1, r5
 8012c14:	f7ed fb10 	bl	8000238 <__aeabi_dsub>
 8012c18:	4642      	mov	r2, r8
 8012c1a:	464b      	mov	r3, r9
 8012c1c:	f7ed fb0c 	bl	8000238 <__aeabi_dsub>
 8012c20:	460b      	mov	r3, r1
 8012c22:	4602      	mov	r2, r0
 8012c24:	493a      	ldr	r1, [pc, #232]	; (8012d10 <__ieee754_pow+0xa48>)
 8012c26:	2000      	movs	r0, #0
 8012c28:	f7ed fb06 	bl	8000238 <__aeabi_dsub>
 8012c2c:	ec41 0b10 	vmov	d0, r0, r1
 8012c30:	ee10 3a90 	vmov	r3, s1
 8012c34:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8012c38:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8012c3c:	da2b      	bge.n	8012c96 <__ieee754_pow+0x9ce>
 8012c3e:	4650      	mov	r0, sl
 8012c40:	f000 f966 	bl	8012f10 <scalbn>
 8012c44:	ec51 0b10 	vmov	r0, r1, d0
 8012c48:	ec53 2b18 	vmov	r2, r3, d8
 8012c4c:	f7ff bbed 	b.w	801242a <__ieee754_pow+0x162>
 8012c50:	4b30      	ldr	r3, [pc, #192]	; (8012d14 <__ieee754_pow+0xa4c>)
 8012c52:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8012c56:	429e      	cmp	r6, r3
 8012c58:	f77f af0c 	ble.w	8012a74 <__ieee754_pow+0x7ac>
 8012c5c:	4b2e      	ldr	r3, [pc, #184]	; (8012d18 <__ieee754_pow+0xa50>)
 8012c5e:	440b      	add	r3, r1
 8012c60:	4303      	orrs	r3, r0
 8012c62:	d009      	beq.n	8012c78 <__ieee754_pow+0x9b0>
 8012c64:	ec51 0b18 	vmov	r0, r1, d8
 8012c68:	2200      	movs	r2, #0
 8012c6a:	2300      	movs	r3, #0
 8012c6c:	f7ed ff0e 	bl	8000a8c <__aeabi_dcmplt>
 8012c70:	3800      	subs	r0, #0
 8012c72:	bf18      	it	ne
 8012c74:	2001      	movne	r0, #1
 8012c76:	e447      	b.n	8012508 <__ieee754_pow+0x240>
 8012c78:	4622      	mov	r2, r4
 8012c7a:	462b      	mov	r3, r5
 8012c7c:	f7ed fadc 	bl	8000238 <__aeabi_dsub>
 8012c80:	4642      	mov	r2, r8
 8012c82:	464b      	mov	r3, r9
 8012c84:	f7ed ff16 	bl	8000ab4 <__aeabi_dcmpge>
 8012c88:	2800      	cmp	r0, #0
 8012c8a:	f43f aef3 	beq.w	8012a74 <__ieee754_pow+0x7ac>
 8012c8e:	e7e9      	b.n	8012c64 <__ieee754_pow+0x99c>
 8012c90:	f04f 0a00 	mov.w	sl, #0
 8012c94:	e71a      	b.n	8012acc <__ieee754_pow+0x804>
 8012c96:	ec51 0b10 	vmov	r0, r1, d0
 8012c9a:	4619      	mov	r1, r3
 8012c9c:	e7d4      	b.n	8012c48 <__ieee754_pow+0x980>
 8012c9e:	491c      	ldr	r1, [pc, #112]	; (8012d10 <__ieee754_pow+0xa48>)
 8012ca0:	2000      	movs	r0, #0
 8012ca2:	f7ff bb30 	b.w	8012306 <__ieee754_pow+0x3e>
 8012ca6:	2000      	movs	r0, #0
 8012ca8:	2100      	movs	r1, #0
 8012caa:	f7ff bb2c 	b.w	8012306 <__ieee754_pow+0x3e>
 8012cae:	4630      	mov	r0, r6
 8012cb0:	4639      	mov	r1, r7
 8012cb2:	f7ff bb28 	b.w	8012306 <__ieee754_pow+0x3e>
 8012cb6:	9204      	str	r2, [sp, #16]
 8012cb8:	f7ff bb7a 	b.w	80123b0 <__ieee754_pow+0xe8>
 8012cbc:	2300      	movs	r3, #0
 8012cbe:	f7ff bb64 	b.w	801238a <__ieee754_pow+0xc2>
 8012cc2:	bf00      	nop
 8012cc4:	f3af 8000 	nop.w
 8012cc8:	00000000 	.word	0x00000000
 8012ccc:	3fe62e43 	.word	0x3fe62e43
 8012cd0:	fefa39ef 	.word	0xfefa39ef
 8012cd4:	3fe62e42 	.word	0x3fe62e42
 8012cd8:	0ca86c39 	.word	0x0ca86c39
 8012cdc:	be205c61 	.word	0xbe205c61
 8012ce0:	72bea4d0 	.word	0x72bea4d0
 8012ce4:	3e663769 	.word	0x3e663769
 8012ce8:	c5d26bf1 	.word	0xc5d26bf1
 8012cec:	3ebbbd41 	.word	0x3ebbbd41
 8012cf0:	af25de2c 	.word	0xaf25de2c
 8012cf4:	3f11566a 	.word	0x3f11566a
 8012cf8:	16bebd93 	.word	0x16bebd93
 8012cfc:	3f66c16c 	.word	0x3f66c16c
 8012d00:	5555553e 	.word	0x5555553e
 8012d04:	3fc55555 	.word	0x3fc55555
 8012d08:	3fe00000 	.word	0x3fe00000
 8012d0c:	000fffff 	.word	0x000fffff
 8012d10:	3ff00000 	.word	0x3ff00000
 8012d14:	4090cbff 	.word	0x4090cbff
 8012d18:	3f6f3400 	.word	0x3f6f3400
 8012d1c:	652b82fe 	.word	0x652b82fe
 8012d20:	3c971547 	.word	0x3c971547

08012d24 <__ieee754_sqrt>:
 8012d24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012d28:	ec55 4b10 	vmov	r4, r5, d0
 8012d2c:	4e55      	ldr	r6, [pc, #340]	; (8012e84 <__ieee754_sqrt+0x160>)
 8012d2e:	43ae      	bics	r6, r5
 8012d30:	ee10 0a10 	vmov	r0, s0
 8012d34:	ee10 3a10 	vmov	r3, s0
 8012d38:	462a      	mov	r2, r5
 8012d3a:	4629      	mov	r1, r5
 8012d3c:	d110      	bne.n	8012d60 <__ieee754_sqrt+0x3c>
 8012d3e:	ee10 2a10 	vmov	r2, s0
 8012d42:	462b      	mov	r3, r5
 8012d44:	f7ed fc30 	bl	80005a8 <__aeabi_dmul>
 8012d48:	4602      	mov	r2, r0
 8012d4a:	460b      	mov	r3, r1
 8012d4c:	4620      	mov	r0, r4
 8012d4e:	4629      	mov	r1, r5
 8012d50:	f7ed fa74 	bl	800023c <__adddf3>
 8012d54:	4604      	mov	r4, r0
 8012d56:	460d      	mov	r5, r1
 8012d58:	ec45 4b10 	vmov	d0, r4, r5
 8012d5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012d60:	2d00      	cmp	r5, #0
 8012d62:	dc10      	bgt.n	8012d86 <__ieee754_sqrt+0x62>
 8012d64:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8012d68:	4330      	orrs	r0, r6
 8012d6a:	d0f5      	beq.n	8012d58 <__ieee754_sqrt+0x34>
 8012d6c:	b15d      	cbz	r5, 8012d86 <__ieee754_sqrt+0x62>
 8012d6e:	ee10 2a10 	vmov	r2, s0
 8012d72:	462b      	mov	r3, r5
 8012d74:	ee10 0a10 	vmov	r0, s0
 8012d78:	f7ed fa5e 	bl	8000238 <__aeabi_dsub>
 8012d7c:	4602      	mov	r2, r0
 8012d7e:	460b      	mov	r3, r1
 8012d80:	f7ed fd3c 	bl	80007fc <__aeabi_ddiv>
 8012d84:	e7e6      	b.n	8012d54 <__ieee754_sqrt+0x30>
 8012d86:	1512      	asrs	r2, r2, #20
 8012d88:	d074      	beq.n	8012e74 <__ieee754_sqrt+0x150>
 8012d8a:	07d4      	lsls	r4, r2, #31
 8012d8c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8012d90:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8012d94:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8012d98:	bf5e      	ittt	pl
 8012d9a:	0fda      	lsrpl	r2, r3, #31
 8012d9c:	005b      	lslpl	r3, r3, #1
 8012d9e:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8012da2:	2400      	movs	r4, #0
 8012da4:	0fda      	lsrs	r2, r3, #31
 8012da6:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8012daa:	107f      	asrs	r7, r7, #1
 8012dac:	005b      	lsls	r3, r3, #1
 8012dae:	2516      	movs	r5, #22
 8012db0:	4620      	mov	r0, r4
 8012db2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8012db6:	1886      	adds	r6, r0, r2
 8012db8:	428e      	cmp	r6, r1
 8012dba:	bfde      	ittt	le
 8012dbc:	1b89      	suble	r1, r1, r6
 8012dbe:	18b0      	addle	r0, r6, r2
 8012dc0:	18a4      	addle	r4, r4, r2
 8012dc2:	0049      	lsls	r1, r1, #1
 8012dc4:	3d01      	subs	r5, #1
 8012dc6:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8012dca:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8012dce:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8012dd2:	d1f0      	bne.n	8012db6 <__ieee754_sqrt+0x92>
 8012dd4:	462a      	mov	r2, r5
 8012dd6:	f04f 0e20 	mov.w	lr, #32
 8012dda:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8012dde:	4281      	cmp	r1, r0
 8012de0:	eb06 0c05 	add.w	ip, r6, r5
 8012de4:	dc02      	bgt.n	8012dec <__ieee754_sqrt+0xc8>
 8012de6:	d113      	bne.n	8012e10 <__ieee754_sqrt+0xec>
 8012de8:	459c      	cmp	ip, r3
 8012dea:	d811      	bhi.n	8012e10 <__ieee754_sqrt+0xec>
 8012dec:	f1bc 0f00 	cmp.w	ip, #0
 8012df0:	eb0c 0506 	add.w	r5, ip, r6
 8012df4:	da43      	bge.n	8012e7e <__ieee754_sqrt+0x15a>
 8012df6:	2d00      	cmp	r5, #0
 8012df8:	db41      	blt.n	8012e7e <__ieee754_sqrt+0x15a>
 8012dfa:	f100 0801 	add.w	r8, r0, #1
 8012dfe:	1a09      	subs	r1, r1, r0
 8012e00:	459c      	cmp	ip, r3
 8012e02:	bf88      	it	hi
 8012e04:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
 8012e08:	eba3 030c 	sub.w	r3, r3, ip
 8012e0c:	4432      	add	r2, r6
 8012e0e:	4640      	mov	r0, r8
 8012e10:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8012e14:	f1be 0e01 	subs.w	lr, lr, #1
 8012e18:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8012e1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8012e20:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8012e24:	d1db      	bne.n	8012dde <__ieee754_sqrt+0xba>
 8012e26:	430b      	orrs	r3, r1
 8012e28:	d006      	beq.n	8012e38 <__ieee754_sqrt+0x114>
 8012e2a:	1c50      	adds	r0, r2, #1
 8012e2c:	bf13      	iteet	ne
 8012e2e:	3201      	addne	r2, #1
 8012e30:	3401      	addeq	r4, #1
 8012e32:	4672      	moveq	r2, lr
 8012e34:	f022 0201 	bicne.w	r2, r2, #1
 8012e38:	1063      	asrs	r3, r4, #1
 8012e3a:	0852      	lsrs	r2, r2, #1
 8012e3c:	07e1      	lsls	r1, r4, #31
 8012e3e:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8012e42:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8012e46:	bf48      	it	mi
 8012e48:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8012e4c:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8012e50:	4614      	mov	r4, r2
 8012e52:	e781      	b.n	8012d58 <__ieee754_sqrt+0x34>
 8012e54:	0ad9      	lsrs	r1, r3, #11
 8012e56:	3815      	subs	r0, #21
 8012e58:	055b      	lsls	r3, r3, #21
 8012e5a:	2900      	cmp	r1, #0
 8012e5c:	d0fa      	beq.n	8012e54 <__ieee754_sqrt+0x130>
 8012e5e:	02cd      	lsls	r5, r1, #11
 8012e60:	d50a      	bpl.n	8012e78 <__ieee754_sqrt+0x154>
 8012e62:	f1c2 0420 	rsb	r4, r2, #32
 8012e66:	fa23 f404 	lsr.w	r4, r3, r4
 8012e6a:	1e55      	subs	r5, r2, #1
 8012e6c:	4093      	lsls	r3, r2
 8012e6e:	4321      	orrs	r1, r4
 8012e70:	1b42      	subs	r2, r0, r5
 8012e72:	e78a      	b.n	8012d8a <__ieee754_sqrt+0x66>
 8012e74:	4610      	mov	r0, r2
 8012e76:	e7f0      	b.n	8012e5a <__ieee754_sqrt+0x136>
 8012e78:	0049      	lsls	r1, r1, #1
 8012e7a:	3201      	adds	r2, #1
 8012e7c:	e7ef      	b.n	8012e5e <__ieee754_sqrt+0x13a>
 8012e7e:	4680      	mov	r8, r0
 8012e80:	e7bd      	b.n	8012dfe <__ieee754_sqrt+0xda>
 8012e82:	bf00      	nop
 8012e84:	7ff00000 	.word	0x7ff00000

08012e88 <with_errno>:
 8012e88:	b570      	push	{r4, r5, r6, lr}
 8012e8a:	4604      	mov	r4, r0
 8012e8c:	460d      	mov	r5, r1
 8012e8e:	4616      	mov	r6, r2
 8012e90:	f000 f8c4 	bl	801301c <__errno>
 8012e94:	4629      	mov	r1, r5
 8012e96:	6006      	str	r6, [r0, #0]
 8012e98:	4620      	mov	r0, r4
 8012e9a:	bd70      	pop	{r4, r5, r6, pc}

08012e9c <xflow>:
 8012e9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012e9e:	4614      	mov	r4, r2
 8012ea0:	461d      	mov	r5, r3
 8012ea2:	b108      	cbz	r0, 8012ea8 <xflow+0xc>
 8012ea4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8012ea8:	e9cd 2300 	strd	r2, r3, [sp]
 8012eac:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012eb0:	4620      	mov	r0, r4
 8012eb2:	4629      	mov	r1, r5
 8012eb4:	f7ed fb78 	bl	80005a8 <__aeabi_dmul>
 8012eb8:	2222      	movs	r2, #34	; 0x22
 8012eba:	b003      	add	sp, #12
 8012ebc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012ec0:	f7ff bfe2 	b.w	8012e88 <with_errno>

08012ec4 <__math_uflow>:
 8012ec4:	b508      	push	{r3, lr}
 8012ec6:	2200      	movs	r2, #0
 8012ec8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8012ecc:	f7ff ffe6 	bl	8012e9c <xflow>
 8012ed0:	ec41 0b10 	vmov	d0, r0, r1
 8012ed4:	bd08      	pop	{r3, pc}

08012ed6 <__math_oflow>:
 8012ed6:	b508      	push	{r3, lr}
 8012ed8:	2200      	movs	r2, #0
 8012eda:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8012ede:	f7ff ffdd 	bl	8012e9c <xflow>
 8012ee2:	ec41 0b10 	vmov	d0, r0, r1
 8012ee6:	bd08      	pop	{r3, pc}

08012ee8 <fabs>:
 8012ee8:	ec51 0b10 	vmov	r0, r1, d0
 8012eec:	ee10 2a10 	vmov	r2, s0
 8012ef0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8012ef4:	ec43 2b10 	vmov	d0, r2, r3
 8012ef8:	4770      	bx	lr

08012efa <finite>:
 8012efa:	b082      	sub	sp, #8
 8012efc:	ed8d 0b00 	vstr	d0, [sp]
 8012f00:	9801      	ldr	r0, [sp, #4]
 8012f02:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8012f06:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8012f0a:	0fc0      	lsrs	r0, r0, #31
 8012f0c:	b002      	add	sp, #8
 8012f0e:	4770      	bx	lr

08012f10 <scalbn>:
 8012f10:	b570      	push	{r4, r5, r6, lr}
 8012f12:	ec55 4b10 	vmov	r4, r5, d0
 8012f16:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8012f1a:	4606      	mov	r6, r0
 8012f1c:	462b      	mov	r3, r5
 8012f1e:	b99a      	cbnz	r2, 8012f48 <scalbn+0x38>
 8012f20:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8012f24:	4323      	orrs	r3, r4
 8012f26:	d036      	beq.n	8012f96 <scalbn+0x86>
 8012f28:	4b39      	ldr	r3, [pc, #228]	; (8013010 <scalbn+0x100>)
 8012f2a:	4629      	mov	r1, r5
 8012f2c:	ee10 0a10 	vmov	r0, s0
 8012f30:	2200      	movs	r2, #0
 8012f32:	f7ed fb39 	bl	80005a8 <__aeabi_dmul>
 8012f36:	4b37      	ldr	r3, [pc, #220]	; (8013014 <scalbn+0x104>)
 8012f38:	429e      	cmp	r6, r3
 8012f3a:	4604      	mov	r4, r0
 8012f3c:	460d      	mov	r5, r1
 8012f3e:	da10      	bge.n	8012f62 <scalbn+0x52>
 8012f40:	a32b      	add	r3, pc, #172	; (adr r3, 8012ff0 <scalbn+0xe0>)
 8012f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f46:	e03a      	b.n	8012fbe <scalbn+0xae>
 8012f48:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8012f4c:	428a      	cmp	r2, r1
 8012f4e:	d10c      	bne.n	8012f6a <scalbn+0x5a>
 8012f50:	ee10 2a10 	vmov	r2, s0
 8012f54:	4620      	mov	r0, r4
 8012f56:	4629      	mov	r1, r5
 8012f58:	f7ed f970 	bl	800023c <__adddf3>
 8012f5c:	4604      	mov	r4, r0
 8012f5e:	460d      	mov	r5, r1
 8012f60:	e019      	b.n	8012f96 <scalbn+0x86>
 8012f62:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8012f66:	460b      	mov	r3, r1
 8012f68:	3a36      	subs	r2, #54	; 0x36
 8012f6a:	4432      	add	r2, r6
 8012f6c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8012f70:	428a      	cmp	r2, r1
 8012f72:	dd08      	ble.n	8012f86 <scalbn+0x76>
 8012f74:	2d00      	cmp	r5, #0
 8012f76:	a120      	add	r1, pc, #128	; (adr r1, 8012ff8 <scalbn+0xe8>)
 8012f78:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012f7c:	da1c      	bge.n	8012fb8 <scalbn+0xa8>
 8012f7e:	a120      	add	r1, pc, #128	; (adr r1, 8013000 <scalbn+0xf0>)
 8012f80:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012f84:	e018      	b.n	8012fb8 <scalbn+0xa8>
 8012f86:	2a00      	cmp	r2, #0
 8012f88:	dd08      	ble.n	8012f9c <scalbn+0x8c>
 8012f8a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8012f8e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8012f92:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8012f96:	ec45 4b10 	vmov	d0, r4, r5
 8012f9a:	bd70      	pop	{r4, r5, r6, pc}
 8012f9c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8012fa0:	da19      	bge.n	8012fd6 <scalbn+0xc6>
 8012fa2:	f24c 3350 	movw	r3, #50000	; 0xc350
 8012fa6:	429e      	cmp	r6, r3
 8012fa8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8012fac:	dd0a      	ble.n	8012fc4 <scalbn+0xb4>
 8012fae:	a112      	add	r1, pc, #72	; (adr r1, 8012ff8 <scalbn+0xe8>)
 8012fb0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012fb4:	2b00      	cmp	r3, #0
 8012fb6:	d1e2      	bne.n	8012f7e <scalbn+0x6e>
 8012fb8:	a30f      	add	r3, pc, #60	; (adr r3, 8012ff8 <scalbn+0xe8>)
 8012fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012fbe:	f7ed faf3 	bl	80005a8 <__aeabi_dmul>
 8012fc2:	e7cb      	b.n	8012f5c <scalbn+0x4c>
 8012fc4:	a10a      	add	r1, pc, #40	; (adr r1, 8012ff0 <scalbn+0xe0>)
 8012fc6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012fca:	2b00      	cmp	r3, #0
 8012fcc:	d0b8      	beq.n	8012f40 <scalbn+0x30>
 8012fce:	a10e      	add	r1, pc, #56	; (adr r1, 8013008 <scalbn+0xf8>)
 8012fd0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012fd4:	e7b4      	b.n	8012f40 <scalbn+0x30>
 8012fd6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8012fda:	3236      	adds	r2, #54	; 0x36
 8012fdc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8012fe0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8012fe4:	4620      	mov	r0, r4
 8012fe6:	4b0c      	ldr	r3, [pc, #48]	; (8013018 <scalbn+0x108>)
 8012fe8:	2200      	movs	r2, #0
 8012fea:	e7e8      	b.n	8012fbe <scalbn+0xae>
 8012fec:	f3af 8000 	nop.w
 8012ff0:	c2f8f359 	.word	0xc2f8f359
 8012ff4:	01a56e1f 	.word	0x01a56e1f
 8012ff8:	8800759c 	.word	0x8800759c
 8012ffc:	7e37e43c 	.word	0x7e37e43c
 8013000:	8800759c 	.word	0x8800759c
 8013004:	fe37e43c 	.word	0xfe37e43c
 8013008:	c2f8f359 	.word	0xc2f8f359
 801300c:	81a56e1f 	.word	0x81a56e1f
 8013010:	43500000 	.word	0x43500000
 8013014:	ffff3cb0 	.word	0xffff3cb0
 8013018:	3c900000 	.word	0x3c900000

0801301c <__errno>:
 801301c:	4b01      	ldr	r3, [pc, #4]	; (8013024 <__errno+0x8>)
 801301e:	6818      	ldr	r0, [r3, #0]
 8013020:	4770      	bx	lr
 8013022:	bf00      	nop
 8013024:	2000002c 	.word	0x2000002c

08013028 <__libc_init_array>:
 8013028:	b570      	push	{r4, r5, r6, lr}
 801302a:	4d0d      	ldr	r5, [pc, #52]	; (8013060 <__libc_init_array+0x38>)
 801302c:	4c0d      	ldr	r4, [pc, #52]	; (8013064 <__libc_init_array+0x3c>)
 801302e:	1b64      	subs	r4, r4, r5
 8013030:	10a4      	asrs	r4, r4, #2
 8013032:	2600      	movs	r6, #0
 8013034:	42a6      	cmp	r6, r4
 8013036:	d109      	bne.n	801304c <__libc_init_array+0x24>
 8013038:	4d0b      	ldr	r5, [pc, #44]	; (8013068 <__libc_init_array+0x40>)
 801303a:	4c0c      	ldr	r4, [pc, #48]	; (801306c <__libc_init_array+0x44>)
 801303c:	f002 fff6 	bl	801602c <_init>
 8013040:	1b64      	subs	r4, r4, r5
 8013042:	10a4      	asrs	r4, r4, #2
 8013044:	2600      	movs	r6, #0
 8013046:	42a6      	cmp	r6, r4
 8013048:	d105      	bne.n	8013056 <__libc_init_array+0x2e>
 801304a:	bd70      	pop	{r4, r5, r6, pc}
 801304c:	f855 3b04 	ldr.w	r3, [r5], #4
 8013050:	4798      	blx	r3
 8013052:	3601      	adds	r6, #1
 8013054:	e7ee      	b.n	8013034 <__libc_init_array+0xc>
 8013056:	f855 3b04 	ldr.w	r3, [r5], #4
 801305a:	4798      	blx	r3
 801305c:	3601      	adds	r6, #1
 801305e:	e7f2      	b.n	8013046 <__libc_init_array+0x1e>
 8013060:	0801838c 	.word	0x0801838c
 8013064:	0801838c 	.word	0x0801838c
 8013068:	0801838c 	.word	0x0801838c
 801306c:	08018390 	.word	0x08018390

08013070 <malloc>:
 8013070:	4b02      	ldr	r3, [pc, #8]	; (801307c <malloc+0xc>)
 8013072:	4601      	mov	r1, r0
 8013074:	6818      	ldr	r0, [r3, #0]
 8013076:	f000 b88d 	b.w	8013194 <_malloc_r>
 801307a:	bf00      	nop
 801307c:	2000002c 	.word	0x2000002c

08013080 <free>:
 8013080:	4b02      	ldr	r3, [pc, #8]	; (801308c <free+0xc>)
 8013082:	4601      	mov	r1, r0
 8013084:	6818      	ldr	r0, [r3, #0]
 8013086:	f000 b819 	b.w	80130bc <_free_r>
 801308a:	bf00      	nop
 801308c:	2000002c 	.word	0x2000002c

08013090 <memcpy>:
 8013090:	440a      	add	r2, r1
 8013092:	4291      	cmp	r1, r2
 8013094:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8013098:	d100      	bne.n	801309c <memcpy+0xc>
 801309a:	4770      	bx	lr
 801309c:	b510      	push	{r4, lr}
 801309e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80130a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80130a6:	4291      	cmp	r1, r2
 80130a8:	d1f9      	bne.n	801309e <memcpy+0xe>
 80130aa:	bd10      	pop	{r4, pc}

080130ac <memset>:
 80130ac:	4402      	add	r2, r0
 80130ae:	4603      	mov	r3, r0
 80130b0:	4293      	cmp	r3, r2
 80130b2:	d100      	bne.n	80130b6 <memset+0xa>
 80130b4:	4770      	bx	lr
 80130b6:	f803 1b01 	strb.w	r1, [r3], #1
 80130ba:	e7f9      	b.n	80130b0 <memset+0x4>

080130bc <_free_r>:
 80130bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80130be:	2900      	cmp	r1, #0
 80130c0:	d044      	beq.n	801314c <_free_r+0x90>
 80130c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80130c6:	9001      	str	r0, [sp, #4]
 80130c8:	2b00      	cmp	r3, #0
 80130ca:	f1a1 0404 	sub.w	r4, r1, #4
 80130ce:	bfb8      	it	lt
 80130d0:	18e4      	addlt	r4, r4, r3
 80130d2:	f001 ff6f 	bl	8014fb4 <__malloc_lock>
 80130d6:	4a1e      	ldr	r2, [pc, #120]	; (8013150 <_free_r+0x94>)
 80130d8:	9801      	ldr	r0, [sp, #4]
 80130da:	6813      	ldr	r3, [r2, #0]
 80130dc:	b933      	cbnz	r3, 80130ec <_free_r+0x30>
 80130de:	6063      	str	r3, [r4, #4]
 80130e0:	6014      	str	r4, [r2, #0]
 80130e2:	b003      	add	sp, #12
 80130e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80130e8:	f001 bf6a 	b.w	8014fc0 <__malloc_unlock>
 80130ec:	42a3      	cmp	r3, r4
 80130ee:	d908      	bls.n	8013102 <_free_r+0x46>
 80130f0:	6825      	ldr	r5, [r4, #0]
 80130f2:	1961      	adds	r1, r4, r5
 80130f4:	428b      	cmp	r3, r1
 80130f6:	bf01      	itttt	eq
 80130f8:	6819      	ldreq	r1, [r3, #0]
 80130fa:	685b      	ldreq	r3, [r3, #4]
 80130fc:	1949      	addeq	r1, r1, r5
 80130fe:	6021      	streq	r1, [r4, #0]
 8013100:	e7ed      	b.n	80130de <_free_r+0x22>
 8013102:	461a      	mov	r2, r3
 8013104:	685b      	ldr	r3, [r3, #4]
 8013106:	b10b      	cbz	r3, 801310c <_free_r+0x50>
 8013108:	42a3      	cmp	r3, r4
 801310a:	d9fa      	bls.n	8013102 <_free_r+0x46>
 801310c:	6811      	ldr	r1, [r2, #0]
 801310e:	1855      	adds	r5, r2, r1
 8013110:	42a5      	cmp	r5, r4
 8013112:	d10b      	bne.n	801312c <_free_r+0x70>
 8013114:	6824      	ldr	r4, [r4, #0]
 8013116:	4421      	add	r1, r4
 8013118:	1854      	adds	r4, r2, r1
 801311a:	42a3      	cmp	r3, r4
 801311c:	6011      	str	r1, [r2, #0]
 801311e:	d1e0      	bne.n	80130e2 <_free_r+0x26>
 8013120:	681c      	ldr	r4, [r3, #0]
 8013122:	685b      	ldr	r3, [r3, #4]
 8013124:	6053      	str	r3, [r2, #4]
 8013126:	4421      	add	r1, r4
 8013128:	6011      	str	r1, [r2, #0]
 801312a:	e7da      	b.n	80130e2 <_free_r+0x26>
 801312c:	d902      	bls.n	8013134 <_free_r+0x78>
 801312e:	230c      	movs	r3, #12
 8013130:	6003      	str	r3, [r0, #0]
 8013132:	e7d6      	b.n	80130e2 <_free_r+0x26>
 8013134:	6825      	ldr	r5, [r4, #0]
 8013136:	1961      	adds	r1, r4, r5
 8013138:	428b      	cmp	r3, r1
 801313a:	bf04      	itt	eq
 801313c:	6819      	ldreq	r1, [r3, #0]
 801313e:	685b      	ldreq	r3, [r3, #4]
 8013140:	6063      	str	r3, [r4, #4]
 8013142:	bf04      	itt	eq
 8013144:	1949      	addeq	r1, r1, r5
 8013146:	6021      	streq	r1, [r4, #0]
 8013148:	6054      	str	r4, [r2, #4]
 801314a:	e7ca      	b.n	80130e2 <_free_r+0x26>
 801314c:	b003      	add	sp, #12
 801314e:	bd30      	pop	{r4, r5, pc}
 8013150:	20001d74 	.word	0x20001d74

08013154 <sbrk_aligned>:
 8013154:	b570      	push	{r4, r5, r6, lr}
 8013156:	4e0e      	ldr	r6, [pc, #56]	; (8013190 <sbrk_aligned+0x3c>)
 8013158:	460c      	mov	r4, r1
 801315a:	6831      	ldr	r1, [r6, #0]
 801315c:	4605      	mov	r5, r0
 801315e:	b911      	cbnz	r1, 8013166 <sbrk_aligned+0x12>
 8013160:	f000 fd9a 	bl	8013c98 <_sbrk_r>
 8013164:	6030      	str	r0, [r6, #0]
 8013166:	4621      	mov	r1, r4
 8013168:	4628      	mov	r0, r5
 801316a:	f000 fd95 	bl	8013c98 <_sbrk_r>
 801316e:	1c43      	adds	r3, r0, #1
 8013170:	d00a      	beq.n	8013188 <sbrk_aligned+0x34>
 8013172:	1cc4      	adds	r4, r0, #3
 8013174:	f024 0403 	bic.w	r4, r4, #3
 8013178:	42a0      	cmp	r0, r4
 801317a:	d007      	beq.n	801318c <sbrk_aligned+0x38>
 801317c:	1a21      	subs	r1, r4, r0
 801317e:	4628      	mov	r0, r5
 8013180:	f000 fd8a 	bl	8013c98 <_sbrk_r>
 8013184:	3001      	adds	r0, #1
 8013186:	d101      	bne.n	801318c <sbrk_aligned+0x38>
 8013188:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 801318c:	4620      	mov	r0, r4
 801318e:	bd70      	pop	{r4, r5, r6, pc}
 8013190:	20001d78 	.word	0x20001d78

08013194 <_malloc_r>:
 8013194:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013198:	1ccd      	adds	r5, r1, #3
 801319a:	f025 0503 	bic.w	r5, r5, #3
 801319e:	3508      	adds	r5, #8
 80131a0:	2d0c      	cmp	r5, #12
 80131a2:	bf38      	it	cc
 80131a4:	250c      	movcc	r5, #12
 80131a6:	2d00      	cmp	r5, #0
 80131a8:	4607      	mov	r7, r0
 80131aa:	db01      	blt.n	80131b0 <_malloc_r+0x1c>
 80131ac:	42a9      	cmp	r1, r5
 80131ae:	d905      	bls.n	80131bc <_malloc_r+0x28>
 80131b0:	230c      	movs	r3, #12
 80131b2:	603b      	str	r3, [r7, #0]
 80131b4:	2600      	movs	r6, #0
 80131b6:	4630      	mov	r0, r6
 80131b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80131bc:	4e2e      	ldr	r6, [pc, #184]	; (8013278 <_malloc_r+0xe4>)
 80131be:	f001 fef9 	bl	8014fb4 <__malloc_lock>
 80131c2:	6833      	ldr	r3, [r6, #0]
 80131c4:	461c      	mov	r4, r3
 80131c6:	bb34      	cbnz	r4, 8013216 <_malloc_r+0x82>
 80131c8:	4629      	mov	r1, r5
 80131ca:	4638      	mov	r0, r7
 80131cc:	f7ff ffc2 	bl	8013154 <sbrk_aligned>
 80131d0:	1c43      	adds	r3, r0, #1
 80131d2:	4604      	mov	r4, r0
 80131d4:	d14d      	bne.n	8013272 <_malloc_r+0xde>
 80131d6:	6834      	ldr	r4, [r6, #0]
 80131d8:	4626      	mov	r6, r4
 80131da:	2e00      	cmp	r6, #0
 80131dc:	d140      	bne.n	8013260 <_malloc_r+0xcc>
 80131de:	6823      	ldr	r3, [r4, #0]
 80131e0:	4631      	mov	r1, r6
 80131e2:	4638      	mov	r0, r7
 80131e4:	eb04 0803 	add.w	r8, r4, r3
 80131e8:	f000 fd56 	bl	8013c98 <_sbrk_r>
 80131ec:	4580      	cmp	r8, r0
 80131ee:	d13a      	bne.n	8013266 <_malloc_r+0xd2>
 80131f0:	6821      	ldr	r1, [r4, #0]
 80131f2:	3503      	adds	r5, #3
 80131f4:	1a6d      	subs	r5, r5, r1
 80131f6:	f025 0503 	bic.w	r5, r5, #3
 80131fa:	3508      	adds	r5, #8
 80131fc:	2d0c      	cmp	r5, #12
 80131fe:	bf38      	it	cc
 8013200:	250c      	movcc	r5, #12
 8013202:	4629      	mov	r1, r5
 8013204:	4638      	mov	r0, r7
 8013206:	f7ff ffa5 	bl	8013154 <sbrk_aligned>
 801320a:	3001      	adds	r0, #1
 801320c:	d02b      	beq.n	8013266 <_malloc_r+0xd2>
 801320e:	6823      	ldr	r3, [r4, #0]
 8013210:	442b      	add	r3, r5
 8013212:	6023      	str	r3, [r4, #0]
 8013214:	e00e      	b.n	8013234 <_malloc_r+0xa0>
 8013216:	6822      	ldr	r2, [r4, #0]
 8013218:	1b52      	subs	r2, r2, r5
 801321a:	d41e      	bmi.n	801325a <_malloc_r+0xc6>
 801321c:	2a0b      	cmp	r2, #11
 801321e:	d916      	bls.n	801324e <_malloc_r+0xba>
 8013220:	1961      	adds	r1, r4, r5
 8013222:	42a3      	cmp	r3, r4
 8013224:	6025      	str	r5, [r4, #0]
 8013226:	bf18      	it	ne
 8013228:	6059      	strne	r1, [r3, #4]
 801322a:	6863      	ldr	r3, [r4, #4]
 801322c:	bf08      	it	eq
 801322e:	6031      	streq	r1, [r6, #0]
 8013230:	5162      	str	r2, [r4, r5]
 8013232:	604b      	str	r3, [r1, #4]
 8013234:	4638      	mov	r0, r7
 8013236:	f104 060b 	add.w	r6, r4, #11
 801323a:	f001 fec1 	bl	8014fc0 <__malloc_unlock>
 801323e:	f026 0607 	bic.w	r6, r6, #7
 8013242:	1d23      	adds	r3, r4, #4
 8013244:	1af2      	subs	r2, r6, r3
 8013246:	d0b6      	beq.n	80131b6 <_malloc_r+0x22>
 8013248:	1b9b      	subs	r3, r3, r6
 801324a:	50a3      	str	r3, [r4, r2]
 801324c:	e7b3      	b.n	80131b6 <_malloc_r+0x22>
 801324e:	6862      	ldr	r2, [r4, #4]
 8013250:	42a3      	cmp	r3, r4
 8013252:	bf0c      	ite	eq
 8013254:	6032      	streq	r2, [r6, #0]
 8013256:	605a      	strne	r2, [r3, #4]
 8013258:	e7ec      	b.n	8013234 <_malloc_r+0xa0>
 801325a:	4623      	mov	r3, r4
 801325c:	6864      	ldr	r4, [r4, #4]
 801325e:	e7b2      	b.n	80131c6 <_malloc_r+0x32>
 8013260:	4634      	mov	r4, r6
 8013262:	6876      	ldr	r6, [r6, #4]
 8013264:	e7b9      	b.n	80131da <_malloc_r+0x46>
 8013266:	230c      	movs	r3, #12
 8013268:	603b      	str	r3, [r7, #0]
 801326a:	4638      	mov	r0, r7
 801326c:	f001 fea8 	bl	8014fc0 <__malloc_unlock>
 8013270:	e7a1      	b.n	80131b6 <_malloc_r+0x22>
 8013272:	6025      	str	r5, [r4, #0]
 8013274:	e7de      	b.n	8013234 <_malloc_r+0xa0>
 8013276:	bf00      	nop
 8013278:	20001d74 	.word	0x20001d74

0801327c <__cvt>:
 801327c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013280:	ec55 4b10 	vmov	r4, r5, d0
 8013284:	2d00      	cmp	r5, #0
 8013286:	460e      	mov	r6, r1
 8013288:	4619      	mov	r1, r3
 801328a:	462b      	mov	r3, r5
 801328c:	bfbb      	ittet	lt
 801328e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8013292:	461d      	movlt	r5, r3
 8013294:	2300      	movge	r3, #0
 8013296:	232d      	movlt	r3, #45	; 0x2d
 8013298:	700b      	strb	r3, [r1, #0]
 801329a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801329c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80132a0:	4691      	mov	r9, r2
 80132a2:	f023 0820 	bic.w	r8, r3, #32
 80132a6:	bfbc      	itt	lt
 80132a8:	4622      	movlt	r2, r4
 80132aa:	4614      	movlt	r4, r2
 80132ac:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80132b0:	d005      	beq.n	80132be <__cvt+0x42>
 80132b2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80132b6:	d100      	bne.n	80132ba <__cvt+0x3e>
 80132b8:	3601      	adds	r6, #1
 80132ba:	2102      	movs	r1, #2
 80132bc:	e000      	b.n	80132c0 <__cvt+0x44>
 80132be:	2103      	movs	r1, #3
 80132c0:	ab03      	add	r3, sp, #12
 80132c2:	9301      	str	r3, [sp, #4]
 80132c4:	ab02      	add	r3, sp, #8
 80132c6:	9300      	str	r3, [sp, #0]
 80132c8:	ec45 4b10 	vmov	d0, r4, r5
 80132cc:	4653      	mov	r3, sl
 80132ce:	4632      	mov	r2, r6
 80132d0:	f000 fe5e 	bl	8013f90 <_dtoa_r>
 80132d4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80132d8:	4607      	mov	r7, r0
 80132da:	d102      	bne.n	80132e2 <__cvt+0x66>
 80132dc:	f019 0f01 	tst.w	r9, #1
 80132e0:	d022      	beq.n	8013328 <__cvt+0xac>
 80132e2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80132e6:	eb07 0906 	add.w	r9, r7, r6
 80132ea:	d110      	bne.n	801330e <__cvt+0x92>
 80132ec:	783b      	ldrb	r3, [r7, #0]
 80132ee:	2b30      	cmp	r3, #48	; 0x30
 80132f0:	d10a      	bne.n	8013308 <__cvt+0x8c>
 80132f2:	2200      	movs	r2, #0
 80132f4:	2300      	movs	r3, #0
 80132f6:	4620      	mov	r0, r4
 80132f8:	4629      	mov	r1, r5
 80132fa:	f7ed fbbd 	bl	8000a78 <__aeabi_dcmpeq>
 80132fe:	b918      	cbnz	r0, 8013308 <__cvt+0x8c>
 8013300:	f1c6 0601 	rsb	r6, r6, #1
 8013304:	f8ca 6000 	str.w	r6, [sl]
 8013308:	f8da 3000 	ldr.w	r3, [sl]
 801330c:	4499      	add	r9, r3
 801330e:	2200      	movs	r2, #0
 8013310:	2300      	movs	r3, #0
 8013312:	4620      	mov	r0, r4
 8013314:	4629      	mov	r1, r5
 8013316:	f7ed fbaf 	bl	8000a78 <__aeabi_dcmpeq>
 801331a:	b108      	cbz	r0, 8013320 <__cvt+0xa4>
 801331c:	f8cd 900c 	str.w	r9, [sp, #12]
 8013320:	2230      	movs	r2, #48	; 0x30
 8013322:	9b03      	ldr	r3, [sp, #12]
 8013324:	454b      	cmp	r3, r9
 8013326:	d307      	bcc.n	8013338 <__cvt+0xbc>
 8013328:	9b03      	ldr	r3, [sp, #12]
 801332a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801332c:	1bdb      	subs	r3, r3, r7
 801332e:	4638      	mov	r0, r7
 8013330:	6013      	str	r3, [r2, #0]
 8013332:	b004      	add	sp, #16
 8013334:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013338:	1c59      	adds	r1, r3, #1
 801333a:	9103      	str	r1, [sp, #12]
 801333c:	701a      	strb	r2, [r3, #0]
 801333e:	e7f0      	b.n	8013322 <__cvt+0xa6>

08013340 <__exponent>:
 8013340:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013342:	4603      	mov	r3, r0
 8013344:	2900      	cmp	r1, #0
 8013346:	bfb8      	it	lt
 8013348:	4249      	neglt	r1, r1
 801334a:	f803 2b02 	strb.w	r2, [r3], #2
 801334e:	bfb4      	ite	lt
 8013350:	222d      	movlt	r2, #45	; 0x2d
 8013352:	222b      	movge	r2, #43	; 0x2b
 8013354:	2909      	cmp	r1, #9
 8013356:	7042      	strb	r2, [r0, #1]
 8013358:	dd2a      	ble.n	80133b0 <__exponent+0x70>
 801335a:	f10d 0407 	add.w	r4, sp, #7
 801335e:	46a4      	mov	ip, r4
 8013360:	270a      	movs	r7, #10
 8013362:	46a6      	mov	lr, r4
 8013364:	460a      	mov	r2, r1
 8013366:	fb91 f6f7 	sdiv	r6, r1, r7
 801336a:	fb07 1516 	mls	r5, r7, r6, r1
 801336e:	3530      	adds	r5, #48	; 0x30
 8013370:	2a63      	cmp	r2, #99	; 0x63
 8013372:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8013376:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801337a:	4631      	mov	r1, r6
 801337c:	dcf1      	bgt.n	8013362 <__exponent+0x22>
 801337e:	3130      	adds	r1, #48	; 0x30
 8013380:	f1ae 0502 	sub.w	r5, lr, #2
 8013384:	f804 1c01 	strb.w	r1, [r4, #-1]
 8013388:	1c44      	adds	r4, r0, #1
 801338a:	4629      	mov	r1, r5
 801338c:	4561      	cmp	r1, ip
 801338e:	d30a      	bcc.n	80133a6 <__exponent+0x66>
 8013390:	f10d 0209 	add.w	r2, sp, #9
 8013394:	eba2 020e 	sub.w	r2, r2, lr
 8013398:	4565      	cmp	r5, ip
 801339a:	bf88      	it	hi
 801339c:	2200      	movhi	r2, #0
 801339e:	4413      	add	r3, r2
 80133a0:	1a18      	subs	r0, r3, r0
 80133a2:	b003      	add	sp, #12
 80133a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80133a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80133aa:	f804 2f01 	strb.w	r2, [r4, #1]!
 80133ae:	e7ed      	b.n	801338c <__exponent+0x4c>
 80133b0:	2330      	movs	r3, #48	; 0x30
 80133b2:	3130      	adds	r1, #48	; 0x30
 80133b4:	7083      	strb	r3, [r0, #2]
 80133b6:	70c1      	strb	r1, [r0, #3]
 80133b8:	1d03      	adds	r3, r0, #4
 80133ba:	e7f1      	b.n	80133a0 <__exponent+0x60>

080133bc <_printf_float>:
 80133bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80133c0:	ed2d 8b02 	vpush	{d8}
 80133c4:	b08d      	sub	sp, #52	; 0x34
 80133c6:	460c      	mov	r4, r1
 80133c8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80133cc:	4616      	mov	r6, r2
 80133ce:	461f      	mov	r7, r3
 80133d0:	4605      	mov	r5, r0
 80133d2:	f001 fd83 	bl	8014edc <_localeconv_r>
 80133d6:	f8d0 a000 	ldr.w	sl, [r0]
 80133da:	4650      	mov	r0, sl
 80133dc:	f7ec fed0 	bl	8000180 <strlen>
 80133e0:	2300      	movs	r3, #0
 80133e2:	930a      	str	r3, [sp, #40]	; 0x28
 80133e4:	6823      	ldr	r3, [r4, #0]
 80133e6:	9305      	str	r3, [sp, #20]
 80133e8:	f8d8 3000 	ldr.w	r3, [r8]
 80133ec:	f894 b018 	ldrb.w	fp, [r4, #24]
 80133f0:	3307      	adds	r3, #7
 80133f2:	f023 0307 	bic.w	r3, r3, #7
 80133f6:	f103 0208 	add.w	r2, r3, #8
 80133fa:	f8c8 2000 	str.w	r2, [r8]
 80133fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013402:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8013406:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 801340a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801340e:	9307      	str	r3, [sp, #28]
 8013410:	f8cd 8018 	str.w	r8, [sp, #24]
 8013414:	ee08 0a10 	vmov	s16, r0
 8013418:	4b9f      	ldr	r3, [pc, #636]	; (8013698 <_printf_float+0x2dc>)
 801341a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801341e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013422:	f7ed fb5b 	bl	8000adc <__aeabi_dcmpun>
 8013426:	bb88      	cbnz	r0, 801348c <_printf_float+0xd0>
 8013428:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801342c:	4b9a      	ldr	r3, [pc, #616]	; (8013698 <_printf_float+0x2dc>)
 801342e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013432:	f7ed fb35 	bl	8000aa0 <__aeabi_dcmple>
 8013436:	bb48      	cbnz	r0, 801348c <_printf_float+0xd0>
 8013438:	2200      	movs	r2, #0
 801343a:	2300      	movs	r3, #0
 801343c:	4640      	mov	r0, r8
 801343e:	4649      	mov	r1, r9
 8013440:	f7ed fb24 	bl	8000a8c <__aeabi_dcmplt>
 8013444:	b110      	cbz	r0, 801344c <_printf_float+0x90>
 8013446:	232d      	movs	r3, #45	; 0x2d
 8013448:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801344c:	4b93      	ldr	r3, [pc, #588]	; (801369c <_printf_float+0x2e0>)
 801344e:	4894      	ldr	r0, [pc, #592]	; (80136a0 <_printf_float+0x2e4>)
 8013450:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8013454:	bf94      	ite	ls
 8013456:	4698      	movls	r8, r3
 8013458:	4680      	movhi	r8, r0
 801345a:	2303      	movs	r3, #3
 801345c:	6123      	str	r3, [r4, #16]
 801345e:	9b05      	ldr	r3, [sp, #20]
 8013460:	f023 0204 	bic.w	r2, r3, #4
 8013464:	6022      	str	r2, [r4, #0]
 8013466:	f04f 0900 	mov.w	r9, #0
 801346a:	9700      	str	r7, [sp, #0]
 801346c:	4633      	mov	r3, r6
 801346e:	aa0b      	add	r2, sp, #44	; 0x2c
 8013470:	4621      	mov	r1, r4
 8013472:	4628      	mov	r0, r5
 8013474:	f000 f9d8 	bl	8013828 <_printf_common>
 8013478:	3001      	adds	r0, #1
 801347a:	f040 8090 	bne.w	801359e <_printf_float+0x1e2>
 801347e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013482:	b00d      	add	sp, #52	; 0x34
 8013484:	ecbd 8b02 	vpop	{d8}
 8013488:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801348c:	4642      	mov	r2, r8
 801348e:	464b      	mov	r3, r9
 8013490:	4640      	mov	r0, r8
 8013492:	4649      	mov	r1, r9
 8013494:	f7ed fb22 	bl	8000adc <__aeabi_dcmpun>
 8013498:	b140      	cbz	r0, 80134ac <_printf_float+0xf0>
 801349a:	464b      	mov	r3, r9
 801349c:	2b00      	cmp	r3, #0
 801349e:	bfbc      	itt	lt
 80134a0:	232d      	movlt	r3, #45	; 0x2d
 80134a2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80134a6:	487f      	ldr	r0, [pc, #508]	; (80136a4 <_printf_float+0x2e8>)
 80134a8:	4b7f      	ldr	r3, [pc, #508]	; (80136a8 <_printf_float+0x2ec>)
 80134aa:	e7d1      	b.n	8013450 <_printf_float+0x94>
 80134ac:	6863      	ldr	r3, [r4, #4]
 80134ae:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80134b2:	9206      	str	r2, [sp, #24]
 80134b4:	1c5a      	adds	r2, r3, #1
 80134b6:	d13f      	bne.n	8013538 <_printf_float+0x17c>
 80134b8:	2306      	movs	r3, #6
 80134ba:	6063      	str	r3, [r4, #4]
 80134bc:	9b05      	ldr	r3, [sp, #20]
 80134be:	6861      	ldr	r1, [r4, #4]
 80134c0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80134c4:	2300      	movs	r3, #0
 80134c6:	9303      	str	r3, [sp, #12]
 80134c8:	ab0a      	add	r3, sp, #40	; 0x28
 80134ca:	e9cd b301 	strd	fp, r3, [sp, #4]
 80134ce:	ab09      	add	r3, sp, #36	; 0x24
 80134d0:	ec49 8b10 	vmov	d0, r8, r9
 80134d4:	9300      	str	r3, [sp, #0]
 80134d6:	6022      	str	r2, [r4, #0]
 80134d8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80134dc:	4628      	mov	r0, r5
 80134de:	f7ff fecd 	bl	801327c <__cvt>
 80134e2:	9b06      	ldr	r3, [sp, #24]
 80134e4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80134e6:	2b47      	cmp	r3, #71	; 0x47
 80134e8:	4680      	mov	r8, r0
 80134ea:	d108      	bne.n	80134fe <_printf_float+0x142>
 80134ec:	1cc8      	adds	r0, r1, #3
 80134ee:	db02      	blt.n	80134f6 <_printf_float+0x13a>
 80134f0:	6863      	ldr	r3, [r4, #4]
 80134f2:	4299      	cmp	r1, r3
 80134f4:	dd41      	ble.n	801357a <_printf_float+0x1be>
 80134f6:	f1ab 0b02 	sub.w	fp, fp, #2
 80134fa:	fa5f fb8b 	uxtb.w	fp, fp
 80134fe:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8013502:	d820      	bhi.n	8013546 <_printf_float+0x18a>
 8013504:	3901      	subs	r1, #1
 8013506:	465a      	mov	r2, fp
 8013508:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801350c:	9109      	str	r1, [sp, #36]	; 0x24
 801350e:	f7ff ff17 	bl	8013340 <__exponent>
 8013512:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013514:	1813      	adds	r3, r2, r0
 8013516:	2a01      	cmp	r2, #1
 8013518:	4681      	mov	r9, r0
 801351a:	6123      	str	r3, [r4, #16]
 801351c:	dc02      	bgt.n	8013524 <_printf_float+0x168>
 801351e:	6822      	ldr	r2, [r4, #0]
 8013520:	07d2      	lsls	r2, r2, #31
 8013522:	d501      	bpl.n	8013528 <_printf_float+0x16c>
 8013524:	3301      	adds	r3, #1
 8013526:	6123      	str	r3, [r4, #16]
 8013528:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801352c:	2b00      	cmp	r3, #0
 801352e:	d09c      	beq.n	801346a <_printf_float+0xae>
 8013530:	232d      	movs	r3, #45	; 0x2d
 8013532:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013536:	e798      	b.n	801346a <_printf_float+0xae>
 8013538:	9a06      	ldr	r2, [sp, #24]
 801353a:	2a47      	cmp	r2, #71	; 0x47
 801353c:	d1be      	bne.n	80134bc <_printf_float+0x100>
 801353e:	2b00      	cmp	r3, #0
 8013540:	d1bc      	bne.n	80134bc <_printf_float+0x100>
 8013542:	2301      	movs	r3, #1
 8013544:	e7b9      	b.n	80134ba <_printf_float+0xfe>
 8013546:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 801354a:	d118      	bne.n	801357e <_printf_float+0x1c2>
 801354c:	2900      	cmp	r1, #0
 801354e:	6863      	ldr	r3, [r4, #4]
 8013550:	dd0b      	ble.n	801356a <_printf_float+0x1ae>
 8013552:	6121      	str	r1, [r4, #16]
 8013554:	b913      	cbnz	r3, 801355c <_printf_float+0x1a0>
 8013556:	6822      	ldr	r2, [r4, #0]
 8013558:	07d0      	lsls	r0, r2, #31
 801355a:	d502      	bpl.n	8013562 <_printf_float+0x1a6>
 801355c:	3301      	adds	r3, #1
 801355e:	440b      	add	r3, r1
 8013560:	6123      	str	r3, [r4, #16]
 8013562:	65a1      	str	r1, [r4, #88]	; 0x58
 8013564:	f04f 0900 	mov.w	r9, #0
 8013568:	e7de      	b.n	8013528 <_printf_float+0x16c>
 801356a:	b913      	cbnz	r3, 8013572 <_printf_float+0x1b6>
 801356c:	6822      	ldr	r2, [r4, #0]
 801356e:	07d2      	lsls	r2, r2, #31
 8013570:	d501      	bpl.n	8013576 <_printf_float+0x1ba>
 8013572:	3302      	adds	r3, #2
 8013574:	e7f4      	b.n	8013560 <_printf_float+0x1a4>
 8013576:	2301      	movs	r3, #1
 8013578:	e7f2      	b.n	8013560 <_printf_float+0x1a4>
 801357a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801357e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013580:	4299      	cmp	r1, r3
 8013582:	db05      	blt.n	8013590 <_printf_float+0x1d4>
 8013584:	6823      	ldr	r3, [r4, #0]
 8013586:	6121      	str	r1, [r4, #16]
 8013588:	07d8      	lsls	r0, r3, #31
 801358a:	d5ea      	bpl.n	8013562 <_printf_float+0x1a6>
 801358c:	1c4b      	adds	r3, r1, #1
 801358e:	e7e7      	b.n	8013560 <_printf_float+0x1a4>
 8013590:	2900      	cmp	r1, #0
 8013592:	bfd4      	ite	le
 8013594:	f1c1 0202 	rsble	r2, r1, #2
 8013598:	2201      	movgt	r2, #1
 801359a:	4413      	add	r3, r2
 801359c:	e7e0      	b.n	8013560 <_printf_float+0x1a4>
 801359e:	6823      	ldr	r3, [r4, #0]
 80135a0:	055a      	lsls	r2, r3, #21
 80135a2:	d407      	bmi.n	80135b4 <_printf_float+0x1f8>
 80135a4:	6923      	ldr	r3, [r4, #16]
 80135a6:	4642      	mov	r2, r8
 80135a8:	4631      	mov	r1, r6
 80135aa:	4628      	mov	r0, r5
 80135ac:	47b8      	blx	r7
 80135ae:	3001      	adds	r0, #1
 80135b0:	d12c      	bne.n	801360c <_printf_float+0x250>
 80135b2:	e764      	b.n	801347e <_printf_float+0xc2>
 80135b4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80135b8:	f240 80e0 	bls.w	801377c <_printf_float+0x3c0>
 80135bc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80135c0:	2200      	movs	r2, #0
 80135c2:	2300      	movs	r3, #0
 80135c4:	f7ed fa58 	bl	8000a78 <__aeabi_dcmpeq>
 80135c8:	2800      	cmp	r0, #0
 80135ca:	d034      	beq.n	8013636 <_printf_float+0x27a>
 80135cc:	4a37      	ldr	r2, [pc, #220]	; (80136ac <_printf_float+0x2f0>)
 80135ce:	2301      	movs	r3, #1
 80135d0:	4631      	mov	r1, r6
 80135d2:	4628      	mov	r0, r5
 80135d4:	47b8      	blx	r7
 80135d6:	3001      	adds	r0, #1
 80135d8:	f43f af51 	beq.w	801347e <_printf_float+0xc2>
 80135dc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80135e0:	429a      	cmp	r2, r3
 80135e2:	db02      	blt.n	80135ea <_printf_float+0x22e>
 80135e4:	6823      	ldr	r3, [r4, #0]
 80135e6:	07d8      	lsls	r0, r3, #31
 80135e8:	d510      	bpl.n	801360c <_printf_float+0x250>
 80135ea:	ee18 3a10 	vmov	r3, s16
 80135ee:	4652      	mov	r2, sl
 80135f0:	4631      	mov	r1, r6
 80135f2:	4628      	mov	r0, r5
 80135f4:	47b8      	blx	r7
 80135f6:	3001      	adds	r0, #1
 80135f8:	f43f af41 	beq.w	801347e <_printf_float+0xc2>
 80135fc:	f04f 0800 	mov.w	r8, #0
 8013600:	f104 091a 	add.w	r9, r4, #26
 8013604:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013606:	3b01      	subs	r3, #1
 8013608:	4543      	cmp	r3, r8
 801360a:	dc09      	bgt.n	8013620 <_printf_float+0x264>
 801360c:	6823      	ldr	r3, [r4, #0]
 801360e:	079b      	lsls	r3, r3, #30
 8013610:	f100 8105 	bmi.w	801381e <_printf_float+0x462>
 8013614:	68e0      	ldr	r0, [r4, #12]
 8013616:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013618:	4298      	cmp	r0, r3
 801361a:	bfb8      	it	lt
 801361c:	4618      	movlt	r0, r3
 801361e:	e730      	b.n	8013482 <_printf_float+0xc6>
 8013620:	2301      	movs	r3, #1
 8013622:	464a      	mov	r2, r9
 8013624:	4631      	mov	r1, r6
 8013626:	4628      	mov	r0, r5
 8013628:	47b8      	blx	r7
 801362a:	3001      	adds	r0, #1
 801362c:	f43f af27 	beq.w	801347e <_printf_float+0xc2>
 8013630:	f108 0801 	add.w	r8, r8, #1
 8013634:	e7e6      	b.n	8013604 <_printf_float+0x248>
 8013636:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013638:	2b00      	cmp	r3, #0
 801363a:	dc39      	bgt.n	80136b0 <_printf_float+0x2f4>
 801363c:	4a1b      	ldr	r2, [pc, #108]	; (80136ac <_printf_float+0x2f0>)
 801363e:	2301      	movs	r3, #1
 8013640:	4631      	mov	r1, r6
 8013642:	4628      	mov	r0, r5
 8013644:	47b8      	blx	r7
 8013646:	3001      	adds	r0, #1
 8013648:	f43f af19 	beq.w	801347e <_printf_float+0xc2>
 801364c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8013650:	4313      	orrs	r3, r2
 8013652:	d102      	bne.n	801365a <_printf_float+0x29e>
 8013654:	6823      	ldr	r3, [r4, #0]
 8013656:	07d9      	lsls	r1, r3, #31
 8013658:	d5d8      	bpl.n	801360c <_printf_float+0x250>
 801365a:	ee18 3a10 	vmov	r3, s16
 801365e:	4652      	mov	r2, sl
 8013660:	4631      	mov	r1, r6
 8013662:	4628      	mov	r0, r5
 8013664:	47b8      	blx	r7
 8013666:	3001      	adds	r0, #1
 8013668:	f43f af09 	beq.w	801347e <_printf_float+0xc2>
 801366c:	f04f 0900 	mov.w	r9, #0
 8013670:	f104 0a1a 	add.w	sl, r4, #26
 8013674:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013676:	425b      	negs	r3, r3
 8013678:	454b      	cmp	r3, r9
 801367a:	dc01      	bgt.n	8013680 <_printf_float+0x2c4>
 801367c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801367e:	e792      	b.n	80135a6 <_printf_float+0x1ea>
 8013680:	2301      	movs	r3, #1
 8013682:	4652      	mov	r2, sl
 8013684:	4631      	mov	r1, r6
 8013686:	4628      	mov	r0, r5
 8013688:	47b8      	blx	r7
 801368a:	3001      	adds	r0, #1
 801368c:	f43f aef7 	beq.w	801347e <_printf_float+0xc2>
 8013690:	f109 0901 	add.w	r9, r9, #1
 8013694:	e7ee      	b.n	8013674 <_printf_float+0x2b8>
 8013696:	bf00      	nop
 8013698:	7fefffff 	.word	0x7fefffff
 801369c:	08017fac 	.word	0x08017fac
 80136a0:	08017fb0 	.word	0x08017fb0
 80136a4:	08017fb8 	.word	0x08017fb8
 80136a8:	08017fb4 	.word	0x08017fb4
 80136ac:	08017fbc 	.word	0x08017fbc
 80136b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80136b2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80136b4:	429a      	cmp	r2, r3
 80136b6:	bfa8      	it	ge
 80136b8:	461a      	movge	r2, r3
 80136ba:	2a00      	cmp	r2, #0
 80136bc:	4691      	mov	r9, r2
 80136be:	dc37      	bgt.n	8013730 <_printf_float+0x374>
 80136c0:	f04f 0b00 	mov.w	fp, #0
 80136c4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80136c8:	f104 021a 	add.w	r2, r4, #26
 80136cc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80136ce:	9305      	str	r3, [sp, #20]
 80136d0:	eba3 0309 	sub.w	r3, r3, r9
 80136d4:	455b      	cmp	r3, fp
 80136d6:	dc33      	bgt.n	8013740 <_printf_float+0x384>
 80136d8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80136dc:	429a      	cmp	r2, r3
 80136de:	db3b      	blt.n	8013758 <_printf_float+0x39c>
 80136e0:	6823      	ldr	r3, [r4, #0]
 80136e2:	07da      	lsls	r2, r3, #31
 80136e4:	d438      	bmi.n	8013758 <_printf_float+0x39c>
 80136e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80136e8:	9a05      	ldr	r2, [sp, #20]
 80136ea:	9909      	ldr	r1, [sp, #36]	; 0x24
 80136ec:	1a9a      	subs	r2, r3, r2
 80136ee:	eba3 0901 	sub.w	r9, r3, r1
 80136f2:	4591      	cmp	r9, r2
 80136f4:	bfa8      	it	ge
 80136f6:	4691      	movge	r9, r2
 80136f8:	f1b9 0f00 	cmp.w	r9, #0
 80136fc:	dc35      	bgt.n	801376a <_printf_float+0x3ae>
 80136fe:	f04f 0800 	mov.w	r8, #0
 8013702:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8013706:	f104 0a1a 	add.w	sl, r4, #26
 801370a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801370e:	1a9b      	subs	r3, r3, r2
 8013710:	eba3 0309 	sub.w	r3, r3, r9
 8013714:	4543      	cmp	r3, r8
 8013716:	f77f af79 	ble.w	801360c <_printf_float+0x250>
 801371a:	2301      	movs	r3, #1
 801371c:	4652      	mov	r2, sl
 801371e:	4631      	mov	r1, r6
 8013720:	4628      	mov	r0, r5
 8013722:	47b8      	blx	r7
 8013724:	3001      	adds	r0, #1
 8013726:	f43f aeaa 	beq.w	801347e <_printf_float+0xc2>
 801372a:	f108 0801 	add.w	r8, r8, #1
 801372e:	e7ec      	b.n	801370a <_printf_float+0x34e>
 8013730:	4613      	mov	r3, r2
 8013732:	4631      	mov	r1, r6
 8013734:	4642      	mov	r2, r8
 8013736:	4628      	mov	r0, r5
 8013738:	47b8      	blx	r7
 801373a:	3001      	adds	r0, #1
 801373c:	d1c0      	bne.n	80136c0 <_printf_float+0x304>
 801373e:	e69e      	b.n	801347e <_printf_float+0xc2>
 8013740:	2301      	movs	r3, #1
 8013742:	4631      	mov	r1, r6
 8013744:	4628      	mov	r0, r5
 8013746:	9205      	str	r2, [sp, #20]
 8013748:	47b8      	blx	r7
 801374a:	3001      	adds	r0, #1
 801374c:	f43f ae97 	beq.w	801347e <_printf_float+0xc2>
 8013750:	9a05      	ldr	r2, [sp, #20]
 8013752:	f10b 0b01 	add.w	fp, fp, #1
 8013756:	e7b9      	b.n	80136cc <_printf_float+0x310>
 8013758:	ee18 3a10 	vmov	r3, s16
 801375c:	4652      	mov	r2, sl
 801375e:	4631      	mov	r1, r6
 8013760:	4628      	mov	r0, r5
 8013762:	47b8      	blx	r7
 8013764:	3001      	adds	r0, #1
 8013766:	d1be      	bne.n	80136e6 <_printf_float+0x32a>
 8013768:	e689      	b.n	801347e <_printf_float+0xc2>
 801376a:	9a05      	ldr	r2, [sp, #20]
 801376c:	464b      	mov	r3, r9
 801376e:	4442      	add	r2, r8
 8013770:	4631      	mov	r1, r6
 8013772:	4628      	mov	r0, r5
 8013774:	47b8      	blx	r7
 8013776:	3001      	adds	r0, #1
 8013778:	d1c1      	bne.n	80136fe <_printf_float+0x342>
 801377a:	e680      	b.n	801347e <_printf_float+0xc2>
 801377c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801377e:	2a01      	cmp	r2, #1
 8013780:	dc01      	bgt.n	8013786 <_printf_float+0x3ca>
 8013782:	07db      	lsls	r3, r3, #31
 8013784:	d538      	bpl.n	80137f8 <_printf_float+0x43c>
 8013786:	2301      	movs	r3, #1
 8013788:	4642      	mov	r2, r8
 801378a:	4631      	mov	r1, r6
 801378c:	4628      	mov	r0, r5
 801378e:	47b8      	blx	r7
 8013790:	3001      	adds	r0, #1
 8013792:	f43f ae74 	beq.w	801347e <_printf_float+0xc2>
 8013796:	ee18 3a10 	vmov	r3, s16
 801379a:	4652      	mov	r2, sl
 801379c:	4631      	mov	r1, r6
 801379e:	4628      	mov	r0, r5
 80137a0:	47b8      	blx	r7
 80137a2:	3001      	adds	r0, #1
 80137a4:	f43f ae6b 	beq.w	801347e <_printf_float+0xc2>
 80137a8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80137ac:	2200      	movs	r2, #0
 80137ae:	2300      	movs	r3, #0
 80137b0:	f7ed f962 	bl	8000a78 <__aeabi_dcmpeq>
 80137b4:	b9d8      	cbnz	r0, 80137ee <_printf_float+0x432>
 80137b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80137b8:	f108 0201 	add.w	r2, r8, #1
 80137bc:	3b01      	subs	r3, #1
 80137be:	4631      	mov	r1, r6
 80137c0:	4628      	mov	r0, r5
 80137c2:	47b8      	blx	r7
 80137c4:	3001      	adds	r0, #1
 80137c6:	d10e      	bne.n	80137e6 <_printf_float+0x42a>
 80137c8:	e659      	b.n	801347e <_printf_float+0xc2>
 80137ca:	2301      	movs	r3, #1
 80137cc:	4652      	mov	r2, sl
 80137ce:	4631      	mov	r1, r6
 80137d0:	4628      	mov	r0, r5
 80137d2:	47b8      	blx	r7
 80137d4:	3001      	adds	r0, #1
 80137d6:	f43f ae52 	beq.w	801347e <_printf_float+0xc2>
 80137da:	f108 0801 	add.w	r8, r8, #1
 80137de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80137e0:	3b01      	subs	r3, #1
 80137e2:	4543      	cmp	r3, r8
 80137e4:	dcf1      	bgt.n	80137ca <_printf_float+0x40e>
 80137e6:	464b      	mov	r3, r9
 80137e8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80137ec:	e6dc      	b.n	80135a8 <_printf_float+0x1ec>
 80137ee:	f04f 0800 	mov.w	r8, #0
 80137f2:	f104 0a1a 	add.w	sl, r4, #26
 80137f6:	e7f2      	b.n	80137de <_printf_float+0x422>
 80137f8:	2301      	movs	r3, #1
 80137fa:	4642      	mov	r2, r8
 80137fc:	e7df      	b.n	80137be <_printf_float+0x402>
 80137fe:	2301      	movs	r3, #1
 8013800:	464a      	mov	r2, r9
 8013802:	4631      	mov	r1, r6
 8013804:	4628      	mov	r0, r5
 8013806:	47b8      	blx	r7
 8013808:	3001      	adds	r0, #1
 801380a:	f43f ae38 	beq.w	801347e <_printf_float+0xc2>
 801380e:	f108 0801 	add.w	r8, r8, #1
 8013812:	68e3      	ldr	r3, [r4, #12]
 8013814:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8013816:	1a5b      	subs	r3, r3, r1
 8013818:	4543      	cmp	r3, r8
 801381a:	dcf0      	bgt.n	80137fe <_printf_float+0x442>
 801381c:	e6fa      	b.n	8013614 <_printf_float+0x258>
 801381e:	f04f 0800 	mov.w	r8, #0
 8013822:	f104 0919 	add.w	r9, r4, #25
 8013826:	e7f4      	b.n	8013812 <_printf_float+0x456>

08013828 <_printf_common>:
 8013828:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801382c:	4616      	mov	r6, r2
 801382e:	4699      	mov	r9, r3
 8013830:	688a      	ldr	r2, [r1, #8]
 8013832:	690b      	ldr	r3, [r1, #16]
 8013834:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8013838:	4293      	cmp	r3, r2
 801383a:	bfb8      	it	lt
 801383c:	4613      	movlt	r3, r2
 801383e:	6033      	str	r3, [r6, #0]
 8013840:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8013844:	4607      	mov	r7, r0
 8013846:	460c      	mov	r4, r1
 8013848:	b10a      	cbz	r2, 801384e <_printf_common+0x26>
 801384a:	3301      	adds	r3, #1
 801384c:	6033      	str	r3, [r6, #0]
 801384e:	6823      	ldr	r3, [r4, #0]
 8013850:	0699      	lsls	r1, r3, #26
 8013852:	bf42      	ittt	mi
 8013854:	6833      	ldrmi	r3, [r6, #0]
 8013856:	3302      	addmi	r3, #2
 8013858:	6033      	strmi	r3, [r6, #0]
 801385a:	6825      	ldr	r5, [r4, #0]
 801385c:	f015 0506 	ands.w	r5, r5, #6
 8013860:	d106      	bne.n	8013870 <_printf_common+0x48>
 8013862:	f104 0a19 	add.w	sl, r4, #25
 8013866:	68e3      	ldr	r3, [r4, #12]
 8013868:	6832      	ldr	r2, [r6, #0]
 801386a:	1a9b      	subs	r3, r3, r2
 801386c:	42ab      	cmp	r3, r5
 801386e:	dc26      	bgt.n	80138be <_printf_common+0x96>
 8013870:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8013874:	1e13      	subs	r3, r2, #0
 8013876:	6822      	ldr	r2, [r4, #0]
 8013878:	bf18      	it	ne
 801387a:	2301      	movne	r3, #1
 801387c:	0692      	lsls	r2, r2, #26
 801387e:	d42b      	bmi.n	80138d8 <_printf_common+0xb0>
 8013880:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8013884:	4649      	mov	r1, r9
 8013886:	4638      	mov	r0, r7
 8013888:	47c0      	blx	r8
 801388a:	3001      	adds	r0, #1
 801388c:	d01e      	beq.n	80138cc <_printf_common+0xa4>
 801388e:	6823      	ldr	r3, [r4, #0]
 8013890:	68e5      	ldr	r5, [r4, #12]
 8013892:	6832      	ldr	r2, [r6, #0]
 8013894:	f003 0306 	and.w	r3, r3, #6
 8013898:	2b04      	cmp	r3, #4
 801389a:	bf08      	it	eq
 801389c:	1aad      	subeq	r5, r5, r2
 801389e:	68a3      	ldr	r3, [r4, #8]
 80138a0:	6922      	ldr	r2, [r4, #16]
 80138a2:	bf0c      	ite	eq
 80138a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80138a8:	2500      	movne	r5, #0
 80138aa:	4293      	cmp	r3, r2
 80138ac:	bfc4      	itt	gt
 80138ae:	1a9b      	subgt	r3, r3, r2
 80138b0:	18ed      	addgt	r5, r5, r3
 80138b2:	2600      	movs	r6, #0
 80138b4:	341a      	adds	r4, #26
 80138b6:	42b5      	cmp	r5, r6
 80138b8:	d11a      	bne.n	80138f0 <_printf_common+0xc8>
 80138ba:	2000      	movs	r0, #0
 80138bc:	e008      	b.n	80138d0 <_printf_common+0xa8>
 80138be:	2301      	movs	r3, #1
 80138c0:	4652      	mov	r2, sl
 80138c2:	4649      	mov	r1, r9
 80138c4:	4638      	mov	r0, r7
 80138c6:	47c0      	blx	r8
 80138c8:	3001      	adds	r0, #1
 80138ca:	d103      	bne.n	80138d4 <_printf_common+0xac>
 80138cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80138d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80138d4:	3501      	adds	r5, #1
 80138d6:	e7c6      	b.n	8013866 <_printf_common+0x3e>
 80138d8:	18e1      	adds	r1, r4, r3
 80138da:	1c5a      	adds	r2, r3, #1
 80138dc:	2030      	movs	r0, #48	; 0x30
 80138de:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80138e2:	4422      	add	r2, r4
 80138e4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80138e8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80138ec:	3302      	adds	r3, #2
 80138ee:	e7c7      	b.n	8013880 <_printf_common+0x58>
 80138f0:	2301      	movs	r3, #1
 80138f2:	4622      	mov	r2, r4
 80138f4:	4649      	mov	r1, r9
 80138f6:	4638      	mov	r0, r7
 80138f8:	47c0      	blx	r8
 80138fa:	3001      	adds	r0, #1
 80138fc:	d0e6      	beq.n	80138cc <_printf_common+0xa4>
 80138fe:	3601      	adds	r6, #1
 8013900:	e7d9      	b.n	80138b6 <_printf_common+0x8e>
	...

08013904 <_printf_i>:
 8013904:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013908:	7e0f      	ldrb	r7, [r1, #24]
 801390a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801390c:	2f78      	cmp	r7, #120	; 0x78
 801390e:	4691      	mov	r9, r2
 8013910:	4680      	mov	r8, r0
 8013912:	460c      	mov	r4, r1
 8013914:	469a      	mov	sl, r3
 8013916:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801391a:	d807      	bhi.n	801392c <_printf_i+0x28>
 801391c:	2f62      	cmp	r7, #98	; 0x62
 801391e:	d80a      	bhi.n	8013936 <_printf_i+0x32>
 8013920:	2f00      	cmp	r7, #0
 8013922:	f000 80d8 	beq.w	8013ad6 <_printf_i+0x1d2>
 8013926:	2f58      	cmp	r7, #88	; 0x58
 8013928:	f000 80a3 	beq.w	8013a72 <_printf_i+0x16e>
 801392c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013930:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8013934:	e03a      	b.n	80139ac <_printf_i+0xa8>
 8013936:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801393a:	2b15      	cmp	r3, #21
 801393c:	d8f6      	bhi.n	801392c <_printf_i+0x28>
 801393e:	a101      	add	r1, pc, #4	; (adr r1, 8013944 <_printf_i+0x40>)
 8013940:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8013944:	0801399d 	.word	0x0801399d
 8013948:	080139b1 	.word	0x080139b1
 801394c:	0801392d 	.word	0x0801392d
 8013950:	0801392d 	.word	0x0801392d
 8013954:	0801392d 	.word	0x0801392d
 8013958:	0801392d 	.word	0x0801392d
 801395c:	080139b1 	.word	0x080139b1
 8013960:	0801392d 	.word	0x0801392d
 8013964:	0801392d 	.word	0x0801392d
 8013968:	0801392d 	.word	0x0801392d
 801396c:	0801392d 	.word	0x0801392d
 8013970:	08013abd 	.word	0x08013abd
 8013974:	080139e1 	.word	0x080139e1
 8013978:	08013a9f 	.word	0x08013a9f
 801397c:	0801392d 	.word	0x0801392d
 8013980:	0801392d 	.word	0x0801392d
 8013984:	08013adf 	.word	0x08013adf
 8013988:	0801392d 	.word	0x0801392d
 801398c:	080139e1 	.word	0x080139e1
 8013990:	0801392d 	.word	0x0801392d
 8013994:	0801392d 	.word	0x0801392d
 8013998:	08013aa7 	.word	0x08013aa7
 801399c:	682b      	ldr	r3, [r5, #0]
 801399e:	1d1a      	adds	r2, r3, #4
 80139a0:	681b      	ldr	r3, [r3, #0]
 80139a2:	602a      	str	r2, [r5, #0]
 80139a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80139a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80139ac:	2301      	movs	r3, #1
 80139ae:	e0a3      	b.n	8013af8 <_printf_i+0x1f4>
 80139b0:	6820      	ldr	r0, [r4, #0]
 80139b2:	6829      	ldr	r1, [r5, #0]
 80139b4:	0606      	lsls	r6, r0, #24
 80139b6:	f101 0304 	add.w	r3, r1, #4
 80139ba:	d50a      	bpl.n	80139d2 <_printf_i+0xce>
 80139bc:	680e      	ldr	r6, [r1, #0]
 80139be:	602b      	str	r3, [r5, #0]
 80139c0:	2e00      	cmp	r6, #0
 80139c2:	da03      	bge.n	80139cc <_printf_i+0xc8>
 80139c4:	232d      	movs	r3, #45	; 0x2d
 80139c6:	4276      	negs	r6, r6
 80139c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80139cc:	485e      	ldr	r0, [pc, #376]	; (8013b48 <_printf_i+0x244>)
 80139ce:	230a      	movs	r3, #10
 80139d0:	e019      	b.n	8013a06 <_printf_i+0x102>
 80139d2:	680e      	ldr	r6, [r1, #0]
 80139d4:	602b      	str	r3, [r5, #0]
 80139d6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80139da:	bf18      	it	ne
 80139dc:	b236      	sxthne	r6, r6
 80139de:	e7ef      	b.n	80139c0 <_printf_i+0xbc>
 80139e0:	682b      	ldr	r3, [r5, #0]
 80139e2:	6820      	ldr	r0, [r4, #0]
 80139e4:	1d19      	adds	r1, r3, #4
 80139e6:	6029      	str	r1, [r5, #0]
 80139e8:	0601      	lsls	r1, r0, #24
 80139ea:	d501      	bpl.n	80139f0 <_printf_i+0xec>
 80139ec:	681e      	ldr	r6, [r3, #0]
 80139ee:	e002      	b.n	80139f6 <_printf_i+0xf2>
 80139f0:	0646      	lsls	r6, r0, #25
 80139f2:	d5fb      	bpl.n	80139ec <_printf_i+0xe8>
 80139f4:	881e      	ldrh	r6, [r3, #0]
 80139f6:	4854      	ldr	r0, [pc, #336]	; (8013b48 <_printf_i+0x244>)
 80139f8:	2f6f      	cmp	r7, #111	; 0x6f
 80139fa:	bf0c      	ite	eq
 80139fc:	2308      	moveq	r3, #8
 80139fe:	230a      	movne	r3, #10
 8013a00:	2100      	movs	r1, #0
 8013a02:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8013a06:	6865      	ldr	r5, [r4, #4]
 8013a08:	60a5      	str	r5, [r4, #8]
 8013a0a:	2d00      	cmp	r5, #0
 8013a0c:	bfa2      	ittt	ge
 8013a0e:	6821      	ldrge	r1, [r4, #0]
 8013a10:	f021 0104 	bicge.w	r1, r1, #4
 8013a14:	6021      	strge	r1, [r4, #0]
 8013a16:	b90e      	cbnz	r6, 8013a1c <_printf_i+0x118>
 8013a18:	2d00      	cmp	r5, #0
 8013a1a:	d04d      	beq.n	8013ab8 <_printf_i+0x1b4>
 8013a1c:	4615      	mov	r5, r2
 8013a1e:	fbb6 f1f3 	udiv	r1, r6, r3
 8013a22:	fb03 6711 	mls	r7, r3, r1, r6
 8013a26:	5dc7      	ldrb	r7, [r0, r7]
 8013a28:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8013a2c:	4637      	mov	r7, r6
 8013a2e:	42bb      	cmp	r3, r7
 8013a30:	460e      	mov	r6, r1
 8013a32:	d9f4      	bls.n	8013a1e <_printf_i+0x11a>
 8013a34:	2b08      	cmp	r3, #8
 8013a36:	d10b      	bne.n	8013a50 <_printf_i+0x14c>
 8013a38:	6823      	ldr	r3, [r4, #0]
 8013a3a:	07de      	lsls	r6, r3, #31
 8013a3c:	d508      	bpl.n	8013a50 <_printf_i+0x14c>
 8013a3e:	6923      	ldr	r3, [r4, #16]
 8013a40:	6861      	ldr	r1, [r4, #4]
 8013a42:	4299      	cmp	r1, r3
 8013a44:	bfde      	ittt	le
 8013a46:	2330      	movle	r3, #48	; 0x30
 8013a48:	f805 3c01 	strble.w	r3, [r5, #-1]
 8013a4c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8013a50:	1b52      	subs	r2, r2, r5
 8013a52:	6122      	str	r2, [r4, #16]
 8013a54:	f8cd a000 	str.w	sl, [sp]
 8013a58:	464b      	mov	r3, r9
 8013a5a:	aa03      	add	r2, sp, #12
 8013a5c:	4621      	mov	r1, r4
 8013a5e:	4640      	mov	r0, r8
 8013a60:	f7ff fee2 	bl	8013828 <_printf_common>
 8013a64:	3001      	adds	r0, #1
 8013a66:	d14c      	bne.n	8013b02 <_printf_i+0x1fe>
 8013a68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013a6c:	b004      	add	sp, #16
 8013a6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013a72:	4835      	ldr	r0, [pc, #212]	; (8013b48 <_printf_i+0x244>)
 8013a74:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8013a78:	6829      	ldr	r1, [r5, #0]
 8013a7a:	6823      	ldr	r3, [r4, #0]
 8013a7c:	f851 6b04 	ldr.w	r6, [r1], #4
 8013a80:	6029      	str	r1, [r5, #0]
 8013a82:	061d      	lsls	r5, r3, #24
 8013a84:	d514      	bpl.n	8013ab0 <_printf_i+0x1ac>
 8013a86:	07df      	lsls	r7, r3, #31
 8013a88:	bf44      	itt	mi
 8013a8a:	f043 0320 	orrmi.w	r3, r3, #32
 8013a8e:	6023      	strmi	r3, [r4, #0]
 8013a90:	b91e      	cbnz	r6, 8013a9a <_printf_i+0x196>
 8013a92:	6823      	ldr	r3, [r4, #0]
 8013a94:	f023 0320 	bic.w	r3, r3, #32
 8013a98:	6023      	str	r3, [r4, #0]
 8013a9a:	2310      	movs	r3, #16
 8013a9c:	e7b0      	b.n	8013a00 <_printf_i+0xfc>
 8013a9e:	6823      	ldr	r3, [r4, #0]
 8013aa0:	f043 0320 	orr.w	r3, r3, #32
 8013aa4:	6023      	str	r3, [r4, #0]
 8013aa6:	2378      	movs	r3, #120	; 0x78
 8013aa8:	4828      	ldr	r0, [pc, #160]	; (8013b4c <_printf_i+0x248>)
 8013aaa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8013aae:	e7e3      	b.n	8013a78 <_printf_i+0x174>
 8013ab0:	0659      	lsls	r1, r3, #25
 8013ab2:	bf48      	it	mi
 8013ab4:	b2b6      	uxthmi	r6, r6
 8013ab6:	e7e6      	b.n	8013a86 <_printf_i+0x182>
 8013ab8:	4615      	mov	r5, r2
 8013aba:	e7bb      	b.n	8013a34 <_printf_i+0x130>
 8013abc:	682b      	ldr	r3, [r5, #0]
 8013abe:	6826      	ldr	r6, [r4, #0]
 8013ac0:	6961      	ldr	r1, [r4, #20]
 8013ac2:	1d18      	adds	r0, r3, #4
 8013ac4:	6028      	str	r0, [r5, #0]
 8013ac6:	0635      	lsls	r5, r6, #24
 8013ac8:	681b      	ldr	r3, [r3, #0]
 8013aca:	d501      	bpl.n	8013ad0 <_printf_i+0x1cc>
 8013acc:	6019      	str	r1, [r3, #0]
 8013ace:	e002      	b.n	8013ad6 <_printf_i+0x1d2>
 8013ad0:	0670      	lsls	r0, r6, #25
 8013ad2:	d5fb      	bpl.n	8013acc <_printf_i+0x1c8>
 8013ad4:	8019      	strh	r1, [r3, #0]
 8013ad6:	2300      	movs	r3, #0
 8013ad8:	6123      	str	r3, [r4, #16]
 8013ada:	4615      	mov	r5, r2
 8013adc:	e7ba      	b.n	8013a54 <_printf_i+0x150>
 8013ade:	682b      	ldr	r3, [r5, #0]
 8013ae0:	1d1a      	adds	r2, r3, #4
 8013ae2:	602a      	str	r2, [r5, #0]
 8013ae4:	681d      	ldr	r5, [r3, #0]
 8013ae6:	6862      	ldr	r2, [r4, #4]
 8013ae8:	2100      	movs	r1, #0
 8013aea:	4628      	mov	r0, r5
 8013aec:	f7ec fb50 	bl	8000190 <memchr>
 8013af0:	b108      	cbz	r0, 8013af6 <_printf_i+0x1f2>
 8013af2:	1b40      	subs	r0, r0, r5
 8013af4:	6060      	str	r0, [r4, #4]
 8013af6:	6863      	ldr	r3, [r4, #4]
 8013af8:	6123      	str	r3, [r4, #16]
 8013afa:	2300      	movs	r3, #0
 8013afc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013b00:	e7a8      	b.n	8013a54 <_printf_i+0x150>
 8013b02:	6923      	ldr	r3, [r4, #16]
 8013b04:	462a      	mov	r2, r5
 8013b06:	4649      	mov	r1, r9
 8013b08:	4640      	mov	r0, r8
 8013b0a:	47d0      	blx	sl
 8013b0c:	3001      	adds	r0, #1
 8013b0e:	d0ab      	beq.n	8013a68 <_printf_i+0x164>
 8013b10:	6823      	ldr	r3, [r4, #0]
 8013b12:	079b      	lsls	r3, r3, #30
 8013b14:	d413      	bmi.n	8013b3e <_printf_i+0x23a>
 8013b16:	68e0      	ldr	r0, [r4, #12]
 8013b18:	9b03      	ldr	r3, [sp, #12]
 8013b1a:	4298      	cmp	r0, r3
 8013b1c:	bfb8      	it	lt
 8013b1e:	4618      	movlt	r0, r3
 8013b20:	e7a4      	b.n	8013a6c <_printf_i+0x168>
 8013b22:	2301      	movs	r3, #1
 8013b24:	4632      	mov	r2, r6
 8013b26:	4649      	mov	r1, r9
 8013b28:	4640      	mov	r0, r8
 8013b2a:	47d0      	blx	sl
 8013b2c:	3001      	adds	r0, #1
 8013b2e:	d09b      	beq.n	8013a68 <_printf_i+0x164>
 8013b30:	3501      	adds	r5, #1
 8013b32:	68e3      	ldr	r3, [r4, #12]
 8013b34:	9903      	ldr	r1, [sp, #12]
 8013b36:	1a5b      	subs	r3, r3, r1
 8013b38:	42ab      	cmp	r3, r5
 8013b3a:	dcf2      	bgt.n	8013b22 <_printf_i+0x21e>
 8013b3c:	e7eb      	b.n	8013b16 <_printf_i+0x212>
 8013b3e:	2500      	movs	r5, #0
 8013b40:	f104 0619 	add.w	r6, r4, #25
 8013b44:	e7f5      	b.n	8013b32 <_printf_i+0x22e>
 8013b46:	bf00      	nop
 8013b48:	08017fbe 	.word	0x08017fbe
 8013b4c:	08017fcf 	.word	0x08017fcf

08013b50 <iprintf>:
 8013b50:	b40f      	push	{r0, r1, r2, r3}
 8013b52:	4b0a      	ldr	r3, [pc, #40]	; (8013b7c <iprintf+0x2c>)
 8013b54:	b513      	push	{r0, r1, r4, lr}
 8013b56:	681c      	ldr	r4, [r3, #0]
 8013b58:	b124      	cbz	r4, 8013b64 <iprintf+0x14>
 8013b5a:	69a3      	ldr	r3, [r4, #24]
 8013b5c:	b913      	cbnz	r3, 8013b64 <iprintf+0x14>
 8013b5e:	4620      	mov	r0, r4
 8013b60:	f001 f91e 	bl	8014da0 <__sinit>
 8013b64:	ab05      	add	r3, sp, #20
 8013b66:	9a04      	ldr	r2, [sp, #16]
 8013b68:	68a1      	ldr	r1, [r4, #8]
 8013b6a:	9301      	str	r3, [sp, #4]
 8013b6c:	4620      	mov	r0, r4
 8013b6e:	f001 ff4d 	bl	8015a0c <_vfiprintf_r>
 8013b72:	b002      	add	sp, #8
 8013b74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013b78:	b004      	add	sp, #16
 8013b7a:	4770      	bx	lr
 8013b7c:	2000002c 	.word	0x2000002c

08013b80 <putchar>:
 8013b80:	4b09      	ldr	r3, [pc, #36]	; (8013ba8 <putchar+0x28>)
 8013b82:	b513      	push	{r0, r1, r4, lr}
 8013b84:	681c      	ldr	r4, [r3, #0]
 8013b86:	4601      	mov	r1, r0
 8013b88:	b134      	cbz	r4, 8013b98 <putchar+0x18>
 8013b8a:	69a3      	ldr	r3, [r4, #24]
 8013b8c:	b923      	cbnz	r3, 8013b98 <putchar+0x18>
 8013b8e:	9001      	str	r0, [sp, #4]
 8013b90:	4620      	mov	r0, r4
 8013b92:	f001 f905 	bl	8014da0 <__sinit>
 8013b96:	9901      	ldr	r1, [sp, #4]
 8013b98:	68a2      	ldr	r2, [r4, #8]
 8013b9a:	4620      	mov	r0, r4
 8013b9c:	b002      	add	sp, #8
 8013b9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013ba2:	f002 b863 	b.w	8015c6c <_putc_r>
 8013ba6:	bf00      	nop
 8013ba8:	2000002c 	.word	0x2000002c

08013bac <_puts_r>:
 8013bac:	b570      	push	{r4, r5, r6, lr}
 8013bae:	460e      	mov	r6, r1
 8013bb0:	4605      	mov	r5, r0
 8013bb2:	b118      	cbz	r0, 8013bbc <_puts_r+0x10>
 8013bb4:	6983      	ldr	r3, [r0, #24]
 8013bb6:	b90b      	cbnz	r3, 8013bbc <_puts_r+0x10>
 8013bb8:	f001 f8f2 	bl	8014da0 <__sinit>
 8013bbc:	69ab      	ldr	r3, [r5, #24]
 8013bbe:	68ac      	ldr	r4, [r5, #8]
 8013bc0:	b913      	cbnz	r3, 8013bc8 <_puts_r+0x1c>
 8013bc2:	4628      	mov	r0, r5
 8013bc4:	f001 f8ec 	bl	8014da0 <__sinit>
 8013bc8:	4b2c      	ldr	r3, [pc, #176]	; (8013c7c <_puts_r+0xd0>)
 8013bca:	429c      	cmp	r4, r3
 8013bcc:	d120      	bne.n	8013c10 <_puts_r+0x64>
 8013bce:	686c      	ldr	r4, [r5, #4]
 8013bd0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013bd2:	07db      	lsls	r3, r3, #31
 8013bd4:	d405      	bmi.n	8013be2 <_puts_r+0x36>
 8013bd6:	89a3      	ldrh	r3, [r4, #12]
 8013bd8:	0598      	lsls	r0, r3, #22
 8013bda:	d402      	bmi.n	8013be2 <_puts_r+0x36>
 8013bdc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013bde:	f001 f982 	bl	8014ee6 <__retarget_lock_acquire_recursive>
 8013be2:	89a3      	ldrh	r3, [r4, #12]
 8013be4:	0719      	lsls	r1, r3, #28
 8013be6:	d51d      	bpl.n	8013c24 <_puts_r+0x78>
 8013be8:	6923      	ldr	r3, [r4, #16]
 8013bea:	b1db      	cbz	r3, 8013c24 <_puts_r+0x78>
 8013bec:	3e01      	subs	r6, #1
 8013bee:	68a3      	ldr	r3, [r4, #8]
 8013bf0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8013bf4:	3b01      	subs	r3, #1
 8013bf6:	60a3      	str	r3, [r4, #8]
 8013bf8:	bb39      	cbnz	r1, 8013c4a <_puts_r+0x9e>
 8013bfa:	2b00      	cmp	r3, #0
 8013bfc:	da38      	bge.n	8013c70 <_puts_r+0xc4>
 8013bfe:	4622      	mov	r2, r4
 8013c00:	210a      	movs	r1, #10
 8013c02:	4628      	mov	r0, r5
 8013c04:	f000 f878 	bl	8013cf8 <__swbuf_r>
 8013c08:	3001      	adds	r0, #1
 8013c0a:	d011      	beq.n	8013c30 <_puts_r+0x84>
 8013c0c:	250a      	movs	r5, #10
 8013c0e:	e011      	b.n	8013c34 <_puts_r+0x88>
 8013c10:	4b1b      	ldr	r3, [pc, #108]	; (8013c80 <_puts_r+0xd4>)
 8013c12:	429c      	cmp	r4, r3
 8013c14:	d101      	bne.n	8013c1a <_puts_r+0x6e>
 8013c16:	68ac      	ldr	r4, [r5, #8]
 8013c18:	e7da      	b.n	8013bd0 <_puts_r+0x24>
 8013c1a:	4b1a      	ldr	r3, [pc, #104]	; (8013c84 <_puts_r+0xd8>)
 8013c1c:	429c      	cmp	r4, r3
 8013c1e:	bf08      	it	eq
 8013c20:	68ec      	ldreq	r4, [r5, #12]
 8013c22:	e7d5      	b.n	8013bd0 <_puts_r+0x24>
 8013c24:	4621      	mov	r1, r4
 8013c26:	4628      	mov	r0, r5
 8013c28:	f000 f8b8 	bl	8013d9c <__swsetup_r>
 8013c2c:	2800      	cmp	r0, #0
 8013c2e:	d0dd      	beq.n	8013bec <_puts_r+0x40>
 8013c30:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8013c34:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013c36:	07da      	lsls	r2, r3, #31
 8013c38:	d405      	bmi.n	8013c46 <_puts_r+0x9a>
 8013c3a:	89a3      	ldrh	r3, [r4, #12]
 8013c3c:	059b      	lsls	r3, r3, #22
 8013c3e:	d402      	bmi.n	8013c46 <_puts_r+0x9a>
 8013c40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013c42:	f001 f951 	bl	8014ee8 <__retarget_lock_release_recursive>
 8013c46:	4628      	mov	r0, r5
 8013c48:	bd70      	pop	{r4, r5, r6, pc}
 8013c4a:	2b00      	cmp	r3, #0
 8013c4c:	da04      	bge.n	8013c58 <_puts_r+0xac>
 8013c4e:	69a2      	ldr	r2, [r4, #24]
 8013c50:	429a      	cmp	r2, r3
 8013c52:	dc06      	bgt.n	8013c62 <_puts_r+0xb6>
 8013c54:	290a      	cmp	r1, #10
 8013c56:	d004      	beq.n	8013c62 <_puts_r+0xb6>
 8013c58:	6823      	ldr	r3, [r4, #0]
 8013c5a:	1c5a      	adds	r2, r3, #1
 8013c5c:	6022      	str	r2, [r4, #0]
 8013c5e:	7019      	strb	r1, [r3, #0]
 8013c60:	e7c5      	b.n	8013bee <_puts_r+0x42>
 8013c62:	4622      	mov	r2, r4
 8013c64:	4628      	mov	r0, r5
 8013c66:	f000 f847 	bl	8013cf8 <__swbuf_r>
 8013c6a:	3001      	adds	r0, #1
 8013c6c:	d1bf      	bne.n	8013bee <_puts_r+0x42>
 8013c6e:	e7df      	b.n	8013c30 <_puts_r+0x84>
 8013c70:	6823      	ldr	r3, [r4, #0]
 8013c72:	250a      	movs	r5, #10
 8013c74:	1c5a      	adds	r2, r3, #1
 8013c76:	6022      	str	r2, [r4, #0]
 8013c78:	701d      	strb	r5, [r3, #0]
 8013c7a:	e7db      	b.n	8013c34 <_puts_r+0x88>
 8013c7c:	08018090 	.word	0x08018090
 8013c80:	080180b0 	.word	0x080180b0
 8013c84:	08018070 	.word	0x08018070

08013c88 <puts>:
 8013c88:	4b02      	ldr	r3, [pc, #8]	; (8013c94 <puts+0xc>)
 8013c8a:	4601      	mov	r1, r0
 8013c8c:	6818      	ldr	r0, [r3, #0]
 8013c8e:	f7ff bf8d 	b.w	8013bac <_puts_r>
 8013c92:	bf00      	nop
 8013c94:	2000002c 	.word	0x2000002c

08013c98 <_sbrk_r>:
 8013c98:	b538      	push	{r3, r4, r5, lr}
 8013c9a:	4d06      	ldr	r5, [pc, #24]	; (8013cb4 <_sbrk_r+0x1c>)
 8013c9c:	2300      	movs	r3, #0
 8013c9e:	4604      	mov	r4, r0
 8013ca0:	4608      	mov	r0, r1
 8013ca2:	602b      	str	r3, [r5, #0]
 8013ca4:	f7f2 fbb4 	bl	8006410 <_sbrk>
 8013ca8:	1c43      	adds	r3, r0, #1
 8013caa:	d102      	bne.n	8013cb2 <_sbrk_r+0x1a>
 8013cac:	682b      	ldr	r3, [r5, #0]
 8013cae:	b103      	cbz	r3, 8013cb2 <_sbrk_r+0x1a>
 8013cb0:	6023      	str	r3, [r4, #0]
 8013cb2:	bd38      	pop	{r3, r4, r5, pc}
 8013cb4:	20001d80 	.word	0x20001d80

08013cb8 <siprintf>:
 8013cb8:	b40e      	push	{r1, r2, r3}
 8013cba:	b500      	push	{lr}
 8013cbc:	b09c      	sub	sp, #112	; 0x70
 8013cbe:	ab1d      	add	r3, sp, #116	; 0x74
 8013cc0:	9002      	str	r0, [sp, #8]
 8013cc2:	9006      	str	r0, [sp, #24]
 8013cc4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8013cc8:	4809      	ldr	r0, [pc, #36]	; (8013cf0 <siprintf+0x38>)
 8013cca:	9107      	str	r1, [sp, #28]
 8013ccc:	9104      	str	r1, [sp, #16]
 8013cce:	4909      	ldr	r1, [pc, #36]	; (8013cf4 <siprintf+0x3c>)
 8013cd0:	f853 2b04 	ldr.w	r2, [r3], #4
 8013cd4:	9105      	str	r1, [sp, #20]
 8013cd6:	6800      	ldr	r0, [r0, #0]
 8013cd8:	9301      	str	r3, [sp, #4]
 8013cda:	a902      	add	r1, sp, #8
 8013cdc:	f001 fd6c 	bl	80157b8 <_svfiprintf_r>
 8013ce0:	9b02      	ldr	r3, [sp, #8]
 8013ce2:	2200      	movs	r2, #0
 8013ce4:	701a      	strb	r2, [r3, #0]
 8013ce6:	b01c      	add	sp, #112	; 0x70
 8013ce8:	f85d eb04 	ldr.w	lr, [sp], #4
 8013cec:	b003      	add	sp, #12
 8013cee:	4770      	bx	lr
 8013cf0:	2000002c 	.word	0x2000002c
 8013cf4:	ffff0208 	.word	0xffff0208

08013cf8 <__swbuf_r>:
 8013cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013cfa:	460e      	mov	r6, r1
 8013cfc:	4614      	mov	r4, r2
 8013cfe:	4605      	mov	r5, r0
 8013d00:	b118      	cbz	r0, 8013d0a <__swbuf_r+0x12>
 8013d02:	6983      	ldr	r3, [r0, #24]
 8013d04:	b90b      	cbnz	r3, 8013d0a <__swbuf_r+0x12>
 8013d06:	f001 f84b 	bl	8014da0 <__sinit>
 8013d0a:	4b21      	ldr	r3, [pc, #132]	; (8013d90 <__swbuf_r+0x98>)
 8013d0c:	429c      	cmp	r4, r3
 8013d0e:	d12b      	bne.n	8013d68 <__swbuf_r+0x70>
 8013d10:	686c      	ldr	r4, [r5, #4]
 8013d12:	69a3      	ldr	r3, [r4, #24]
 8013d14:	60a3      	str	r3, [r4, #8]
 8013d16:	89a3      	ldrh	r3, [r4, #12]
 8013d18:	071a      	lsls	r2, r3, #28
 8013d1a:	d52f      	bpl.n	8013d7c <__swbuf_r+0x84>
 8013d1c:	6923      	ldr	r3, [r4, #16]
 8013d1e:	b36b      	cbz	r3, 8013d7c <__swbuf_r+0x84>
 8013d20:	6923      	ldr	r3, [r4, #16]
 8013d22:	6820      	ldr	r0, [r4, #0]
 8013d24:	1ac0      	subs	r0, r0, r3
 8013d26:	6963      	ldr	r3, [r4, #20]
 8013d28:	b2f6      	uxtb	r6, r6
 8013d2a:	4283      	cmp	r3, r0
 8013d2c:	4637      	mov	r7, r6
 8013d2e:	dc04      	bgt.n	8013d3a <__swbuf_r+0x42>
 8013d30:	4621      	mov	r1, r4
 8013d32:	4628      	mov	r0, r5
 8013d34:	f000 ffa0 	bl	8014c78 <_fflush_r>
 8013d38:	bb30      	cbnz	r0, 8013d88 <__swbuf_r+0x90>
 8013d3a:	68a3      	ldr	r3, [r4, #8]
 8013d3c:	3b01      	subs	r3, #1
 8013d3e:	60a3      	str	r3, [r4, #8]
 8013d40:	6823      	ldr	r3, [r4, #0]
 8013d42:	1c5a      	adds	r2, r3, #1
 8013d44:	6022      	str	r2, [r4, #0]
 8013d46:	701e      	strb	r6, [r3, #0]
 8013d48:	6963      	ldr	r3, [r4, #20]
 8013d4a:	3001      	adds	r0, #1
 8013d4c:	4283      	cmp	r3, r0
 8013d4e:	d004      	beq.n	8013d5a <__swbuf_r+0x62>
 8013d50:	89a3      	ldrh	r3, [r4, #12]
 8013d52:	07db      	lsls	r3, r3, #31
 8013d54:	d506      	bpl.n	8013d64 <__swbuf_r+0x6c>
 8013d56:	2e0a      	cmp	r6, #10
 8013d58:	d104      	bne.n	8013d64 <__swbuf_r+0x6c>
 8013d5a:	4621      	mov	r1, r4
 8013d5c:	4628      	mov	r0, r5
 8013d5e:	f000 ff8b 	bl	8014c78 <_fflush_r>
 8013d62:	b988      	cbnz	r0, 8013d88 <__swbuf_r+0x90>
 8013d64:	4638      	mov	r0, r7
 8013d66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013d68:	4b0a      	ldr	r3, [pc, #40]	; (8013d94 <__swbuf_r+0x9c>)
 8013d6a:	429c      	cmp	r4, r3
 8013d6c:	d101      	bne.n	8013d72 <__swbuf_r+0x7a>
 8013d6e:	68ac      	ldr	r4, [r5, #8]
 8013d70:	e7cf      	b.n	8013d12 <__swbuf_r+0x1a>
 8013d72:	4b09      	ldr	r3, [pc, #36]	; (8013d98 <__swbuf_r+0xa0>)
 8013d74:	429c      	cmp	r4, r3
 8013d76:	bf08      	it	eq
 8013d78:	68ec      	ldreq	r4, [r5, #12]
 8013d7a:	e7ca      	b.n	8013d12 <__swbuf_r+0x1a>
 8013d7c:	4621      	mov	r1, r4
 8013d7e:	4628      	mov	r0, r5
 8013d80:	f000 f80c 	bl	8013d9c <__swsetup_r>
 8013d84:	2800      	cmp	r0, #0
 8013d86:	d0cb      	beq.n	8013d20 <__swbuf_r+0x28>
 8013d88:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8013d8c:	e7ea      	b.n	8013d64 <__swbuf_r+0x6c>
 8013d8e:	bf00      	nop
 8013d90:	08018090 	.word	0x08018090
 8013d94:	080180b0 	.word	0x080180b0
 8013d98:	08018070 	.word	0x08018070

08013d9c <__swsetup_r>:
 8013d9c:	4b32      	ldr	r3, [pc, #200]	; (8013e68 <__swsetup_r+0xcc>)
 8013d9e:	b570      	push	{r4, r5, r6, lr}
 8013da0:	681d      	ldr	r5, [r3, #0]
 8013da2:	4606      	mov	r6, r0
 8013da4:	460c      	mov	r4, r1
 8013da6:	b125      	cbz	r5, 8013db2 <__swsetup_r+0x16>
 8013da8:	69ab      	ldr	r3, [r5, #24]
 8013daa:	b913      	cbnz	r3, 8013db2 <__swsetup_r+0x16>
 8013dac:	4628      	mov	r0, r5
 8013dae:	f000 fff7 	bl	8014da0 <__sinit>
 8013db2:	4b2e      	ldr	r3, [pc, #184]	; (8013e6c <__swsetup_r+0xd0>)
 8013db4:	429c      	cmp	r4, r3
 8013db6:	d10f      	bne.n	8013dd8 <__swsetup_r+0x3c>
 8013db8:	686c      	ldr	r4, [r5, #4]
 8013dba:	89a3      	ldrh	r3, [r4, #12]
 8013dbc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013dc0:	0719      	lsls	r1, r3, #28
 8013dc2:	d42c      	bmi.n	8013e1e <__swsetup_r+0x82>
 8013dc4:	06dd      	lsls	r5, r3, #27
 8013dc6:	d411      	bmi.n	8013dec <__swsetup_r+0x50>
 8013dc8:	2309      	movs	r3, #9
 8013dca:	6033      	str	r3, [r6, #0]
 8013dcc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8013dd0:	81a3      	strh	r3, [r4, #12]
 8013dd2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013dd6:	e03e      	b.n	8013e56 <__swsetup_r+0xba>
 8013dd8:	4b25      	ldr	r3, [pc, #148]	; (8013e70 <__swsetup_r+0xd4>)
 8013dda:	429c      	cmp	r4, r3
 8013ddc:	d101      	bne.n	8013de2 <__swsetup_r+0x46>
 8013dde:	68ac      	ldr	r4, [r5, #8]
 8013de0:	e7eb      	b.n	8013dba <__swsetup_r+0x1e>
 8013de2:	4b24      	ldr	r3, [pc, #144]	; (8013e74 <__swsetup_r+0xd8>)
 8013de4:	429c      	cmp	r4, r3
 8013de6:	bf08      	it	eq
 8013de8:	68ec      	ldreq	r4, [r5, #12]
 8013dea:	e7e6      	b.n	8013dba <__swsetup_r+0x1e>
 8013dec:	0758      	lsls	r0, r3, #29
 8013dee:	d512      	bpl.n	8013e16 <__swsetup_r+0x7a>
 8013df0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013df2:	b141      	cbz	r1, 8013e06 <__swsetup_r+0x6a>
 8013df4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013df8:	4299      	cmp	r1, r3
 8013dfa:	d002      	beq.n	8013e02 <__swsetup_r+0x66>
 8013dfc:	4630      	mov	r0, r6
 8013dfe:	f7ff f95d 	bl	80130bc <_free_r>
 8013e02:	2300      	movs	r3, #0
 8013e04:	6363      	str	r3, [r4, #52]	; 0x34
 8013e06:	89a3      	ldrh	r3, [r4, #12]
 8013e08:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8013e0c:	81a3      	strh	r3, [r4, #12]
 8013e0e:	2300      	movs	r3, #0
 8013e10:	6063      	str	r3, [r4, #4]
 8013e12:	6923      	ldr	r3, [r4, #16]
 8013e14:	6023      	str	r3, [r4, #0]
 8013e16:	89a3      	ldrh	r3, [r4, #12]
 8013e18:	f043 0308 	orr.w	r3, r3, #8
 8013e1c:	81a3      	strh	r3, [r4, #12]
 8013e1e:	6923      	ldr	r3, [r4, #16]
 8013e20:	b94b      	cbnz	r3, 8013e36 <__swsetup_r+0x9a>
 8013e22:	89a3      	ldrh	r3, [r4, #12]
 8013e24:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8013e28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013e2c:	d003      	beq.n	8013e36 <__swsetup_r+0x9a>
 8013e2e:	4621      	mov	r1, r4
 8013e30:	4630      	mov	r0, r6
 8013e32:	f001 f87f 	bl	8014f34 <__smakebuf_r>
 8013e36:	89a0      	ldrh	r0, [r4, #12]
 8013e38:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013e3c:	f010 0301 	ands.w	r3, r0, #1
 8013e40:	d00a      	beq.n	8013e58 <__swsetup_r+0xbc>
 8013e42:	2300      	movs	r3, #0
 8013e44:	60a3      	str	r3, [r4, #8]
 8013e46:	6963      	ldr	r3, [r4, #20]
 8013e48:	425b      	negs	r3, r3
 8013e4a:	61a3      	str	r3, [r4, #24]
 8013e4c:	6923      	ldr	r3, [r4, #16]
 8013e4e:	b943      	cbnz	r3, 8013e62 <__swsetup_r+0xc6>
 8013e50:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8013e54:	d1ba      	bne.n	8013dcc <__swsetup_r+0x30>
 8013e56:	bd70      	pop	{r4, r5, r6, pc}
 8013e58:	0781      	lsls	r1, r0, #30
 8013e5a:	bf58      	it	pl
 8013e5c:	6963      	ldrpl	r3, [r4, #20]
 8013e5e:	60a3      	str	r3, [r4, #8]
 8013e60:	e7f4      	b.n	8013e4c <__swsetup_r+0xb0>
 8013e62:	2000      	movs	r0, #0
 8013e64:	e7f7      	b.n	8013e56 <__swsetup_r+0xba>
 8013e66:	bf00      	nop
 8013e68:	2000002c 	.word	0x2000002c
 8013e6c:	08018090 	.word	0x08018090
 8013e70:	080180b0 	.word	0x080180b0
 8013e74:	08018070 	.word	0x08018070

08013e78 <quorem>:
 8013e78:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013e7c:	6903      	ldr	r3, [r0, #16]
 8013e7e:	690c      	ldr	r4, [r1, #16]
 8013e80:	42a3      	cmp	r3, r4
 8013e82:	4607      	mov	r7, r0
 8013e84:	f2c0 8081 	blt.w	8013f8a <quorem+0x112>
 8013e88:	3c01      	subs	r4, #1
 8013e8a:	f101 0814 	add.w	r8, r1, #20
 8013e8e:	f100 0514 	add.w	r5, r0, #20
 8013e92:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8013e96:	9301      	str	r3, [sp, #4]
 8013e98:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8013e9c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8013ea0:	3301      	adds	r3, #1
 8013ea2:	429a      	cmp	r2, r3
 8013ea4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8013ea8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8013eac:	fbb2 f6f3 	udiv	r6, r2, r3
 8013eb0:	d331      	bcc.n	8013f16 <quorem+0x9e>
 8013eb2:	f04f 0e00 	mov.w	lr, #0
 8013eb6:	4640      	mov	r0, r8
 8013eb8:	46ac      	mov	ip, r5
 8013eba:	46f2      	mov	sl, lr
 8013ebc:	f850 2b04 	ldr.w	r2, [r0], #4
 8013ec0:	b293      	uxth	r3, r2
 8013ec2:	fb06 e303 	mla	r3, r6, r3, lr
 8013ec6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8013eca:	b29b      	uxth	r3, r3
 8013ecc:	ebaa 0303 	sub.w	r3, sl, r3
 8013ed0:	f8dc a000 	ldr.w	sl, [ip]
 8013ed4:	0c12      	lsrs	r2, r2, #16
 8013ed6:	fa13 f38a 	uxtah	r3, r3, sl
 8013eda:	fb06 e202 	mla	r2, r6, r2, lr
 8013ede:	9300      	str	r3, [sp, #0]
 8013ee0:	9b00      	ldr	r3, [sp, #0]
 8013ee2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8013ee6:	b292      	uxth	r2, r2
 8013ee8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8013eec:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8013ef0:	f8bd 3000 	ldrh.w	r3, [sp]
 8013ef4:	4581      	cmp	r9, r0
 8013ef6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013efa:	f84c 3b04 	str.w	r3, [ip], #4
 8013efe:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8013f02:	d2db      	bcs.n	8013ebc <quorem+0x44>
 8013f04:	f855 300b 	ldr.w	r3, [r5, fp]
 8013f08:	b92b      	cbnz	r3, 8013f16 <quorem+0x9e>
 8013f0a:	9b01      	ldr	r3, [sp, #4]
 8013f0c:	3b04      	subs	r3, #4
 8013f0e:	429d      	cmp	r5, r3
 8013f10:	461a      	mov	r2, r3
 8013f12:	d32e      	bcc.n	8013f72 <quorem+0xfa>
 8013f14:	613c      	str	r4, [r7, #16]
 8013f16:	4638      	mov	r0, r7
 8013f18:	f001 fada 	bl	80154d0 <__mcmp>
 8013f1c:	2800      	cmp	r0, #0
 8013f1e:	db24      	blt.n	8013f6a <quorem+0xf2>
 8013f20:	3601      	adds	r6, #1
 8013f22:	4628      	mov	r0, r5
 8013f24:	f04f 0c00 	mov.w	ip, #0
 8013f28:	f858 2b04 	ldr.w	r2, [r8], #4
 8013f2c:	f8d0 e000 	ldr.w	lr, [r0]
 8013f30:	b293      	uxth	r3, r2
 8013f32:	ebac 0303 	sub.w	r3, ip, r3
 8013f36:	0c12      	lsrs	r2, r2, #16
 8013f38:	fa13 f38e 	uxtah	r3, r3, lr
 8013f3c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8013f40:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8013f44:	b29b      	uxth	r3, r3
 8013f46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013f4a:	45c1      	cmp	r9, r8
 8013f4c:	f840 3b04 	str.w	r3, [r0], #4
 8013f50:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8013f54:	d2e8      	bcs.n	8013f28 <quorem+0xb0>
 8013f56:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8013f5a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8013f5e:	b922      	cbnz	r2, 8013f6a <quorem+0xf2>
 8013f60:	3b04      	subs	r3, #4
 8013f62:	429d      	cmp	r5, r3
 8013f64:	461a      	mov	r2, r3
 8013f66:	d30a      	bcc.n	8013f7e <quorem+0x106>
 8013f68:	613c      	str	r4, [r7, #16]
 8013f6a:	4630      	mov	r0, r6
 8013f6c:	b003      	add	sp, #12
 8013f6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013f72:	6812      	ldr	r2, [r2, #0]
 8013f74:	3b04      	subs	r3, #4
 8013f76:	2a00      	cmp	r2, #0
 8013f78:	d1cc      	bne.n	8013f14 <quorem+0x9c>
 8013f7a:	3c01      	subs	r4, #1
 8013f7c:	e7c7      	b.n	8013f0e <quorem+0x96>
 8013f7e:	6812      	ldr	r2, [r2, #0]
 8013f80:	3b04      	subs	r3, #4
 8013f82:	2a00      	cmp	r2, #0
 8013f84:	d1f0      	bne.n	8013f68 <quorem+0xf0>
 8013f86:	3c01      	subs	r4, #1
 8013f88:	e7eb      	b.n	8013f62 <quorem+0xea>
 8013f8a:	2000      	movs	r0, #0
 8013f8c:	e7ee      	b.n	8013f6c <quorem+0xf4>
	...

08013f90 <_dtoa_r>:
 8013f90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013f94:	ed2d 8b04 	vpush	{d8-d9}
 8013f98:	ec57 6b10 	vmov	r6, r7, d0
 8013f9c:	b093      	sub	sp, #76	; 0x4c
 8013f9e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8013fa0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8013fa4:	9106      	str	r1, [sp, #24]
 8013fa6:	ee10 aa10 	vmov	sl, s0
 8013faa:	4604      	mov	r4, r0
 8013fac:	9209      	str	r2, [sp, #36]	; 0x24
 8013fae:	930c      	str	r3, [sp, #48]	; 0x30
 8013fb0:	46bb      	mov	fp, r7
 8013fb2:	b975      	cbnz	r5, 8013fd2 <_dtoa_r+0x42>
 8013fb4:	2010      	movs	r0, #16
 8013fb6:	f7ff f85b 	bl	8013070 <malloc>
 8013fba:	4602      	mov	r2, r0
 8013fbc:	6260      	str	r0, [r4, #36]	; 0x24
 8013fbe:	b920      	cbnz	r0, 8013fca <_dtoa_r+0x3a>
 8013fc0:	4ba7      	ldr	r3, [pc, #668]	; (8014260 <_dtoa_r+0x2d0>)
 8013fc2:	21ea      	movs	r1, #234	; 0xea
 8013fc4:	48a7      	ldr	r0, [pc, #668]	; (8014264 <_dtoa_r+0x2d4>)
 8013fc6:	f001 feef 	bl	8015da8 <__assert_func>
 8013fca:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8013fce:	6005      	str	r5, [r0, #0]
 8013fd0:	60c5      	str	r5, [r0, #12]
 8013fd2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013fd4:	6819      	ldr	r1, [r3, #0]
 8013fd6:	b151      	cbz	r1, 8013fee <_dtoa_r+0x5e>
 8013fd8:	685a      	ldr	r2, [r3, #4]
 8013fda:	604a      	str	r2, [r1, #4]
 8013fdc:	2301      	movs	r3, #1
 8013fde:	4093      	lsls	r3, r2
 8013fe0:	608b      	str	r3, [r1, #8]
 8013fe2:	4620      	mov	r0, r4
 8013fe4:	f001 f832 	bl	801504c <_Bfree>
 8013fe8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013fea:	2200      	movs	r2, #0
 8013fec:	601a      	str	r2, [r3, #0]
 8013fee:	1e3b      	subs	r3, r7, #0
 8013ff0:	bfaa      	itet	ge
 8013ff2:	2300      	movge	r3, #0
 8013ff4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8013ff8:	f8c8 3000 	strge.w	r3, [r8]
 8013ffc:	4b9a      	ldr	r3, [pc, #616]	; (8014268 <_dtoa_r+0x2d8>)
 8013ffe:	bfbc      	itt	lt
 8014000:	2201      	movlt	r2, #1
 8014002:	f8c8 2000 	strlt.w	r2, [r8]
 8014006:	ea33 030b 	bics.w	r3, r3, fp
 801400a:	d11b      	bne.n	8014044 <_dtoa_r+0xb4>
 801400c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801400e:	f242 730f 	movw	r3, #9999	; 0x270f
 8014012:	6013      	str	r3, [r2, #0]
 8014014:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8014018:	4333      	orrs	r3, r6
 801401a:	f000 8592 	beq.w	8014b42 <_dtoa_r+0xbb2>
 801401e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014020:	b963      	cbnz	r3, 801403c <_dtoa_r+0xac>
 8014022:	4b92      	ldr	r3, [pc, #584]	; (801426c <_dtoa_r+0x2dc>)
 8014024:	e022      	b.n	801406c <_dtoa_r+0xdc>
 8014026:	4b92      	ldr	r3, [pc, #584]	; (8014270 <_dtoa_r+0x2e0>)
 8014028:	9301      	str	r3, [sp, #4]
 801402a:	3308      	adds	r3, #8
 801402c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801402e:	6013      	str	r3, [r2, #0]
 8014030:	9801      	ldr	r0, [sp, #4]
 8014032:	b013      	add	sp, #76	; 0x4c
 8014034:	ecbd 8b04 	vpop	{d8-d9}
 8014038:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801403c:	4b8b      	ldr	r3, [pc, #556]	; (801426c <_dtoa_r+0x2dc>)
 801403e:	9301      	str	r3, [sp, #4]
 8014040:	3303      	adds	r3, #3
 8014042:	e7f3      	b.n	801402c <_dtoa_r+0x9c>
 8014044:	2200      	movs	r2, #0
 8014046:	2300      	movs	r3, #0
 8014048:	4650      	mov	r0, sl
 801404a:	4659      	mov	r1, fp
 801404c:	f7ec fd14 	bl	8000a78 <__aeabi_dcmpeq>
 8014050:	ec4b ab19 	vmov	d9, sl, fp
 8014054:	4680      	mov	r8, r0
 8014056:	b158      	cbz	r0, 8014070 <_dtoa_r+0xe0>
 8014058:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801405a:	2301      	movs	r3, #1
 801405c:	6013      	str	r3, [r2, #0]
 801405e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014060:	2b00      	cmp	r3, #0
 8014062:	f000 856b 	beq.w	8014b3c <_dtoa_r+0xbac>
 8014066:	4883      	ldr	r0, [pc, #524]	; (8014274 <_dtoa_r+0x2e4>)
 8014068:	6018      	str	r0, [r3, #0]
 801406a:	1e43      	subs	r3, r0, #1
 801406c:	9301      	str	r3, [sp, #4]
 801406e:	e7df      	b.n	8014030 <_dtoa_r+0xa0>
 8014070:	ec4b ab10 	vmov	d0, sl, fp
 8014074:	aa10      	add	r2, sp, #64	; 0x40
 8014076:	a911      	add	r1, sp, #68	; 0x44
 8014078:	4620      	mov	r0, r4
 801407a:	f001 facf 	bl	801561c <__d2b>
 801407e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8014082:	ee08 0a10 	vmov	s16, r0
 8014086:	2d00      	cmp	r5, #0
 8014088:	f000 8084 	beq.w	8014194 <_dtoa_r+0x204>
 801408c:	ee19 3a90 	vmov	r3, s19
 8014090:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8014094:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8014098:	4656      	mov	r6, sl
 801409a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 801409e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80140a2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80140a6:	4b74      	ldr	r3, [pc, #464]	; (8014278 <_dtoa_r+0x2e8>)
 80140a8:	2200      	movs	r2, #0
 80140aa:	4630      	mov	r0, r6
 80140ac:	4639      	mov	r1, r7
 80140ae:	f7ec f8c3 	bl	8000238 <__aeabi_dsub>
 80140b2:	a365      	add	r3, pc, #404	; (adr r3, 8014248 <_dtoa_r+0x2b8>)
 80140b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80140b8:	f7ec fa76 	bl	80005a8 <__aeabi_dmul>
 80140bc:	a364      	add	r3, pc, #400	; (adr r3, 8014250 <_dtoa_r+0x2c0>)
 80140be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80140c2:	f7ec f8bb 	bl	800023c <__adddf3>
 80140c6:	4606      	mov	r6, r0
 80140c8:	4628      	mov	r0, r5
 80140ca:	460f      	mov	r7, r1
 80140cc:	f7ec fa02 	bl	80004d4 <__aeabi_i2d>
 80140d0:	a361      	add	r3, pc, #388	; (adr r3, 8014258 <_dtoa_r+0x2c8>)
 80140d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80140d6:	f7ec fa67 	bl	80005a8 <__aeabi_dmul>
 80140da:	4602      	mov	r2, r0
 80140dc:	460b      	mov	r3, r1
 80140de:	4630      	mov	r0, r6
 80140e0:	4639      	mov	r1, r7
 80140e2:	f7ec f8ab 	bl	800023c <__adddf3>
 80140e6:	4606      	mov	r6, r0
 80140e8:	460f      	mov	r7, r1
 80140ea:	f7ec fd0d 	bl	8000b08 <__aeabi_d2iz>
 80140ee:	2200      	movs	r2, #0
 80140f0:	9000      	str	r0, [sp, #0]
 80140f2:	2300      	movs	r3, #0
 80140f4:	4630      	mov	r0, r6
 80140f6:	4639      	mov	r1, r7
 80140f8:	f7ec fcc8 	bl	8000a8c <__aeabi_dcmplt>
 80140fc:	b150      	cbz	r0, 8014114 <_dtoa_r+0x184>
 80140fe:	9800      	ldr	r0, [sp, #0]
 8014100:	f7ec f9e8 	bl	80004d4 <__aeabi_i2d>
 8014104:	4632      	mov	r2, r6
 8014106:	463b      	mov	r3, r7
 8014108:	f7ec fcb6 	bl	8000a78 <__aeabi_dcmpeq>
 801410c:	b910      	cbnz	r0, 8014114 <_dtoa_r+0x184>
 801410e:	9b00      	ldr	r3, [sp, #0]
 8014110:	3b01      	subs	r3, #1
 8014112:	9300      	str	r3, [sp, #0]
 8014114:	9b00      	ldr	r3, [sp, #0]
 8014116:	2b16      	cmp	r3, #22
 8014118:	d85a      	bhi.n	80141d0 <_dtoa_r+0x240>
 801411a:	9a00      	ldr	r2, [sp, #0]
 801411c:	4b57      	ldr	r3, [pc, #348]	; (801427c <_dtoa_r+0x2ec>)
 801411e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8014122:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014126:	ec51 0b19 	vmov	r0, r1, d9
 801412a:	f7ec fcaf 	bl	8000a8c <__aeabi_dcmplt>
 801412e:	2800      	cmp	r0, #0
 8014130:	d050      	beq.n	80141d4 <_dtoa_r+0x244>
 8014132:	9b00      	ldr	r3, [sp, #0]
 8014134:	3b01      	subs	r3, #1
 8014136:	9300      	str	r3, [sp, #0]
 8014138:	2300      	movs	r3, #0
 801413a:	930b      	str	r3, [sp, #44]	; 0x2c
 801413c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801413e:	1b5d      	subs	r5, r3, r5
 8014140:	1e6b      	subs	r3, r5, #1
 8014142:	9305      	str	r3, [sp, #20]
 8014144:	bf45      	ittet	mi
 8014146:	f1c5 0301 	rsbmi	r3, r5, #1
 801414a:	9304      	strmi	r3, [sp, #16]
 801414c:	2300      	movpl	r3, #0
 801414e:	2300      	movmi	r3, #0
 8014150:	bf4c      	ite	mi
 8014152:	9305      	strmi	r3, [sp, #20]
 8014154:	9304      	strpl	r3, [sp, #16]
 8014156:	9b00      	ldr	r3, [sp, #0]
 8014158:	2b00      	cmp	r3, #0
 801415a:	db3d      	blt.n	80141d8 <_dtoa_r+0x248>
 801415c:	9b05      	ldr	r3, [sp, #20]
 801415e:	9a00      	ldr	r2, [sp, #0]
 8014160:	920a      	str	r2, [sp, #40]	; 0x28
 8014162:	4413      	add	r3, r2
 8014164:	9305      	str	r3, [sp, #20]
 8014166:	2300      	movs	r3, #0
 8014168:	9307      	str	r3, [sp, #28]
 801416a:	9b06      	ldr	r3, [sp, #24]
 801416c:	2b09      	cmp	r3, #9
 801416e:	f200 8089 	bhi.w	8014284 <_dtoa_r+0x2f4>
 8014172:	2b05      	cmp	r3, #5
 8014174:	bfc4      	itt	gt
 8014176:	3b04      	subgt	r3, #4
 8014178:	9306      	strgt	r3, [sp, #24]
 801417a:	9b06      	ldr	r3, [sp, #24]
 801417c:	f1a3 0302 	sub.w	r3, r3, #2
 8014180:	bfcc      	ite	gt
 8014182:	2500      	movgt	r5, #0
 8014184:	2501      	movle	r5, #1
 8014186:	2b03      	cmp	r3, #3
 8014188:	f200 8087 	bhi.w	801429a <_dtoa_r+0x30a>
 801418c:	e8df f003 	tbb	[pc, r3]
 8014190:	59383a2d 	.word	0x59383a2d
 8014194:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8014198:	441d      	add	r5, r3
 801419a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801419e:	2b20      	cmp	r3, #32
 80141a0:	bfc1      	itttt	gt
 80141a2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80141a6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80141aa:	fa0b f303 	lslgt.w	r3, fp, r3
 80141ae:	fa26 f000 	lsrgt.w	r0, r6, r0
 80141b2:	bfda      	itte	le
 80141b4:	f1c3 0320 	rsble	r3, r3, #32
 80141b8:	fa06 f003 	lslle.w	r0, r6, r3
 80141bc:	4318      	orrgt	r0, r3
 80141be:	f7ec f979 	bl	80004b4 <__aeabi_ui2d>
 80141c2:	2301      	movs	r3, #1
 80141c4:	4606      	mov	r6, r0
 80141c6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80141ca:	3d01      	subs	r5, #1
 80141cc:	930e      	str	r3, [sp, #56]	; 0x38
 80141ce:	e76a      	b.n	80140a6 <_dtoa_r+0x116>
 80141d0:	2301      	movs	r3, #1
 80141d2:	e7b2      	b.n	801413a <_dtoa_r+0x1aa>
 80141d4:	900b      	str	r0, [sp, #44]	; 0x2c
 80141d6:	e7b1      	b.n	801413c <_dtoa_r+0x1ac>
 80141d8:	9b04      	ldr	r3, [sp, #16]
 80141da:	9a00      	ldr	r2, [sp, #0]
 80141dc:	1a9b      	subs	r3, r3, r2
 80141de:	9304      	str	r3, [sp, #16]
 80141e0:	4253      	negs	r3, r2
 80141e2:	9307      	str	r3, [sp, #28]
 80141e4:	2300      	movs	r3, #0
 80141e6:	930a      	str	r3, [sp, #40]	; 0x28
 80141e8:	e7bf      	b.n	801416a <_dtoa_r+0x1da>
 80141ea:	2300      	movs	r3, #0
 80141ec:	9308      	str	r3, [sp, #32]
 80141ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80141f0:	2b00      	cmp	r3, #0
 80141f2:	dc55      	bgt.n	80142a0 <_dtoa_r+0x310>
 80141f4:	2301      	movs	r3, #1
 80141f6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80141fa:	461a      	mov	r2, r3
 80141fc:	9209      	str	r2, [sp, #36]	; 0x24
 80141fe:	e00c      	b.n	801421a <_dtoa_r+0x28a>
 8014200:	2301      	movs	r3, #1
 8014202:	e7f3      	b.n	80141ec <_dtoa_r+0x25c>
 8014204:	2300      	movs	r3, #0
 8014206:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014208:	9308      	str	r3, [sp, #32]
 801420a:	9b00      	ldr	r3, [sp, #0]
 801420c:	4413      	add	r3, r2
 801420e:	9302      	str	r3, [sp, #8]
 8014210:	3301      	adds	r3, #1
 8014212:	2b01      	cmp	r3, #1
 8014214:	9303      	str	r3, [sp, #12]
 8014216:	bfb8      	it	lt
 8014218:	2301      	movlt	r3, #1
 801421a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801421c:	2200      	movs	r2, #0
 801421e:	6042      	str	r2, [r0, #4]
 8014220:	2204      	movs	r2, #4
 8014222:	f102 0614 	add.w	r6, r2, #20
 8014226:	429e      	cmp	r6, r3
 8014228:	6841      	ldr	r1, [r0, #4]
 801422a:	d93d      	bls.n	80142a8 <_dtoa_r+0x318>
 801422c:	4620      	mov	r0, r4
 801422e:	f000 fecd 	bl	8014fcc <_Balloc>
 8014232:	9001      	str	r0, [sp, #4]
 8014234:	2800      	cmp	r0, #0
 8014236:	d13b      	bne.n	80142b0 <_dtoa_r+0x320>
 8014238:	4b11      	ldr	r3, [pc, #68]	; (8014280 <_dtoa_r+0x2f0>)
 801423a:	4602      	mov	r2, r0
 801423c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8014240:	e6c0      	b.n	8013fc4 <_dtoa_r+0x34>
 8014242:	2301      	movs	r3, #1
 8014244:	e7df      	b.n	8014206 <_dtoa_r+0x276>
 8014246:	bf00      	nop
 8014248:	636f4361 	.word	0x636f4361
 801424c:	3fd287a7 	.word	0x3fd287a7
 8014250:	8b60c8b3 	.word	0x8b60c8b3
 8014254:	3fc68a28 	.word	0x3fc68a28
 8014258:	509f79fb 	.word	0x509f79fb
 801425c:	3fd34413 	.word	0x3fd34413
 8014260:	08017fed 	.word	0x08017fed
 8014264:	08018004 	.word	0x08018004
 8014268:	7ff00000 	.word	0x7ff00000
 801426c:	08017fe9 	.word	0x08017fe9
 8014270:	08017fe0 	.word	0x08017fe0
 8014274:	08017fbd 	.word	0x08017fbd
 8014278:	3ff80000 	.word	0x3ff80000
 801427c:	08018158 	.word	0x08018158
 8014280:	0801805f 	.word	0x0801805f
 8014284:	2501      	movs	r5, #1
 8014286:	2300      	movs	r3, #0
 8014288:	9306      	str	r3, [sp, #24]
 801428a:	9508      	str	r5, [sp, #32]
 801428c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014290:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8014294:	2200      	movs	r2, #0
 8014296:	2312      	movs	r3, #18
 8014298:	e7b0      	b.n	80141fc <_dtoa_r+0x26c>
 801429a:	2301      	movs	r3, #1
 801429c:	9308      	str	r3, [sp, #32]
 801429e:	e7f5      	b.n	801428c <_dtoa_r+0x2fc>
 80142a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80142a2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80142a6:	e7b8      	b.n	801421a <_dtoa_r+0x28a>
 80142a8:	3101      	adds	r1, #1
 80142aa:	6041      	str	r1, [r0, #4]
 80142ac:	0052      	lsls	r2, r2, #1
 80142ae:	e7b8      	b.n	8014222 <_dtoa_r+0x292>
 80142b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80142b2:	9a01      	ldr	r2, [sp, #4]
 80142b4:	601a      	str	r2, [r3, #0]
 80142b6:	9b03      	ldr	r3, [sp, #12]
 80142b8:	2b0e      	cmp	r3, #14
 80142ba:	f200 809d 	bhi.w	80143f8 <_dtoa_r+0x468>
 80142be:	2d00      	cmp	r5, #0
 80142c0:	f000 809a 	beq.w	80143f8 <_dtoa_r+0x468>
 80142c4:	9b00      	ldr	r3, [sp, #0]
 80142c6:	2b00      	cmp	r3, #0
 80142c8:	dd32      	ble.n	8014330 <_dtoa_r+0x3a0>
 80142ca:	4ab7      	ldr	r2, [pc, #732]	; (80145a8 <_dtoa_r+0x618>)
 80142cc:	f003 030f 	and.w	r3, r3, #15
 80142d0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80142d4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80142d8:	9b00      	ldr	r3, [sp, #0]
 80142da:	05d8      	lsls	r0, r3, #23
 80142dc:	ea4f 1723 	mov.w	r7, r3, asr #4
 80142e0:	d516      	bpl.n	8014310 <_dtoa_r+0x380>
 80142e2:	4bb2      	ldr	r3, [pc, #712]	; (80145ac <_dtoa_r+0x61c>)
 80142e4:	ec51 0b19 	vmov	r0, r1, d9
 80142e8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80142ec:	f7ec fa86 	bl	80007fc <__aeabi_ddiv>
 80142f0:	f007 070f 	and.w	r7, r7, #15
 80142f4:	4682      	mov	sl, r0
 80142f6:	468b      	mov	fp, r1
 80142f8:	2503      	movs	r5, #3
 80142fa:	4eac      	ldr	r6, [pc, #688]	; (80145ac <_dtoa_r+0x61c>)
 80142fc:	b957      	cbnz	r7, 8014314 <_dtoa_r+0x384>
 80142fe:	4642      	mov	r2, r8
 8014300:	464b      	mov	r3, r9
 8014302:	4650      	mov	r0, sl
 8014304:	4659      	mov	r1, fp
 8014306:	f7ec fa79 	bl	80007fc <__aeabi_ddiv>
 801430a:	4682      	mov	sl, r0
 801430c:	468b      	mov	fp, r1
 801430e:	e028      	b.n	8014362 <_dtoa_r+0x3d2>
 8014310:	2502      	movs	r5, #2
 8014312:	e7f2      	b.n	80142fa <_dtoa_r+0x36a>
 8014314:	07f9      	lsls	r1, r7, #31
 8014316:	d508      	bpl.n	801432a <_dtoa_r+0x39a>
 8014318:	4640      	mov	r0, r8
 801431a:	4649      	mov	r1, r9
 801431c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8014320:	f7ec f942 	bl	80005a8 <__aeabi_dmul>
 8014324:	3501      	adds	r5, #1
 8014326:	4680      	mov	r8, r0
 8014328:	4689      	mov	r9, r1
 801432a:	107f      	asrs	r7, r7, #1
 801432c:	3608      	adds	r6, #8
 801432e:	e7e5      	b.n	80142fc <_dtoa_r+0x36c>
 8014330:	f000 809b 	beq.w	801446a <_dtoa_r+0x4da>
 8014334:	9b00      	ldr	r3, [sp, #0]
 8014336:	4f9d      	ldr	r7, [pc, #628]	; (80145ac <_dtoa_r+0x61c>)
 8014338:	425e      	negs	r6, r3
 801433a:	4b9b      	ldr	r3, [pc, #620]	; (80145a8 <_dtoa_r+0x618>)
 801433c:	f006 020f 	and.w	r2, r6, #15
 8014340:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8014344:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014348:	ec51 0b19 	vmov	r0, r1, d9
 801434c:	f7ec f92c 	bl	80005a8 <__aeabi_dmul>
 8014350:	1136      	asrs	r6, r6, #4
 8014352:	4682      	mov	sl, r0
 8014354:	468b      	mov	fp, r1
 8014356:	2300      	movs	r3, #0
 8014358:	2502      	movs	r5, #2
 801435a:	2e00      	cmp	r6, #0
 801435c:	d17a      	bne.n	8014454 <_dtoa_r+0x4c4>
 801435e:	2b00      	cmp	r3, #0
 8014360:	d1d3      	bne.n	801430a <_dtoa_r+0x37a>
 8014362:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014364:	2b00      	cmp	r3, #0
 8014366:	f000 8082 	beq.w	801446e <_dtoa_r+0x4de>
 801436a:	4b91      	ldr	r3, [pc, #580]	; (80145b0 <_dtoa_r+0x620>)
 801436c:	2200      	movs	r2, #0
 801436e:	4650      	mov	r0, sl
 8014370:	4659      	mov	r1, fp
 8014372:	f7ec fb8b 	bl	8000a8c <__aeabi_dcmplt>
 8014376:	2800      	cmp	r0, #0
 8014378:	d079      	beq.n	801446e <_dtoa_r+0x4de>
 801437a:	9b03      	ldr	r3, [sp, #12]
 801437c:	2b00      	cmp	r3, #0
 801437e:	d076      	beq.n	801446e <_dtoa_r+0x4de>
 8014380:	9b02      	ldr	r3, [sp, #8]
 8014382:	2b00      	cmp	r3, #0
 8014384:	dd36      	ble.n	80143f4 <_dtoa_r+0x464>
 8014386:	9b00      	ldr	r3, [sp, #0]
 8014388:	4650      	mov	r0, sl
 801438a:	4659      	mov	r1, fp
 801438c:	1e5f      	subs	r7, r3, #1
 801438e:	2200      	movs	r2, #0
 8014390:	4b88      	ldr	r3, [pc, #544]	; (80145b4 <_dtoa_r+0x624>)
 8014392:	f7ec f909 	bl	80005a8 <__aeabi_dmul>
 8014396:	9e02      	ldr	r6, [sp, #8]
 8014398:	4682      	mov	sl, r0
 801439a:	468b      	mov	fp, r1
 801439c:	3501      	adds	r5, #1
 801439e:	4628      	mov	r0, r5
 80143a0:	f7ec f898 	bl	80004d4 <__aeabi_i2d>
 80143a4:	4652      	mov	r2, sl
 80143a6:	465b      	mov	r3, fp
 80143a8:	f7ec f8fe 	bl	80005a8 <__aeabi_dmul>
 80143ac:	4b82      	ldr	r3, [pc, #520]	; (80145b8 <_dtoa_r+0x628>)
 80143ae:	2200      	movs	r2, #0
 80143b0:	f7eb ff44 	bl	800023c <__adddf3>
 80143b4:	46d0      	mov	r8, sl
 80143b6:	46d9      	mov	r9, fp
 80143b8:	4682      	mov	sl, r0
 80143ba:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80143be:	2e00      	cmp	r6, #0
 80143c0:	d158      	bne.n	8014474 <_dtoa_r+0x4e4>
 80143c2:	4b7e      	ldr	r3, [pc, #504]	; (80145bc <_dtoa_r+0x62c>)
 80143c4:	2200      	movs	r2, #0
 80143c6:	4640      	mov	r0, r8
 80143c8:	4649      	mov	r1, r9
 80143ca:	f7eb ff35 	bl	8000238 <__aeabi_dsub>
 80143ce:	4652      	mov	r2, sl
 80143d0:	465b      	mov	r3, fp
 80143d2:	4680      	mov	r8, r0
 80143d4:	4689      	mov	r9, r1
 80143d6:	f7ec fb77 	bl	8000ac8 <__aeabi_dcmpgt>
 80143da:	2800      	cmp	r0, #0
 80143dc:	f040 8295 	bne.w	801490a <_dtoa_r+0x97a>
 80143e0:	4652      	mov	r2, sl
 80143e2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80143e6:	4640      	mov	r0, r8
 80143e8:	4649      	mov	r1, r9
 80143ea:	f7ec fb4f 	bl	8000a8c <__aeabi_dcmplt>
 80143ee:	2800      	cmp	r0, #0
 80143f0:	f040 8289 	bne.w	8014906 <_dtoa_r+0x976>
 80143f4:	ec5b ab19 	vmov	sl, fp, d9
 80143f8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80143fa:	2b00      	cmp	r3, #0
 80143fc:	f2c0 8148 	blt.w	8014690 <_dtoa_r+0x700>
 8014400:	9a00      	ldr	r2, [sp, #0]
 8014402:	2a0e      	cmp	r2, #14
 8014404:	f300 8144 	bgt.w	8014690 <_dtoa_r+0x700>
 8014408:	4b67      	ldr	r3, [pc, #412]	; (80145a8 <_dtoa_r+0x618>)
 801440a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801440e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8014412:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014414:	2b00      	cmp	r3, #0
 8014416:	f280 80d5 	bge.w	80145c4 <_dtoa_r+0x634>
 801441a:	9b03      	ldr	r3, [sp, #12]
 801441c:	2b00      	cmp	r3, #0
 801441e:	f300 80d1 	bgt.w	80145c4 <_dtoa_r+0x634>
 8014422:	f040 826f 	bne.w	8014904 <_dtoa_r+0x974>
 8014426:	4b65      	ldr	r3, [pc, #404]	; (80145bc <_dtoa_r+0x62c>)
 8014428:	2200      	movs	r2, #0
 801442a:	4640      	mov	r0, r8
 801442c:	4649      	mov	r1, r9
 801442e:	f7ec f8bb 	bl	80005a8 <__aeabi_dmul>
 8014432:	4652      	mov	r2, sl
 8014434:	465b      	mov	r3, fp
 8014436:	f7ec fb3d 	bl	8000ab4 <__aeabi_dcmpge>
 801443a:	9e03      	ldr	r6, [sp, #12]
 801443c:	4637      	mov	r7, r6
 801443e:	2800      	cmp	r0, #0
 8014440:	f040 8245 	bne.w	80148ce <_dtoa_r+0x93e>
 8014444:	9d01      	ldr	r5, [sp, #4]
 8014446:	2331      	movs	r3, #49	; 0x31
 8014448:	f805 3b01 	strb.w	r3, [r5], #1
 801444c:	9b00      	ldr	r3, [sp, #0]
 801444e:	3301      	adds	r3, #1
 8014450:	9300      	str	r3, [sp, #0]
 8014452:	e240      	b.n	80148d6 <_dtoa_r+0x946>
 8014454:	07f2      	lsls	r2, r6, #31
 8014456:	d505      	bpl.n	8014464 <_dtoa_r+0x4d4>
 8014458:	e9d7 2300 	ldrd	r2, r3, [r7]
 801445c:	f7ec f8a4 	bl	80005a8 <__aeabi_dmul>
 8014460:	3501      	adds	r5, #1
 8014462:	2301      	movs	r3, #1
 8014464:	1076      	asrs	r6, r6, #1
 8014466:	3708      	adds	r7, #8
 8014468:	e777      	b.n	801435a <_dtoa_r+0x3ca>
 801446a:	2502      	movs	r5, #2
 801446c:	e779      	b.n	8014362 <_dtoa_r+0x3d2>
 801446e:	9f00      	ldr	r7, [sp, #0]
 8014470:	9e03      	ldr	r6, [sp, #12]
 8014472:	e794      	b.n	801439e <_dtoa_r+0x40e>
 8014474:	9901      	ldr	r1, [sp, #4]
 8014476:	4b4c      	ldr	r3, [pc, #304]	; (80145a8 <_dtoa_r+0x618>)
 8014478:	4431      	add	r1, r6
 801447a:	910d      	str	r1, [sp, #52]	; 0x34
 801447c:	9908      	ldr	r1, [sp, #32]
 801447e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8014482:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8014486:	2900      	cmp	r1, #0
 8014488:	d043      	beq.n	8014512 <_dtoa_r+0x582>
 801448a:	494d      	ldr	r1, [pc, #308]	; (80145c0 <_dtoa_r+0x630>)
 801448c:	2000      	movs	r0, #0
 801448e:	f7ec f9b5 	bl	80007fc <__aeabi_ddiv>
 8014492:	4652      	mov	r2, sl
 8014494:	465b      	mov	r3, fp
 8014496:	f7eb fecf 	bl	8000238 <__aeabi_dsub>
 801449a:	9d01      	ldr	r5, [sp, #4]
 801449c:	4682      	mov	sl, r0
 801449e:	468b      	mov	fp, r1
 80144a0:	4649      	mov	r1, r9
 80144a2:	4640      	mov	r0, r8
 80144a4:	f7ec fb30 	bl	8000b08 <__aeabi_d2iz>
 80144a8:	4606      	mov	r6, r0
 80144aa:	f7ec f813 	bl	80004d4 <__aeabi_i2d>
 80144ae:	4602      	mov	r2, r0
 80144b0:	460b      	mov	r3, r1
 80144b2:	4640      	mov	r0, r8
 80144b4:	4649      	mov	r1, r9
 80144b6:	f7eb febf 	bl	8000238 <__aeabi_dsub>
 80144ba:	3630      	adds	r6, #48	; 0x30
 80144bc:	f805 6b01 	strb.w	r6, [r5], #1
 80144c0:	4652      	mov	r2, sl
 80144c2:	465b      	mov	r3, fp
 80144c4:	4680      	mov	r8, r0
 80144c6:	4689      	mov	r9, r1
 80144c8:	f7ec fae0 	bl	8000a8c <__aeabi_dcmplt>
 80144cc:	2800      	cmp	r0, #0
 80144ce:	d163      	bne.n	8014598 <_dtoa_r+0x608>
 80144d0:	4642      	mov	r2, r8
 80144d2:	464b      	mov	r3, r9
 80144d4:	4936      	ldr	r1, [pc, #216]	; (80145b0 <_dtoa_r+0x620>)
 80144d6:	2000      	movs	r0, #0
 80144d8:	f7eb feae 	bl	8000238 <__aeabi_dsub>
 80144dc:	4652      	mov	r2, sl
 80144de:	465b      	mov	r3, fp
 80144e0:	f7ec fad4 	bl	8000a8c <__aeabi_dcmplt>
 80144e4:	2800      	cmp	r0, #0
 80144e6:	f040 80b5 	bne.w	8014654 <_dtoa_r+0x6c4>
 80144ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80144ec:	429d      	cmp	r5, r3
 80144ee:	d081      	beq.n	80143f4 <_dtoa_r+0x464>
 80144f0:	4b30      	ldr	r3, [pc, #192]	; (80145b4 <_dtoa_r+0x624>)
 80144f2:	2200      	movs	r2, #0
 80144f4:	4650      	mov	r0, sl
 80144f6:	4659      	mov	r1, fp
 80144f8:	f7ec f856 	bl	80005a8 <__aeabi_dmul>
 80144fc:	4b2d      	ldr	r3, [pc, #180]	; (80145b4 <_dtoa_r+0x624>)
 80144fe:	4682      	mov	sl, r0
 8014500:	468b      	mov	fp, r1
 8014502:	4640      	mov	r0, r8
 8014504:	4649      	mov	r1, r9
 8014506:	2200      	movs	r2, #0
 8014508:	f7ec f84e 	bl	80005a8 <__aeabi_dmul>
 801450c:	4680      	mov	r8, r0
 801450e:	4689      	mov	r9, r1
 8014510:	e7c6      	b.n	80144a0 <_dtoa_r+0x510>
 8014512:	4650      	mov	r0, sl
 8014514:	4659      	mov	r1, fp
 8014516:	f7ec f847 	bl	80005a8 <__aeabi_dmul>
 801451a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801451c:	9d01      	ldr	r5, [sp, #4]
 801451e:	930f      	str	r3, [sp, #60]	; 0x3c
 8014520:	4682      	mov	sl, r0
 8014522:	468b      	mov	fp, r1
 8014524:	4649      	mov	r1, r9
 8014526:	4640      	mov	r0, r8
 8014528:	f7ec faee 	bl	8000b08 <__aeabi_d2iz>
 801452c:	4606      	mov	r6, r0
 801452e:	f7eb ffd1 	bl	80004d4 <__aeabi_i2d>
 8014532:	3630      	adds	r6, #48	; 0x30
 8014534:	4602      	mov	r2, r0
 8014536:	460b      	mov	r3, r1
 8014538:	4640      	mov	r0, r8
 801453a:	4649      	mov	r1, r9
 801453c:	f7eb fe7c 	bl	8000238 <__aeabi_dsub>
 8014540:	f805 6b01 	strb.w	r6, [r5], #1
 8014544:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014546:	429d      	cmp	r5, r3
 8014548:	4680      	mov	r8, r0
 801454a:	4689      	mov	r9, r1
 801454c:	f04f 0200 	mov.w	r2, #0
 8014550:	d124      	bne.n	801459c <_dtoa_r+0x60c>
 8014552:	4b1b      	ldr	r3, [pc, #108]	; (80145c0 <_dtoa_r+0x630>)
 8014554:	4650      	mov	r0, sl
 8014556:	4659      	mov	r1, fp
 8014558:	f7eb fe70 	bl	800023c <__adddf3>
 801455c:	4602      	mov	r2, r0
 801455e:	460b      	mov	r3, r1
 8014560:	4640      	mov	r0, r8
 8014562:	4649      	mov	r1, r9
 8014564:	f7ec fab0 	bl	8000ac8 <__aeabi_dcmpgt>
 8014568:	2800      	cmp	r0, #0
 801456a:	d173      	bne.n	8014654 <_dtoa_r+0x6c4>
 801456c:	4652      	mov	r2, sl
 801456e:	465b      	mov	r3, fp
 8014570:	4913      	ldr	r1, [pc, #76]	; (80145c0 <_dtoa_r+0x630>)
 8014572:	2000      	movs	r0, #0
 8014574:	f7eb fe60 	bl	8000238 <__aeabi_dsub>
 8014578:	4602      	mov	r2, r0
 801457a:	460b      	mov	r3, r1
 801457c:	4640      	mov	r0, r8
 801457e:	4649      	mov	r1, r9
 8014580:	f7ec fa84 	bl	8000a8c <__aeabi_dcmplt>
 8014584:	2800      	cmp	r0, #0
 8014586:	f43f af35 	beq.w	80143f4 <_dtoa_r+0x464>
 801458a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801458c:	1e6b      	subs	r3, r5, #1
 801458e:	930f      	str	r3, [sp, #60]	; 0x3c
 8014590:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8014594:	2b30      	cmp	r3, #48	; 0x30
 8014596:	d0f8      	beq.n	801458a <_dtoa_r+0x5fa>
 8014598:	9700      	str	r7, [sp, #0]
 801459a:	e049      	b.n	8014630 <_dtoa_r+0x6a0>
 801459c:	4b05      	ldr	r3, [pc, #20]	; (80145b4 <_dtoa_r+0x624>)
 801459e:	f7ec f803 	bl	80005a8 <__aeabi_dmul>
 80145a2:	4680      	mov	r8, r0
 80145a4:	4689      	mov	r9, r1
 80145a6:	e7bd      	b.n	8014524 <_dtoa_r+0x594>
 80145a8:	08018158 	.word	0x08018158
 80145ac:	08018130 	.word	0x08018130
 80145b0:	3ff00000 	.word	0x3ff00000
 80145b4:	40240000 	.word	0x40240000
 80145b8:	401c0000 	.word	0x401c0000
 80145bc:	40140000 	.word	0x40140000
 80145c0:	3fe00000 	.word	0x3fe00000
 80145c4:	9d01      	ldr	r5, [sp, #4]
 80145c6:	4656      	mov	r6, sl
 80145c8:	465f      	mov	r7, fp
 80145ca:	4642      	mov	r2, r8
 80145cc:	464b      	mov	r3, r9
 80145ce:	4630      	mov	r0, r6
 80145d0:	4639      	mov	r1, r7
 80145d2:	f7ec f913 	bl	80007fc <__aeabi_ddiv>
 80145d6:	f7ec fa97 	bl	8000b08 <__aeabi_d2iz>
 80145da:	4682      	mov	sl, r0
 80145dc:	f7eb ff7a 	bl	80004d4 <__aeabi_i2d>
 80145e0:	4642      	mov	r2, r8
 80145e2:	464b      	mov	r3, r9
 80145e4:	f7eb ffe0 	bl	80005a8 <__aeabi_dmul>
 80145e8:	4602      	mov	r2, r0
 80145ea:	460b      	mov	r3, r1
 80145ec:	4630      	mov	r0, r6
 80145ee:	4639      	mov	r1, r7
 80145f0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80145f4:	f7eb fe20 	bl	8000238 <__aeabi_dsub>
 80145f8:	f805 6b01 	strb.w	r6, [r5], #1
 80145fc:	9e01      	ldr	r6, [sp, #4]
 80145fe:	9f03      	ldr	r7, [sp, #12]
 8014600:	1bae      	subs	r6, r5, r6
 8014602:	42b7      	cmp	r7, r6
 8014604:	4602      	mov	r2, r0
 8014606:	460b      	mov	r3, r1
 8014608:	d135      	bne.n	8014676 <_dtoa_r+0x6e6>
 801460a:	f7eb fe17 	bl	800023c <__adddf3>
 801460e:	4642      	mov	r2, r8
 8014610:	464b      	mov	r3, r9
 8014612:	4606      	mov	r6, r0
 8014614:	460f      	mov	r7, r1
 8014616:	f7ec fa57 	bl	8000ac8 <__aeabi_dcmpgt>
 801461a:	b9d0      	cbnz	r0, 8014652 <_dtoa_r+0x6c2>
 801461c:	4642      	mov	r2, r8
 801461e:	464b      	mov	r3, r9
 8014620:	4630      	mov	r0, r6
 8014622:	4639      	mov	r1, r7
 8014624:	f7ec fa28 	bl	8000a78 <__aeabi_dcmpeq>
 8014628:	b110      	cbz	r0, 8014630 <_dtoa_r+0x6a0>
 801462a:	f01a 0f01 	tst.w	sl, #1
 801462e:	d110      	bne.n	8014652 <_dtoa_r+0x6c2>
 8014630:	4620      	mov	r0, r4
 8014632:	ee18 1a10 	vmov	r1, s16
 8014636:	f000 fd09 	bl	801504c <_Bfree>
 801463a:	2300      	movs	r3, #0
 801463c:	9800      	ldr	r0, [sp, #0]
 801463e:	702b      	strb	r3, [r5, #0]
 8014640:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014642:	3001      	adds	r0, #1
 8014644:	6018      	str	r0, [r3, #0]
 8014646:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014648:	2b00      	cmp	r3, #0
 801464a:	f43f acf1 	beq.w	8014030 <_dtoa_r+0xa0>
 801464e:	601d      	str	r5, [r3, #0]
 8014650:	e4ee      	b.n	8014030 <_dtoa_r+0xa0>
 8014652:	9f00      	ldr	r7, [sp, #0]
 8014654:	462b      	mov	r3, r5
 8014656:	461d      	mov	r5, r3
 8014658:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801465c:	2a39      	cmp	r2, #57	; 0x39
 801465e:	d106      	bne.n	801466e <_dtoa_r+0x6de>
 8014660:	9a01      	ldr	r2, [sp, #4]
 8014662:	429a      	cmp	r2, r3
 8014664:	d1f7      	bne.n	8014656 <_dtoa_r+0x6c6>
 8014666:	9901      	ldr	r1, [sp, #4]
 8014668:	2230      	movs	r2, #48	; 0x30
 801466a:	3701      	adds	r7, #1
 801466c:	700a      	strb	r2, [r1, #0]
 801466e:	781a      	ldrb	r2, [r3, #0]
 8014670:	3201      	adds	r2, #1
 8014672:	701a      	strb	r2, [r3, #0]
 8014674:	e790      	b.n	8014598 <_dtoa_r+0x608>
 8014676:	4ba6      	ldr	r3, [pc, #664]	; (8014910 <_dtoa_r+0x980>)
 8014678:	2200      	movs	r2, #0
 801467a:	f7eb ff95 	bl	80005a8 <__aeabi_dmul>
 801467e:	2200      	movs	r2, #0
 8014680:	2300      	movs	r3, #0
 8014682:	4606      	mov	r6, r0
 8014684:	460f      	mov	r7, r1
 8014686:	f7ec f9f7 	bl	8000a78 <__aeabi_dcmpeq>
 801468a:	2800      	cmp	r0, #0
 801468c:	d09d      	beq.n	80145ca <_dtoa_r+0x63a>
 801468e:	e7cf      	b.n	8014630 <_dtoa_r+0x6a0>
 8014690:	9a08      	ldr	r2, [sp, #32]
 8014692:	2a00      	cmp	r2, #0
 8014694:	f000 80d7 	beq.w	8014846 <_dtoa_r+0x8b6>
 8014698:	9a06      	ldr	r2, [sp, #24]
 801469a:	2a01      	cmp	r2, #1
 801469c:	f300 80ba 	bgt.w	8014814 <_dtoa_r+0x884>
 80146a0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80146a2:	2a00      	cmp	r2, #0
 80146a4:	f000 80b2 	beq.w	801480c <_dtoa_r+0x87c>
 80146a8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80146ac:	9e07      	ldr	r6, [sp, #28]
 80146ae:	9d04      	ldr	r5, [sp, #16]
 80146b0:	9a04      	ldr	r2, [sp, #16]
 80146b2:	441a      	add	r2, r3
 80146b4:	9204      	str	r2, [sp, #16]
 80146b6:	9a05      	ldr	r2, [sp, #20]
 80146b8:	2101      	movs	r1, #1
 80146ba:	441a      	add	r2, r3
 80146bc:	4620      	mov	r0, r4
 80146be:	9205      	str	r2, [sp, #20]
 80146c0:	f000 fd7c 	bl	80151bc <__i2b>
 80146c4:	4607      	mov	r7, r0
 80146c6:	2d00      	cmp	r5, #0
 80146c8:	dd0c      	ble.n	80146e4 <_dtoa_r+0x754>
 80146ca:	9b05      	ldr	r3, [sp, #20]
 80146cc:	2b00      	cmp	r3, #0
 80146ce:	dd09      	ble.n	80146e4 <_dtoa_r+0x754>
 80146d0:	42ab      	cmp	r3, r5
 80146d2:	9a04      	ldr	r2, [sp, #16]
 80146d4:	bfa8      	it	ge
 80146d6:	462b      	movge	r3, r5
 80146d8:	1ad2      	subs	r2, r2, r3
 80146da:	9204      	str	r2, [sp, #16]
 80146dc:	9a05      	ldr	r2, [sp, #20]
 80146de:	1aed      	subs	r5, r5, r3
 80146e0:	1ad3      	subs	r3, r2, r3
 80146e2:	9305      	str	r3, [sp, #20]
 80146e4:	9b07      	ldr	r3, [sp, #28]
 80146e6:	b31b      	cbz	r3, 8014730 <_dtoa_r+0x7a0>
 80146e8:	9b08      	ldr	r3, [sp, #32]
 80146ea:	2b00      	cmp	r3, #0
 80146ec:	f000 80af 	beq.w	801484e <_dtoa_r+0x8be>
 80146f0:	2e00      	cmp	r6, #0
 80146f2:	dd13      	ble.n	801471c <_dtoa_r+0x78c>
 80146f4:	4639      	mov	r1, r7
 80146f6:	4632      	mov	r2, r6
 80146f8:	4620      	mov	r0, r4
 80146fa:	f000 fe1f 	bl	801533c <__pow5mult>
 80146fe:	ee18 2a10 	vmov	r2, s16
 8014702:	4601      	mov	r1, r0
 8014704:	4607      	mov	r7, r0
 8014706:	4620      	mov	r0, r4
 8014708:	f000 fd6e 	bl	80151e8 <__multiply>
 801470c:	ee18 1a10 	vmov	r1, s16
 8014710:	4680      	mov	r8, r0
 8014712:	4620      	mov	r0, r4
 8014714:	f000 fc9a 	bl	801504c <_Bfree>
 8014718:	ee08 8a10 	vmov	s16, r8
 801471c:	9b07      	ldr	r3, [sp, #28]
 801471e:	1b9a      	subs	r2, r3, r6
 8014720:	d006      	beq.n	8014730 <_dtoa_r+0x7a0>
 8014722:	ee18 1a10 	vmov	r1, s16
 8014726:	4620      	mov	r0, r4
 8014728:	f000 fe08 	bl	801533c <__pow5mult>
 801472c:	ee08 0a10 	vmov	s16, r0
 8014730:	2101      	movs	r1, #1
 8014732:	4620      	mov	r0, r4
 8014734:	f000 fd42 	bl	80151bc <__i2b>
 8014738:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801473a:	2b00      	cmp	r3, #0
 801473c:	4606      	mov	r6, r0
 801473e:	f340 8088 	ble.w	8014852 <_dtoa_r+0x8c2>
 8014742:	461a      	mov	r2, r3
 8014744:	4601      	mov	r1, r0
 8014746:	4620      	mov	r0, r4
 8014748:	f000 fdf8 	bl	801533c <__pow5mult>
 801474c:	9b06      	ldr	r3, [sp, #24]
 801474e:	2b01      	cmp	r3, #1
 8014750:	4606      	mov	r6, r0
 8014752:	f340 8081 	ble.w	8014858 <_dtoa_r+0x8c8>
 8014756:	f04f 0800 	mov.w	r8, #0
 801475a:	6933      	ldr	r3, [r6, #16]
 801475c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8014760:	6918      	ldr	r0, [r3, #16]
 8014762:	f000 fcdb 	bl	801511c <__hi0bits>
 8014766:	f1c0 0020 	rsb	r0, r0, #32
 801476a:	9b05      	ldr	r3, [sp, #20]
 801476c:	4418      	add	r0, r3
 801476e:	f010 001f 	ands.w	r0, r0, #31
 8014772:	f000 8092 	beq.w	801489a <_dtoa_r+0x90a>
 8014776:	f1c0 0320 	rsb	r3, r0, #32
 801477a:	2b04      	cmp	r3, #4
 801477c:	f340 808a 	ble.w	8014894 <_dtoa_r+0x904>
 8014780:	f1c0 001c 	rsb	r0, r0, #28
 8014784:	9b04      	ldr	r3, [sp, #16]
 8014786:	4403      	add	r3, r0
 8014788:	9304      	str	r3, [sp, #16]
 801478a:	9b05      	ldr	r3, [sp, #20]
 801478c:	4403      	add	r3, r0
 801478e:	4405      	add	r5, r0
 8014790:	9305      	str	r3, [sp, #20]
 8014792:	9b04      	ldr	r3, [sp, #16]
 8014794:	2b00      	cmp	r3, #0
 8014796:	dd07      	ble.n	80147a8 <_dtoa_r+0x818>
 8014798:	ee18 1a10 	vmov	r1, s16
 801479c:	461a      	mov	r2, r3
 801479e:	4620      	mov	r0, r4
 80147a0:	f000 fe26 	bl	80153f0 <__lshift>
 80147a4:	ee08 0a10 	vmov	s16, r0
 80147a8:	9b05      	ldr	r3, [sp, #20]
 80147aa:	2b00      	cmp	r3, #0
 80147ac:	dd05      	ble.n	80147ba <_dtoa_r+0x82a>
 80147ae:	4631      	mov	r1, r6
 80147b0:	461a      	mov	r2, r3
 80147b2:	4620      	mov	r0, r4
 80147b4:	f000 fe1c 	bl	80153f0 <__lshift>
 80147b8:	4606      	mov	r6, r0
 80147ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80147bc:	2b00      	cmp	r3, #0
 80147be:	d06e      	beq.n	801489e <_dtoa_r+0x90e>
 80147c0:	ee18 0a10 	vmov	r0, s16
 80147c4:	4631      	mov	r1, r6
 80147c6:	f000 fe83 	bl	80154d0 <__mcmp>
 80147ca:	2800      	cmp	r0, #0
 80147cc:	da67      	bge.n	801489e <_dtoa_r+0x90e>
 80147ce:	9b00      	ldr	r3, [sp, #0]
 80147d0:	3b01      	subs	r3, #1
 80147d2:	ee18 1a10 	vmov	r1, s16
 80147d6:	9300      	str	r3, [sp, #0]
 80147d8:	220a      	movs	r2, #10
 80147da:	2300      	movs	r3, #0
 80147dc:	4620      	mov	r0, r4
 80147de:	f000 fc57 	bl	8015090 <__multadd>
 80147e2:	9b08      	ldr	r3, [sp, #32]
 80147e4:	ee08 0a10 	vmov	s16, r0
 80147e8:	2b00      	cmp	r3, #0
 80147ea:	f000 81b1 	beq.w	8014b50 <_dtoa_r+0xbc0>
 80147ee:	2300      	movs	r3, #0
 80147f0:	4639      	mov	r1, r7
 80147f2:	220a      	movs	r2, #10
 80147f4:	4620      	mov	r0, r4
 80147f6:	f000 fc4b 	bl	8015090 <__multadd>
 80147fa:	9b02      	ldr	r3, [sp, #8]
 80147fc:	2b00      	cmp	r3, #0
 80147fe:	4607      	mov	r7, r0
 8014800:	f300 808e 	bgt.w	8014920 <_dtoa_r+0x990>
 8014804:	9b06      	ldr	r3, [sp, #24]
 8014806:	2b02      	cmp	r3, #2
 8014808:	dc51      	bgt.n	80148ae <_dtoa_r+0x91e>
 801480a:	e089      	b.n	8014920 <_dtoa_r+0x990>
 801480c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801480e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8014812:	e74b      	b.n	80146ac <_dtoa_r+0x71c>
 8014814:	9b03      	ldr	r3, [sp, #12]
 8014816:	1e5e      	subs	r6, r3, #1
 8014818:	9b07      	ldr	r3, [sp, #28]
 801481a:	42b3      	cmp	r3, r6
 801481c:	bfbf      	itttt	lt
 801481e:	9b07      	ldrlt	r3, [sp, #28]
 8014820:	9607      	strlt	r6, [sp, #28]
 8014822:	1af2      	sublt	r2, r6, r3
 8014824:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8014826:	bfb6      	itet	lt
 8014828:	189b      	addlt	r3, r3, r2
 801482a:	1b9e      	subge	r6, r3, r6
 801482c:	930a      	strlt	r3, [sp, #40]	; 0x28
 801482e:	9b03      	ldr	r3, [sp, #12]
 8014830:	bfb8      	it	lt
 8014832:	2600      	movlt	r6, #0
 8014834:	2b00      	cmp	r3, #0
 8014836:	bfb7      	itett	lt
 8014838:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 801483c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8014840:	1a9d      	sublt	r5, r3, r2
 8014842:	2300      	movlt	r3, #0
 8014844:	e734      	b.n	80146b0 <_dtoa_r+0x720>
 8014846:	9e07      	ldr	r6, [sp, #28]
 8014848:	9d04      	ldr	r5, [sp, #16]
 801484a:	9f08      	ldr	r7, [sp, #32]
 801484c:	e73b      	b.n	80146c6 <_dtoa_r+0x736>
 801484e:	9a07      	ldr	r2, [sp, #28]
 8014850:	e767      	b.n	8014722 <_dtoa_r+0x792>
 8014852:	9b06      	ldr	r3, [sp, #24]
 8014854:	2b01      	cmp	r3, #1
 8014856:	dc18      	bgt.n	801488a <_dtoa_r+0x8fa>
 8014858:	f1ba 0f00 	cmp.w	sl, #0
 801485c:	d115      	bne.n	801488a <_dtoa_r+0x8fa>
 801485e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8014862:	b993      	cbnz	r3, 801488a <_dtoa_r+0x8fa>
 8014864:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8014868:	0d1b      	lsrs	r3, r3, #20
 801486a:	051b      	lsls	r3, r3, #20
 801486c:	b183      	cbz	r3, 8014890 <_dtoa_r+0x900>
 801486e:	9b04      	ldr	r3, [sp, #16]
 8014870:	3301      	adds	r3, #1
 8014872:	9304      	str	r3, [sp, #16]
 8014874:	9b05      	ldr	r3, [sp, #20]
 8014876:	3301      	adds	r3, #1
 8014878:	9305      	str	r3, [sp, #20]
 801487a:	f04f 0801 	mov.w	r8, #1
 801487e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014880:	2b00      	cmp	r3, #0
 8014882:	f47f af6a 	bne.w	801475a <_dtoa_r+0x7ca>
 8014886:	2001      	movs	r0, #1
 8014888:	e76f      	b.n	801476a <_dtoa_r+0x7da>
 801488a:	f04f 0800 	mov.w	r8, #0
 801488e:	e7f6      	b.n	801487e <_dtoa_r+0x8ee>
 8014890:	4698      	mov	r8, r3
 8014892:	e7f4      	b.n	801487e <_dtoa_r+0x8ee>
 8014894:	f43f af7d 	beq.w	8014792 <_dtoa_r+0x802>
 8014898:	4618      	mov	r0, r3
 801489a:	301c      	adds	r0, #28
 801489c:	e772      	b.n	8014784 <_dtoa_r+0x7f4>
 801489e:	9b03      	ldr	r3, [sp, #12]
 80148a0:	2b00      	cmp	r3, #0
 80148a2:	dc37      	bgt.n	8014914 <_dtoa_r+0x984>
 80148a4:	9b06      	ldr	r3, [sp, #24]
 80148a6:	2b02      	cmp	r3, #2
 80148a8:	dd34      	ble.n	8014914 <_dtoa_r+0x984>
 80148aa:	9b03      	ldr	r3, [sp, #12]
 80148ac:	9302      	str	r3, [sp, #8]
 80148ae:	9b02      	ldr	r3, [sp, #8]
 80148b0:	b96b      	cbnz	r3, 80148ce <_dtoa_r+0x93e>
 80148b2:	4631      	mov	r1, r6
 80148b4:	2205      	movs	r2, #5
 80148b6:	4620      	mov	r0, r4
 80148b8:	f000 fbea 	bl	8015090 <__multadd>
 80148bc:	4601      	mov	r1, r0
 80148be:	4606      	mov	r6, r0
 80148c0:	ee18 0a10 	vmov	r0, s16
 80148c4:	f000 fe04 	bl	80154d0 <__mcmp>
 80148c8:	2800      	cmp	r0, #0
 80148ca:	f73f adbb 	bgt.w	8014444 <_dtoa_r+0x4b4>
 80148ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80148d0:	9d01      	ldr	r5, [sp, #4]
 80148d2:	43db      	mvns	r3, r3
 80148d4:	9300      	str	r3, [sp, #0]
 80148d6:	f04f 0800 	mov.w	r8, #0
 80148da:	4631      	mov	r1, r6
 80148dc:	4620      	mov	r0, r4
 80148de:	f000 fbb5 	bl	801504c <_Bfree>
 80148e2:	2f00      	cmp	r7, #0
 80148e4:	f43f aea4 	beq.w	8014630 <_dtoa_r+0x6a0>
 80148e8:	f1b8 0f00 	cmp.w	r8, #0
 80148ec:	d005      	beq.n	80148fa <_dtoa_r+0x96a>
 80148ee:	45b8      	cmp	r8, r7
 80148f0:	d003      	beq.n	80148fa <_dtoa_r+0x96a>
 80148f2:	4641      	mov	r1, r8
 80148f4:	4620      	mov	r0, r4
 80148f6:	f000 fba9 	bl	801504c <_Bfree>
 80148fa:	4639      	mov	r1, r7
 80148fc:	4620      	mov	r0, r4
 80148fe:	f000 fba5 	bl	801504c <_Bfree>
 8014902:	e695      	b.n	8014630 <_dtoa_r+0x6a0>
 8014904:	2600      	movs	r6, #0
 8014906:	4637      	mov	r7, r6
 8014908:	e7e1      	b.n	80148ce <_dtoa_r+0x93e>
 801490a:	9700      	str	r7, [sp, #0]
 801490c:	4637      	mov	r7, r6
 801490e:	e599      	b.n	8014444 <_dtoa_r+0x4b4>
 8014910:	40240000 	.word	0x40240000
 8014914:	9b08      	ldr	r3, [sp, #32]
 8014916:	2b00      	cmp	r3, #0
 8014918:	f000 80ca 	beq.w	8014ab0 <_dtoa_r+0xb20>
 801491c:	9b03      	ldr	r3, [sp, #12]
 801491e:	9302      	str	r3, [sp, #8]
 8014920:	2d00      	cmp	r5, #0
 8014922:	dd05      	ble.n	8014930 <_dtoa_r+0x9a0>
 8014924:	4639      	mov	r1, r7
 8014926:	462a      	mov	r2, r5
 8014928:	4620      	mov	r0, r4
 801492a:	f000 fd61 	bl	80153f0 <__lshift>
 801492e:	4607      	mov	r7, r0
 8014930:	f1b8 0f00 	cmp.w	r8, #0
 8014934:	d05b      	beq.n	80149ee <_dtoa_r+0xa5e>
 8014936:	6879      	ldr	r1, [r7, #4]
 8014938:	4620      	mov	r0, r4
 801493a:	f000 fb47 	bl	8014fcc <_Balloc>
 801493e:	4605      	mov	r5, r0
 8014940:	b928      	cbnz	r0, 801494e <_dtoa_r+0x9be>
 8014942:	4b87      	ldr	r3, [pc, #540]	; (8014b60 <_dtoa_r+0xbd0>)
 8014944:	4602      	mov	r2, r0
 8014946:	f240 21ea 	movw	r1, #746	; 0x2ea
 801494a:	f7ff bb3b 	b.w	8013fc4 <_dtoa_r+0x34>
 801494e:	693a      	ldr	r2, [r7, #16]
 8014950:	3202      	adds	r2, #2
 8014952:	0092      	lsls	r2, r2, #2
 8014954:	f107 010c 	add.w	r1, r7, #12
 8014958:	300c      	adds	r0, #12
 801495a:	f7fe fb99 	bl	8013090 <memcpy>
 801495e:	2201      	movs	r2, #1
 8014960:	4629      	mov	r1, r5
 8014962:	4620      	mov	r0, r4
 8014964:	f000 fd44 	bl	80153f0 <__lshift>
 8014968:	9b01      	ldr	r3, [sp, #4]
 801496a:	f103 0901 	add.w	r9, r3, #1
 801496e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8014972:	4413      	add	r3, r2
 8014974:	9305      	str	r3, [sp, #20]
 8014976:	f00a 0301 	and.w	r3, sl, #1
 801497a:	46b8      	mov	r8, r7
 801497c:	9304      	str	r3, [sp, #16]
 801497e:	4607      	mov	r7, r0
 8014980:	4631      	mov	r1, r6
 8014982:	ee18 0a10 	vmov	r0, s16
 8014986:	f7ff fa77 	bl	8013e78 <quorem>
 801498a:	4641      	mov	r1, r8
 801498c:	9002      	str	r0, [sp, #8]
 801498e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8014992:	ee18 0a10 	vmov	r0, s16
 8014996:	f000 fd9b 	bl	80154d0 <__mcmp>
 801499a:	463a      	mov	r2, r7
 801499c:	9003      	str	r0, [sp, #12]
 801499e:	4631      	mov	r1, r6
 80149a0:	4620      	mov	r0, r4
 80149a2:	f000 fdb1 	bl	8015508 <__mdiff>
 80149a6:	68c2      	ldr	r2, [r0, #12]
 80149a8:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 80149ac:	4605      	mov	r5, r0
 80149ae:	bb02      	cbnz	r2, 80149f2 <_dtoa_r+0xa62>
 80149b0:	4601      	mov	r1, r0
 80149b2:	ee18 0a10 	vmov	r0, s16
 80149b6:	f000 fd8b 	bl	80154d0 <__mcmp>
 80149ba:	4602      	mov	r2, r0
 80149bc:	4629      	mov	r1, r5
 80149be:	4620      	mov	r0, r4
 80149c0:	9207      	str	r2, [sp, #28]
 80149c2:	f000 fb43 	bl	801504c <_Bfree>
 80149c6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80149ca:	ea43 0102 	orr.w	r1, r3, r2
 80149ce:	9b04      	ldr	r3, [sp, #16]
 80149d0:	430b      	orrs	r3, r1
 80149d2:	464d      	mov	r5, r9
 80149d4:	d10f      	bne.n	80149f6 <_dtoa_r+0xa66>
 80149d6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80149da:	d02a      	beq.n	8014a32 <_dtoa_r+0xaa2>
 80149dc:	9b03      	ldr	r3, [sp, #12]
 80149de:	2b00      	cmp	r3, #0
 80149e0:	dd02      	ble.n	80149e8 <_dtoa_r+0xa58>
 80149e2:	9b02      	ldr	r3, [sp, #8]
 80149e4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80149e8:	f88b a000 	strb.w	sl, [fp]
 80149ec:	e775      	b.n	80148da <_dtoa_r+0x94a>
 80149ee:	4638      	mov	r0, r7
 80149f0:	e7ba      	b.n	8014968 <_dtoa_r+0x9d8>
 80149f2:	2201      	movs	r2, #1
 80149f4:	e7e2      	b.n	80149bc <_dtoa_r+0xa2c>
 80149f6:	9b03      	ldr	r3, [sp, #12]
 80149f8:	2b00      	cmp	r3, #0
 80149fa:	db04      	blt.n	8014a06 <_dtoa_r+0xa76>
 80149fc:	9906      	ldr	r1, [sp, #24]
 80149fe:	430b      	orrs	r3, r1
 8014a00:	9904      	ldr	r1, [sp, #16]
 8014a02:	430b      	orrs	r3, r1
 8014a04:	d122      	bne.n	8014a4c <_dtoa_r+0xabc>
 8014a06:	2a00      	cmp	r2, #0
 8014a08:	ddee      	ble.n	80149e8 <_dtoa_r+0xa58>
 8014a0a:	ee18 1a10 	vmov	r1, s16
 8014a0e:	2201      	movs	r2, #1
 8014a10:	4620      	mov	r0, r4
 8014a12:	f000 fced 	bl	80153f0 <__lshift>
 8014a16:	4631      	mov	r1, r6
 8014a18:	ee08 0a10 	vmov	s16, r0
 8014a1c:	f000 fd58 	bl	80154d0 <__mcmp>
 8014a20:	2800      	cmp	r0, #0
 8014a22:	dc03      	bgt.n	8014a2c <_dtoa_r+0xa9c>
 8014a24:	d1e0      	bne.n	80149e8 <_dtoa_r+0xa58>
 8014a26:	f01a 0f01 	tst.w	sl, #1
 8014a2a:	d0dd      	beq.n	80149e8 <_dtoa_r+0xa58>
 8014a2c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8014a30:	d1d7      	bne.n	80149e2 <_dtoa_r+0xa52>
 8014a32:	2339      	movs	r3, #57	; 0x39
 8014a34:	f88b 3000 	strb.w	r3, [fp]
 8014a38:	462b      	mov	r3, r5
 8014a3a:	461d      	mov	r5, r3
 8014a3c:	3b01      	subs	r3, #1
 8014a3e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8014a42:	2a39      	cmp	r2, #57	; 0x39
 8014a44:	d071      	beq.n	8014b2a <_dtoa_r+0xb9a>
 8014a46:	3201      	adds	r2, #1
 8014a48:	701a      	strb	r2, [r3, #0]
 8014a4a:	e746      	b.n	80148da <_dtoa_r+0x94a>
 8014a4c:	2a00      	cmp	r2, #0
 8014a4e:	dd07      	ble.n	8014a60 <_dtoa_r+0xad0>
 8014a50:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8014a54:	d0ed      	beq.n	8014a32 <_dtoa_r+0xaa2>
 8014a56:	f10a 0301 	add.w	r3, sl, #1
 8014a5a:	f88b 3000 	strb.w	r3, [fp]
 8014a5e:	e73c      	b.n	80148da <_dtoa_r+0x94a>
 8014a60:	9b05      	ldr	r3, [sp, #20]
 8014a62:	f809 ac01 	strb.w	sl, [r9, #-1]
 8014a66:	4599      	cmp	r9, r3
 8014a68:	d047      	beq.n	8014afa <_dtoa_r+0xb6a>
 8014a6a:	ee18 1a10 	vmov	r1, s16
 8014a6e:	2300      	movs	r3, #0
 8014a70:	220a      	movs	r2, #10
 8014a72:	4620      	mov	r0, r4
 8014a74:	f000 fb0c 	bl	8015090 <__multadd>
 8014a78:	45b8      	cmp	r8, r7
 8014a7a:	ee08 0a10 	vmov	s16, r0
 8014a7e:	f04f 0300 	mov.w	r3, #0
 8014a82:	f04f 020a 	mov.w	r2, #10
 8014a86:	4641      	mov	r1, r8
 8014a88:	4620      	mov	r0, r4
 8014a8a:	d106      	bne.n	8014a9a <_dtoa_r+0xb0a>
 8014a8c:	f000 fb00 	bl	8015090 <__multadd>
 8014a90:	4680      	mov	r8, r0
 8014a92:	4607      	mov	r7, r0
 8014a94:	f109 0901 	add.w	r9, r9, #1
 8014a98:	e772      	b.n	8014980 <_dtoa_r+0x9f0>
 8014a9a:	f000 faf9 	bl	8015090 <__multadd>
 8014a9e:	4639      	mov	r1, r7
 8014aa0:	4680      	mov	r8, r0
 8014aa2:	2300      	movs	r3, #0
 8014aa4:	220a      	movs	r2, #10
 8014aa6:	4620      	mov	r0, r4
 8014aa8:	f000 faf2 	bl	8015090 <__multadd>
 8014aac:	4607      	mov	r7, r0
 8014aae:	e7f1      	b.n	8014a94 <_dtoa_r+0xb04>
 8014ab0:	9b03      	ldr	r3, [sp, #12]
 8014ab2:	9302      	str	r3, [sp, #8]
 8014ab4:	9d01      	ldr	r5, [sp, #4]
 8014ab6:	ee18 0a10 	vmov	r0, s16
 8014aba:	4631      	mov	r1, r6
 8014abc:	f7ff f9dc 	bl	8013e78 <quorem>
 8014ac0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8014ac4:	9b01      	ldr	r3, [sp, #4]
 8014ac6:	f805 ab01 	strb.w	sl, [r5], #1
 8014aca:	1aea      	subs	r2, r5, r3
 8014acc:	9b02      	ldr	r3, [sp, #8]
 8014ace:	4293      	cmp	r3, r2
 8014ad0:	dd09      	ble.n	8014ae6 <_dtoa_r+0xb56>
 8014ad2:	ee18 1a10 	vmov	r1, s16
 8014ad6:	2300      	movs	r3, #0
 8014ad8:	220a      	movs	r2, #10
 8014ada:	4620      	mov	r0, r4
 8014adc:	f000 fad8 	bl	8015090 <__multadd>
 8014ae0:	ee08 0a10 	vmov	s16, r0
 8014ae4:	e7e7      	b.n	8014ab6 <_dtoa_r+0xb26>
 8014ae6:	9b02      	ldr	r3, [sp, #8]
 8014ae8:	2b00      	cmp	r3, #0
 8014aea:	bfc8      	it	gt
 8014aec:	461d      	movgt	r5, r3
 8014aee:	9b01      	ldr	r3, [sp, #4]
 8014af0:	bfd8      	it	le
 8014af2:	2501      	movle	r5, #1
 8014af4:	441d      	add	r5, r3
 8014af6:	f04f 0800 	mov.w	r8, #0
 8014afa:	ee18 1a10 	vmov	r1, s16
 8014afe:	2201      	movs	r2, #1
 8014b00:	4620      	mov	r0, r4
 8014b02:	f000 fc75 	bl	80153f0 <__lshift>
 8014b06:	4631      	mov	r1, r6
 8014b08:	ee08 0a10 	vmov	s16, r0
 8014b0c:	f000 fce0 	bl	80154d0 <__mcmp>
 8014b10:	2800      	cmp	r0, #0
 8014b12:	dc91      	bgt.n	8014a38 <_dtoa_r+0xaa8>
 8014b14:	d102      	bne.n	8014b1c <_dtoa_r+0xb8c>
 8014b16:	f01a 0f01 	tst.w	sl, #1
 8014b1a:	d18d      	bne.n	8014a38 <_dtoa_r+0xaa8>
 8014b1c:	462b      	mov	r3, r5
 8014b1e:	461d      	mov	r5, r3
 8014b20:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8014b24:	2a30      	cmp	r2, #48	; 0x30
 8014b26:	d0fa      	beq.n	8014b1e <_dtoa_r+0xb8e>
 8014b28:	e6d7      	b.n	80148da <_dtoa_r+0x94a>
 8014b2a:	9a01      	ldr	r2, [sp, #4]
 8014b2c:	429a      	cmp	r2, r3
 8014b2e:	d184      	bne.n	8014a3a <_dtoa_r+0xaaa>
 8014b30:	9b00      	ldr	r3, [sp, #0]
 8014b32:	3301      	adds	r3, #1
 8014b34:	9300      	str	r3, [sp, #0]
 8014b36:	2331      	movs	r3, #49	; 0x31
 8014b38:	7013      	strb	r3, [r2, #0]
 8014b3a:	e6ce      	b.n	80148da <_dtoa_r+0x94a>
 8014b3c:	4b09      	ldr	r3, [pc, #36]	; (8014b64 <_dtoa_r+0xbd4>)
 8014b3e:	f7ff ba95 	b.w	801406c <_dtoa_r+0xdc>
 8014b42:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014b44:	2b00      	cmp	r3, #0
 8014b46:	f47f aa6e 	bne.w	8014026 <_dtoa_r+0x96>
 8014b4a:	4b07      	ldr	r3, [pc, #28]	; (8014b68 <_dtoa_r+0xbd8>)
 8014b4c:	f7ff ba8e 	b.w	801406c <_dtoa_r+0xdc>
 8014b50:	9b02      	ldr	r3, [sp, #8]
 8014b52:	2b00      	cmp	r3, #0
 8014b54:	dcae      	bgt.n	8014ab4 <_dtoa_r+0xb24>
 8014b56:	9b06      	ldr	r3, [sp, #24]
 8014b58:	2b02      	cmp	r3, #2
 8014b5a:	f73f aea8 	bgt.w	80148ae <_dtoa_r+0x91e>
 8014b5e:	e7a9      	b.n	8014ab4 <_dtoa_r+0xb24>
 8014b60:	0801805f 	.word	0x0801805f
 8014b64:	08017fbc 	.word	0x08017fbc
 8014b68:	08017fe0 	.word	0x08017fe0

08014b6c <__sflush_r>:
 8014b6c:	898a      	ldrh	r2, [r1, #12]
 8014b6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014b72:	4605      	mov	r5, r0
 8014b74:	0710      	lsls	r0, r2, #28
 8014b76:	460c      	mov	r4, r1
 8014b78:	d458      	bmi.n	8014c2c <__sflush_r+0xc0>
 8014b7a:	684b      	ldr	r3, [r1, #4]
 8014b7c:	2b00      	cmp	r3, #0
 8014b7e:	dc05      	bgt.n	8014b8c <__sflush_r+0x20>
 8014b80:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8014b82:	2b00      	cmp	r3, #0
 8014b84:	dc02      	bgt.n	8014b8c <__sflush_r+0x20>
 8014b86:	2000      	movs	r0, #0
 8014b88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014b8c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014b8e:	2e00      	cmp	r6, #0
 8014b90:	d0f9      	beq.n	8014b86 <__sflush_r+0x1a>
 8014b92:	2300      	movs	r3, #0
 8014b94:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8014b98:	682f      	ldr	r7, [r5, #0]
 8014b9a:	602b      	str	r3, [r5, #0]
 8014b9c:	d032      	beq.n	8014c04 <__sflush_r+0x98>
 8014b9e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8014ba0:	89a3      	ldrh	r3, [r4, #12]
 8014ba2:	075a      	lsls	r2, r3, #29
 8014ba4:	d505      	bpl.n	8014bb2 <__sflush_r+0x46>
 8014ba6:	6863      	ldr	r3, [r4, #4]
 8014ba8:	1ac0      	subs	r0, r0, r3
 8014baa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014bac:	b10b      	cbz	r3, 8014bb2 <__sflush_r+0x46>
 8014bae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8014bb0:	1ac0      	subs	r0, r0, r3
 8014bb2:	2300      	movs	r3, #0
 8014bb4:	4602      	mov	r2, r0
 8014bb6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014bb8:	6a21      	ldr	r1, [r4, #32]
 8014bba:	4628      	mov	r0, r5
 8014bbc:	47b0      	blx	r6
 8014bbe:	1c43      	adds	r3, r0, #1
 8014bc0:	89a3      	ldrh	r3, [r4, #12]
 8014bc2:	d106      	bne.n	8014bd2 <__sflush_r+0x66>
 8014bc4:	6829      	ldr	r1, [r5, #0]
 8014bc6:	291d      	cmp	r1, #29
 8014bc8:	d82c      	bhi.n	8014c24 <__sflush_r+0xb8>
 8014bca:	4a2a      	ldr	r2, [pc, #168]	; (8014c74 <__sflush_r+0x108>)
 8014bcc:	40ca      	lsrs	r2, r1
 8014bce:	07d6      	lsls	r6, r2, #31
 8014bd0:	d528      	bpl.n	8014c24 <__sflush_r+0xb8>
 8014bd2:	2200      	movs	r2, #0
 8014bd4:	6062      	str	r2, [r4, #4]
 8014bd6:	04d9      	lsls	r1, r3, #19
 8014bd8:	6922      	ldr	r2, [r4, #16]
 8014bda:	6022      	str	r2, [r4, #0]
 8014bdc:	d504      	bpl.n	8014be8 <__sflush_r+0x7c>
 8014bde:	1c42      	adds	r2, r0, #1
 8014be0:	d101      	bne.n	8014be6 <__sflush_r+0x7a>
 8014be2:	682b      	ldr	r3, [r5, #0]
 8014be4:	b903      	cbnz	r3, 8014be8 <__sflush_r+0x7c>
 8014be6:	6560      	str	r0, [r4, #84]	; 0x54
 8014be8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014bea:	602f      	str	r7, [r5, #0]
 8014bec:	2900      	cmp	r1, #0
 8014bee:	d0ca      	beq.n	8014b86 <__sflush_r+0x1a>
 8014bf0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014bf4:	4299      	cmp	r1, r3
 8014bf6:	d002      	beq.n	8014bfe <__sflush_r+0x92>
 8014bf8:	4628      	mov	r0, r5
 8014bfa:	f7fe fa5f 	bl	80130bc <_free_r>
 8014bfe:	2000      	movs	r0, #0
 8014c00:	6360      	str	r0, [r4, #52]	; 0x34
 8014c02:	e7c1      	b.n	8014b88 <__sflush_r+0x1c>
 8014c04:	6a21      	ldr	r1, [r4, #32]
 8014c06:	2301      	movs	r3, #1
 8014c08:	4628      	mov	r0, r5
 8014c0a:	47b0      	blx	r6
 8014c0c:	1c41      	adds	r1, r0, #1
 8014c0e:	d1c7      	bne.n	8014ba0 <__sflush_r+0x34>
 8014c10:	682b      	ldr	r3, [r5, #0]
 8014c12:	2b00      	cmp	r3, #0
 8014c14:	d0c4      	beq.n	8014ba0 <__sflush_r+0x34>
 8014c16:	2b1d      	cmp	r3, #29
 8014c18:	d001      	beq.n	8014c1e <__sflush_r+0xb2>
 8014c1a:	2b16      	cmp	r3, #22
 8014c1c:	d101      	bne.n	8014c22 <__sflush_r+0xb6>
 8014c1e:	602f      	str	r7, [r5, #0]
 8014c20:	e7b1      	b.n	8014b86 <__sflush_r+0x1a>
 8014c22:	89a3      	ldrh	r3, [r4, #12]
 8014c24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014c28:	81a3      	strh	r3, [r4, #12]
 8014c2a:	e7ad      	b.n	8014b88 <__sflush_r+0x1c>
 8014c2c:	690f      	ldr	r7, [r1, #16]
 8014c2e:	2f00      	cmp	r7, #0
 8014c30:	d0a9      	beq.n	8014b86 <__sflush_r+0x1a>
 8014c32:	0793      	lsls	r3, r2, #30
 8014c34:	680e      	ldr	r6, [r1, #0]
 8014c36:	bf08      	it	eq
 8014c38:	694b      	ldreq	r3, [r1, #20]
 8014c3a:	600f      	str	r7, [r1, #0]
 8014c3c:	bf18      	it	ne
 8014c3e:	2300      	movne	r3, #0
 8014c40:	eba6 0807 	sub.w	r8, r6, r7
 8014c44:	608b      	str	r3, [r1, #8]
 8014c46:	f1b8 0f00 	cmp.w	r8, #0
 8014c4a:	dd9c      	ble.n	8014b86 <__sflush_r+0x1a>
 8014c4c:	6a21      	ldr	r1, [r4, #32]
 8014c4e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8014c50:	4643      	mov	r3, r8
 8014c52:	463a      	mov	r2, r7
 8014c54:	4628      	mov	r0, r5
 8014c56:	47b0      	blx	r6
 8014c58:	2800      	cmp	r0, #0
 8014c5a:	dc06      	bgt.n	8014c6a <__sflush_r+0xfe>
 8014c5c:	89a3      	ldrh	r3, [r4, #12]
 8014c5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014c62:	81a3      	strh	r3, [r4, #12]
 8014c64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014c68:	e78e      	b.n	8014b88 <__sflush_r+0x1c>
 8014c6a:	4407      	add	r7, r0
 8014c6c:	eba8 0800 	sub.w	r8, r8, r0
 8014c70:	e7e9      	b.n	8014c46 <__sflush_r+0xda>
 8014c72:	bf00      	nop
 8014c74:	20400001 	.word	0x20400001

08014c78 <_fflush_r>:
 8014c78:	b538      	push	{r3, r4, r5, lr}
 8014c7a:	690b      	ldr	r3, [r1, #16]
 8014c7c:	4605      	mov	r5, r0
 8014c7e:	460c      	mov	r4, r1
 8014c80:	b913      	cbnz	r3, 8014c88 <_fflush_r+0x10>
 8014c82:	2500      	movs	r5, #0
 8014c84:	4628      	mov	r0, r5
 8014c86:	bd38      	pop	{r3, r4, r5, pc}
 8014c88:	b118      	cbz	r0, 8014c92 <_fflush_r+0x1a>
 8014c8a:	6983      	ldr	r3, [r0, #24]
 8014c8c:	b90b      	cbnz	r3, 8014c92 <_fflush_r+0x1a>
 8014c8e:	f000 f887 	bl	8014da0 <__sinit>
 8014c92:	4b14      	ldr	r3, [pc, #80]	; (8014ce4 <_fflush_r+0x6c>)
 8014c94:	429c      	cmp	r4, r3
 8014c96:	d11b      	bne.n	8014cd0 <_fflush_r+0x58>
 8014c98:	686c      	ldr	r4, [r5, #4]
 8014c9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014c9e:	2b00      	cmp	r3, #0
 8014ca0:	d0ef      	beq.n	8014c82 <_fflush_r+0xa>
 8014ca2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8014ca4:	07d0      	lsls	r0, r2, #31
 8014ca6:	d404      	bmi.n	8014cb2 <_fflush_r+0x3a>
 8014ca8:	0599      	lsls	r1, r3, #22
 8014caa:	d402      	bmi.n	8014cb2 <_fflush_r+0x3a>
 8014cac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014cae:	f000 f91a 	bl	8014ee6 <__retarget_lock_acquire_recursive>
 8014cb2:	4628      	mov	r0, r5
 8014cb4:	4621      	mov	r1, r4
 8014cb6:	f7ff ff59 	bl	8014b6c <__sflush_r>
 8014cba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014cbc:	07da      	lsls	r2, r3, #31
 8014cbe:	4605      	mov	r5, r0
 8014cc0:	d4e0      	bmi.n	8014c84 <_fflush_r+0xc>
 8014cc2:	89a3      	ldrh	r3, [r4, #12]
 8014cc4:	059b      	lsls	r3, r3, #22
 8014cc6:	d4dd      	bmi.n	8014c84 <_fflush_r+0xc>
 8014cc8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014cca:	f000 f90d 	bl	8014ee8 <__retarget_lock_release_recursive>
 8014cce:	e7d9      	b.n	8014c84 <_fflush_r+0xc>
 8014cd0:	4b05      	ldr	r3, [pc, #20]	; (8014ce8 <_fflush_r+0x70>)
 8014cd2:	429c      	cmp	r4, r3
 8014cd4:	d101      	bne.n	8014cda <_fflush_r+0x62>
 8014cd6:	68ac      	ldr	r4, [r5, #8]
 8014cd8:	e7df      	b.n	8014c9a <_fflush_r+0x22>
 8014cda:	4b04      	ldr	r3, [pc, #16]	; (8014cec <_fflush_r+0x74>)
 8014cdc:	429c      	cmp	r4, r3
 8014cde:	bf08      	it	eq
 8014ce0:	68ec      	ldreq	r4, [r5, #12]
 8014ce2:	e7da      	b.n	8014c9a <_fflush_r+0x22>
 8014ce4:	08018090 	.word	0x08018090
 8014ce8:	080180b0 	.word	0x080180b0
 8014cec:	08018070 	.word	0x08018070

08014cf0 <std>:
 8014cf0:	2300      	movs	r3, #0
 8014cf2:	b510      	push	{r4, lr}
 8014cf4:	4604      	mov	r4, r0
 8014cf6:	e9c0 3300 	strd	r3, r3, [r0]
 8014cfa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8014cfe:	6083      	str	r3, [r0, #8]
 8014d00:	8181      	strh	r1, [r0, #12]
 8014d02:	6643      	str	r3, [r0, #100]	; 0x64
 8014d04:	81c2      	strh	r2, [r0, #14]
 8014d06:	6183      	str	r3, [r0, #24]
 8014d08:	4619      	mov	r1, r3
 8014d0a:	2208      	movs	r2, #8
 8014d0c:	305c      	adds	r0, #92	; 0x5c
 8014d0e:	f7fe f9cd 	bl	80130ac <memset>
 8014d12:	4b05      	ldr	r3, [pc, #20]	; (8014d28 <std+0x38>)
 8014d14:	6263      	str	r3, [r4, #36]	; 0x24
 8014d16:	4b05      	ldr	r3, [pc, #20]	; (8014d2c <std+0x3c>)
 8014d18:	62a3      	str	r3, [r4, #40]	; 0x28
 8014d1a:	4b05      	ldr	r3, [pc, #20]	; (8014d30 <std+0x40>)
 8014d1c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8014d1e:	4b05      	ldr	r3, [pc, #20]	; (8014d34 <std+0x44>)
 8014d20:	6224      	str	r4, [r4, #32]
 8014d22:	6323      	str	r3, [r4, #48]	; 0x30
 8014d24:	bd10      	pop	{r4, pc}
 8014d26:	bf00      	nop
 8014d28:	08015cfd 	.word	0x08015cfd
 8014d2c:	08015d1f 	.word	0x08015d1f
 8014d30:	08015d57 	.word	0x08015d57
 8014d34:	08015d7b 	.word	0x08015d7b

08014d38 <_cleanup_r>:
 8014d38:	4901      	ldr	r1, [pc, #4]	; (8014d40 <_cleanup_r+0x8>)
 8014d3a:	f000 b8af 	b.w	8014e9c <_fwalk_reent>
 8014d3e:	bf00      	nop
 8014d40:	08014c79 	.word	0x08014c79

08014d44 <__sfmoreglue>:
 8014d44:	b570      	push	{r4, r5, r6, lr}
 8014d46:	2268      	movs	r2, #104	; 0x68
 8014d48:	1e4d      	subs	r5, r1, #1
 8014d4a:	4355      	muls	r5, r2
 8014d4c:	460e      	mov	r6, r1
 8014d4e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8014d52:	f7fe fa1f 	bl	8013194 <_malloc_r>
 8014d56:	4604      	mov	r4, r0
 8014d58:	b140      	cbz	r0, 8014d6c <__sfmoreglue+0x28>
 8014d5a:	2100      	movs	r1, #0
 8014d5c:	e9c0 1600 	strd	r1, r6, [r0]
 8014d60:	300c      	adds	r0, #12
 8014d62:	60a0      	str	r0, [r4, #8]
 8014d64:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8014d68:	f7fe f9a0 	bl	80130ac <memset>
 8014d6c:	4620      	mov	r0, r4
 8014d6e:	bd70      	pop	{r4, r5, r6, pc}

08014d70 <__sfp_lock_acquire>:
 8014d70:	4801      	ldr	r0, [pc, #4]	; (8014d78 <__sfp_lock_acquire+0x8>)
 8014d72:	f000 b8b8 	b.w	8014ee6 <__retarget_lock_acquire_recursive>
 8014d76:	bf00      	nop
 8014d78:	20001d7d 	.word	0x20001d7d

08014d7c <__sfp_lock_release>:
 8014d7c:	4801      	ldr	r0, [pc, #4]	; (8014d84 <__sfp_lock_release+0x8>)
 8014d7e:	f000 b8b3 	b.w	8014ee8 <__retarget_lock_release_recursive>
 8014d82:	bf00      	nop
 8014d84:	20001d7d 	.word	0x20001d7d

08014d88 <__sinit_lock_acquire>:
 8014d88:	4801      	ldr	r0, [pc, #4]	; (8014d90 <__sinit_lock_acquire+0x8>)
 8014d8a:	f000 b8ac 	b.w	8014ee6 <__retarget_lock_acquire_recursive>
 8014d8e:	bf00      	nop
 8014d90:	20001d7e 	.word	0x20001d7e

08014d94 <__sinit_lock_release>:
 8014d94:	4801      	ldr	r0, [pc, #4]	; (8014d9c <__sinit_lock_release+0x8>)
 8014d96:	f000 b8a7 	b.w	8014ee8 <__retarget_lock_release_recursive>
 8014d9a:	bf00      	nop
 8014d9c:	20001d7e 	.word	0x20001d7e

08014da0 <__sinit>:
 8014da0:	b510      	push	{r4, lr}
 8014da2:	4604      	mov	r4, r0
 8014da4:	f7ff fff0 	bl	8014d88 <__sinit_lock_acquire>
 8014da8:	69a3      	ldr	r3, [r4, #24]
 8014daa:	b11b      	cbz	r3, 8014db4 <__sinit+0x14>
 8014dac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014db0:	f7ff bff0 	b.w	8014d94 <__sinit_lock_release>
 8014db4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8014db8:	6523      	str	r3, [r4, #80]	; 0x50
 8014dba:	4b13      	ldr	r3, [pc, #76]	; (8014e08 <__sinit+0x68>)
 8014dbc:	4a13      	ldr	r2, [pc, #76]	; (8014e0c <__sinit+0x6c>)
 8014dbe:	681b      	ldr	r3, [r3, #0]
 8014dc0:	62a2      	str	r2, [r4, #40]	; 0x28
 8014dc2:	42a3      	cmp	r3, r4
 8014dc4:	bf04      	itt	eq
 8014dc6:	2301      	moveq	r3, #1
 8014dc8:	61a3      	streq	r3, [r4, #24]
 8014dca:	4620      	mov	r0, r4
 8014dcc:	f000 f820 	bl	8014e10 <__sfp>
 8014dd0:	6060      	str	r0, [r4, #4]
 8014dd2:	4620      	mov	r0, r4
 8014dd4:	f000 f81c 	bl	8014e10 <__sfp>
 8014dd8:	60a0      	str	r0, [r4, #8]
 8014dda:	4620      	mov	r0, r4
 8014ddc:	f000 f818 	bl	8014e10 <__sfp>
 8014de0:	2200      	movs	r2, #0
 8014de2:	60e0      	str	r0, [r4, #12]
 8014de4:	2104      	movs	r1, #4
 8014de6:	6860      	ldr	r0, [r4, #4]
 8014de8:	f7ff ff82 	bl	8014cf0 <std>
 8014dec:	68a0      	ldr	r0, [r4, #8]
 8014dee:	2201      	movs	r2, #1
 8014df0:	2109      	movs	r1, #9
 8014df2:	f7ff ff7d 	bl	8014cf0 <std>
 8014df6:	68e0      	ldr	r0, [r4, #12]
 8014df8:	2202      	movs	r2, #2
 8014dfa:	2112      	movs	r1, #18
 8014dfc:	f7ff ff78 	bl	8014cf0 <std>
 8014e00:	2301      	movs	r3, #1
 8014e02:	61a3      	str	r3, [r4, #24]
 8014e04:	e7d2      	b.n	8014dac <__sinit+0xc>
 8014e06:	bf00      	nop
 8014e08:	08017fa8 	.word	0x08017fa8
 8014e0c:	08014d39 	.word	0x08014d39

08014e10 <__sfp>:
 8014e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014e12:	4607      	mov	r7, r0
 8014e14:	f7ff ffac 	bl	8014d70 <__sfp_lock_acquire>
 8014e18:	4b1e      	ldr	r3, [pc, #120]	; (8014e94 <__sfp+0x84>)
 8014e1a:	681e      	ldr	r6, [r3, #0]
 8014e1c:	69b3      	ldr	r3, [r6, #24]
 8014e1e:	b913      	cbnz	r3, 8014e26 <__sfp+0x16>
 8014e20:	4630      	mov	r0, r6
 8014e22:	f7ff ffbd 	bl	8014da0 <__sinit>
 8014e26:	3648      	adds	r6, #72	; 0x48
 8014e28:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8014e2c:	3b01      	subs	r3, #1
 8014e2e:	d503      	bpl.n	8014e38 <__sfp+0x28>
 8014e30:	6833      	ldr	r3, [r6, #0]
 8014e32:	b30b      	cbz	r3, 8014e78 <__sfp+0x68>
 8014e34:	6836      	ldr	r6, [r6, #0]
 8014e36:	e7f7      	b.n	8014e28 <__sfp+0x18>
 8014e38:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8014e3c:	b9d5      	cbnz	r5, 8014e74 <__sfp+0x64>
 8014e3e:	4b16      	ldr	r3, [pc, #88]	; (8014e98 <__sfp+0x88>)
 8014e40:	60e3      	str	r3, [r4, #12]
 8014e42:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8014e46:	6665      	str	r5, [r4, #100]	; 0x64
 8014e48:	f000 f84c 	bl	8014ee4 <__retarget_lock_init_recursive>
 8014e4c:	f7ff ff96 	bl	8014d7c <__sfp_lock_release>
 8014e50:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8014e54:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8014e58:	6025      	str	r5, [r4, #0]
 8014e5a:	61a5      	str	r5, [r4, #24]
 8014e5c:	2208      	movs	r2, #8
 8014e5e:	4629      	mov	r1, r5
 8014e60:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8014e64:	f7fe f922 	bl	80130ac <memset>
 8014e68:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8014e6c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8014e70:	4620      	mov	r0, r4
 8014e72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014e74:	3468      	adds	r4, #104	; 0x68
 8014e76:	e7d9      	b.n	8014e2c <__sfp+0x1c>
 8014e78:	2104      	movs	r1, #4
 8014e7a:	4638      	mov	r0, r7
 8014e7c:	f7ff ff62 	bl	8014d44 <__sfmoreglue>
 8014e80:	4604      	mov	r4, r0
 8014e82:	6030      	str	r0, [r6, #0]
 8014e84:	2800      	cmp	r0, #0
 8014e86:	d1d5      	bne.n	8014e34 <__sfp+0x24>
 8014e88:	f7ff ff78 	bl	8014d7c <__sfp_lock_release>
 8014e8c:	230c      	movs	r3, #12
 8014e8e:	603b      	str	r3, [r7, #0]
 8014e90:	e7ee      	b.n	8014e70 <__sfp+0x60>
 8014e92:	bf00      	nop
 8014e94:	08017fa8 	.word	0x08017fa8
 8014e98:	ffff0001 	.word	0xffff0001

08014e9c <_fwalk_reent>:
 8014e9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014ea0:	4606      	mov	r6, r0
 8014ea2:	4688      	mov	r8, r1
 8014ea4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8014ea8:	2700      	movs	r7, #0
 8014eaa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8014eae:	f1b9 0901 	subs.w	r9, r9, #1
 8014eb2:	d505      	bpl.n	8014ec0 <_fwalk_reent+0x24>
 8014eb4:	6824      	ldr	r4, [r4, #0]
 8014eb6:	2c00      	cmp	r4, #0
 8014eb8:	d1f7      	bne.n	8014eaa <_fwalk_reent+0xe>
 8014eba:	4638      	mov	r0, r7
 8014ebc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014ec0:	89ab      	ldrh	r3, [r5, #12]
 8014ec2:	2b01      	cmp	r3, #1
 8014ec4:	d907      	bls.n	8014ed6 <_fwalk_reent+0x3a>
 8014ec6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8014eca:	3301      	adds	r3, #1
 8014ecc:	d003      	beq.n	8014ed6 <_fwalk_reent+0x3a>
 8014ece:	4629      	mov	r1, r5
 8014ed0:	4630      	mov	r0, r6
 8014ed2:	47c0      	blx	r8
 8014ed4:	4307      	orrs	r7, r0
 8014ed6:	3568      	adds	r5, #104	; 0x68
 8014ed8:	e7e9      	b.n	8014eae <_fwalk_reent+0x12>
	...

08014edc <_localeconv_r>:
 8014edc:	4800      	ldr	r0, [pc, #0]	; (8014ee0 <_localeconv_r+0x4>)
 8014ede:	4770      	bx	lr
 8014ee0:	20000180 	.word	0x20000180

08014ee4 <__retarget_lock_init_recursive>:
 8014ee4:	4770      	bx	lr

08014ee6 <__retarget_lock_acquire_recursive>:
 8014ee6:	4770      	bx	lr

08014ee8 <__retarget_lock_release_recursive>:
 8014ee8:	4770      	bx	lr

08014eea <__swhatbuf_r>:
 8014eea:	b570      	push	{r4, r5, r6, lr}
 8014eec:	460e      	mov	r6, r1
 8014eee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014ef2:	2900      	cmp	r1, #0
 8014ef4:	b096      	sub	sp, #88	; 0x58
 8014ef6:	4614      	mov	r4, r2
 8014ef8:	461d      	mov	r5, r3
 8014efa:	da08      	bge.n	8014f0e <__swhatbuf_r+0x24>
 8014efc:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8014f00:	2200      	movs	r2, #0
 8014f02:	602a      	str	r2, [r5, #0]
 8014f04:	061a      	lsls	r2, r3, #24
 8014f06:	d410      	bmi.n	8014f2a <__swhatbuf_r+0x40>
 8014f08:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014f0c:	e00e      	b.n	8014f2c <__swhatbuf_r+0x42>
 8014f0e:	466a      	mov	r2, sp
 8014f10:	f000 ff8a 	bl	8015e28 <_fstat_r>
 8014f14:	2800      	cmp	r0, #0
 8014f16:	dbf1      	blt.n	8014efc <__swhatbuf_r+0x12>
 8014f18:	9a01      	ldr	r2, [sp, #4]
 8014f1a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8014f1e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8014f22:	425a      	negs	r2, r3
 8014f24:	415a      	adcs	r2, r3
 8014f26:	602a      	str	r2, [r5, #0]
 8014f28:	e7ee      	b.n	8014f08 <__swhatbuf_r+0x1e>
 8014f2a:	2340      	movs	r3, #64	; 0x40
 8014f2c:	2000      	movs	r0, #0
 8014f2e:	6023      	str	r3, [r4, #0]
 8014f30:	b016      	add	sp, #88	; 0x58
 8014f32:	bd70      	pop	{r4, r5, r6, pc}

08014f34 <__smakebuf_r>:
 8014f34:	898b      	ldrh	r3, [r1, #12]
 8014f36:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8014f38:	079d      	lsls	r5, r3, #30
 8014f3a:	4606      	mov	r6, r0
 8014f3c:	460c      	mov	r4, r1
 8014f3e:	d507      	bpl.n	8014f50 <__smakebuf_r+0x1c>
 8014f40:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8014f44:	6023      	str	r3, [r4, #0]
 8014f46:	6123      	str	r3, [r4, #16]
 8014f48:	2301      	movs	r3, #1
 8014f4a:	6163      	str	r3, [r4, #20]
 8014f4c:	b002      	add	sp, #8
 8014f4e:	bd70      	pop	{r4, r5, r6, pc}
 8014f50:	ab01      	add	r3, sp, #4
 8014f52:	466a      	mov	r2, sp
 8014f54:	f7ff ffc9 	bl	8014eea <__swhatbuf_r>
 8014f58:	9900      	ldr	r1, [sp, #0]
 8014f5a:	4605      	mov	r5, r0
 8014f5c:	4630      	mov	r0, r6
 8014f5e:	f7fe f919 	bl	8013194 <_malloc_r>
 8014f62:	b948      	cbnz	r0, 8014f78 <__smakebuf_r+0x44>
 8014f64:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014f68:	059a      	lsls	r2, r3, #22
 8014f6a:	d4ef      	bmi.n	8014f4c <__smakebuf_r+0x18>
 8014f6c:	f023 0303 	bic.w	r3, r3, #3
 8014f70:	f043 0302 	orr.w	r3, r3, #2
 8014f74:	81a3      	strh	r3, [r4, #12]
 8014f76:	e7e3      	b.n	8014f40 <__smakebuf_r+0xc>
 8014f78:	4b0d      	ldr	r3, [pc, #52]	; (8014fb0 <__smakebuf_r+0x7c>)
 8014f7a:	62b3      	str	r3, [r6, #40]	; 0x28
 8014f7c:	89a3      	ldrh	r3, [r4, #12]
 8014f7e:	6020      	str	r0, [r4, #0]
 8014f80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014f84:	81a3      	strh	r3, [r4, #12]
 8014f86:	9b00      	ldr	r3, [sp, #0]
 8014f88:	6163      	str	r3, [r4, #20]
 8014f8a:	9b01      	ldr	r3, [sp, #4]
 8014f8c:	6120      	str	r0, [r4, #16]
 8014f8e:	b15b      	cbz	r3, 8014fa8 <__smakebuf_r+0x74>
 8014f90:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014f94:	4630      	mov	r0, r6
 8014f96:	f000 ff59 	bl	8015e4c <_isatty_r>
 8014f9a:	b128      	cbz	r0, 8014fa8 <__smakebuf_r+0x74>
 8014f9c:	89a3      	ldrh	r3, [r4, #12]
 8014f9e:	f023 0303 	bic.w	r3, r3, #3
 8014fa2:	f043 0301 	orr.w	r3, r3, #1
 8014fa6:	81a3      	strh	r3, [r4, #12]
 8014fa8:	89a0      	ldrh	r0, [r4, #12]
 8014faa:	4305      	orrs	r5, r0
 8014fac:	81a5      	strh	r5, [r4, #12]
 8014fae:	e7cd      	b.n	8014f4c <__smakebuf_r+0x18>
 8014fb0:	08014d39 	.word	0x08014d39

08014fb4 <__malloc_lock>:
 8014fb4:	4801      	ldr	r0, [pc, #4]	; (8014fbc <__malloc_lock+0x8>)
 8014fb6:	f7ff bf96 	b.w	8014ee6 <__retarget_lock_acquire_recursive>
 8014fba:	bf00      	nop
 8014fbc:	20001d7c 	.word	0x20001d7c

08014fc0 <__malloc_unlock>:
 8014fc0:	4801      	ldr	r0, [pc, #4]	; (8014fc8 <__malloc_unlock+0x8>)
 8014fc2:	f7ff bf91 	b.w	8014ee8 <__retarget_lock_release_recursive>
 8014fc6:	bf00      	nop
 8014fc8:	20001d7c 	.word	0x20001d7c

08014fcc <_Balloc>:
 8014fcc:	b570      	push	{r4, r5, r6, lr}
 8014fce:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8014fd0:	4604      	mov	r4, r0
 8014fd2:	460d      	mov	r5, r1
 8014fd4:	b976      	cbnz	r6, 8014ff4 <_Balloc+0x28>
 8014fd6:	2010      	movs	r0, #16
 8014fd8:	f7fe f84a 	bl	8013070 <malloc>
 8014fdc:	4602      	mov	r2, r0
 8014fde:	6260      	str	r0, [r4, #36]	; 0x24
 8014fe0:	b920      	cbnz	r0, 8014fec <_Balloc+0x20>
 8014fe2:	4b18      	ldr	r3, [pc, #96]	; (8015044 <_Balloc+0x78>)
 8014fe4:	4818      	ldr	r0, [pc, #96]	; (8015048 <_Balloc+0x7c>)
 8014fe6:	2166      	movs	r1, #102	; 0x66
 8014fe8:	f000 fede 	bl	8015da8 <__assert_func>
 8014fec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8014ff0:	6006      	str	r6, [r0, #0]
 8014ff2:	60c6      	str	r6, [r0, #12]
 8014ff4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8014ff6:	68f3      	ldr	r3, [r6, #12]
 8014ff8:	b183      	cbz	r3, 801501c <_Balloc+0x50>
 8014ffa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014ffc:	68db      	ldr	r3, [r3, #12]
 8014ffe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8015002:	b9b8      	cbnz	r0, 8015034 <_Balloc+0x68>
 8015004:	2101      	movs	r1, #1
 8015006:	fa01 f605 	lsl.w	r6, r1, r5
 801500a:	1d72      	adds	r2, r6, #5
 801500c:	0092      	lsls	r2, r2, #2
 801500e:	4620      	mov	r0, r4
 8015010:	f000 fb60 	bl	80156d4 <_calloc_r>
 8015014:	b160      	cbz	r0, 8015030 <_Balloc+0x64>
 8015016:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801501a:	e00e      	b.n	801503a <_Balloc+0x6e>
 801501c:	2221      	movs	r2, #33	; 0x21
 801501e:	2104      	movs	r1, #4
 8015020:	4620      	mov	r0, r4
 8015022:	f000 fb57 	bl	80156d4 <_calloc_r>
 8015026:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015028:	60f0      	str	r0, [r6, #12]
 801502a:	68db      	ldr	r3, [r3, #12]
 801502c:	2b00      	cmp	r3, #0
 801502e:	d1e4      	bne.n	8014ffa <_Balloc+0x2e>
 8015030:	2000      	movs	r0, #0
 8015032:	bd70      	pop	{r4, r5, r6, pc}
 8015034:	6802      	ldr	r2, [r0, #0]
 8015036:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801503a:	2300      	movs	r3, #0
 801503c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8015040:	e7f7      	b.n	8015032 <_Balloc+0x66>
 8015042:	bf00      	nop
 8015044:	08017fed 	.word	0x08017fed
 8015048:	080180d0 	.word	0x080180d0

0801504c <_Bfree>:
 801504c:	b570      	push	{r4, r5, r6, lr}
 801504e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8015050:	4605      	mov	r5, r0
 8015052:	460c      	mov	r4, r1
 8015054:	b976      	cbnz	r6, 8015074 <_Bfree+0x28>
 8015056:	2010      	movs	r0, #16
 8015058:	f7fe f80a 	bl	8013070 <malloc>
 801505c:	4602      	mov	r2, r0
 801505e:	6268      	str	r0, [r5, #36]	; 0x24
 8015060:	b920      	cbnz	r0, 801506c <_Bfree+0x20>
 8015062:	4b09      	ldr	r3, [pc, #36]	; (8015088 <_Bfree+0x3c>)
 8015064:	4809      	ldr	r0, [pc, #36]	; (801508c <_Bfree+0x40>)
 8015066:	218a      	movs	r1, #138	; 0x8a
 8015068:	f000 fe9e 	bl	8015da8 <__assert_func>
 801506c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8015070:	6006      	str	r6, [r0, #0]
 8015072:	60c6      	str	r6, [r0, #12]
 8015074:	b13c      	cbz	r4, 8015086 <_Bfree+0x3a>
 8015076:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8015078:	6862      	ldr	r2, [r4, #4]
 801507a:	68db      	ldr	r3, [r3, #12]
 801507c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8015080:	6021      	str	r1, [r4, #0]
 8015082:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8015086:	bd70      	pop	{r4, r5, r6, pc}
 8015088:	08017fed 	.word	0x08017fed
 801508c:	080180d0 	.word	0x080180d0

08015090 <__multadd>:
 8015090:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015094:	690d      	ldr	r5, [r1, #16]
 8015096:	4607      	mov	r7, r0
 8015098:	460c      	mov	r4, r1
 801509a:	461e      	mov	r6, r3
 801509c:	f101 0c14 	add.w	ip, r1, #20
 80150a0:	2000      	movs	r0, #0
 80150a2:	f8dc 3000 	ldr.w	r3, [ip]
 80150a6:	b299      	uxth	r1, r3
 80150a8:	fb02 6101 	mla	r1, r2, r1, r6
 80150ac:	0c1e      	lsrs	r6, r3, #16
 80150ae:	0c0b      	lsrs	r3, r1, #16
 80150b0:	fb02 3306 	mla	r3, r2, r6, r3
 80150b4:	b289      	uxth	r1, r1
 80150b6:	3001      	adds	r0, #1
 80150b8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80150bc:	4285      	cmp	r5, r0
 80150be:	f84c 1b04 	str.w	r1, [ip], #4
 80150c2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80150c6:	dcec      	bgt.n	80150a2 <__multadd+0x12>
 80150c8:	b30e      	cbz	r6, 801510e <__multadd+0x7e>
 80150ca:	68a3      	ldr	r3, [r4, #8]
 80150cc:	42ab      	cmp	r3, r5
 80150ce:	dc19      	bgt.n	8015104 <__multadd+0x74>
 80150d0:	6861      	ldr	r1, [r4, #4]
 80150d2:	4638      	mov	r0, r7
 80150d4:	3101      	adds	r1, #1
 80150d6:	f7ff ff79 	bl	8014fcc <_Balloc>
 80150da:	4680      	mov	r8, r0
 80150dc:	b928      	cbnz	r0, 80150ea <__multadd+0x5a>
 80150de:	4602      	mov	r2, r0
 80150e0:	4b0c      	ldr	r3, [pc, #48]	; (8015114 <__multadd+0x84>)
 80150e2:	480d      	ldr	r0, [pc, #52]	; (8015118 <__multadd+0x88>)
 80150e4:	21b5      	movs	r1, #181	; 0xb5
 80150e6:	f000 fe5f 	bl	8015da8 <__assert_func>
 80150ea:	6922      	ldr	r2, [r4, #16]
 80150ec:	3202      	adds	r2, #2
 80150ee:	f104 010c 	add.w	r1, r4, #12
 80150f2:	0092      	lsls	r2, r2, #2
 80150f4:	300c      	adds	r0, #12
 80150f6:	f7fd ffcb 	bl	8013090 <memcpy>
 80150fa:	4621      	mov	r1, r4
 80150fc:	4638      	mov	r0, r7
 80150fe:	f7ff ffa5 	bl	801504c <_Bfree>
 8015102:	4644      	mov	r4, r8
 8015104:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8015108:	3501      	adds	r5, #1
 801510a:	615e      	str	r6, [r3, #20]
 801510c:	6125      	str	r5, [r4, #16]
 801510e:	4620      	mov	r0, r4
 8015110:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015114:	0801805f 	.word	0x0801805f
 8015118:	080180d0 	.word	0x080180d0

0801511c <__hi0bits>:
 801511c:	0c03      	lsrs	r3, r0, #16
 801511e:	041b      	lsls	r3, r3, #16
 8015120:	b9d3      	cbnz	r3, 8015158 <__hi0bits+0x3c>
 8015122:	0400      	lsls	r0, r0, #16
 8015124:	2310      	movs	r3, #16
 8015126:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801512a:	bf04      	itt	eq
 801512c:	0200      	lsleq	r0, r0, #8
 801512e:	3308      	addeq	r3, #8
 8015130:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8015134:	bf04      	itt	eq
 8015136:	0100      	lsleq	r0, r0, #4
 8015138:	3304      	addeq	r3, #4
 801513a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801513e:	bf04      	itt	eq
 8015140:	0080      	lsleq	r0, r0, #2
 8015142:	3302      	addeq	r3, #2
 8015144:	2800      	cmp	r0, #0
 8015146:	db05      	blt.n	8015154 <__hi0bits+0x38>
 8015148:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801514c:	f103 0301 	add.w	r3, r3, #1
 8015150:	bf08      	it	eq
 8015152:	2320      	moveq	r3, #32
 8015154:	4618      	mov	r0, r3
 8015156:	4770      	bx	lr
 8015158:	2300      	movs	r3, #0
 801515a:	e7e4      	b.n	8015126 <__hi0bits+0xa>

0801515c <__lo0bits>:
 801515c:	6803      	ldr	r3, [r0, #0]
 801515e:	f013 0207 	ands.w	r2, r3, #7
 8015162:	4601      	mov	r1, r0
 8015164:	d00b      	beq.n	801517e <__lo0bits+0x22>
 8015166:	07da      	lsls	r2, r3, #31
 8015168:	d423      	bmi.n	80151b2 <__lo0bits+0x56>
 801516a:	0798      	lsls	r0, r3, #30
 801516c:	bf49      	itett	mi
 801516e:	085b      	lsrmi	r3, r3, #1
 8015170:	089b      	lsrpl	r3, r3, #2
 8015172:	2001      	movmi	r0, #1
 8015174:	600b      	strmi	r3, [r1, #0]
 8015176:	bf5c      	itt	pl
 8015178:	600b      	strpl	r3, [r1, #0]
 801517a:	2002      	movpl	r0, #2
 801517c:	4770      	bx	lr
 801517e:	b298      	uxth	r0, r3
 8015180:	b9a8      	cbnz	r0, 80151ae <__lo0bits+0x52>
 8015182:	0c1b      	lsrs	r3, r3, #16
 8015184:	2010      	movs	r0, #16
 8015186:	b2da      	uxtb	r2, r3
 8015188:	b90a      	cbnz	r2, 801518e <__lo0bits+0x32>
 801518a:	3008      	adds	r0, #8
 801518c:	0a1b      	lsrs	r3, r3, #8
 801518e:	071a      	lsls	r2, r3, #28
 8015190:	bf04      	itt	eq
 8015192:	091b      	lsreq	r3, r3, #4
 8015194:	3004      	addeq	r0, #4
 8015196:	079a      	lsls	r2, r3, #30
 8015198:	bf04      	itt	eq
 801519a:	089b      	lsreq	r3, r3, #2
 801519c:	3002      	addeq	r0, #2
 801519e:	07da      	lsls	r2, r3, #31
 80151a0:	d403      	bmi.n	80151aa <__lo0bits+0x4e>
 80151a2:	085b      	lsrs	r3, r3, #1
 80151a4:	f100 0001 	add.w	r0, r0, #1
 80151a8:	d005      	beq.n	80151b6 <__lo0bits+0x5a>
 80151aa:	600b      	str	r3, [r1, #0]
 80151ac:	4770      	bx	lr
 80151ae:	4610      	mov	r0, r2
 80151b0:	e7e9      	b.n	8015186 <__lo0bits+0x2a>
 80151b2:	2000      	movs	r0, #0
 80151b4:	4770      	bx	lr
 80151b6:	2020      	movs	r0, #32
 80151b8:	4770      	bx	lr
	...

080151bc <__i2b>:
 80151bc:	b510      	push	{r4, lr}
 80151be:	460c      	mov	r4, r1
 80151c0:	2101      	movs	r1, #1
 80151c2:	f7ff ff03 	bl	8014fcc <_Balloc>
 80151c6:	4602      	mov	r2, r0
 80151c8:	b928      	cbnz	r0, 80151d6 <__i2b+0x1a>
 80151ca:	4b05      	ldr	r3, [pc, #20]	; (80151e0 <__i2b+0x24>)
 80151cc:	4805      	ldr	r0, [pc, #20]	; (80151e4 <__i2b+0x28>)
 80151ce:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80151d2:	f000 fde9 	bl	8015da8 <__assert_func>
 80151d6:	2301      	movs	r3, #1
 80151d8:	6144      	str	r4, [r0, #20]
 80151da:	6103      	str	r3, [r0, #16]
 80151dc:	bd10      	pop	{r4, pc}
 80151de:	bf00      	nop
 80151e0:	0801805f 	.word	0x0801805f
 80151e4:	080180d0 	.word	0x080180d0

080151e8 <__multiply>:
 80151e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80151ec:	4691      	mov	r9, r2
 80151ee:	690a      	ldr	r2, [r1, #16]
 80151f0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80151f4:	429a      	cmp	r2, r3
 80151f6:	bfb8      	it	lt
 80151f8:	460b      	movlt	r3, r1
 80151fa:	460c      	mov	r4, r1
 80151fc:	bfbc      	itt	lt
 80151fe:	464c      	movlt	r4, r9
 8015200:	4699      	movlt	r9, r3
 8015202:	6927      	ldr	r7, [r4, #16]
 8015204:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8015208:	68a3      	ldr	r3, [r4, #8]
 801520a:	6861      	ldr	r1, [r4, #4]
 801520c:	eb07 060a 	add.w	r6, r7, sl
 8015210:	42b3      	cmp	r3, r6
 8015212:	b085      	sub	sp, #20
 8015214:	bfb8      	it	lt
 8015216:	3101      	addlt	r1, #1
 8015218:	f7ff fed8 	bl	8014fcc <_Balloc>
 801521c:	b930      	cbnz	r0, 801522c <__multiply+0x44>
 801521e:	4602      	mov	r2, r0
 8015220:	4b44      	ldr	r3, [pc, #272]	; (8015334 <__multiply+0x14c>)
 8015222:	4845      	ldr	r0, [pc, #276]	; (8015338 <__multiply+0x150>)
 8015224:	f240 115d 	movw	r1, #349	; 0x15d
 8015228:	f000 fdbe 	bl	8015da8 <__assert_func>
 801522c:	f100 0514 	add.w	r5, r0, #20
 8015230:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8015234:	462b      	mov	r3, r5
 8015236:	2200      	movs	r2, #0
 8015238:	4543      	cmp	r3, r8
 801523a:	d321      	bcc.n	8015280 <__multiply+0x98>
 801523c:	f104 0314 	add.w	r3, r4, #20
 8015240:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8015244:	f109 0314 	add.w	r3, r9, #20
 8015248:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801524c:	9202      	str	r2, [sp, #8]
 801524e:	1b3a      	subs	r2, r7, r4
 8015250:	3a15      	subs	r2, #21
 8015252:	f022 0203 	bic.w	r2, r2, #3
 8015256:	3204      	adds	r2, #4
 8015258:	f104 0115 	add.w	r1, r4, #21
 801525c:	428f      	cmp	r7, r1
 801525e:	bf38      	it	cc
 8015260:	2204      	movcc	r2, #4
 8015262:	9201      	str	r2, [sp, #4]
 8015264:	9a02      	ldr	r2, [sp, #8]
 8015266:	9303      	str	r3, [sp, #12]
 8015268:	429a      	cmp	r2, r3
 801526a:	d80c      	bhi.n	8015286 <__multiply+0x9e>
 801526c:	2e00      	cmp	r6, #0
 801526e:	dd03      	ble.n	8015278 <__multiply+0x90>
 8015270:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8015274:	2b00      	cmp	r3, #0
 8015276:	d05a      	beq.n	801532e <__multiply+0x146>
 8015278:	6106      	str	r6, [r0, #16]
 801527a:	b005      	add	sp, #20
 801527c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015280:	f843 2b04 	str.w	r2, [r3], #4
 8015284:	e7d8      	b.n	8015238 <__multiply+0x50>
 8015286:	f8b3 a000 	ldrh.w	sl, [r3]
 801528a:	f1ba 0f00 	cmp.w	sl, #0
 801528e:	d024      	beq.n	80152da <__multiply+0xf2>
 8015290:	f104 0e14 	add.w	lr, r4, #20
 8015294:	46a9      	mov	r9, r5
 8015296:	f04f 0c00 	mov.w	ip, #0
 801529a:	f85e 2b04 	ldr.w	r2, [lr], #4
 801529e:	f8d9 1000 	ldr.w	r1, [r9]
 80152a2:	fa1f fb82 	uxth.w	fp, r2
 80152a6:	b289      	uxth	r1, r1
 80152a8:	fb0a 110b 	mla	r1, sl, fp, r1
 80152ac:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80152b0:	f8d9 2000 	ldr.w	r2, [r9]
 80152b4:	4461      	add	r1, ip
 80152b6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80152ba:	fb0a c20b 	mla	r2, sl, fp, ip
 80152be:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80152c2:	b289      	uxth	r1, r1
 80152c4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80152c8:	4577      	cmp	r7, lr
 80152ca:	f849 1b04 	str.w	r1, [r9], #4
 80152ce:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80152d2:	d8e2      	bhi.n	801529a <__multiply+0xb2>
 80152d4:	9a01      	ldr	r2, [sp, #4]
 80152d6:	f845 c002 	str.w	ip, [r5, r2]
 80152da:	9a03      	ldr	r2, [sp, #12]
 80152dc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80152e0:	3304      	adds	r3, #4
 80152e2:	f1b9 0f00 	cmp.w	r9, #0
 80152e6:	d020      	beq.n	801532a <__multiply+0x142>
 80152e8:	6829      	ldr	r1, [r5, #0]
 80152ea:	f104 0c14 	add.w	ip, r4, #20
 80152ee:	46ae      	mov	lr, r5
 80152f0:	f04f 0a00 	mov.w	sl, #0
 80152f4:	f8bc b000 	ldrh.w	fp, [ip]
 80152f8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80152fc:	fb09 220b 	mla	r2, r9, fp, r2
 8015300:	4492      	add	sl, r2
 8015302:	b289      	uxth	r1, r1
 8015304:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8015308:	f84e 1b04 	str.w	r1, [lr], #4
 801530c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8015310:	f8be 1000 	ldrh.w	r1, [lr]
 8015314:	0c12      	lsrs	r2, r2, #16
 8015316:	fb09 1102 	mla	r1, r9, r2, r1
 801531a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 801531e:	4567      	cmp	r7, ip
 8015320:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8015324:	d8e6      	bhi.n	80152f4 <__multiply+0x10c>
 8015326:	9a01      	ldr	r2, [sp, #4]
 8015328:	50a9      	str	r1, [r5, r2]
 801532a:	3504      	adds	r5, #4
 801532c:	e79a      	b.n	8015264 <__multiply+0x7c>
 801532e:	3e01      	subs	r6, #1
 8015330:	e79c      	b.n	801526c <__multiply+0x84>
 8015332:	bf00      	nop
 8015334:	0801805f 	.word	0x0801805f
 8015338:	080180d0 	.word	0x080180d0

0801533c <__pow5mult>:
 801533c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015340:	4615      	mov	r5, r2
 8015342:	f012 0203 	ands.w	r2, r2, #3
 8015346:	4606      	mov	r6, r0
 8015348:	460f      	mov	r7, r1
 801534a:	d007      	beq.n	801535c <__pow5mult+0x20>
 801534c:	4c25      	ldr	r4, [pc, #148]	; (80153e4 <__pow5mult+0xa8>)
 801534e:	3a01      	subs	r2, #1
 8015350:	2300      	movs	r3, #0
 8015352:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8015356:	f7ff fe9b 	bl	8015090 <__multadd>
 801535a:	4607      	mov	r7, r0
 801535c:	10ad      	asrs	r5, r5, #2
 801535e:	d03d      	beq.n	80153dc <__pow5mult+0xa0>
 8015360:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8015362:	b97c      	cbnz	r4, 8015384 <__pow5mult+0x48>
 8015364:	2010      	movs	r0, #16
 8015366:	f7fd fe83 	bl	8013070 <malloc>
 801536a:	4602      	mov	r2, r0
 801536c:	6270      	str	r0, [r6, #36]	; 0x24
 801536e:	b928      	cbnz	r0, 801537c <__pow5mult+0x40>
 8015370:	4b1d      	ldr	r3, [pc, #116]	; (80153e8 <__pow5mult+0xac>)
 8015372:	481e      	ldr	r0, [pc, #120]	; (80153ec <__pow5mult+0xb0>)
 8015374:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8015378:	f000 fd16 	bl	8015da8 <__assert_func>
 801537c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8015380:	6004      	str	r4, [r0, #0]
 8015382:	60c4      	str	r4, [r0, #12]
 8015384:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8015388:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801538c:	b94c      	cbnz	r4, 80153a2 <__pow5mult+0x66>
 801538e:	f240 2171 	movw	r1, #625	; 0x271
 8015392:	4630      	mov	r0, r6
 8015394:	f7ff ff12 	bl	80151bc <__i2b>
 8015398:	2300      	movs	r3, #0
 801539a:	f8c8 0008 	str.w	r0, [r8, #8]
 801539e:	4604      	mov	r4, r0
 80153a0:	6003      	str	r3, [r0, #0]
 80153a2:	f04f 0900 	mov.w	r9, #0
 80153a6:	07eb      	lsls	r3, r5, #31
 80153a8:	d50a      	bpl.n	80153c0 <__pow5mult+0x84>
 80153aa:	4639      	mov	r1, r7
 80153ac:	4622      	mov	r2, r4
 80153ae:	4630      	mov	r0, r6
 80153b0:	f7ff ff1a 	bl	80151e8 <__multiply>
 80153b4:	4639      	mov	r1, r7
 80153b6:	4680      	mov	r8, r0
 80153b8:	4630      	mov	r0, r6
 80153ba:	f7ff fe47 	bl	801504c <_Bfree>
 80153be:	4647      	mov	r7, r8
 80153c0:	106d      	asrs	r5, r5, #1
 80153c2:	d00b      	beq.n	80153dc <__pow5mult+0xa0>
 80153c4:	6820      	ldr	r0, [r4, #0]
 80153c6:	b938      	cbnz	r0, 80153d8 <__pow5mult+0x9c>
 80153c8:	4622      	mov	r2, r4
 80153ca:	4621      	mov	r1, r4
 80153cc:	4630      	mov	r0, r6
 80153ce:	f7ff ff0b 	bl	80151e8 <__multiply>
 80153d2:	6020      	str	r0, [r4, #0]
 80153d4:	f8c0 9000 	str.w	r9, [r0]
 80153d8:	4604      	mov	r4, r0
 80153da:	e7e4      	b.n	80153a6 <__pow5mult+0x6a>
 80153dc:	4638      	mov	r0, r7
 80153de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80153e2:	bf00      	nop
 80153e4:	08018220 	.word	0x08018220
 80153e8:	08017fed 	.word	0x08017fed
 80153ec:	080180d0 	.word	0x080180d0

080153f0 <__lshift>:
 80153f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80153f4:	460c      	mov	r4, r1
 80153f6:	6849      	ldr	r1, [r1, #4]
 80153f8:	6923      	ldr	r3, [r4, #16]
 80153fa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80153fe:	68a3      	ldr	r3, [r4, #8]
 8015400:	4607      	mov	r7, r0
 8015402:	4691      	mov	r9, r2
 8015404:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8015408:	f108 0601 	add.w	r6, r8, #1
 801540c:	42b3      	cmp	r3, r6
 801540e:	db0b      	blt.n	8015428 <__lshift+0x38>
 8015410:	4638      	mov	r0, r7
 8015412:	f7ff fddb 	bl	8014fcc <_Balloc>
 8015416:	4605      	mov	r5, r0
 8015418:	b948      	cbnz	r0, 801542e <__lshift+0x3e>
 801541a:	4602      	mov	r2, r0
 801541c:	4b2a      	ldr	r3, [pc, #168]	; (80154c8 <__lshift+0xd8>)
 801541e:	482b      	ldr	r0, [pc, #172]	; (80154cc <__lshift+0xdc>)
 8015420:	f240 11d9 	movw	r1, #473	; 0x1d9
 8015424:	f000 fcc0 	bl	8015da8 <__assert_func>
 8015428:	3101      	adds	r1, #1
 801542a:	005b      	lsls	r3, r3, #1
 801542c:	e7ee      	b.n	801540c <__lshift+0x1c>
 801542e:	2300      	movs	r3, #0
 8015430:	f100 0114 	add.w	r1, r0, #20
 8015434:	f100 0210 	add.w	r2, r0, #16
 8015438:	4618      	mov	r0, r3
 801543a:	4553      	cmp	r3, sl
 801543c:	db37      	blt.n	80154ae <__lshift+0xbe>
 801543e:	6920      	ldr	r0, [r4, #16]
 8015440:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8015444:	f104 0314 	add.w	r3, r4, #20
 8015448:	f019 091f 	ands.w	r9, r9, #31
 801544c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8015450:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8015454:	d02f      	beq.n	80154b6 <__lshift+0xc6>
 8015456:	f1c9 0e20 	rsb	lr, r9, #32
 801545a:	468a      	mov	sl, r1
 801545c:	f04f 0c00 	mov.w	ip, #0
 8015460:	681a      	ldr	r2, [r3, #0]
 8015462:	fa02 f209 	lsl.w	r2, r2, r9
 8015466:	ea42 020c 	orr.w	r2, r2, ip
 801546a:	f84a 2b04 	str.w	r2, [sl], #4
 801546e:	f853 2b04 	ldr.w	r2, [r3], #4
 8015472:	4298      	cmp	r0, r3
 8015474:	fa22 fc0e 	lsr.w	ip, r2, lr
 8015478:	d8f2      	bhi.n	8015460 <__lshift+0x70>
 801547a:	1b03      	subs	r3, r0, r4
 801547c:	3b15      	subs	r3, #21
 801547e:	f023 0303 	bic.w	r3, r3, #3
 8015482:	3304      	adds	r3, #4
 8015484:	f104 0215 	add.w	r2, r4, #21
 8015488:	4290      	cmp	r0, r2
 801548a:	bf38      	it	cc
 801548c:	2304      	movcc	r3, #4
 801548e:	f841 c003 	str.w	ip, [r1, r3]
 8015492:	f1bc 0f00 	cmp.w	ip, #0
 8015496:	d001      	beq.n	801549c <__lshift+0xac>
 8015498:	f108 0602 	add.w	r6, r8, #2
 801549c:	3e01      	subs	r6, #1
 801549e:	4638      	mov	r0, r7
 80154a0:	612e      	str	r6, [r5, #16]
 80154a2:	4621      	mov	r1, r4
 80154a4:	f7ff fdd2 	bl	801504c <_Bfree>
 80154a8:	4628      	mov	r0, r5
 80154aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80154ae:	f842 0f04 	str.w	r0, [r2, #4]!
 80154b2:	3301      	adds	r3, #1
 80154b4:	e7c1      	b.n	801543a <__lshift+0x4a>
 80154b6:	3904      	subs	r1, #4
 80154b8:	f853 2b04 	ldr.w	r2, [r3], #4
 80154bc:	f841 2f04 	str.w	r2, [r1, #4]!
 80154c0:	4298      	cmp	r0, r3
 80154c2:	d8f9      	bhi.n	80154b8 <__lshift+0xc8>
 80154c4:	e7ea      	b.n	801549c <__lshift+0xac>
 80154c6:	bf00      	nop
 80154c8:	0801805f 	.word	0x0801805f
 80154cc:	080180d0 	.word	0x080180d0

080154d0 <__mcmp>:
 80154d0:	b530      	push	{r4, r5, lr}
 80154d2:	6902      	ldr	r2, [r0, #16]
 80154d4:	690c      	ldr	r4, [r1, #16]
 80154d6:	1b12      	subs	r2, r2, r4
 80154d8:	d10e      	bne.n	80154f8 <__mcmp+0x28>
 80154da:	f100 0314 	add.w	r3, r0, #20
 80154de:	3114      	adds	r1, #20
 80154e0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80154e4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80154e8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80154ec:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80154f0:	42a5      	cmp	r5, r4
 80154f2:	d003      	beq.n	80154fc <__mcmp+0x2c>
 80154f4:	d305      	bcc.n	8015502 <__mcmp+0x32>
 80154f6:	2201      	movs	r2, #1
 80154f8:	4610      	mov	r0, r2
 80154fa:	bd30      	pop	{r4, r5, pc}
 80154fc:	4283      	cmp	r3, r0
 80154fe:	d3f3      	bcc.n	80154e8 <__mcmp+0x18>
 8015500:	e7fa      	b.n	80154f8 <__mcmp+0x28>
 8015502:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8015506:	e7f7      	b.n	80154f8 <__mcmp+0x28>

08015508 <__mdiff>:
 8015508:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801550c:	460c      	mov	r4, r1
 801550e:	4606      	mov	r6, r0
 8015510:	4611      	mov	r1, r2
 8015512:	4620      	mov	r0, r4
 8015514:	4690      	mov	r8, r2
 8015516:	f7ff ffdb 	bl	80154d0 <__mcmp>
 801551a:	1e05      	subs	r5, r0, #0
 801551c:	d110      	bne.n	8015540 <__mdiff+0x38>
 801551e:	4629      	mov	r1, r5
 8015520:	4630      	mov	r0, r6
 8015522:	f7ff fd53 	bl	8014fcc <_Balloc>
 8015526:	b930      	cbnz	r0, 8015536 <__mdiff+0x2e>
 8015528:	4b3a      	ldr	r3, [pc, #232]	; (8015614 <__mdiff+0x10c>)
 801552a:	4602      	mov	r2, r0
 801552c:	f240 2132 	movw	r1, #562	; 0x232
 8015530:	4839      	ldr	r0, [pc, #228]	; (8015618 <__mdiff+0x110>)
 8015532:	f000 fc39 	bl	8015da8 <__assert_func>
 8015536:	2301      	movs	r3, #1
 8015538:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801553c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015540:	bfa4      	itt	ge
 8015542:	4643      	movge	r3, r8
 8015544:	46a0      	movge	r8, r4
 8015546:	4630      	mov	r0, r6
 8015548:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801554c:	bfa6      	itte	ge
 801554e:	461c      	movge	r4, r3
 8015550:	2500      	movge	r5, #0
 8015552:	2501      	movlt	r5, #1
 8015554:	f7ff fd3a 	bl	8014fcc <_Balloc>
 8015558:	b920      	cbnz	r0, 8015564 <__mdiff+0x5c>
 801555a:	4b2e      	ldr	r3, [pc, #184]	; (8015614 <__mdiff+0x10c>)
 801555c:	4602      	mov	r2, r0
 801555e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8015562:	e7e5      	b.n	8015530 <__mdiff+0x28>
 8015564:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8015568:	6926      	ldr	r6, [r4, #16]
 801556a:	60c5      	str	r5, [r0, #12]
 801556c:	f104 0914 	add.w	r9, r4, #20
 8015570:	f108 0514 	add.w	r5, r8, #20
 8015574:	f100 0e14 	add.w	lr, r0, #20
 8015578:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 801557c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8015580:	f108 0210 	add.w	r2, r8, #16
 8015584:	46f2      	mov	sl, lr
 8015586:	2100      	movs	r1, #0
 8015588:	f859 3b04 	ldr.w	r3, [r9], #4
 801558c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8015590:	fa1f f883 	uxth.w	r8, r3
 8015594:	fa11 f18b 	uxtah	r1, r1, fp
 8015598:	0c1b      	lsrs	r3, r3, #16
 801559a:	eba1 0808 	sub.w	r8, r1, r8
 801559e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80155a2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80155a6:	fa1f f888 	uxth.w	r8, r8
 80155aa:	1419      	asrs	r1, r3, #16
 80155ac:	454e      	cmp	r6, r9
 80155ae:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80155b2:	f84a 3b04 	str.w	r3, [sl], #4
 80155b6:	d8e7      	bhi.n	8015588 <__mdiff+0x80>
 80155b8:	1b33      	subs	r3, r6, r4
 80155ba:	3b15      	subs	r3, #21
 80155bc:	f023 0303 	bic.w	r3, r3, #3
 80155c0:	3304      	adds	r3, #4
 80155c2:	3415      	adds	r4, #21
 80155c4:	42a6      	cmp	r6, r4
 80155c6:	bf38      	it	cc
 80155c8:	2304      	movcc	r3, #4
 80155ca:	441d      	add	r5, r3
 80155cc:	4473      	add	r3, lr
 80155ce:	469e      	mov	lr, r3
 80155d0:	462e      	mov	r6, r5
 80155d2:	4566      	cmp	r6, ip
 80155d4:	d30e      	bcc.n	80155f4 <__mdiff+0xec>
 80155d6:	f10c 0203 	add.w	r2, ip, #3
 80155da:	1b52      	subs	r2, r2, r5
 80155dc:	f022 0203 	bic.w	r2, r2, #3
 80155e0:	3d03      	subs	r5, #3
 80155e2:	45ac      	cmp	ip, r5
 80155e4:	bf38      	it	cc
 80155e6:	2200      	movcc	r2, #0
 80155e8:	441a      	add	r2, r3
 80155ea:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80155ee:	b17b      	cbz	r3, 8015610 <__mdiff+0x108>
 80155f0:	6107      	str	r7, [r0, #16]
 80155f2:	e7a3      	b.n	801553c <__mdiff+0x34>
 80155f4:	f856 8b04 	ldr.w	r8, [r6], #4
 80155f8:	fa11 f288 	uxtah	r2, r1, r8
 80155fc:	1414      	asrs	r4, r2, #16
 80155fe:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8015602:	b292      	uxth	r2, r2
 8015604:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8015608:	f84e 2b04 	str.w	r2, [lr], #4
 801560c:	1421      	asrs	r1, r4, #16
 801560e:	e7e0      	b.n	80155d2 <__mdiff+0xca>
 8015610:	3f01      	subs	r7, #1
 8015612:	e7ea      	b.n	80155ea <__mdiff+0xe2>
 8015614:	0801805f 	.word	0x0801805f
 8015618:	080180d0 	.word	0x080180d0

0801561c <__d2b>:
 801561c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8015620:	4689      	mov	r9, r1
 8015622:	2101      	movs	r1, #1
 8015624:	ec57 6b10 	vmov	r6, r7, d0
 8015628:	4690      	mov	r8, r2
 801562a:	f7ff fccf 	bl	8014fcc <_Balloc>
 801562e:	4604      	mov	r4, r0
 8015630:	b930      	cbnz	r0, 8015640 <__d2b+0x24>
 8015632:	4602      	mov	r2, r0
 8015634:	4b25      	ldr	r3, [pc, #148]	; (80156cc <__d2b+0xb0>)
 8015636:	4826      	ldr	r0, [pc, #152]	; (80156d0 <__d2b+0xb4>)
 8015638:	f240 310a 	movw	r1, #778	; 0x30a
 801563c:	f000 fbb4 	bl	8015da8 <__assert_func>
 8015640:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8015644:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8015648:	bb35      	cbnz	r5, 8015698 <__d2b+0x7c>
 801564a:	2e00      	cmp	r6, #0
 801564c:	9301      	str	r3, [sp, #4]
 801564e:	d028      	beq.n	80156a2 <__d2b+0x86>
 8015650:	4668      	mov	r0, sp
 8015652:	9600      	str	r6, [sp, #0]
 8015654:	f7ff fd82 	bl	801515c <__lo0bits>
 8015658:	9900      	ldr	r1, [sp, #0]
 801565a:	b300      	cbz	r0, 801569e <__d2b+0x82>
 801565c:	9a01      	ldr	r2, [sp, #4]
 801565e:	f1c0 0320 	rsb	r3, r0, #32
 8015662:	fa02 f303 	lsl.w	r3, r2, r3
 8015666:	430b      	orrs	r3, r1
 8015668:	40c2      	lsrs	r2, r0
 801566a:	6163      	str	r3, [r4, #20]
 801566c:	9201      	str	r2, [sp, #4]
 801566e:	9b01      	ldr	r3, [sp, #4]
 8015670:	61a3      	str	r3, [r4, #24]
 8015672:	2b00      	cmp	r3, #0
 8015674:	bf14      	ite	ne
 8015676:	2202      	movne	r2, #2
 8015678:	2201      	moveq	r2, #1
 801567a:	6122      	str	r2, [r4, #16]
 801567c:	b1d5      	cbz	r5, 80156b4 <__d2b+0x98>
 801567e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8015682:	4405      	add	r5, r0
 8015684:	f8c9 5000 	str.w	r5, [r9]
 8015688:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801568c:	f8c8 0000 	str.w	r0, [r8]
 8015690:	4620      	mov	r0, r4
 8015692:	b003      	add	sp, #12
 8015694:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015698:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801569c:	e7d5      	b.n	801564a <__d2b+0x2e>
 801569e:	6161      	str	r1, [r4, #20]
 80156a0:	e7e5      	b.n	801566e <__d2b+0x52>
 80156a2:	a801      	add	r0, sp, #4
 80156a4:	f7ff fd5a 	bl	801515c <__lo0bits>
 80156a8:	9b01      	ldr	r3, [sp, #4]
 80156aa:	6163      	str	r3, [r4, #20]
 80156ac:	2201      	movs	r2, #1
 80156ae:	6122      	str	r2, [r4, #16]
 80156b0:	3020      	adds	r0, #32
 80156b2:	e7e3      	b.n	801567c <__d2b+0x60>
 80156b4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80156b8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80156bc:	f8c9 0000 	str.w	r0, [r9]
 80156c0:	6918      	ldr	r0, [r3, #16]
 80156c2:	f7ff fd2b 	bl	801511c <__hi0bits>
 80156c6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80156ca:	e7df      	b.n	801568c <__d2b+0x70>
 80156cc:	0801805f 	.word	0x0801805f
 80156d0:	080180d0 	.word	0x080180d0

080156d4 <_calloc_r>:
 80156d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80156d6:	fba1 2402 	umull	r2, r4, r1, r2
 80156da:	b94c      	cbnz	r4, 80156f0 <_calloc_r+0x1c>
 80156dc:	4611      	mov	r1, r2
 80156de:	9201      	str	r2, [sp, #4]
 80156e0:	f7fd fd58 	bl	8013194 <_malloc_r>
 80156e4:	9a01      	ldr	r2, [sp, #4]
 80156e6:	4605      	mov	r5, r0
 80156e8:	b930      	cbnz	r0, 80156f8 <_calloc_r+0x24>
 80156ea:	4628      	mov	r0, r5
 80156ec:	b003      	add	sp, #12
 80156ee:	bd30      	pop	{r4, r5, pc}
 80156f0:	220c      	movs	r2, #12
 80156f2:	6002      	str	r2, [r0, #0]
 80156f4:	2500      	movs	r5, #0
 80156f6:	e7f8      	b.n	80156ea <_calloc_r+0x16>
 80156f8:	4621      	mov	r1, r4
 80156fa:	f7fd fcd7 	bl	80130ac <memset>
 80156fe:	e7f4      	b.n	80156ea <_calloc_r+0x16>

08015700 <__ssputs_r>:
 8015700:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015704:	688e      	ldr	r6, [r1, #8]
 8015706:	429e      	cmp	r6, r3
 8015708:	4682      	mov	sl, r0
 801570a:	460c      	mov	r4, r1
 801570c:	4690      	mov	r8, r2
 801570e:	461f      	mov	r7, r3
 8015710:	d838      	bhi.n	8015784 <__ssputs_r+0x84>
 8015712:	898a      	ldrh	r2, [r1, #12]
 8015714:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8015718:	d032      	beq.n	8015780 <__ssputs_r+0x80>
 801571a:	6825      	ldr	r5, [r4, #0]
 801571c:	6909      	ldr	r1, [r1, #16]
 801571e:	eba5 0901 	sub.w	r9, r5, r1
 8015722:	6965      	ldr	r5, [r4, #20]
 8015724:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8015728:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801572c:	3301      	adds	r3, #1
 801572e:	444b      	add	r3, r9
 8015730:	106d      	asrs	r5, r5, #1
 8015732:	429d      	cmp	r5, r3
 8015734:	bf38      	it	cc
 8015736:	461d      	movcc	r5, r3
 8015738:	0553      	lsls	r3, r2, #21
 801573a:	d531      	bpl.n	80157a0 <__ssputs_r+0xa0>
 801573c:	4629      	mov	r1, r5
 801573e:	f7fd fd29 	bl	8013194 <_malloc_r>
 8015742:	4606      	mov	r6, r0
 8015744:	b950      	cbnz	r0, 801575c <__ssputs_r+0x5c>
 8015746:	230c      	movs	r3, #12
 8015748:	f8ca 3000 	str.w	r3, [sl]
 801574c:	89a3      	ldrh	r3, [r4, #12]
 801574e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015752:	81a3      	strh	r3, [r4, #12]
 8015754:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015758:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801575c:	6921      	ldr	r1, [r4, #16]
 801575e:	464a      	mov	r2, r9
 8015760:	f7fd fc96 	bl	8013090 <memcpy>
 8015764:	89a3      	ldrh	r3, [r4, #12]
 8015766:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801576a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801576e:	81a3      	strh	r3, [r4, #12]
 8015770:	6126      	str	r6, [r4, #16]
 8015772:	6165      	str	r5, [r4, #20]
 8015774:	444e      	add	r6, r9
 8015776:	eba5 0509 	sub.w	r5, r5, r9
 801577a:	6026      	str	r6, [r4, #0]
 801577c:	60a5      	str	r5, [r4, #8]
 801577e:	463e      	mov	r6, r7
 8015780:	42be      	cmp	r6, r7
 8015782:	d900      	bls.n	8015786 <__ssputs_r+0x86>
 8015784:	463e      	mov	r6, r7
 8015786:	6820      	ldr	r0, [r4, #0]
 8015788:	4632      	mov	r2, r6
 801578a:	4641      	mov	r1, r8
 801578c:	f000 fb92 	bl	8015eb4 <memmove>
 8015790:	68a3      	ldr	r3, [r4, #8]
 8015792:	1b9b      	subs	r3, r3, r6
 8015794:	60a3      	str	r3, [r4, #8]
 8015796:	6823      	ldr	r3, [r4, #0]
 8015798:	4433      	add	r3, r6
 801579a:	6023      	str	r3, [r4, #0]
 801579c:	2000      	movs	r0, #0
 801579e:	e7db      	b.n	8015758 <__ssputs_r+0x58>
 80157a0:	462a      	mov	r2, r5
 80157a2:	f000 fba1 	bl	8015ee8 <_realloc_r>
 80157a6:	4606      	mov	r6, r0
 80157a8:	2800      	cmp	r0, #0
 80157aa:	d1e1      	bne.n	8015770 <__ssputs_r+0x70>
 80157ac:	6921      	ldr	r1, [r4, #16]
 80157ae:	4650      	mov	r0, sl
 80157b0:	f7fd fc84 	bl	80130bc <_free_r>
 80157b4:	e7c7      	b.n	8015746 <__ssputs_r+0x46>
	...

080157b8 <_svfiprintf_r>:
 80157b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80157bc:	4698      	mov	r8, r3
 80157be:	898b      	ldrh	r3, [r1, #12]
 80157c0:	061b      	lsls	r3, r3, #24
 80157c2:	b09d      	sub	sp, #116	; 0x74
 80157c4:	4607      	mov	r7, r0
 80157c6:	460d      	mov	r5, r1
 80157c8:	4614      	mov	r4, r2
 80157ca:	d50e      	bpl.n	80157ea <_svfiprintf_r+0x32>
 80157cc:	690b      	ldr	r3, [r1, #16]
 80157ce:	b963      	cbnz	r3, 80157ea <_svfiprintf_r+0x32>
 80157d0:	2140      	movs	r1, #64	; 0x40
 80157d2:	f7fd fcdf 	bl	8013194 <_malloc_r>
 80157d6:	6028      	str	r0, [r5, #0]
 80157d8:	6128      	str	r0, [r5, #16]
 80157da:	b920      	cbnz	r0, 80157e6 <_svfiprintf_r+0x2e>
 80157dc:	230c      	movs	r3, #12
 80157de:	603b      	str	r3, [r7, #0]
 80157e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80157e4:	e0d1      	b.n	801598a <_svfiprintf_r+0x1d2>
 80157e6:	2340      	movs	r3, #64	; 0x40
 80157e8:	616b      	str	r3, [r5, #20]
 80157ea:	2300      	movs	r3, #0
 80157ec:	9309      	str	r3, [sp, #36]	; 0x24
 80157ee:	2320      	movs	r3, #32
 80157f0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80157f4:	f8cd 800c 	str.w	r8, [sp, #12]
 80157f8:	2330      	movs	r3, #48	; 0x30
 80157fa:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80159a4 <_svfiprintf_r+0x1ec>
 80157fe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015802:	f04f 0901 	mov.w	r9, #1
 8015806:	4623      	mov	r3, r4
 8015808:	469a      	mov	sl, r3
 801580a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801580e:	b10a      	cbz	r2, 8015814 <_svfiprintf_r+0x5c>
 8015810:	2a25      	cmp	r2, #37	; 0x25
 8015812:	d1f9      	bne.n	8015808 <_svfiprintf_r+0x50>
 8015814:	ebba 0b04 	subs.w	fp, sl, r4
 8015818:	d00b      	beq.n	8015832 <_svfiprintf_r+0x7a>
 801581a:	465b      	mov	r3, fp
 801581c:	4622      	mov	r2, r4
 801581e:	4629      	mov	r1, r5
 8015820:	4638      	mov	r0, r7
 8015822:	f7ff ff6d 	bl	8015700 <__ssputs_r>
 8015826:	3001      	adds	r0, #1
 8015828:	f000 80aa 	beq.w	8015980 <_svfiprintf_r+0x1c8>
 801582c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801582e:	445a      	add	r2, fp
 8015830:	9209      	str	r2, [sp, #36]	; 0x24
 8015832:	f89a 3000 	ldrb.w	r3, [sl]
 8015836:	2b00      	cmp	r3, #0
 8015838:	f000 80a2 	beq.w	8015980 <_svfiprintf_r+0x1c8>
 801583c:	2300      	movs	r3, #0
 801583e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8015842:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015846:	f10a 0a01 	add.w	sl, sl, #1
 801584a:	9304      	str	r3, [sp, #16]
 801584c:	9307      	str	r3, [sp, #28]
 801584e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8015852:	931a      	str	r3, [sp, #104]	; 0x68
 8015854:	4654      	mov	r4, sl
 8015856:	2205      	movs	r2, #5
 8015858:	f814 1b01 	ldrb.w	r1, [r4], #1
 801585c:	4851      	ldr	r0, [pc, #324]	; (80159a4 <_svfiprintf_r+0x1ec>)
 801585e:	f7ea fc97 	bl	8000190 <memchr>
 8015862:	9a04      	ldr	r2, [sp, #16]
 8015864:	b9d8      	cbnz	r0, 801589e <_svfiprintf_r+0xe6>
 8015866:	06d0      	lsls	r0, r2, #27
 8015868:	bf44      	itt	mi
 801586a:	2320      	movmi	r3, #32
 801586c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015870:	0711      	lsls	r1, r2, #28
 8015872:	bf44      	itt	mi
 8015874:	232b      	movmi	r3, #43	; 0x2b
 8015876:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801587a:	f89a 3000 	ldrb.w	r3, [sl]
 801587e:	2b2a      	cmp	r3, #42	; 0x2a
 8015880:	d015      	beq.n	80158ae <_svfiprintf_r+0xf6>
 8015882:	9a07      	ldr	r2, [sp, #28]
 8015884:	4654      	mov	r4, sl
 8015886:	2000      	movs	r0, #0
 8015888:	f04f 0c0a 	mov.w	ip, #10
 801588c:	4621      	mov	r1, r4
 801588e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015892:	3b30      	subs	r3, #48	; 0x30
 8015894:	2b09      	cmp	r3, #9
 8015896:	d94e      	bls.n	8015936 <_svfiprintf_r+0x17e>
 8015898:	b1b0      	cbz	r0, 80158c8 <_svfiprintf_r+0x110>
 801589a:	9207      	str	r2, [sp, #28]
 801589c:	e014      	b.n	80158c8 <_svfiprintf_r+0x110>
 801589e:	eba0 0308 	sub.w	r3, r0, r8
 80158a2:	fa09 f303 	lsl.w	r3, r9, r3
 80158a6:	4313      	orrs	r3, r2
 80158a8:	9304      	str	r3, [sp, #16]
 80158aa:	46a2      	mov	sl, r4
 80158ac:	e7d2      	b.n	8015854 <_svfiprintf_r+0x9c>
 80158ae:	9b03      	ldr	r3, [sp, #12]
 80158b0:	1d19      	adds	r1, r3, #4
 80158b2:	681b      	ldr	r3, [r3, #0]
 80158b4:	9103      	str	r1, [sp, #12]
 80158b6:	2b00      	cmp	r3, #0
 80158b8:	bfbb      	ittet	lt
 80158ba:	425b      	neglt	r3, r3
 80158bc:	f042 0202 	orrlt.w	r2, r2, #2
 80158c0:	9307      	strge	r3, [sp, #28]
 80158c2:	9307      	strlt	r3, [sp, #28]
 80158c4:	bfb8      	it	lt
 80158c6:	9204      	strlt	r2, [sp, #16]
 80158c8:	7823      	ldrb	r3, [r4, #0]
 80158ca:	2b2e      	cmp	r3, #46	; 0x2e
 80158cc:	d10c      	bne.n	80158e8 <_svfiprintf_r+0x130>
 80158ce:	7863      	ldrb	r3, [r4, #1]
 80158d0:	2b2a      	cmp	r3, #42	; 0x2a
 80158d2:	d135      	bne.n	8015940 <_svfiprintf_r+0x188>
 80158d4:	9b03      	ldr	r3, [sp, #12]
 80158d6:	1d1a      	adds	r2, r3, #4
 80158d8:	681b      	ldr	r3, [r3, #0]
 80158da:	9203      	str	r2, [sp, #12]
 80158dc:	2b00      	cmp	r3, #0
 80158de:	bfb8      	it	lt
 80158e0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80158e4:	3402      	adds	r4, #2
 80158e6:	9305      	str	r3, [sp, #20]
 80158e8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80159b4 <_svfiprintf_r+0x1fc>
 80158ec:	7821      	ldrb	r1, [r4, #0]
 80158ee:	2203      	movs	r2, #3
 80158f0:	4650      	mov	r0, sl
 80158f2:	f7ea fc4d 	bl	8000190 <memchr>
 80158f6:	b140      	cbz	r0, 801590a <_svfiprintf_r+0x152>
 80158f8:	2340      	movs	r3, #64	; 0x40
 80158fa:	eba0 000a 	sub.w	r0, r0, sl
 80158fe:	fa03 f000 	lsl.w	r0, r3, r0
 8015902:	9b04      	ldr	r3, [sp, #16]
 8015904:	4303      	orrs	r3, r0
 8015906:	3401      	adds	r4, #1
 8015908:	9304      	str	r3, [sp, #16]
 801590a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801590e:	4826      	ldr	r0, [pc, #152]	; (80159a8 <_svfiprintf_r+0x1f0>)
 8015910:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8015914:	2206      	movs	r2, #6
 8015916:	f7ea fc3b 	bl	8000190 <memchr>
 801591a:	2800      	cmp	r0, #0
 801591c:	d038      	beq.n	8015990 <_svfiprintf_r+0x1d8>
 801591e:	4b23      	ldr	r3, [pc, #140]	; (80159ac <_svfiprintf_r+0x1f4>)
 8015920:	bb1b      	cbnz	r3, 801596a <_svfiprintf_r+0x1b2>
 8015922:	9b03      	ldr	r3, [sp, #12]
 8015924:	3307      	adds	r3, #7
 8015926:	f023 0307 	bic.w	r3, r3, #7
 801592a:	3308      	adds	r3, #8
 801592c:	9303      	str	r3, [sp, #12]
 801592e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015930:	4433      	add	r3, r6
 8015932:	9309      	str	r3, [sp, #36]	; 0x24
 8015934:	e767      	b.n	8015806 <_svfiprintf_r+0x4e>
 8015936:	fb0c 3202 	mla	r2, ip, r2, r3
 801593a:	460c      	mov	r4, r1
 801593c:	2001      	movs	r0, #1
 801593e:	e7a5      	b.n	801588c <_svfiprintf_r+0xd4>
 8015940:	2300      	movs	r3, #0
 8015942:	3401      	adds	r4, #1
 8015944:	9305      	str	r3, [sp, #20]
 8015946:	4619      	mov	r1, r3
 8015948:	f04f 0c0a 	mov.w	ip, #10
 801594c:	4620      	mov	r0, r4
 801594e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015952:	3a30      	subs	r2, #48	; 0x30
 8015954:	2a09      	cmp	r2, #9
 8015956:	d903      	bls.n	8015960 <_svfiprintf_r+0x1a8>
 8015958:	2b00      	cmp	r3, #0
 801595a:	d0c5      	beq.n	80158e8 <_svfiprintf_r+0x130>
 801595c:	9105      	str	r1, [sp, #20]
 801595e:	e7c3      	b.n	80158e8 <_svfiprintf_r+0x130>
 8015960:	fb0c 2101 	mla	r1, ip, r1, r2
 8015964:	4604      	mov	r4, r0
 8015966:	2301      	movs	r3, #1
 8015968:	e7f0      	b.n	801594c <_svfiprintf_r+0x194>
 801596a:	ab03      	add	r3, sp, #12
 801596c:	9300      	str	r3, [sp, #0]
 801596e:	462a      	mov	r2, r5
 8015970:	4b0f      	ldr	r3, [pc, #60]	; (80159b0 <_svfiprintf_r+0x1f8>)
 8015972:	a904      	add	r1, sp, #16
 8015974:	4638      	mov	r0, r7
 8015976:	f7fd fd21 	bl	80133bc <_printf_float>
 801597a:	1c42      	adds	r2, r0, #1
 801597c:	4606      	mov	r6, r0
 801597e:	d1d6      	bne.n	801592e <_svfiprintf_r+0x176>
 8015980:	89ab      	ldrh	r3, [r5, #12]
 8015982:	065b      	lsls	r3, r3, #25
 8015984:	f53f af2c 	bmi.w	80157e0 <_svfiprintf_r+0x28>
 8015988:	9809      	ldr	r0, [sp, #36]	; 0x24
 801598a:	b01d      	add	sp, #116	; 0x74
 801598c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015990:	ab03      	add	r3, sp, #12
 8015992:	9300      	str	r3, [sp, #0]
 8015994:	462a      	mov	r2, r5
 8015996:	4b06      	ldr	r3, [pc, #24]	; (80159b0 <_svfiprintf_r+0x1f8>)
 8015998:	a904      	add	r1, sp, #16
 801599a:	4638      	mov	r0, r7
 801599c:	f7fd ffb2 	bl	8013904 <_printf_i>
 80159a0:	e7eb      	b.n	801597a <_svfiprintf_r+0x1c2>
 80159a2:	bf00      	nop
 80159a4:	0801822c 	.word	0x0801822c
 80159a8:	08018236 	.word	0x08018236
 80159ac:	080133bd 	.word	0x080133bd
 80159b0:	08015701 	.word	0x08015701
 80159b4:	08018232 	.word	0x08018232

080159b8 <__sfputc_r>:
 80159b8:	6893      	ldr	r3, [r2, #8]
 80159ba:	3b01      	subs	r3, #1
 80159bc:	2b00      	cmp	r3, #0
 80159be:	b410      	push	{r4}
 80159c0:	6093      	str	r3, [r2, #8]
 80159c2:	da08      	bge.n	80159d6 <__sfputc_r+0x1e>
 80159c4:	6994      	ldr	r4, [r2, #24]
 80159c6:	42a3      	cmp	r3, r4
 80159c8:	db01      	blt.n	80159ce <__sfputc_r+0x16>
 80159ca:	290a      	cmp	r1, #10
 80159cc:	d103      	bne.n	80159d6 <__sfputc_r+0x1e>
 80159ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 80159d2:	f7fe b991 	b.w	8013cf8 <__swbuf_r>
 80159d6:	6813      	ldr	r3, [r2, #0]
 80159d8:	1c58      	adds	r0, r3, #1
 80159da:	6010      	str	r0, [r2, #0]
 80159dc:	7019      	strb	r1, [r3, #0]
 80159de:	4608      	mov	r0, r1
 80159e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80159e4:	4770      	bx	lr

080159e6 <__sfputs_r>:
 80159e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80159e8:	4606      	mov	r6, r0
 80159ea:	460f      	mov	r7, r1
 80159ec:	4614      	mov	r4, r2
 80159ee:	18d5      	adds	r5, r2, r3
 80159f0:	42ac      	cmp	r4, r5
 80159f2:	d101      	bne.n	80159f8 <__sfputs_r+0x12>
 80159f4:	2000      	movs	r0, #0
 80159f6:	e007      	b.n	8015a08 <__sfputs_r+0x22>
 80159f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80159fc:	463a      	mov	r2, r7
 80159fe:	4630      	mov	r0, r6
 8015a00:	f7ff ffda 	bl	80159b8 <__sfputc_r>
 8015a04:	1c43      	adds	r3, r0, #1
 8015a06:	d1f3      	bne.n	80159f0 <__sfputs_r+0xa>
 8015a08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08015a0c <_vfiprintf_r>:
 8015a0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015a10:	460d      	mov	r5, r1
 8015a12:	b09d      	sub	sp, #116	; 0x74
 8015a14:	4614      	mov	r4, r2
 8015a16:	4698      	mov	r8, r3
 8015a18:	4606      	mov	r6, r0
 8015a1a:	b118      	cbz	r0, 8015a24 <_vfiprintf_r+0x18>
 8015a1c:	6983      	ldr	r3, [r0, #24]
 8015a1e:	b90b      	cbnz	r3, 8015a24 <_vfiprintf_r+0x18>
 8015a20:	f7ff f9be 	bl	8014da0 <__sinit>
 8015a24:	4b89      	ldr	r3, [pc, #548]	; (8015c4c <_vfiprintf_r+0x240>)
 8015a26:	429d      	cmp	r5, r3
 8015a28:	d11b      	bne.n	8015a62 <_vfiprintf_r+0x56>
 8015a2a:	6875      	ldr	r5, [r6, #4]
 8015a2c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015a2e:	07d9      	lsls	r1, r3, #31
 8015a30:	d405      	bmi.n	8015a3e <_vfiprintf_r+0x32>
 8015a32:	89ab      	ldrh	r3, [r5, #12]
 8015a34:	059a      	lsls	r2, r3, #22
 8015a36:	d402      	bmi.n	8015a3e <_vfiprintf_r+0x32>
 8015a38:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015a3a:	f7ff fa54 	bl	8014ee6 <__retarget_lock_acquire_recursive>
 8015a3e:	89ab      	ldrh	r3, [r5, #12]
 8015a40:	071b      	lsls	r3, r3, #28
 8015a42:	d501      	bpl.n	8015a48 <_vfiprintf_r+0x3c>
 8015a44:	692b      	ldr	r3, [r5, #16]
 8015a46:	b9eb      	cbnz	r3, 8015a84 <_vfiprintf_r+0x78>
 8015a48:	4629      	mov	r1, r5
 8015a4a:	4630      	mov	r0, r6
 8015a4c:	f7fe f9a6 	bl	8013d9c <__swsetup_r>
 8015a50:	b1c0      	cbz	r0, 8015a84 <_vfiprintf_r+0x78>
 8015a52:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015a54:	07dc      	lsls	r4, r3, #31
 8015a56:	d50e      	bpl.n	8015a76 <_vfiprintf_r+0x6a>
 8015a58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015a5c:	b01d      	add	sp, #116	; 0x74
 8015a5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015a62:	4b7b      	ldr	r3, [pc, #492]	; (8015c50 <_vfiprintf_r+0x244>)
 8015a64:	429d      	cmp	r5, r3
 8015a66:	d101      	bne.n	8015a6c <_vfiprintf_r+0x60>
 8015a68:	68b5      	ldr	r5, [r6, #8]
 8015a6a:	e7df      	b.n	8015a2c <_vfiprintf_r+0x20>
 8015a6c:	4b79      	ldr	r3, [pc, #484]	; (8015c54 <_vfiprintf_r+0x248>)
 8015a6e:	429d      	cmp	r5, r3
 8015a70:	bf08      	it	eq
 8015a72:	68f5      	ldreq	r5, [r6, #12]
 8015a74:	e7da      	b.n	8015a2c <_vfiprintf_r+0x20>
 8015a76:	89ab      	ldrh	r3, [r5, #12]
 8015a78:	0598      	lsls	r0, r3, #22
 8015a7a:	d4ed      	bmi.n	8015a58 <_vfiprintf_r+0x4c>
 8015a7c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015a7e:	f7ff fa33 	bl	8014ee8 <__retarget_lock_release_recursive>
 8015a82:	e7e9      	b.n	8015a58 <_vfiprintf_r+0x4c>
 8015a84:	2300      	movs	r3, #0
 8015a86:	9309      	str	r3, [sp, #36]	; 0x24
 8015a88:	2320      	movs	r3, #32
 8015a8a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8015a8e:	f8cd 800c 	str.w	r8, [sp, #12]
 8015a92:	2330      	movs	r3, #48	; 0x30
 8015a94:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8015c58 <_vfiprintf_r+0x24c>
 8015a98:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015a9c:	f04f 0901 	mov.w	r9, #1
 8015aa0:	4623      	mov	r3, r4
 8015aa2:	469a      	mov	sl, r3
 8015aa4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015aa8:	b10a      	cbz	r2, 8015aae <_vfiprintf_r+0xa2>
 8015aaa:	2a25      	cmp	r2, #37	; 0x25
 8015aac:	d1f9      	bne.n	8015aa2 <_vfiprintf_r+0x96>
 8015aae:	ebba 0b04 	subs.w	fp, sl, r4
 8015ab2:	d00b      	beq.n	8015acc <_vfiprintf_r+0xc0>
 8015ab4:	465b      	mov	r3, fp
 8015ab6:	4622      	mov	r2, r4
 8015ab8:	4629      	mov	r1, r5
 8015aba:	4630      	mov	r0, r6
 8015abc:	f7ff ff93 	bl	80159e6 <__sfputs_r>
 8015ac0:	3001      	adds	r0, #1
 8015ac2:	f000 80aa 	beq.w	8015c1a <_vfiprintf_r+0x20e>
 8015ac6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015ac8:	445a      	add	r2, fp
 8015aca:	9209      	str	r2, [sp, #36]	; 0x24
 8015acc:	f89a 3000 	ldrb.w	r3, [sl]
 8015ad0:	2b00      	cmp	r3, #0
 8015ad2:	f000 80a2 	beq.w	8015c1a <_vfiprintf_r+0x20e>
 8015ad6:	2300      	movs	r3, #0
 8015ad8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8015adc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015ae0:	f10a 0a01 	add.w	sl, sl, #1
 8015ae4:	9304      	str	r3, [sp, #16]
 8015ae6:	9307      	str	r3, [sp, #28]
 8015ae8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8015aec:	931a      	str	r3, [sp, #104]	; 0x68
 8015aee:	4654      	mov	r4, sl
 8015af0:	2205      	movs	r2, #5
 8015af2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015af6:	4858      	ldr	r0, [pc, #352]	; (8015c58 <_vfiprintf_r+0x24c>)
 8015af8:	f7ea fb4a 	bl	8000190 <memchr>
 8015afc:	9a04      	ldr	r2, [sp, #16]
 8015afe:	b9d8      	cbnz	r0, 8015b38 <_vfiprintf_r+0x12c>
 8015b00:	06d1      	lsls	r1, r2, #27
 8015b02:	bf44      	itt	mi
 8015b04:	2320      	movmi	r3, #32
 8015b06:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015b0a:	0713      	lsls	r3, r2, #28
 8015b0c:	bf44      	itt	mi
 8015b0e:	232b      	movmi	r3, #43	; 0x2b
 8015b10:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015b14:	f89a 3000 	ldrb.w	r3, [sl]
 8015b18:	2b2a      	cmp	r3, #42	; 0x2a
 8015b1a:	d015      	beq.n	8015b48 <_vfiprintf_r+0x13c>
 8015b1c:	9a07      	ldr	r2, [sp, #28]
 8015b1e:	4654      	mov	r4, sl
 8015b20:	2000      	movs	r0, #0
 8015b22:	f04f 0c0a 	mov.w	ip, #10
 8015b26:	4621      	mov	r1, r4
 8015b28:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015b2c:	3b30      	subs	r3, #48	; 0x30
 8015b2e:	2b09      	cmp	r3, #9
 8015b30:	d94e      	bls.n	8015bd0 <_vfiprintf_r+0x1c4>
 8015b32:	b1b0      	cbz	r0, 8015b62 <_vfiprintf_r+0x156>
 8015b34:	9207      	str	r2, [sp, #28]
 8015b36:	e014      	b.n	8015b62 <_vfiprintf_r+0x156>
 8015b38:	eba0 0308 	sub.w	r3, r0, r8
 8015b3c:	fa09 f303 	lsl.w	r3, r9, r3
 8015b40:	4313      	orrs	r3, r2
 8015b42:	9304      	str	r3, [sp, #16]
 8015b44:	46a2      	mov	sl, r4
 8015b46:	e7d2      	b.n	8015aee <_vfiprintf_r+0xe2>
 8015b48:	9b03      	ldr	r3, [sp, #12]
 8015b4a:	1d19      	adds	r1, r3, #4
 8015b4c:	681b      	ldr	r3, [r3, #0]
 8015b4e:	9103      	str	r1, [sp, #12]
 8015b50:	2b00      	cmp	r3, #0
 8015b52:	bfbb      	ittet	lt
 8015b54:	425b      	neglt	r3, r3
 8015b56:	f042 0202 	orrlt.w	r2, r2, #2
 8015b5a:	9307      	strge	r3, [sp, #28]
 8015b5c:	9307      	strlt	r3, [sp, #28]
 8015b5e:	bfb8      	it	lt
 8015b60:	9204      	strlt	r2, [sp, #16]
 8015b62:	7823      	ldrb	r3, [r4, #0]
 8015b64:	2b2e      	cmp	r3, #46	; 0x2e
 8015b66:	d10c      	bne.n	8015b82 <_vfiprintf_r+0x176>
 8015b68:	7863      	ldrb	r3, [r4, #1]
 8015b6a:	2b2a      	cmp	r3, #42	; 0x2a
 8015b6c:	d135      	bne.n	8015bda <_vfiprintf_r+0x1ce>
 8015b6e:	9b03      	ldr	r3, [sp, #12]
 8015b70:	1d1a      	adds	r2, r3, #4
 8015b72:	681b      	ldr	r3, [r3, #0]
 8015b74:	9203      	str	r2, [sp, #12]
 8015b76:	2b00      	cmp	r3, #0
 8015b78:	bfb8      	it	lt
 8015b7a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8015b7e:	3402      	adds	r4, #2
 8015b80:	9305      	str	r3, [sp, #20]
 8015b82:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8015c68 <_vfiprintf_r+0x25c>
 8015b86:	7821      	ldrb	r1, [r4, #0]
 8015b88:	2203      	movs	r2, #3
 8015b8a:	4650      	mov	r0, sl
 8015b8c:	f7ea fb00 	bl	8000190 <memchr>
 8015b90:	b140      	cbz	r0, 8015ba4 <_vfiprintf_r+0x198>
 8015b92:	2340      	movs	r3, #64	; 0x40
 8015b94:	eba0 000a 	sub.w	r0, r0, sl
 8015b98:	fa03 f000 	lsl.w	r0, r3, r0
 8015b9c:	9b04      	ldr	r3, [sp, #16]
 8015b9e:	4303      	orrs	r3, r0
 8015ba0:	3401      	adds	r4, #1
 8015ba2:	9304      	str	r3, [sp, #16]
 8015ba4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015ba8:	482c      	ldr	r0, [pc, #176]	; (8015c5c <_vfiprintf_r+0x250>)
 8015baa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8015bae:	2206      	movs	r2, #6
 8015bb0:	f7ea faee 	bl	8000190 <memchr>
 8015bb4:	2800      	cmp	r0, #0
 8015bb6:	d03f      	beq.n	8015c38 <_vfiprintf_r+0x22c>
 8015bb8:	4b29      	ldr	r3, [pc, #164]	; (8015c60 <_vfiprintf_r+0x254>)
 8015bba:	bb1b      	cbnz	r3, 8015c04 <_vfiprintf_r+0x1f8>
 8015bbc:	9b03      	ldr	r3, [sp, #12]
 8015bbe:	3307      	adds	r3, #7
 8015bc0:	f023 0307 	bic.w	r3, r3, #7
 8015bc4:	3308      	adds	r3, #8
 8015bc6:	9303      	str	r3, [sp, #12]
 8015bc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015bca:	443b      	add	r3, r7
 8015bcc:	9309      	str	r3, [sp, #36]	; 0x24
 8015bce:	e767      	b.n	8015aa0 <_vfiprintf_r+0x94>
 8015bd0:	fb0c 3202 	mla	r2, ip, r2, r3
 8015bd4:	460c      	mov	r4, r1
 8015bd6:	2001      	movs	r0, #1
 8015bd8:	e7a5      	b.n	8015b26 <_vfiprintf_r+0x11a>
 8015bda:	2300      	movs	r3, #0
 8015bdc:	3401      	adds	r4, #1
 8015bde:	9305      	str	r3, [sp, #20]
 8015be0:	4619      	mov	r1, r3
 8015be2:	f04f 0c0a 	mov.w	ip, #10
 8015be6:	4620      	mov	r0, r4
 8015be8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015bec:	3a30      	subs	r2, #48	; 0x30
 8015bee:	2a09      	cmp	r2, #9
 8015bf0:	d903      	bls.n	8015bfa <_vfiprintf_r+0x1ee>
 8015bf2:	2b00      	cmp	r3, #0
 8015bf4:	d0c5      	beq.n	8015b82 <_vfiprintf_r+0x176>
 8015bf6:	9105      	str	r1, [sp, #20]
 8015bf8:	e7c3      	b.n	8015b82 <_vfiprintf_r+0x176>
 8015bfa:	fb0c 2101 	mla	r1, ip, r1, r2
 8015bfe:	4604      	mov	r4, r0
 8015c00:	2301      	movs	r3, #1
 8015c02:	e7f0      	b.n	8015be6 <_vfiprintf_r+0x1da>
 8015c04:	ab03      	add	r3, sp, #12
 8015c06:	9300      	str	r3, [sp, #0]
 8015c08:	462a      	mov	r2, r5
 8015c0a:	4b16      	ldr	r3, [pc, #88]	; (8015c64 <_vfiprintf_r+0x258>)
 8015c0c:	a904      	add	r1, sp, #16
 8015c0e:	4630      	mov	r0, r6
 8015c10:	f7fd fbd4 	bl	80133bc <_printf_float>
 8015c14:	4607      	mov	r7, r0
 8015c16:	1c78      	adds	r0, r7, #1
 8015c18:	d1d6      	bne.n	8015bc8 <_vfiprintf_r+0x1bc>
 8015c1a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015c1c:	07d9      	lsls	r1, r3, #31
 8015c1e:	d405      	bmi.n	8015c2c <_vfiprintf_r+0x220>
 8015c20:	89ab      	ldrh	r3, [r5, #12]
 8015c22:	059a      	lsls	r2, r3, #22
 8015c24:	d402      	bmi.n	8015c2c <_vfiprintf_r+0x220>
 8015c26:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015c28:	f7ff f95e 	bl	8014ee8 <__retarget_lock_release_recursive>
 8015c2c:	89ab      	ldrh	r3, [r5, #12]
 8015c2e:	065b      	lsls	r3, r3, #25
 8015c30:	f53f af12 	bmi.w	8015a58 <_vfiprintf_r+0x4c>
 8015c34:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015c36:	e711      	b.n	8015a5c <_vfiprintf_r+0x50>
 8015c38:	ab03      	add	r3, sp, #12
 8015c3a:	9300      	str	r3, [sp, #0]
 8015c3c:	462a      	mov	r2, r5
 8015c3e:	4b09      	ldr	r3, [pc, #36]	; (8015c64 <_vfiprintf_r+0x258>)
 8015c40:	a904      	add	r1, sp, #16
 8015c42:	4630      	mov	r0, r6
 8015c44:	f7fd fe5e 	bl	8013904 <_printf_i>
 8015c48:	e7e4      	b.n	8015c14 <_vfiprintf_r+0x208>
 8015c4a:	bf00      	nop
 8015c4c:	08018090 	.word	0x08018090
 8015c50:	080180b0 	.word	0x080180b0
 8015c54:	08018070 	.word	0x08018070
 8015c58:	0801822c 	.word	0x0801822c
 8015c5c:	08018236 	.word	0x08018236
 8015c60:	080133bd 	.word	0x080133bd
 8015c64:	080159e7 	.word	0x080159e7
 8015c68:	08018232 	.word	0x08018232

08015c6c <_putc_r>:
 8015c6c:	b570      	push	{r4, r5, r6, lr}
 8015c6e:	460d      	mov	r5, r1
 8015c70:	4614      	mov	r4, r2
 8015c72:	4606      	mov	r6, r0
 8015c74:	b118      	cbz	r0, 8015c7e <_putc_r+0x12>
 8015c76:	6983      	ldr	r3, [r0, #24]
 8015c78:	b90b      	cbnz	r3, 8015c7e <_putc_r+0x12>
 8015c7a:	f7ff f891 	bl	8014da0 <__sinit>
 8015c7e:	4b1c      	ldr	r3, [pc, #112]	; (8015cf0 <_putc_r+0x84>)
 8015c80:	429c      	cmp	r4, r3
 8015c82:	d124      	bne.n	8015cce <_putc_r+0x62>
 8015c84:	6874      	ldr	r4, [r6, #4]
 8015c86:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015c88:	07d8      	lsls	r0, r3, #31
 8015c8a:	d405      	bmi.n	8015c98 <_putc_r+0x2c>
 8015c8c:	89a3      	ldrh	r3, [r4, #12]
 8015c8e:	0599      	lsls	r1, r3, #22
 8015c90:	d402      	bmi.n	8015c98 <_putc_r+0x2c>
 8015c92:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015c94:	f7ff f927 	bl	8014ee6 <__retarget_lock_acquire_recursive>
 8015c98:	68a3      	ldr	r3, [r4, #8]
 8015c9a:	3b01      	subs	r3, #1
 8015c9c:	2b00      	cmp	r3, #0
 8015c9e:	60a3      	str	r3, [r4, #8]
 8015ca0:	da05      	bge.n	8015cae <_putc_r+0x42>
 8015ca2:	69a2      	ldr	r2, [r4, #24]
 8015ca4:	4293      	cmp	r3, r2
 8015ca6:	db1c      	blt.n	8015ce2 <_putc_r+0x76>
 8015ca8:	b2eb      	uxtb	r3, r5
 8015caa:	2b0a      	cmp	r3, #10
 8015cac:	d019      	beq.n	8015ce2 <_putc_r+0x76>
 8015cae:	6823      	ldr	r3, [r4, #0]
 8015cb0:	1c5a      	adds	r2, r3, #1
 8015cb2:	6022      	str	r2, [r4, #0]
 8015cb4:	701d      	strb	r5, [r3, #0]
 8015cb6:	b2ed      	uxtb	r5, r5
 8015cb8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015cba:	07da      	lsls	r2, r3, #31
 8015cbc:	d405      	bmi.n	8015cca <_putc_r+0x5e>
 8015cbe:	89a3      	ldrh	r3, [r4, #12]
 8015cc0:	059b      	lsls	r3, r3, #22
 8015cc2:	d402      	bmi.n	8015cca <_putc_r+0x5e>
 8015cc4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015cc6:	f7ff f90f 	bl	8014ee8 <__retarget_lock_release_recursive>
 8015cca:	4628      	mov	r0, r5
 8015ccc:	bd70      	pop	{r4, r5, r6, pc}
 8015cce:	4b09      	ldr	r3, [pc, #36]	; (8015cf4 <_putc_r+0x88>)
 8015cd0:	429c      	cmp	r4, r3
 8015cd2:	d101      	bne.n	8015cd8 <_putc_r+0x6c>
 8015cd4:	68b4      	ldr	r4, [r6, #8]
 8015cd6:	e7d6      	b.n	8015c86 <_putc_r+0x1a>
 8015cd8:	4b07      	ldr	r3, [pc, #28]	; (8015cf8 <_putc_r+0x8c>)
 8015cda:	429c      	cmp	r4, r3
 8015cdc:	bf08      	it	eq
 8015cde:	68f4      	ldreq	r4, [r6, #12]
 8015ce0:	e7d1      	b.n	8015c86 <_putc_r+0x1a>
 8015ce2:	4629      	mov	r1, r5
 8015ce4:	4622      	mov	r2, r4
 8015ce6:	4630      	mov	r0, r6
 8015ce8:	f7fe f806 	bl	8013cf8 <__swbuf_r>
 8015cec:	4605      	mov	r5, r0
 8015cee:	e7e3      	b.n	8015cb8 <_putc_r+0x4c>
 8015cf0:	08018090 	.word	0x08018090
 8015cf4:	080180b0 	.word	0x080180b0
 8015cf8:	08018070 	.word	0x08018070

08015cfc <__sread>:
 8015cfc:	b510      	push	{r4, lr}
 8015cfe:	460c      	mov	r4, r1
 8015d00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015d04:	f000 f920 	bl	8015f48 <_read_r>
 8015d08:	2800      	cmp	r0, #0
 8015d0a:	bfab      	itete	ge
 8015d0c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8015d0e:	89a3      	ldrhlt	r3, [r4, #12]
 8015d10:	181b      	addge	r3, r3, r0
 8015d12:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8015d16:	bfac      	ite	ge
 8015d18:	6563      	strge	r3, [r4, #84]	; 0x54
 8015d1a:	81a3      	strhlt	r3, [r4, #12]
 8015d1c:	bd10      	pop	{r4, pc}

08015d1e <__swrite>:
 8015d1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015d22:	461f      	mov	r7, r3
 8015d24:	898b      	ldrh	r3, [r1, #12]
 8015d26:	05db      	lsls	r3, r3, #23
 8015d28:	4605      	mov	r5, r0
 8015d2a:	460c      	mov	r4, r1
 8015d2c:	4616      	mov	r6, r2
 8015d2e:	d505      	bpl.n	8015d3c <__swrite+0x1e>
 8015d30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015d34:	2302      	movs	r3, #2
 8015d36:	2200      	movs	r2, #0
 8015d38:	f000 f898 	bl	8015e6c <_lseek_r>
 8015d3c:	89a3      	ldrh	r3, [r4, #12]
 8015d3e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015d42:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8015d46:	81a3      	strh	r3, [r4, #12]
 8015d48:	4632      	mov	r2, r6
 8015d4a:	463b      	mov	r3, r7
 8015d4c:	4628      	mov	r0, r5
 8015d4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015d52:	f000 b817 	b.w	8015d84 <_write_r>

08015d56 <__sseek>:
 8015d56:	b510      	push	{r4, lr}
 8015d58:	460c      	mov	r4, r1
 8015d5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015d5e:	f000 f885 	bl	8015e6c <_lseek_r>
 8015d62:	1c43      	adds	r3, r0, #1
 8015d64:	89a3      	ldrh	r3, [r4, #12]
 8015d66:	bf15      	itete	ne
 8015d68:	6560      	strne	r0, [r4, #84]	; 0x54
 8015d6a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8015d6e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8015d72:	81a3      	strheq	r3, [r4, #12]
 8015d74:	bf18      	it	ne
 8015d76:	81a3      	strhne	r3, [r4, #12]
 8015d78:	bd10      	pop	{r4, pc}

08015d7a <__sclose>:
 8015d7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015d7e:	f000 b831 	b.w	8015de4 <_close_r>
	...

08015d84 <_write_r>:
 8015d84:	b538      	push	{r3, r4, r5, lr}
 8015d86:	4d07      	ldr	r5, [pc, #28]	; (8015da4 <_write_r+0x20>)
 8015d88:	4604      	mov	r4, r0
 8015d8a:	4608      	mov	r0, r1
 8015d8c:	4611      	mov	r1, r2
 8015d8e:	2200      	movs	r2, #0
 8015d90:	602a      	str	r2, [r5, #0]
 8015d92:	461a      	mov	r2, r3
 8015d94:	f7f9 fd4a 	bl	800f82c <_write>
 8015d98:	1c43      	adds	r3, r0, #1
 8015d9a:	d102      	bne.n	8015da2 <_write_r+0x1e>
 8015d9c:	682b      	ldr	r3, [r5, #0]
 8015d9e:	b103      	cbz	r3, 8015da2 <_write_r+0x1e>
 8015da0:	6023      	str	r3, [r4, #0]
 8015da2:	bd38      	pop	{r3, r4, r5, pc}
 8015da4:	20001d80 	.word	0x20001d80

08015da8 <__assert_func>:
 8015da8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8015daa:	4614      	mov	r4, r2
 8015dac:	461a      	mov	r2, r3
 8015dae:	4b09      	ldr	r3, [pc, #36]	; (8015dd4 <__assert_func+0x2c>)
 8015db0:	681b      	ldr	r3, [r3, #0]
 8015db2:	4605      	mov	r5, r0
 8015db4:	68d8      	ldr	r0, [r3, #12]
 8015db6:	b14c      	cbz	r4, 8015dcc <__assert_func+0x24>
 8015db8:	4b07      	ldr	r3, [pc, #28]	; (8015dd8 <__assert_func+0x30>)
 8015dba:	9100      	str	r1, [sp, #0]
 8015dbc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8015dc0:	4906      	ldr	r1, [pc, #24]	; (8015ddc <__assert_func+0x34>)
 8015dc2:	462b      	mov	r3, r5
 8015dc4:	f000 f81e 	bl	8015e04 <fiprintf>
 8015dc8:	f000 f8dd 	bl	8015f86 <abort>
 8015dcc:	4b04      	ldr	r3, [pc, #16]	; (8015de0 <__assert_func+0x38>)
 8015dce:	461c      	mov	r4, r3
 8015dd0:	e7f3      	b.n	8015dba <__assert_func+0x12>
 8015dd2:	bf00      	nop
 8015dd4:	2000002c 	.word	0x2000002c
 8015dd8:	0801823d 	.word	0x0801823d
 8015ddc:	0801824a 	.word	0x0801824a
 8015de0:	08018278 	.word	0x08018278

08015de4 <_close_r>:
 8015de4:	b538      	push	{r3, r4, r5, lr}
 8015de6:	4d06      	ldr	r5, [pc, #24]	; (8015e00 <_close_r+0x1c>)
 8015de8:	2300      	movs	r3, #0
 8015dea:	4604      	mov	r4, r0
 8015dec:	4608      	mov	r0, r1
 8015dee:	602b      	str	r3, [r5, #0]
 8015df0:	f7f0 fad9 	bl	80063a6 <_close>
 8015df4:	1c43      	adds	r3, r0, #1
 8015df6:	d102      	bne.n	8015dfe <_close_r+0x1a>
 8015df8:	682b      	ldr	r3, [r5, #0]
 8015dfa:	b103      	cbz	r3, 8015dfe <_close_r+0x1a>
 8015dfc:	6023      	str	r3, [r4, #0]
 8015dfe:	bd38      	pop	{r3, r4, r5, pc}
 8015e00:	20001d80 	.word	0x20001d80

08015e04 <fiprintf>:
 8015e04:	b40e      	push	{r1, r2, r3}
 8015e06:	b503      	push	{r0, r1, lr}
 8015e08:	4601      	mov	r1, r0
 8015e0a:	ab03      	add	r3, sp, #12
 8015e0c:	4805      	ldr	r0, [pc, #20]	; (8015e24 <fiprintf+0x20>)
 8015e0e:	f853 2b04 	ldr.w	r2, [r3], #4
 8015e12:	6800      	ldr	r0, [r0, #0]
 8015e14:	9301      	str	r3, [sp, #4]
 8015e16:	f7ff fdf9 	bl	8015a0c <_vfiprintf_r>
 8015e1a:	b002      	add	sp, #8
 8015e1c:	f85d eb04 	ldr.w	lr, [sp], #4
 8015e20:	b003      	add	sp, #12
 8015e22:	4770      	bx	lr
 8015e24:	2000002c 	.word	0x2000002c

08015e28 <_fstat_r>:
 8015e28:	b538      	push	{r3, r4, r5, lr}
 8015e2a:	4d07      	ldr	r5, [pc, #28]	; (8015e48 <_fstat_r+0x20>)
 8015e2c:	2300      	movs	r3, #0
 8015e2e:	4604      	mov	r4, r0
 8015e30:	4608      	mov	r0, r1
 8015e32:	4611      	mov	r1, r2
 8015e34:	602b      	str	r3, [r5, #0]
 8015e36:	f7f0 fac2 	bl	80063be <_fstat>
 8015e3a:	1c43      	adds	r3, r0, #1
 8015e3c:	d102      	bne.n	8015e44 <_fstat_r+0x1c>
 8015e3e:	682b      	ldr	r3, [r5, #0]
 8015e40:	b103      	cbz	r3, 8015e44 <_fstat_r+0x1c>
 8015e42:	6023      	str	r3, [r4, #0]
 8015e44:	bd38      	pop	{r3, r4, r5, pc}
 8015e46:	bf00      	nop
 8015e48:	20001d80 	.word	0x20001d80

08015e4c <_isatty_r>:
 8015e4c:	b538      	push	{r3, r4, r5, lr}
 8015e4e:	4d06      	ldr	r5, [pc, #24]	; (8015e68 <_isatty_r+0x1c>)
 8015e50:	2300      	movs	r3, #0
 8015e52:	4604      	mov	r4, r0
 8015e54:	4608      	mov	r0, r1
 8015e56:	602b      	str	r3, [r5, #0]
 8015e58:	f7f0 fac1 	bl	80063de <_isatty>
 8015e5c:	1c43      	adds	r3, r0, #1
 8015e5e:	d102      	bne.n	8015e66 <_isatty_r+0x1a>
 8015e60:	682b      	ldr	r3, [r5, #0]
 8015e62:	b103      	cbz	r3, 8015e66 <_isatty_r+0x1a>
 8015e64:	6023      	str	r3, [r4, #0]
 8015e66:	bd38      	pop	{r3, r4, r5, pc}
 8015e68:	20001d80 	.word	0x20001d80

08015e6c <_lseek_r>:
 8015e6c:	b538      	push	{r3, r4, r5, lr}
 8015e6e:	4d07      	ldr	r5, [pc, #28]	; (8015e8c <_lseek_r+0x20>)
 8015e70:	4604      	mov	r4, r0
 8015e72:	4608      	mov	r0, r1
 8015e74:	4611      	mov	r1, r2
 8015e76:	2200      	movs	r2, #0
 8015e78:	602a      	str	r2, [r5, #0]
 8015e7a:	461a      	mov	r2, r3
 8015e7c:	f7f0 faba 	bl	80063f4 <_lseek>
 8015e80:	1c43      	adds	r3, r0, #1
 8015e82:	d102      	bne.n	8015e8a <_lseek_r+0x1e>
 8015e84:	682b      	ldr	r3, [r5, #0]
 8015e86:	b103      	cbz	r3, 8015e8a <_lseek_r+0x1e>
 8015e88:	6023      	str	r3, [r4, #0]
 8015e8a:	bd38      	pop	{r3, r4, r5, pc}
 8015e8c:	20001d80 	.word	0x20001d80

08015e90 <__ascii_mbtowc>:
 8015e90:	b082      	sub	sp, #8
 8015e92:	b901      	cbnz	r1, 8015e96 <__ascii_mbtowc+0x6>
 8015e94:	a901      	add	r1, sp, #4
 8015e96:	b142      	cbz	r2, 8015eaa <__ascii_mbtowc+0x1a>
 8015e98:	b14b      	cbz	r3, 8015eae <__ascii_mbtowc+0x1e>
 8015e9a:	7813      	ldrb	r3, [r2, #0]
 8015e9c:	600b      	str	r3, [r1, #0]
 8015e9e:	7812      	ldrb	r2, [r2, #0]
 8015ea0:	1e10      	subs	r0, r2, #0
 8015ea2:	bf18      	it	ne
 8015ea4:	2001      	movne	r0, #1
 8015ea6:	b002      	add	sp, #8
 8015ea8:	4770      	bx	lr
 8015eaa:	4610      	mov	r0, r2
 8015eac:	e7fb      	b.n	8015ea6 <__ascii_mbtowc+0x16>
 8015eae:	f06f 0001 	mvn.w	r0, #1
 8015eb2:	e7f8      	b.n	8015ea6 <__ascii_mbtowc+0x16>

08015eb4 <memmove>:
 8015eb4:	4288      	cmp	r0, r1
 8015eb6:	b510      	push	{r4, lr}
 8015eb8:	eb01 0402 	add.w	r4, r1, r2
 8015ebc:	d902      	bls.n	8015ec4 <memmove+0x10>
 8015ebe:	4284      	cmp	r4, r0
 8015ec0:	4623      	mov	r3, r4
 8015ec2:	d807      	bhi.n	8015ed4 <memmove+0x20>
 8015ec4:	1e43      	subs	r3, r0, #1
 8015ec6:	42a1      	cmp	r1, r4
 8015ec8:	d008      	beq.n	8015edc <memmove+0x28>
 8015eca:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015ece:	f803 2f01 	strb.w	r2, [r3, #1]!
 8015ed2:	e7f8      	b.n	8015ec6 <memmove+0x12>
 8015ed4:	4402      	add	r2, r0
 8015ed6:	4601      	mov	r1, r0
 8015ed8:	428a      	cmp	r2, r1
 8015eda:	d100      	bne.n	8015ede <memmove+0x2a>
 8015edc:	bd10      	pop	{r4, pc}
 8015ede:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8015ee2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8015ee6:	e7f7      	b.n	8015ed8 <memmove+0x24>

08015ee8 <_realloc_r>:
 8015ee8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015eec:	4680      	mov	r8, r0
 8015eee:	4614      	mov	r4, r2
 8015ef0:	460e      	mov	r6, r1
 8015ef2:	b921      	cbnz	r1, 8015efe <_realloc_r+0x16>
 8015ef4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015ef8:	4611      	mov	r1, r2
 8015efa:	f7fd b94b 	b.w	8013194 <_malloc_r>
 8015efe:	b92a      	cbnz	r2, 8015f0c <_realloc_r+0x24>
 8015f00:	f7fd f8dc 	bl	80130bc <_free_r>
 8015f04:	4625      	mov	r5, r4
 8015f06:	4628      	mov	r0, r5
 8015f08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015f0c:	f000 f842 	bl	8015f94 <_malloc_usable_size_r>
 8015f10:	4284      	cmp	r4, r0
 8015f12:	4607      	mov	r7, r0
 8015f14:	d802      	bhi.n	8015f1c <_realloc_r+0x34>
 8015f16:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8015f1a:	d812      	bhi.n	8015f42 <_realloc_r+0x5a>
 8015f1c:	4621      	mov	r1, r4
 8015f1e:	4640      	mov	r0, r8
 8015f20:	f7fd f938 	bl	8013194 <_malloc_r>
 8015f24:	4605      	mov	r5, r0
 8015f26:	2800      	cmp	r0, #0
 8015f28:	d0ed      	beq.n	8015f06 <_realloc_r+0x1e>
 8015f2a:	42bc      	cmp	r4, r7
 8015f2c:	4622      	mov	r2, r4
 8015f2e:	4631      	mov	r1, r6
 8015f30:	bf28      	it	cs
 8015f32:	463a      	movcs	r2, r7
 8015f34:	f7fd f8ac 	bl	8013090 <memcpy>
 8015f38:	4631      	mov	r1, r6
 8015f3a:	4640      	mov	r0, r8
 8015f3c:	f7fd f8be 	bl	80130bc <_free_r>
 8015f40:	e7e1      	b.n	8015f06 <_realloc_r+0x1e>
 8015f42:	4635      	mov	r5, r6
 8015f44:	e7df      	b.n	8015f06 <_realloc_r+0x1e>
	...

08015f48 <_read_r>:
 8015f48:	b538      	push	{r3, r4, r5, lr}
 8015f4a:	4d07      	ldr	r5, [pc, #28]	; (8015f68 <_read_r+0x20>)
 8015f4c:	4604      	mov	r4, r0
 8015f4e:	4608      	mov	r0, r1
 8015f50:	4611      	mov	r1, r2
 8015f52:	2200      	movs	r2, #0
 8015f54:	602a      	str	r2, [r5, #0]
 8015f56:	461a      	mov	r2, r3
 8015f58:	f7f0 fa08 	bl	800636c <_read>
 8015f5c:	1c43      	adds	r3, r0, #1
 8015f5e:	d102      	bne.n	8015f66 <_read_r+0x1e>
 8015f60:	682b      	ldr	r3, [r5, #0]
 8015f62:	b103      	cbz	r3, 8015f66 <_read_r+0x1e>
 8015f64:	6023      	str	r3, [r4, #0]
 8015f66:	bd38      	pop	{r3, r4, r5, pc}
 8015f68:	20001d80 	.word	0x20001d80

08015f6c <__ascii_wctomb>:
 8015f6c:	b149      	cbz	r1, 8015f82 <__ascii_wctomb+0x16>
 8015f6e:	2aff      	cmp	r2, #255	; 0xff
 8015f70:	bf85      	ittet	hi
 8015f72:	238a      	movhi	r3, #138	; 0x8a
 8015f74:	6003      	strhi	r3, [r0, #0]
 8015f76:	700a      	strbls	r2, [r1, #0]
 8015f78:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8015f7c:	bf98      	it	ls
 8015f7e:	2001      	movls	r0, #1
 8015f80:	4770      	bx	lr
 8015f82:	4608      	mov	r0, r1
 8015f84:	4770      	bx	lr

08015f86 <abort>:
 8015f86:	b508      	push	{r3, lr}
 8015f88:	2006      	movs	r0, #6
 8015f8a:	f000 f833 	bl	8015ff4 <raise>
 8015f8e:	2001      	movs	r0, #1
 8015f90:	f7f0 f9e2 	bl	8006358 <_exit>

08015f94 <_malloc_usable_size_r>:
 8015f94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015f98:	1f18      	subs	r0, r3, #4
 8015f9a:	2b00      	cmp	r3, #0
 8015f9c:	bfbc      	itt	lt
 8015f9e:	580b      	ldrlt	r3, [r1, r0]
 8015fa0:	18c0      	addlt	r0, r0, r3
 8015fa2:	4770      	bx	lr

08015fa4 <_raise_r>:
 8015fa4:	291f      	cmp	r1, #31
 8015fa6:	b538      	push	{r3, r4, r5, lr}
 8015fa8:	4604      	mov	r4, r0
 8015faa:	460d      	mov	r5, r1
 8015fac:	d904      	bls.n	8015fb8 <_raise_r+0x14>
 8015fae:	2316      	movs	r3, #22
 8015fb0:	6003      	str	r3, [r0, #0]
 8015fb2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015fb6:	bd38      	pop	{r3, r4, r5, pc}
 8015fb8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8015fba:	b112      	cbz	r2, 8015fc2 <_raise_r+0x1e>
 8015fbc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8015fc0:	b94b      	cbnz	r3, 8015fd6 <_raise_r+0x32>
 8015fc2:	4620      	mov	r0, r4
 8015fc4:	f000 f830 	bl	8016028 <_getpid_r>
 8015fc8:	462a      	mov	r2, r5
 8015fca:	4601      	mov	r1, r0
 8015fcc:	4620      	mov	r0, r4
 8015fce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015fd2:	f000 b817 	b.w	8016004 <_kill_r>
 8015fd6:	2b01      	cmp	r3, #1
 8015fd8:	d00a      	beq.n	8015ff0 <_raise_r+0x4c>
 8015fda:	1c59      	adds	r1, r3, #1
 8015fdc:	d103      	bne.n	8015fe6 <_raise_r+0x42>
 8015fde:	2316      	movs	r3, #22
 8015fe0:	6003      	str	r3, [r0, #0]
 8015fe2:	2001      	movs	r0, #1
 8015fe4:	e7e7      	b.n	8015fb6 <_raise_r+0x12>
 8015fe6:	2400      	movs	r4, #0
 8015fe8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8015fec:	4628      	mov	r0, r5
 8015fee:	4798      	blx	r3
 8015ff0:	2000      	movs	r0, #0
 8015ff2:	e7e0      	b.n	8015fb6 <_raise_r+0x12>

08015ff4 <raise>:
 8015ff4:	4b02      	ldr	r3, [pc, #8]	; (8016000 <raise+0xc>)
 8015ff6:	4601      	mov	r1, r0
 8015ff8:	6818      	ldr	r0, [r3, #0]
 8015ffa:	f7ff bfd3 	b.w	8015fa4 <_raise_r>
 8015ffe:	bf00      	nop
 8016000:	2000002c 	.word	0x2000002c

08016004 <_kill_r>:
 8016004:	b538      	push	{r3, r4, r5, lr}
 8016006:	4d07      	ldr	r5, [pc, #28]	; (8016024 <_kill_r+0x20>)
 8016008:	2300      	movs	r3, #0
 801600a:	4604      	mov	r4, r0
 801600c:	4608      	mov	r0, r1
 801600e:	4611      	mov	r1, r2
 8016010:	602b      	str	r3, [r5, #0]
 8016012:	f7f0 f991 	bl	8006338 <_kill>
 8016016:	1c43      	adds	r3, r0, #1
 8016018:	d102      	bne.n	8016020 <_kill_r+0x1c>
 801601a:	682b      	ldr	r3, [r5, #0]
 801601c:	b103      	cbz	r3, 8016020 <_kill_r+0x1c>
 801601e:	6023      	str	r3, [r4, #0]
 8016020:	bd38      	pop	{r3, r4, r5, pc}
 8016022:	bf00      	nop
 8016024:	20001d80 	.word	0x20001d80

08016028 <_getpid_r>:
 8016028:	f7f0 b97e 	b.w	8006328 <_getpid>

0801602c <_init>:
 801602c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801602e:	bf00      	nop
 8016030:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016032:	bc08      	pop	{r3}
 8016034:	469e      	mov	lr, r3
 8016036:	4770      	bx	lr

08016038 <_fini>:
 8016038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801603a:	bf00      	nop
 801603c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801603e:	bc08      	pop	{r3}
 8016040:	469e      	mov	lr, r3
 8016042:	4770      	bx	lr
